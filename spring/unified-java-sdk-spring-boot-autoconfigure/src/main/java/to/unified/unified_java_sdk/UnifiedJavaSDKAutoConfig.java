/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import org.springframework.boot.autoconfigure.AutoConfiguration;
import org.springframework.boot.autoconfigure.condition.ConditionalOnClass;
import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;
import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;
import org.springframework.boot.context.properties.EnableConfigurationProperties;
import org.springframework.context.annotation.Bean;
import java.util.concurrent.TimeUnit;

import java.lang.IllegalStateException;
import java.lang.String;
import java.lang.System;
import java.util.Optional;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.function.Consumer;
import to.unified.unified_java_sdk.utils.BackoffStrategy;
import to.unified.unified_java_sdk.utils.HTTPClient;
import to.unified.unified_java_sdk.utils.RetryConfig;
import to.unified.unified_java_sdk.utils.SpeakeasyHTTPClient;


/**
 * Spring Boot Auto Configuration for Unified-java-sdk SDK
 * This configuration class automatically configures the Unified-java-sdk SDK
 * when Spring Boot detects it on the classpath.
 */
@AutoConfiguration
@ConditionalOnClass(UnifiedTo.class)
@EnableConfigurationProperties(UnifiedJavaSDKAutoConfigProperties.class)
public class UnifiedJavaSDKAutoConfig {

    /**
     * Constructor.
     */
    public UnifiedJavaSDKAutoConfig() {
    }

    /**
     * Creates a RetryConfig bean from properties if retry is enabled.
     * 
     * @param properties the configuration properties
     * @return A configured RetryConfig instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnProperty(prefix = "unifiedjavasdk.retry-config", name = "strategy")
    public RetryConfig retryConfig(UnifiedJavaSDKAutoConfigProperties properties) {
        UnifiedJavaSDKAutoConfigProperties.RetryConfig retryProps = properties.getRetryConfig();
        
        if (RetryConfig.Strategy.BACKOFF.equals(retryProps.getStrategy())) {
            UnifiedJavaSDKAutoConfigProperties.RetryConfig.Backoff backoff = retryProps.getBackoff();
            return RetryConfig.builder()
                .backoff(
                    BackoffStrategy.builder()
                        .initialInterval(backoff.getInitialInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxInterval(backoff.getMaxInterval().toMillis(), TimeUnit.MILLISECONDS)
                        .maxElapsedTime(backoff.getMaxElapsedTime().toMillis(), TimeUnit.MILLISECONDS)
                        .baseFactor(backoff.getBaseFactor())
                        .jitterFactor(backoff.getJitterFactor())
                        .retryConnectError(backoff.isRetryConnectError())
                        .retryReadTimeoutError(backoff.isRetryReadTimeoutError())
                        .build()
                )
                .build();
        }
        
        // Default retry config for other strategies
        return RetryConfig.builder().build();
    }

    /**
     * Creates a {@code Consumer<String>} bean for HTTP debug logging if none exists.
     * This logger is used by the SpeakeasyHTTPClient for debug output when debug logging is enabled.
     * By default, it logs to {@code System.out}, but can be customized by providing your own {@code Consumer<String>} bean.
     *
     * @return A {@code Consumer<String>} that logs messages to {@code System.out}
     */
    @Bean
    @ConditionalOnMissingBean
    public Consumer<String> httpLogger() {
        return System.out::println;
    }

    /**
     * Creates an HTTPClient bean if none exists.
     *
     * @param properties the configuration properties
     * @param httpLogger the logger for HTTP debug output
     * @return A configured HTTPClient instance
     */
    @Bean
    @ConditionalOnMissingBean
    public HTTPClient httpClient(UnifiedJavaSDKAutoConfigProperties properties, Consumer<String> httpLogger) {
        UnifiedJavaSDKAutoConfigProperties.HttpClient httpClientProps = properties.getHttpClient();

        // Configure the static logger
        SpeakeasyHTTPClient.setLogger(httpLogger);

        if (httpClientProps != null) {
            // Configure debug logging
            SpeakeasyHTTPClient.setDebugLogging(httpClientProps.isEnableDebugLogging());

            // Configure redacted headers
            if (httpClientProps.getRedactedHeaders() != null && !httpClientProps.getRedactedHeaders().isEmpty()) {
                SpeakeasyHTTPClient.setRedactedHeaders(httpClientProps.getRedactedHeaders());
            }
        }

        return new SpeakeasyHTTPClient();
    }
    /**
     * Creates a SecuritySource bean if none exists and security properties are configured.
     *
     * @param properties the configuration properties
     * @return A configured SecuritySource instance
     */
    @Bean
    @ConditionalOnMissingBean
    @ConditionalOnPropertyPrefix(prefix = "unifiedjavasdk.security")
    public SecuritySource securitySource(UnifiedJavaSDKAutoConfigProperties properties) {UnifiedJavaSDKAutoConfigProperties.Security securityProps = properties.getSecurity();
        to.unified.unified_java_sdk.models.shared.Security.Builder securityBuilder = to.unified.unified_java_sdk.models.shared.Security.builder();
        boolean hasAnySecurityConfiguration = false;
        // Build jwt security from direct properties (primitive value)
        if (securityProps.getJwt() != null) {
            securityBuilder.jwt(securityProps.getJwt());
            hasAnySecurityConfiguration = true;
        }
        
        if (!hasAnySecurityConfiguration) {
            throw new IllegalStateException("Security configuration is present but no security options are configured. " +
                "Please configure at least one security option in your application properties.");
        }
        
        return SecuritySource.of(securityBuilder.build());
    }

    /**
     * Creates the SDKConfiguration bean as the single source of truth for all SDK configuration.
     *
     * @param properties the configuration properties
     * @param httpClient the HTTP client bean
     * @param hooks the hooks bean
     * @param asyncHooks the async hooks bean
     * @param securitySource the security source bean (optional)
     * @param retryConfig the retry config bean (optional)
     * @return A configured SDKConfiguration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public SDKConfiguration sdkConfiguration(
            UnifiedJavaSDKAutoConfigProperties properties,
            HTTPClient httpClient,
            to.unified.unified_java_sdk.utils.Hooks hooks,
            to.unified.unified_java_sdk.utils.AsyncHooks asyncHooks,
            SecuritySource securitySource,
            Optional<RetryConfig> retryConfig) {
        
        SDKConfiguration sdkConfiguration = new SDKConfiguration();
        
        sdkConfiguration.setClient(httpClient);
        
        sdkConfiguration.setHooks(hooks);
        sdkConfiguration.setAsyncHooks(asyncHooks);
        sdkConfiguration.setSecuritySource(securitySource);
        
        if (properties.getServerUrl() != null) {
            sdkConfiguration.setServerUrl(properties.getServerUrl());
        }
        sdkConfiguration.setServerIdx(properties.getServerIdx());
        
        sdkConfiguration.setRetryConfig(retryConfig);
        
        return sdkConfiguration;
    }

    /**
     * Creates the main SDK bean using the configured SDKConfiguration.
     *
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured UnifiedTo instance
     */
    @Bean
    @ConditionalOnMissingBean
    public UnifiedTo unifiedTo(SDKConfiguration sdkConfiguration) {
        return new UnifiedTo(sdkConfiguration);
    }

    /**
     * Creates an AsyncHooks bean if none exists.
     * 
     * @return A configured AsyncHooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public to.unified.unified_java_sdk.utils.AsyncHooks asyncHooks() {
        return new to.unified.unified_java_sdk.utils.AsyncHooks();
    }

    /**
     * Creates a ScheduledExecutorService for async retry operations if none exists.
     * 
     * @return A configured ScheduledExecutorService instance
     */
    @Bean
    @ConditionalOnMissingBean
    public ScheduledExecutorService retryScheduler() {
        return Executors.newSingleThreadScheduledExecutor();
    }

    /**
     * Creates a Hooks configuration bean if none exists.
     *
     * @return A configured Hooks instance
     */
    @Bean
    @ConditionalOnMissingBean
    public to.unified.unified_java_sdk.utils.Hooks hooks() {
        return new to.unified.unified_java_sdk.utils.Hooks();
    }
    /**
     * Creates a Accounting sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Accounting instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Accounting accounting(UnifiedTo unifiedTo) {
        return unifiedTo.accounting();
    }
    /**
     * Creates a Account sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Account instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Account account(UnifiedTo unifiedTo) {
        return unifiedTo.account();
    }
    /**
     * Creates a Balancesheet sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Balancesheet instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Balancesheet balancesheet(UnifiedTo unifiedTo) {
        return unifiedTo.balancesheet();
    }
    /**
     * Creates a Bill sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Bill instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Bill bill(UnifiedTo unifiedTo) {
        return unifiedTo.bill();
    }
    /**
     * Creates a Category sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Category instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Category category(UnifiedTo unifiedTo) {
        return unifiedTo.category();
    }
    /**
     * Creates a Contact sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Contact instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Contact contact(UnifiedTo unifiedTo) {
        return unifiedTo.contact();
    }
    /**
     * Creates a Creditmemo sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Creditmemo instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Creditmemo creditmemo(UnifiedTo unifiedTo) {
        return unifiedTo.creditmemo();
    }
    /**
     * Creates a Expense sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Expense instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Expense expense(UnifiedTo unifiedTo) {
        return unifiedTo.expense();
    }
    /**
     * Creates a Invoice sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Invoice instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Invoice invoice(UnifiedTo unifiedTo) {
        return unifiedTo.invoice();
    }
    /**
     * Creates a Journal sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Journal instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Journal journal(UnifiedTo unifiedTo) {
        return unifiedTo.journal();
    }
    /**
     * Creates a Order sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Order instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Order order(UnifiedTo unifiedTo) {
        return unifiedTo.order();
    }
    /**
     * Creates a Organization sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Organization instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Organization organization(UnifiedTo unifiedTo) {
        return unifiedTo.organization();
    }
    /**
     * Creates a Profitloss sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Profitloss instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Profitloss profitloss(UnifiedTo unifiedTo) {
        return unifiedTo.profitloss();
    }
    /**
     * Creates a Purchaseorder sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Purchaseorder instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Purchaseorder purchaseorder(UnifiedTo unifiedTo) {
        return unifiedTo.purchaseorder();
    }
    /**
     * Creates a Report sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Report instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Report report(UnifiedTo unifiedTo) {
        return unifiedTo.report();
    }
    /**
     * Creates a Salesorder sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Salesorder instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Salesorder salesorder(UnifiedTo unifiedTo) {
        return unifiedTo.salesorder();
    }
    /**
     * Creates a Taxrate sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Taxrate instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Taxrate taxrate(UnifiedTo unifiedTo) {
        return unifiedTo.taxrate();
    }
    /**
     * Creates a Transaction sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Transaction instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Transaction transaction(UnifiedTo unifiedTo) {
        return unifiedTo.transaction();
    }
    /**
     * Creates a Trialbalance sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Trialbalance instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Trialbalance trialbalance(UnifiedTo unifiedTo) {
        return unifiedTo.trialbalance();
    }
    /**
     * Creates a Ats sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Ats instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Ats ats(UnifiedTo unifiedTo) {
        return unifiedTo.ats();
    }
    /**
     * Creates a Activity sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Activity instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Activity activity(UnifiedTo unifiedTo) {
        return unifiedTo.activity();
    }
    /**
     * Creates a Application sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Application instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Application application(UnifiedTo unifiedTo) {
        return unifiedTo.application();
    }
    /**
     * Creates a Applicationstatus sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Applicationstatus instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Applicationstatus applicationstatus(UnifiedTo unifiedTo) {
        return unifiedTo.applicationstatus();
    }
    /**
     * Creates a Candidate sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Candidate instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Candidate candidate(UnifiedTo unifiedTo) {
        return unifiedTo.candidate();
    }
    /**
     * Creates a Company sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Company instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Company company(UnifiedTo unifiedTo) {
        return unifiedTo.company();
    }
    /**
     * Creates a Document sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Document instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Document document(UnifiedTo unifiedTo) {
        return unifiedTo.document();
    }
    /**
     * Creates a Interview sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Interview instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Interview interview(UnifiedTo unifiedTo) {
        return unifiedTo.interview();
    }
    /**
     * Creates a Job sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Job instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Job job(UnifiedTo unifiedTo) {
        return unifiedTo.job();
    }
    /**
     * Creates a Scorecard sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Scorecard instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Scorecard scorecard(UnifiedTo unifiedTo) {
        return unifiedTo.scorecard();
    }
    /**
     * Creates a Calendar sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Calendar instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Calendar calendar(UnifiedTo unifiedTo) {
        return unifiedTo.calendar();
    }
    /**
     * Creates a Busy sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Busy instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Busy busy(UnifiedTo unifiedTo) {
        return unifiedTo.busy();
    }
    /**
     * Creates a Event sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Event instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Event event(UnifiedTo unifiedTo) {
        return unifiedTo.event();
    }
    /**
     * Creates a Link sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Link instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Link link(UnifiedTo unifiedTo) {
        return unifiedTo.link();
    }
    /**
     * Creates a Recording sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Recording instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Recording recording(UnifiedTo unifiedTo) {
        return unifiedTo.recording();
    }
    /**
     * Creates a Commerce sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Commerce instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Commerce commerce(UnifiedTo unifiedTo) {
        return unifiedTo.commerce();
    }
    /**
     * Creates a Collection sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Collection instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Collection collection(UnifiedTo unifiedTo) {
        return unifiedTo.collection();
    }
    /**
     * Creates a Inventory sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Inventory instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Inventory inventory(UnifiedTo unifiedTo) {
        return unifiedTo.inventory();
    }
    /**
     * Creates a Item sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Item instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Item item(UnifiedTo unifiedTo) {
        return unifiedTo.item();
    }
    /**
     * Creates a Location sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Location instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Location location(UnifiedTo unifiedTo) {
        return unifiedTo.location();
    }
    /**
     * Creates a Review sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Review instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Review review(UnifiedTo unifiedTo) {
        return unifiedTo.review();
    }
    /**
     * Creates a Crm sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Crm instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Crm crm(UnifiedTo unifiedTo) {
        return unifiedTo.crm();
    }
    /**
     * Creates a Deal sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Deal instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Deal deal(UnifiedTo unifiedTo) {
        return unifiedTo.deal();
    }
    /**
     * Creates a Lead sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Lead instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Lead lead(UnifiedTo unifiedTo) {
        return unifiedTo.lead();
    }
    /**
     * Creates a Pipeline sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Pipeline instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Pipeline pipeline(UnifiedTo unifiedTo) {
        return unifiedTo.pipeline();
    }
    /**
     * Creates a Enrich sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Enrich instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Enrich enrich(UnifiedTo unifiedTo) {
        return unifiedTo.enrich();
    }
    /**
     * Creates a Person sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Person instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Person person(UnifiedTo unifiedTo) {
        return unifiedTo.person();
    }
    /**
     * Creates a Genai sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Genai instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Genai genai(UnifiedTo unifiedTo) {
        return unifiedTo.genai();
    }
    /**
     * Creates a Embedding sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Embedding instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Embedding embedding(UnifiedTo unifiedTo) {
        return unifiedTo.embedding();
    }
    /**
     * Creates a Model sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Model instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Model model(UnifiedTo unifiedTo) {
        return unifiedTo.model();
    }
    /**
     * Creates a Prompt sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Prompt instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Prompt prompt(UnifiedTo unifiedTo) {
        return unifiedTo.prompt();
    }
    /**
     * Creates a Hris sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Hris instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Hris hris(UnifiedTo unifiedTo) {
        return unifiedTo.hris();
    }
    /**
     * Creates a Device sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Device instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Device device(UnifiedTo unifiedTo) {
        return unifiedTo.device();
    }
    /**
     * Creates a Employee sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Employee instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Employee employee(UnifiedTo unifiedTo) {
        return unifiedTo.employee();
    }
    /**
     * Creates a Group sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Group instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Group group(UnifiedTo unifiedTo) {
        return unifiedTo.group();
    }
    /**
     * Creates a Payslip sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Payslip instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Payslip payslip(UnifiedTo unifiedTo) {
        return unifiedTo.payslip();
    }
    /**
     * Creates a Timeoff sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Timeoff instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Timeoff timeoff(UnifiedTo unifiedTo) {
        return unifiedTo.timeoff();
    }
    /**
     * Creates a Timeshift sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Timeshift instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Timeshift timeshift(UnifiedTo unifiedTo) {
        return unifiedTo.timeshift();
    }
    /**
     * Creates a Kms sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Kms instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Kms kms(UnifiedTo unifiedTo) {
        return unifiedTo.kms();
    }
    /**
     * Creates a Comment sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Comment instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Comment comment(UnifiedTo unifiedTo) {
        return unifiedTo.comment();
    }
    /**
     * Creates a Page sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Page instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Page page(UnifiedTo unifiedTo) {
        return unifiedTo.page();
    }
    /**
     * Creates a Space sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Space instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Space space(UnifiedTo unifiedTo) {
        return unifiedTo.space();
    }
    /**
     * Creates a Lms sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Lms instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Lms lms(UnifiedTo unifiedTo) {
        return unifiedTo.lms();
    }
    /**
     * Creates a Class sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Class instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Class class_(UnifiedTo unifiedTo) {
        return unifiedTo.class_();
    }
    /**
     * Creates a Course sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Course instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Course course(UnifiedTo unifiedTo) {
        return unifiedTo.course();
    }
    /**
     * Creates a Instructor sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Instructor instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Instructor instructor(UnifiedTo unifiedTo) {
        return unifiedTo.instructor();
    }
    /**
     * Creates a Student sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Student instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Student student(UnifiedTo unifiedTo) {
        return unifiedTo.student();
    }
    /**
     * Creates a Martech sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Martech instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Martech martech(UnifiedTo unifiedTo) {
        return unifiedTo.martech();
    }
    /**
     * Creates a List sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured List instance
     */
    @Bean
    @ConditionalOnMissingBean
    public List list(UnifiedTo unifiedTo) {
        return unifiedTo.list();
    }
    /**
     * Creates a Member sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Member instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Member member(UnifiedTo unifiedTo) {
        return unifiedTo.member();
    }
    /**
     * Creates a Messaging sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Messaging instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Messaging messaging(UnifiedTo unifiedTo) {
        return unifiedTo.messaging();
    }
    /**
     * Creates a Channel sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Channel instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Channel channel(UnifiedTo unifiedTo) {
        return unifiedTo.channel();
    }
    /**
     * Creates a Message sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Message instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Message message(UnifiedTo unifiedTo) {
        return unifiedTo.message();
    }
    /**
     * Creates a Metadata sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Metadata instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Metadata metadata(UnifiedTo unifiedTo) {
        return unifiedTo.metadata();
    }
    /**
     * Creates a Passthrough sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Passthrough instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Passthrough passthrough(UnifiedTo unifiedTo) {
        return unifiedTo.passthrough();
    }
    /**
     * Creates a Payment sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Payment instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Payment payment(UnifiedTo unifiedTo) {
        return unifiedTo.payment();
    }
    /**
     * Creates a Payout sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Payout instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Payout payout(UnifiedTo unifiedTo) {
        return unifiedTo.payout();
    }
    /**
     * Creates a Refund sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Refund instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Refund refund(UnifiedTo unifiedTo) {
        return unifiedTo.refund();
    }
    /**
     * Creates a Subscription sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Subscription instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Subscription subscription(UnifiedTo unifiedTo) {
        return unifiedTo.subscription();
    }
    /**
     * Creates a Repo sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Repo instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Repo repo(UnifiedTo unifiedTo) {
        return unifiedTo.repo();
    }
    /**
     * Creates a Branch sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Branch instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Branch branch(UnifiedTo unifiedTo) {
        return unifiedTo.branch();
    }
    /**
     * Creates a Commit sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Commit instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Commit commit(UnifiedTo unifiedTo) {
        return unifiedTo.commit();
    }
    /**
     * Creates a Pullrequest sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Pullrequest instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Pullrequest pullrequest(UnifiedTo unifiedTo) {
        return unifiedTo.pullrequest();
    }
    /**
     * Creates a Repository sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Repository instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Repository repository(UnifiedTo unifiedTo) {
        return unifiedTo.repository();
    }
    /**
     * Creates a Scim sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Scim instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Scim scim(UnifiedTo unifiedTo) {
        return unifiedTo.scim();
    }
    /**
     * Creates a User sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured User instance
     */
    @Bean
    @ConditionalOnMissingBean
    public User user(UnifiedTo unifiedTo) {
        return unifiedTo.user();
    }
    /**
     * Creates a Storage sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Storage instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Storage storage(UnifiedTo unifiedTo) {
        return unifiedTo.storage();
    }
    /**
     * Creates a File sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured File instance
     */
    @Bean
    @ConditionalOnMissingBean
    public File file(UnifiedTo unifiedTo) {
        return unifiedTo.file();
    }
    /**
     * Creates a Task sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Task instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Task task(UnifiedTo unifiedTo) {
        return unifiedTo.task();
    }
    /**
     * Creates a Change sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Change instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Change change(UnifiedTo unifiedTo) {
        return unifiedTo.change();
    }
    /**
     * Creates a Project sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Project instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Project project(UnifiedTo unifiedTo) {
        return unifiedTo.project();
    }
    /**
     * Creates a Ticketing sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Ticketing instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Ticketing ticketing(UnifiedTo unifiedTo) {
        return unifiedTo.ticketing();
    }
    /**
     * Creates a Customer sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Customer instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Customer customer(UnifiedTo unifiedTo) {
        return unifiedTo.customer();
    }
    /**
     * Creates a Note sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Note instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Note note(UnifiedTo unifiedTo) {
        return unifiedTo.note();
    }
    /**
     * Creates a Ticket sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Ticket instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Ticket ticket(UnifiedTo unifiedTo) {
        return unifiedTo.ticket();
    }
    /**
     * Creates a Uc sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Uc instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Uc uc(UnifiedTo unifiedTo) {
        return unifiedTo.uc();
    }
    /**
     * Creates a Call sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Call instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Call call(UnifiedTo unifiedTo) {
        return unifiedTo.call();
    }
    /**
     * Creates a Unified sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Unified instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Unified unified(UnifiedTo unifiedTo) {
        return unifiedTo.unified();
    }
    /**
     * Creates a Apicall sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Apicall instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Apicall apicall(UnifiedTo unifiedTo) {
        return unifiedTo.apicall();
    }
    /**
     * Creates a Connection sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Connection instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Connection connection(UnifiedTo unifiedTo) {
        return unifiedTo.connection();
    }
    /**
     * Creates a Integration sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Integration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Integration integration(UnifiedTo unifiedTo) {
        return unifiedTo.integration();
    }
    /**
     * Creates a Auth sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Auth instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Auth auth(UnifiedTo unifiedTo) {
        return unifiedTo.auth();
    }
    /**
     * Creates a Login sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Login instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Login login(UnifiedTo unifiedTo) {
        return unifiedTo.login();
    }
    /**
     * Creates a Issue sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Issue instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Issue issue(UnifiedTo unifiedTo) {
        return unifiedTo.issue();
    }
    /**
     * Creates a Webhook sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Webhook instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Webhook webhook(UnifiedTo unifiedTo) {
        return unifiedTo.webhook();
    }
    /**
     * Creates a Verification sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Verification instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Verification verification(UnifiedTo unifiedTo) {
        return unifiedTo.verification();
    }
    /**
     * Creates a Package sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Package instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Package package_(UnifiedTo unifiedTo) {
        return unifiedTo.package_();
    }
    /**
     * Creates a Request sub-SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @return A configured Request instance
     */
    @Bean
    @ConditionalOnMissingBean
    public Request request(UnifiedTo unifiedTo) {
        return unifiedTo.request();
    }

    /**
     * Creates the async SDK bean if none exists.
     *
     * @param unifiedTo the main SDK instance
     * @param sdkConfiguration the configured SDKConfiguration bean
     * @return A configured AsyncUnifiedTo instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncUnifiedTo asyncUnifiedTo(UnifiedTo unifiedTo, SDKConfiguration sdkConfiguration) {
        return new AsyncUnifiedTo(unifiedTo, sdkConfiguration);
    }
    /**
     * Creates an AsyncAccounting sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncAccounting instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAccounting asyncAccounting(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.accounting();
    }
    /**
     * Creates an AsyncAccount sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncAccount instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAccount asyncAccount(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.account();
    }
    /**
     * Creates an AsyncBalancesheet sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncBalancesheet instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBalancesheet asyncBalancesheet(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.balancesheet();
    }
    /**
     * Creates an AsyncBill sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncBill instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBill asyncBill(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.bill();
    }
    /**
     * Creates an AsyncCategory sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCategory instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCategory asyncCategory(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.category();
    }
    /**
     * Creates an AsyncContact sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncContact instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncContact asyncContact(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.contact();
    }
    /**
     * Creates an AsyncCreditmemo sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCreditmemo instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCreditmemo asyncCreditmemo(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.creditmemo();
    }
    /**
     * Creates an AsyncExpense sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncExpense instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncExpense asyncExpense(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.expense();
    }
    /**
     * Creates an AsyncInvoice sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncInvoice instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncInvoice asyncInvoice(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.invoice();
    }
    /**
     * Creates an AsyncJournal sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncJournal instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncJournal asyncJournal(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.journal();
    }
    /**
     * Creates an AsyncOrder sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncOrder instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncOrder asyncOrder(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.order();
    }
    /**
     * Creates an AsyncOrganization sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncOrganization instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncOrganization asyncOrganization(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.organization();
    }
    /**
     * Creates an AsyncProfitloss sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncProfitloss instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncProfitloss asyncProfitloss(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.profitloss();
    }
    /**
     * Creates an AsyncPurchaseorder sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPurchaseorder instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPurchaseorder asyncPurchaseorder(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.purchaseorder();
    }
    /**
     * Creates an AsyncReport sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncReport instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncReport asyncReport(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.report();
    }
    /**
     * Creates an AsyncSalesorder sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncSalesorder instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncSalesorder asyncSalesorder(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.salesorder();
    }
    /**
     * Creates an AsyncTaxrate sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncTaxrate instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTaxrate asyncTaxrate(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.taxrate();
    }
    /**
     * Creates an AsyncTransaction sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncTransaction instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTransaction asyncTransaction(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.transaction();
    }
    /**
     * Creates an AsyncTrialbalance sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncTrialbalance instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTrialbalance asyncTrialbalance(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.trialbalance();
    }
    /**
     * Creates an AsyncAts sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncAts instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAts asyncAts(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.ats();
    }
    /**
     * Creates an AsyncActivity sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncActivity instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncActivity asyncActivity(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.activity();
    }
    /**
     * Creates an AsyncApplication sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncApplication instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncApplication asyncApplication(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.application();
    }
    /**
     * Creates an AsyncApplicationstatus sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncApplicationstatus instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncApplicationstatus asyncApplicationstatus(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.applicationstatus();
    }
    /**
     * Creates an AsyncCandidate sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCandidate instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCandidate asyncCandidate(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.candidate();
    }
    /**
     * Creates an AsyncCompany sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCompany instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCompany asyncCompany(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.company();
    }
    /**
     * Creates an AsyncDocument sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncDocument instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDocument asyncDocument(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.document();
    }
    /**
     * Creates an AsyncInterview sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncInterview instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncInterview asyncInterview(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.interview();
    }
    /**
     * Creates an AsyncJob sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncJob instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncJob asyncJob(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.job();
    }
    /**
     * Creates an AsyncScorecard sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncScorecard instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncScorecard asyncScorecard(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.scorecard();
    }
    /**
     * Creates an AsyncCalendar sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCalendar instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCalendar asyncCalendar(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.calendar();
    }
    /**
     * Creates an AsyncBusy sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncBusy instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBusy asyncBusy(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.busy();
    }
    /**
     * Creates an AsyncEvent sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncEvent instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncEvent asyncEvent(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.event();
    }
    /**
     * Creates an AsyncLink sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncLink instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLink asyncLink(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.link();
    }
    /**
     * Creates an AsyncRecording sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncRecording instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRecording asyncRecording(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.recording();
    }
    /**
     * Creates an AsyncCommerce sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCommerce instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCommerce asyncCommerce(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.commerce();
    }
    /**
     * Creates an AsyncCollection sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCollection instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCollection asyncCollection(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.collection();
    }
    /**
     * Creates an AsyncInventory sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncInventory instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncInventory asyncInventory(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.inventory();
    }
    /**
     * Creates an AsyncItem sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncItem instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncItem asyncItem(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.item();
    }
    /**
     * Creates an AsyncLocation sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncLocation instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLocation asyncLocation(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.location();
    }
    /**
     * Creates an AsyncReview sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncReview instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncReview asyncReview(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.review();
    }
    /**
     * Creates an AsyncCrm sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCrm instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCrm asyncCrm(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.crm();
    }
    /**
     * Creates an AsyncDeal sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncDeal instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDeal asyncDeal(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.deal();
    }
    /**
     * Creates an AsyncLead sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncLead instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLead asyncLead(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.lead();
    }
    /**
     * Creates an AsyncPipeline sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPipeline instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPipeline asyncPipeline(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.pipeline();
    }
    /**
     * Creates an AsyncEnrich sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncEnrich instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncEnrich asyncEnrich(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.enrich();
    }
    /**
     * Creates an AsyncPerson sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPerson instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPerson asyncPerson(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.person();
    }
    /**
     * Creates an AsyncGenai sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncGenai instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncGenai asyncGenai(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.genai();
    }
    /**
     * Creates an AsyncEmbedding sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncEmbedding instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncEmbedding asyncEmbedding(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.embedding();
    }
    /**
     * Creates an AsyncModel sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncModel instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncModel asyncModel(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.model();
    }
    /**
     * Creates an AsyncPrompt sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPrompt instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPrompt asyncPrompt(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.prompt();
    }
    /**
     * Creates an AsyncHris sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncHris instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncHris asyncHris(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.hris();
    }
    /**
     * Creates an AsyncDevice sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncDevice instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncDevice asyncDevice(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.device();
    }
    /**
     * Creates an AsyncEmployee sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncEmployee instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncEmployee asyncEmployee(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.employee();
    }
    /**
     * Creates an AsyncGroup sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncGroup instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncGroup asyncGroup(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.group();
    }
    /**
     * Creates an AsyncPayslip sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPayslip instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPayslip asyncPayslip(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.payslip();
    }
    /**
     * Creates an AsyncTimeoff sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncTimeoff instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTimeoff asyncTimeoff(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.timeoff();
    }
    /**
     * Creates an AsyncTimeshift sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncTimeshift instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTimeshift asyncTimeshift(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.timeshift();
    }
    /**
     * Creates an AsyncKms sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncKms instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncKms asyncKms(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.kms();
    }
    /**
     * Creates an AsyncComment sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncComment instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncComment asyncComment(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.comment();
    }
    /**
     * Creates an AsyncPage sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPage instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPage asyncPage(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.page();
    }
    /**
     * Creates an AsyncSpace sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncSpace instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncSpace asyncSpace(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.space();
    }
    /**
     * Creates an AsyncLms sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncLms instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLms asyncLms(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.lms();
    }
    /**
     * Creates an AsyncClass sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncClass instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncClass asyncClass(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.class_();
    }
    /**
     * Creates an AsyncCourse sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCourse instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCourse asyncCourse(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.course();
    }
    /**
     * Creates an AsyncInstructor sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncInstructor instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncInstructor asyncInstructor(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.instructor();
    }
    /**
     * Creates an AsyncStudent sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncStudent instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncStudent asyncStudent(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.student();
    }
    /**
     * Creates an AsyncMartech sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncMartech instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMartech asyncMartech(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.martech();
    }
    /**
     * Creates an AsyncList sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncList instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncList asyncList(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.list();
    }
    /**
     * Creates an AsyncMember sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncMember instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMember asyncMember(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.member();
    }
    /**
     * Creates an AsyncMessaging sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncMessaging instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMessaging asyncMessaging(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.messaging();
    }
    /**
     * Creates an AsyncChannel sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncChannel instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncChannel asyncChannel(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.channel();
    }
    /**
     * Creates an AsyncMessage sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncMessage instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMessage asyncMessage(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.message();
    }
    /**
     * Creates an AsyncMetadata sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncMetadata instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncMetadata asyncMetadata(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.metadata();
    }
    /**
     * Creates an AsyncPassthrough sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPassthrough instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPassthrough asyncPassthrough(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.passthrough();
    }
    /**
     * Creates an AsyncPayment sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPayment instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPayment asyncPayment(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.payment();
    }
    /**
     * Creates an AsyncPayout sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPayout instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPayout asyncPayout(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.payout();
    }
    /**
     * Creates an AsyncRefund sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncRefund instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRefund asyncRefund(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.refund();
    }
    /**
     * Creates an AsyncSubscription sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncSubscription instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncSubscription asyncSubscription(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.subscription();
    }
    /**
     * Creates an AsyncRepo sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncRepo instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRepo asyncRepo(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.repo();
    }
    /**
     * Creates an AsyncBranch sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncBranch instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncBranch asyncBranch(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.branch();
    }
    /**
     * Creates an AsyncCommit sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCommit instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCommit asyncCommit(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.commit();
    }
    /**
     * Creates an AsyncPullrequest sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPullrequest instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPullrequest asyncPullrequest(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.pullrequest();
    }
    /**
     * Creates an AsyncRepository sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncRepository instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRepository asyncRepository(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.repository();
    }
    /**
     * Creates an AsyncScim sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncScim instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncScim asyncScim(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.scim();
    }
    /**
     * Creates an AsyncUser sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncUser instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncUser asyncUser(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.user();
    }
    /**
     * Creates an AsyncStorage sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncStorage instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncStorage asyncStorage(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.storage();
    }
    /**
     * Creates an AsyncFile sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncFile instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncFile asyncFile(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.file();
    }
    /**
     * Creates an AsyncTask sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncTask instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTask asyncTask(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.task();
    }
    /**
     * Creates an AsyncChange sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncChange instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncChange asyncChange(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.change();
    }
    /**
     * Creates an AsyncProject sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncProject instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncProject asyncProject(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.project();
    }
    /**
     * Creates an AsyncTicketing sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncTicketing instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTicketing asyncTicketing(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.ticketing();
    }
    /**
     * Creates an AsyncCustomer sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCustomer instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCustomer asyncCustomer(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.customer();
    }
    /**
     * Creates an AsyncNote sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncNote instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncNote asyncNote(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.note();
    }
    /**
     * Creates an AsyncTicket sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncTicket instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncTicket asyncTicket(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.ticket();
    }
    /**
     * Creates an AsyncUc sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncUc instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncUc asyncUc(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.uc();
    }
    /**
     * Creates an AsyncCall sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncCall instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncCall asyncCall(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.call();
    }
    /**
     * Creates an AsyncUnified sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncUnified instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncUnified asyncUnified(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.unified();
    }
    /**
     * Creates an AsyncApicall sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncApicall instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncApicall asyncApicall(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.apicall();
    }
    /**
     * Creates an AsyncConnection sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncConnection instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncConnection asyncConnection(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.connection();
    }
    /**
     * Creates an AsyncIntegration sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncIntegration instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncIntegration asyncIntegration(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.integration();
    }
    /**
     * Creates an AsyncAuth sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncAuth instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncAuth asyncAuth(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.auth();
    }
    /**
     * Creates an AsyncLogin sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncLogin instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncLogin asyncLogin(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.login();
    }
    /**
     * Creates an AsyncIssue sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncIssue instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncIssue asyncIssue(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.issue();
    }
    /**
     * Creates an AsyncWebhook sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncWebhook instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncWebhook asyncWebhook(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.webhook();
    }
    /**
     * Creates an AsyncVerification sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncVerification instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncVerification asyncVerification(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.verification();
    }
    /**
     * Creates an AsyncPackage sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncPackage instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncPackage asyncPackage(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.package_();
    }
    /**
     * Creates an AsyncRequest sub-SDK bean if none exists.
     *
     * @param asyncUnifiedTo the async SDK instance
     * @return A configured AsyncRequest instance
     */
    @Bean
    @ConditionalOnMissingBean
    public AsyncRequest asyncRequest(AsyncUnifiedTo asyncUnifiedTo) {
        return asyncUnifiedTo.request();
    }
}
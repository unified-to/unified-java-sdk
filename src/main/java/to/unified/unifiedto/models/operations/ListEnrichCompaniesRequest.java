/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package to.unified.unifiedto.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import to.unified.unifiedto.utils.SpeakeasyMetadata;
import to.unified.unifiedto.utils.Utils;

public class ListEnrichCompaniesRequest {

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    /**
     * The domain of the company to search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=domain")
    private Optional<String> domain;

    /**
     * The name of the company to search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    private Optional<String> name;

    @JsonCreator
    public ListEnrichCompaniesRequest(
            String connectionId,
            Optional<String> domain,
            Optional<String> name) {
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(name, "name");
        this.connectionId = connectionId;
        this.domain = domain;
        this.name = name;
    }
    
    public ListEnrichCompaniesRequest(
            String connectionId) {
        this(connectionId, Optional.empty(), Optional.empty());
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * The domain of the company to search
     */
    @JsonIgnore
    public Optional<String> domain() {
        return domain;
    }

    /**
     * The name of the company to search
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * ID of the connection
     */
    public ListEnrichCompaniesRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * The domain of the company to search
     */
    public ListEnrichCompaniesRequest withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = Optional.ofNullable(domain);
        return this;
    }

    /**
     * The domain of the company to search
     */
    public ListEnrichCompaniesRequest withDomain(Optional<String> domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    /**
     * The name of the company to search
     */
    public ListEnrichCompaniesRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the company to search
     */
    public ListEnrichCompaniesRequest withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListEnrichCompaniesRequest other = (ListEnrichCompaniesRequest) o;
        return 
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.domain, other.domain) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connectionId,
            domain,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListEnrichCompaniesRequest.class,
                "connectionId", connectionId,
                "domain", domain,
                "name", name);
    }
    
    public final static class Builder {
 
        private String connectionId;
 
        private Optional<String> domain = Optional.empty();
 
        private Optional<String> name = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * The domain of the company to search
         */
        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = Optional.ofNullable(domain);
            return this;
        }

        /**
         * The domain of the company to search
         */
        public Builder domain(Optional<String> domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }

        /**
         * The name of the company to search
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the company to search
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public ListEnrichCompaniesRequest build() {
            return new ListEnrichCompaniesRequest(
                connectionId,
                domain,
                name);
        }
    }
}


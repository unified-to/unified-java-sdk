/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package to.unified.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import to.unified.unifiedto.utils.Utils;

public class AtsApplication {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answers")
    private Optional<? extends List<AtsApplicationAnswer>> answers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applied_at")
    private Optional<OffsetDateTime> appliedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_id")
    private Optional<String> candidateId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hired_at")
    private Optional<OffsetDateTime> hiredAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_id")
    private Optional<String> jobId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("offers")
    private Optional<? extends List<AtsOffer>> offers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_status")
    private Optional<String> originalStatus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends AtsApplicationRaw> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejected_at")
    private Optional<OffsetDateTime> rejectedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rejected_reason")
    private Optional<String> rejectedReason;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("source")
    private Optional<String> source;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends AtsApplicationStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public AtsApplication(
            @JsonProperty("answers") Optional<? extends List<AtsApplicationAnswer>> answers,
            @JsonProperty("applied_at") Optional<OffsetDateTime> appliedAt,
            @JsonProperty("candidate_id") Optional<String> candidateId,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("hired_at") Optional<OffsetDateTime> hiredAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("job_id") Optional<String> jobId,
            @JsonProperty("offers") Optional<? extends List<AtsOffer>> offers,
            @JsonProperty("original_status") Optional<String> originalStatus,
            @JsonProperty("raw") Optional<? extends AtsApplicationRaw> raw,
            @JsonProperty("rejected_at") Optional<OffsetDateTime> rejectedAt,
            @JsonProperty("rejected_reason") Optional<String> rejectedReason,
            @JsonProperty("source") Optional<String> source,
            @JsonProperty("status") Optional<? extends AtsApplicationStatus> status,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(answers, "answers");
        Utils.checkNotNull(appliedAt, "appliedAt");
        Utils.checkNotNull(candidateId, "candidateId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(hiredAt, "hiredAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(offers, "offers");
        Utils.checkNotNull(originalStatus, "originalStatus");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        Utils.checkNotNull(rejectedReason, "rejectedReason");
        Utils.checkNotNull(source, "source");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.answers = answers;
        this.appliedAt = appliedAt;
        this.candidateId = candidateId;
        this.createdAt = createdAt;
        this.hiredAt = hiredAt;
        this.id = id;
        this.jobId = jobId;
        this.offers = offers;
        this.originalStatus = originalStatus;
        this.raw = raw;
        this.rejectedAt = rejectedAt;
        this.rejectedReason = rejectedReason;
        this.source = source;
        this.status = status;
        this.updatedAt = updatedAt;
    }
    
    public AtsApplication() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AtsApplicationAnswer>> answers() {
        return (Optional<List<AtsApplicationAnswer>>) answers;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> appliedAt() {
        return appliedAt;
    }

    @JsonIgnore
    public Optional<String> candidateId() {
        return candidateId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> hiredAt() {
        return hiredAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> jobId() {
        return jobId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AtsOffer>> offers() {
        return (Optional<List<AtsOffer>>) offers;
    }

    @JsonIgnore
    public Optional<String> originalStatus() {
        return originalStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AtsApplicationRaw> raw() {
        return (Optional<AtsApplicationRaw>) raw;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> rejectedAt() {
        return rejectedAt;
    }

    @JsonIgnore
    public Optional<String> rejectedReason() {
        return rejectedReason;
    }

    @JsonIgnore
    public Optional<String> source() {
        return source;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AtsApplicationStatus> status() {
        return (Optional<AtsApplicationStatus>) status;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AtsApplication withAnswers(List<AtsApplicationAnswer> answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = Optional.ofNullable(answers);
        return this;
    }

    public AtsApplication withAnswers(Optional<? extends List<AtsApplicationAnswer>> answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = answers;
        return this;
    }

    public AtsApplication withAppliedAt(OffsetDateTime appliedAt) {
        Utils.checkNotNull(appliedAt, "appliedAt");
        this.appliedAt = Optional.ofNullable(appliedAt);
        return this;
    }

    public AtsApplication withAppliedAt(Optional<OffsetDateTime> appliedAt) {
        Utils.checkNotNull(appliedAt, "appliedAt");
        this.appliedAt = appliedAt;
        return this;
    }

    public AtsApplication withCandidateId(String candidateId) {
        Utils.checkNotNull(candidateId, "candidateId");
        this.candidateId = Optional.ofNullable(candidateId);
        return this;
    }

    public AtsApplication withCandidateId(Optional<String> candidateId) {
        Utils.checkNotNull(candidateId, "candidateId");
        this.candidateId = candidateId;
        return this;
    }

    public AtsApplication withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public AtsApplication withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AtsApplication withHiredAt(OffsetDateTime hiredAt) {
        Utils.checkNotNull(hiredAt, "hiredAt");
        this.hiredAt = Optional.ofNullable(hiredAt);
        return this;
    }

    public AtsApplication withHiredAt(Optional<OffsetDateTime> hiredAt) {
        Utils.checkNotNull(hiredAt, "hiredAt");
        this.hiredAt = hiredAt;
        return this;
    }

    public AtsApplication withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public AtsApplication withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AtsApplication withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = Optional.ofNullable(jobId);
        return this;
    }

    public AtsApplication withJobId(Optional<String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    public AtsApplication withOffers(List<AtsOffer> offers) {
        Utils.checkNotNull(offers, "offers");
        this.offers = Optional.ofNullable(offers);
        return this;
    }

    public AtsApplication withOffers(Optional<? extends List<AtsOffer>> offers) {
        Utils.checkNotNull(offers, "offers");
        this.offers = offers;
        return this;
    }

    public AtsApplication withOriginalStatus(String originalStatus) {
        Utils.checkNotNull(originalStatus, "originalStatus");
        this.originalStatus = Optional.ofNullable(originalStatus);
        return this;
    }

    public AtsApplication withOriginalStatus(Optional<String> originalStatus) {
        Utils.checkNotNull(originalStatus, "originalStatus");
        this.originalStatus = originalStatus;
        return this;
    }

    public AtsApplication withRaw(AtsApplicationRaw raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public AtsApplication withRaw(Optional<? extends AtsApplicationRaw> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AtsApplication withRejectedAt(OffsetDateTime rejectedAt) {
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        this.rejectedAt = Optional.ofNullable(rejectedAt);
        return this;
    }

    public AtsApplication withRejectedAt(Optional<OffsetDateTime> rejectedAt) {
        Utils.checkNotNull(rejectedAt, "rejectedAt");
        this.rejectedAt = rejectedAt;
        return this;
    }

    public AtsApplication withRejectedReason(String rejectedReason) {
        Utils.checkNotNull(rejectedReason, "rejectedReason");
        this.rejectedReason = Optional.ofNullable(rejectedReason);
        return this;
    }

    public AtsApplication withRejectedReason(Optional<String> rejectedReason) {
        Utils.checkNotNull(rejectedReason, "rejectedReason");
        this.rejectedReason = rejectedReason;
        return this;
    }

    public AtsApplication withSource(String source) {
        Utils.checkNotNull(source, "source");
        this.source = Optional.ofNullable(source);
        return this;
    }

    public AtsApplication withSource(Optional<String> source) {
        Utils.checkNotNull(source, "source");
        this.source = source;
        return this;
    }

    public AtsApplication withStatus(AtsApplicationStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public AtsApplication withStatus(Optional<? extends AtsApplicationStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public AtsApplication withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public AtsApplication withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AtsApplication other = (AtsApplication) o;
        return 
            Objects.deepEquals(this.answers, other.answers) &&
            Objects.deepEquals(this.appliedAt, other.appliedAt) &&
            Objects.deepEquals(this.candidateId, other.candidateId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.hiredAt, other.hiredAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.jobId, other.jobId) &&
            Objects.deepEquals(this.offers, other.offers) &&
            Objects.deepEquals(this.originalStatus, other.originalStatus) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.rejectedAt, other.rejectedAt) &&
            Objects.deepEquals(this.rejectedReason, other.rejectedReason) &&
            Objects.deepEquals(this.source, other.source) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            answers,
            appliedAt,
            candidateId,
            createdAt,
            hiredAt,
            id,
            jobId,
            offers,
            originalStatus,
            raw,
            rejectedAt,
            rejectedReason,
            source,
            status,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AtsApplication.class,
                "answers", answers,
                "appliedAt", appliedAt,
                "candidateId", candidateId,
                "createdAt", createdAt,
                "hiredAt", hiredAt,
                "id", id,
                "jobId", jobId,
                "offers", offers,
                "originalStatus", originalStatus,
                "raw", raw,
                "rejectedAt", rejectedAt,
                "rejectedReason", rejectedReason,
                "source", source,
                "status", status,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AtsApplicationAnswer>> answers = Optional.empty();
 
        private Optional<OffsetDateTime> appliedAt = Optional.empty();
 
        private Optional<String> candidateId = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<OffsetDateTime> hiredAt = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> jobId = Optional.empty();
 
        private Optional<? extends List<AtsOffer>> offers = Optional.empty();
 
        private Optional<String> originalStatus = Optional.empty();
 
        private Optional<? extends AtsApplicationRaw> raw = Optional.empty();
 
        private Optional<OffsetDateTime> rejectedAt = Optional.empty();
 
        private Optional<String> rejectedReason = Optional.empty();
 
        private Optional<String> source = Optional.empty();
 
        private Optional<? extends AtsApplicationStatus> status = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder answers(List<AtsApplicationAnswer> answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = Optional.ofNullable(answers);
            return this;
        }

        public Builder answers(Optional<? extends List<AtsApplicationAnswer>> answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = answers;
            return this;
        }

        public Builder appliedAt(OffsetDateTime appliedAt) {
            Utils.checkNotNull(appliedAt, "appliedAt");
            this.appliedAt = Optional.ofNullable(appliedAt);
            return this;
        }

        public Builder appliedAt(Optional<OffsetDateTime> appliedAt) {
            Utils.checkNotNull(appliedAt, "appliedAt");
            this.appliedAt = appliedAt;
            return this;
        }

        public Builder candidateId(String candidateId) {
            Utils.checkNotNull(candidateId, "candidateId");
            this.candidateId = Optional.ofNullable(candidateId);
            return this;
        }

        public Builder candidateId(Optional<String> candidateId) {
            Utils.checkNotNull(candidateId, "candidateId");
            this.candidateId = candidateId;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder hiredAt(OffsetDateTime hiredAt) {
            Utils.checkNotNull(hiredAt, "hiredAt");
            this.hiredAt = Optional.ofNullable(hiredAt);
            return this;
        }

        public Builder hiredAt(Optional<OffsetDateTime> hiredAt) {
            Utils.checkNotNull(hiredAt, "hiredAt");
            this.hiredAt = hiredAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        public Builder jobId(Optional<String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        public Builder offers(List<AtsOffer> offers) {
            Utils.checkNotNull(offers, "offers");
            this.offers = Optional.ofNullable(offers);
            return this;
        }

        public Builder offers(Optional<? extends List<AtsOffer>> offers) {
            Utils.checkNotNull(offers, "offers");
            this.offers = offers;
            return this;
        }

        public Builder originalStatus(String originalStatus) {
            Utils.checkNotNull(originalStatus, "originalStatus");
            this.originalStatus = Optional.ofNullable(originalStatus);
            return this;
        }

        public Builder originalStatus(Optional<String> originalStatus) {
            Utils.checkNotNull(originalStatus, "originalStatus");
            this.originalStatus = originalStatus;
            return this;
        }

        public Builder raw(AtsApplicationRaw raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends AtsApplicationRaw> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder rejectedAt(OffsetDateTime rejectedAt) {
            Utils.checkNotNull(rejectedAt, "rejectedAt");
            this.rejectedAt = Optional.ofNullable(rejectedAt);
            return this;
        }

        public Builder rejectedAt(Optional<OffsetDateTime> rejectedAt) {
            Utils.checkNotNull(rejectedAt, "rejectedAt");
            this.rejectedAt = rejectedAt;
            return this;
        }

        public Builder rejectedReason(String rejectedReason) {
            Utils.checkNotNull(rejectedReason, "rejectedReason");
            this.rejectedReason = Optional.ofNullable(rejectedReason);
            return this;
        }

        public Builder rejectedReason(Optional<String> rejectedReason) {
            Utils.checkNotNull(rejectedReason, "rejectedReason");
            this.rejectedReason = rejectedReason;
            return this;
        }

        public Builder source(String source) {
            Utils.checkNotNull(source, "source");
            this.source = Optional.ofNullable(source);
            return this;
        }

        public Builder source(Optional<String> source) {
            Utils.checkNotNull(source, "source");
            this.source = source;
            return this;
        }

        public Builder status(AtsApplicationStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends AtsApplicationStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public AtsApplication build() {
            return new AtsApplication(
                answers,
                appliedAt,
                candidateId,
                createdAt,
                hiredAt,
                id,
                jobId,
                offers,
                originalStatus,
                raw,
                rejectedAt,
                rejectedReason,
                source,
                status,
                updatedAt);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package to.unified.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import to.unified.unifiedto.utils.Utils;

public class LmsMedia {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("thumbnail_url")
    private Optional<String> thumbnailUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends LmsMediaType> type;

    @JsonProperty("url")
    private String url;

    @JsonCreator
    public LmsMedia(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("thumbnail_url") Optional<String> thumbnailUrl,
            @JsonProperty("type") Optional<? extends LmsMediaType> type,
            @JsonProperty("url") String url) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(thumbnailUrl, "thumbnailUrl");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(url, "url");
        this.description = description;
        this.name = name;
        this.thumbnailUrl = thumbnailUrl;
        this.type = type;
        this.url = url;
    }
    
    public LmsMedia(
            String url) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), url);
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> thumbnailUrl() {
        return thumbnailUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LmsMediaType> type() {
        return (Optional<LmsMediaType>) type;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public LmsMedia withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public LmsMedia withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public LmsMedia withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public LmsMedia withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public LmsMedia withThumbnailUrl(String thumbnailUrl) {
        Utils.checkNotNull(thumbnailUrl, "thumbnailUrl");
        this.thumbnailUrl = Optional.ofNullable(thumbnailUrl);
        return this;
    }

    public LmsMedia withThumbnailUrl(Optional<String> thumbnailUrl) {
        Utils.checkNotNull(thumbnailUrl, "thumbnailUrl");
        this.thumbnailUrl = thumbnailUrl;
        return this;
    }

    public LmsMedia withType(LmsMediaType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public LmsMedia withType(Optional<? extends LmsMediaType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public LmsMedia withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        LmsMedia other = (LmsMedia) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.thumbnailUrl, other.thumbnailUrl) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            name,
            thumbnailUrl,
            type,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(LmsMedia.class,
                "description", description,
                "name", name,
                "thumbnailUrl", thumbnailUrl,
                "type", type,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> thumbnailUrl = Optional.empty();
 
        private Optional<? extends LmsMediaType> type = Optional.empty();
 
        private String url;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder thumbnailUrl(String thumbnailUrl) {
            Utils.checkNotNull(thumbnailUrl, "thumbnailUrl");
            this.thumbnailUrl = Optional.ofNullable(thumbnailUrl);
            return this;
        }

        public Builder thumbnailUrl(Optional<String> thumbnailUrl) {
            Utils.checkNotNull(thumbnailUrl, "thumbnailUrl");
            this.thumbnailUrl = thumbnailUrl;
            return this;
        }

        public Builder type(LmsMediaType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends LmsMediaType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public LmsMedia build() {
            return new LmsMedia(
                description,
                name,
                thumbnailUrl,
                type,
                url);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package to.unified.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import to.unified.unifiedto.utils.Utils;
/**
 * PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User - an organization.
 */

public class PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additionalManagers")
    private Optional<? extends List<ScimManager>> additionalManagers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private Optional<OffsetDateTime> birthday;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("costCenter")
    private Optional<String> costCenter;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private Optional<String> department;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division")
    private Optional<String> division;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employeeNumber")
    private Optional<String> employeeNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("endDate")
    private Optional<OffsetDateTime> endDate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender> gender;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("level")
    private Optional<String> level;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<String> location;

    /**
     * "id" attribute of another User.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager")
    private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager> manager;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization")
    private Optional<String> organization;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("startDate")
    private Optional<OffsetDateTime> startDate;

    @JsonCreator
    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User(
            @JsonProperty("additionalManagers") Optional<? extends List<ScimManager>> additionalManagers,
            @JsonProperty("birthday") Optional<OffsetDateTime> birthday,
            @JsonProperty("costCenter") Optional<String> costCenter,
            @JsonProperty("department") Optional<String> department,
            @JsonProperty("division") Optional<String> division,
            @JsonProperty("employeeNumber") Optional<String> employeeNumber,
            @JsonProperty("endDate") Optional<OffsetDateTime> endDate,
            @JsonProperty("gender") Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender> gender,
            @JsonProperty("level") Optional<String> level,
            @JsonProperty("location") Optional<String> location,
            @JsonProperty("manager") Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager> manager,
            @JsonProperty("organization") Optional<String> organization,
            @JsonProperty("startDate") Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(additionalManagers, "additionalManagers");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(costCenter, "costCenter");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(division, "division");
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(level, "level");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(manager, "manager");
        Utils.checkNotNull(organization, "organization");
        Utils.checkNotNull(startDate, "startDate");
        this.additionalManagers = additionalManagers;
        this.birthday = birthday;
        this.costCenter = costCenter;
        this.department = department;
        this.division = division;
        this.employeeNumber = employeeNumber;
        this.endDate = endDate;
        this.gender = gender;
        this.level = level;
        this.location = location;
        this.manager = manager;
        this.organization = organization;
        this.startDate = startDate;
    }
    
    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimManager>> additionalManagers() {
        return (Optional<List<ScimManager>>) additionalManagers;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> birthday() {
        return birthday;
    }

    @JsonIgnore
    public Optional<String> costCenter() {
        return costCenter;
    }

    @JsonIgnore
    public Optional<String> department() {
        return department;
    }

    @JsonIgnore
    public Optional<String> division() {
        return division;
    }

    @JsonIgnore
    public Optional<String> employeeNumber() {
        return employeeNumber;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endDate() {
        return endDate;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender> gender() {
        return (Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender>) gender;
    }

    @JsonIgnore
    public Optional<String> level() {
        return level;
    }

    @JsonIgnore
    public Optional<String> location() {
        return location;
    }

    /**
     * "id" attribute of another User.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager> manager() {
        return (Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager>) manager;
    }

    @JsonIgnore
    public Optional<String> organization() {
        return organization;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startDate() {
        return startDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withAdditionalManagers(List<ScimManager> additionalManagers) {
        Utils.checkNotNull(additionalManagers, "additionalManagers");
        this.additionalManagers = Optional.ofNullable(additionalManagers);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withAdditionalManagers(Optional<? extends List<ScimManager>> additionalManagers) {
        Utils.checkNotNull(additionalManagers, "additionalManagers");
        this.additionalManagers = additionalManagers;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withBirthday(OffsetDateTime birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = Optional.ofNullable(birthday);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withBirthday(Optional<OffsetDateTime> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withCostCenter(String costCenter) {
        Utils.checkNotNull(costCenter, "costCenter");
        this.costCenter = Optional.ofNullable(costCenter);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withCostCenter(Optional<String> costCenter) {
        Utils.checkNotNull(costCenter, "costCenter");
        this.costCenter = costCenter;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = Optional.ofNullable(department);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withDepartment(Optional<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withDivision(String division) {
        Utils.checkNotNull(division, "division");
        this.division = Optional.ofNullable(division);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withDivision(Optional<String> division) {
        Utils.checkNotNull(division, "division");
        this.division = division;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withEmployeeNumber(String employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = Optional.ofNullable(employeeNumber);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withEmployeeNumber(Optional<String> employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = employeeNumber;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withEndDate(OffsetDateTime endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withEndDate(Optional<OffsetDateTime> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withGender(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = Optional.ofNullable(gender);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withGender(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withLevel(String level) {
        Utils.checkNotNull(level, "level");
        this.level = Optional.ofNullable(level);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withLevel(Optional<String> level) {
        Utils.checkNotNull(level, "level");
        this.level = level;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withLocation(Optional<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    /**
     * "id" attribute of another User.
     */
    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withManager(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = Optional.ofNullable(manager);
        return this;
    }

    /**
     * "id" attribute of another User.
     */
    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withManager(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager> manager) {
        Utils.checkNotNull(manager, "manager");
        this.manager = manager;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withOrganization(String organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = Optional.ofNullable(organization);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withOrganization(Optional<String> organization) {
        Utils.checkNotNull(organization, "organization");
        this.organization = organization;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withStartDate(OffsetDateTime startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User withStartDate(Optional<OffsetDateTime> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User other = (PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User) o;
        return 
            Objects.deepEquals(this.additionalManagers, other.additionalManagers) &&
            Objects.deepEquals(this.birthday, other.birthday) &&
            Objects.deepEquals(this.costCenter, other.costCenter) &&
            Objects.deepEquals(this.department, other.department) &&
            Objects.deepEquals(this.division, other.division) &&
            Objects.deepEquals(this.employeeNumber, other.employeeNumber) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.gender, other.gender) &&
            Objects.deepEquals(this.level, other.level) &&
            Objects.deepEquals(this.location, other.location) &&
            Objects.deepEquals(this.manager, other.manager) &&
            Objects.deepEquals(this.organization, other.organization) &&
            Objects.deepEquals(this.startDate, other.startDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            additionalManagers,
            birthday,
            costCenter,
            department,
            division,
            employeeNumber,
            endDate,
            gender,
            level,
            location,
            manager,
            organization,
            startDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User.class,
                "additionalManagers", additionalManagers,
                "birthday", birthday,
                "costCenter", costCenter,
                "department", department,
                "division", division,
                "employeeNumber", employeeNumber,
                "endDate", endDate,
                "gender", gender,
                "level", level,
                "location", location,
                "manager", manager,
                "organization", organization,
                "startDate", startDate);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ScimManager>> additionalManagers = Optional.empty();
 
        private Optional<OffsetDateTime> birthday = Optional.empty();
 
        private Optional<String> costCenter = Optional.empty();
 
        private Optional<String> department = Optional.empty();
 
        private Optional<String> division = Optional.empty();
 
        private Optional<String> employeeNumber = Optional.empty();
 
        private Optional<OffsetDateTime> endDate = Optional.empty();
 
        private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender> gender = Optional.empty();
 
        private Optional<String> level = Optional.empty();
 
        private Optional<String> location = Optional.empty();
 
        private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager> manager = Optional.empty();
 
        private Optional<String> organization = Optional.empty();
 
        private Optional<OffsetDateTime> startDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder additionalManagers(List<ScimManager> additionalManagers) {
            Utils.checkNotNull(additionalManagers, "additionalManagers");
            this.additionalManagers = Optional.ofNullable(additionalManagers);
            return this;
        }

        public Builder additionalManagers(Optional<? extends List<ScimManager>> additionalManagers) {
            Utils.checkNotNull(additionalManagers, "additionalManagers");
            this.additionalManagers = additionalManagers;
            return this;
        }

        public Builder birthday(OffsetDateTime birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = Optional.ofNullable(birthday);
            return this;
        }

        public Builder birthday(Optional<OffsetDateTime> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        public Builder costCenter(String costCenter) {
            Utils.checkNotNull(costCenter, "costCenter");
            this.costCenter = Optional.ofNullable(costCenter);
            return this;
        }

        public Builder costCenter(Optional<String> costCenter) {
            Utils.checkNotNull(costCenter, "costCenter");
            this.costCenter = costCenter;
            return this;
        }

        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = Optional.ofNullable(department);
            return this;
        }

        public Builder department(Optional<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        public Builder division(String division) {
            Utils.checkNotNull(division, "division");
            this.division = Optional.ofNullable(division);
            return this;
        }

        public Builder division(Optional<String> division) {
            Utils.checkNotNull(division, "division");
            this.division = division;
            return this;
        }

        public Builder employeeNumber(String employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = Optional.ofNullable(employeeNumber);
            return this;
        }

        public Builder employeeNumber(Optional<String> employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = employeeNumber;
            return this;
        }

        public Builder endDate(OffsetDateTime endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        public Builder endDate(Optional<OffsetDateTime> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        public Builder gender(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = Optional.ofNullable(gender);
            return this;
        }

        public Builder gender(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserGender> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }

        public Builder level(String level) {
            Utils.checkNotNull(level, "level");
            this.level = Optional.ofNullable(level);
            return this;
        }

        public Builder level(Optional<String> level) {
            Utils.checkNotNull(level, "level");
            this.level = level;
            return this;
        }

        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        public Builder location(Optional<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        /**
         * "id" attribute of another User.
         */
        public Builder manager(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = Optional.ofNullable(manager);
            return this;
        }

        /**
         * "id" attribute of another User.
         */
        public Builder manager(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager> manager) {
            Utils.checkNotNull(manager, "manager");
            this.manager = manager;
            return this;
        }

        public Builder organization(String organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = Optional.ofNullable(organization);
            return this;
        }

        public Builder organization(Optional<String> organization) {
            Utils.checkNotNull(organization, "organization");
            this.organization = organization;
            return this;
        }

        public Builder startDate(OffsetDateTime startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        public Builder startDate(Optional<OffsetDateTime> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }
        
        public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User build() {
            return new PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User(
                additionalManagers,
                birthday,
                costCenter,
                department,
                division,
                employeeNumber,
                endDate,
                gender,
                level,
                location,
                manager,
                organization,
                startDate);
        }
    }
}


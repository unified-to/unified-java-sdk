/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package to.unified.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import to.unified.unifiedto.utils.Utils;

public class RepoCommit {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("branch_id")
    private Optional<String> branchId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonProperty("repo_id")
    private String repoId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonProperty("user_id")
    private String userId;

    @JsonCreator
    public RepoCommit(
            @JsonProperty("branch_id") Optional<String> branchId,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("message") Optional<String> message,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("repo_id") String repoId,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("user_id") String userId) {
        Utils.checkNotNull(branchId, "branchId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(repoId, "repoId");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userId, "userId");
        this.branchId = branchId;
        this.createdAt = createdAt;
        this.id = id;
        this.message = message;
        this.raw = raw;
        this.repoId = repoId;
        this.updatedAt = updatedAt;
        this.userId = userId;
    }
    
    public RepoCommit(
            String repoId,
            String userId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), repoId, Optional.empty(), userId);
    }

    @JsonIgnore
    public Optional<String> branchId() {
        return branchId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public String repoId() {
        return repoId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public String userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public RepoCommit withBranchId(String branchId) {
        Utils.checkNotNull(branchId, "branchId");
        this.branchId = Optional.ofNullable(branchId);
        return this;
    }

    public RepoCommit withBranchId(Optional<String> branchId) {
        Utils.checkNotNull(branchId, "branchId");
        this.branchId = branchId;
        return this;
    }

    public RepoCommit withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public RepoCommit withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public RepoCommit withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public RepoCommit withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public RepoCommit withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    public RepoCommit withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    public RepoCommit withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public RepoCommit withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public RepoCommit withRepoId(String repoId) {
        Utils.checkNotNull(repoId, "repoId");
        this.repoId = repoId;
        return this;
    }

    public RepoCommit withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public RepoCommit withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public RepoCommit withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RepoCommit other = (RepoCommit) o;
        return 
            Objects.deepEquals(this.branchId, other.branchId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.repoId, other.repoId) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            branchId,
            createdAt,
            id,
            message,
            raw,
            repoId,
            updatedAt,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RepoCommit.class,
                "branchId", branchId,
                "createdAt", createdAt,
                "id", id,
                "message", message,
                "raw", raw,
                "repoId", repoId,
                "updatedAt", updatedAt,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private Optional<String> branchId = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> message = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private String repoId;
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private String userId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder branchId(String branchId) {
            Utils.checkNotNull(branchId, "branchId");
            this.branchId = Optional.ofNullable(branchId);
            return this;
        }

        public Builder branchId(Optional<String> branchId) {
            Utils.checkNotNull(branchId, "branchId");
            this.branchId = branchId;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder repoId(String repoId) {
            Utils.checkNotNull(repoId, "repoId");
            this.repoId = repoId;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public RepoCommit build() {
            return new RepoCommit(
                branchId,
                createdAt,
                id,
                message,
                raw,
                repoId,
                updatedAt,
                userId);
        }
    }
}


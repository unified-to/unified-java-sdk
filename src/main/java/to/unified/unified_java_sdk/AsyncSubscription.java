/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreatePaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.GetPaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.ListPaymentSubscriptionsRequest;
import to.unified.unified_java_sdk.models.operations.PatchPaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.RemovePaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.UpdatePaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.async.CreatePaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreatePaymentSubscriptionResponse;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentSubscriptionResponse;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentSubscriptionsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentSubscriptionsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchPaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchPaymentSubscriptionResponse;
import to.unified.unified_java_sdk.models.operations.async.RemovePaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemovePaymentSubscriptionResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdatePaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdatePaymentSubscriptionResponse;
import to.unified.unified_java_sdk.operations.CreatePaymentSubscription;
import to.unified.unified_java_sdk.operations.GetPaymentSubscription;
import to.unified.unified_java_sdk.operations.ListPaymentSubscriptions;
import to.unified.unified_java_sdk.operations.PatchPaymentSubscription;
import to.unified.unified_java_sdk.operations.RemovePaymentSubscription;
import to.unified.unified_java_sdk.operations.UpdatePaymentSubscription;


public class AsyncSubscription {
    private final SDKConfiguration sdkConfiguration;
    private final Subscription syncSDK;

    AsyncSubscription(Subscription syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Subscription sync() {
        return syncSDK;
    }


    /**
     * Create a subscription
     * 
     * @return The async call builder
     */
    public CreatePaymentSubscriptionRequestBuilder createPaymentSubscription() {
        return new CreatePaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreatePaymentSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<CreatePaymentSubscriptionResponse> createPaymentSubscription(CreatePaymentSubscriptionRequest request) {
        AsyncRequestOperation<CreatePaymentSubscriptionRequest, CreatePaymentSubscriptionResponse> operation
              = new CreatePaymentSubscription.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a subscription
     * 
     * @return The async call builder
     */
    public GetPaymentSubscriptionRequestBuilder getPaymentSubscription() {
        return new GetPaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetPaymentSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<GetPaymentSubscriptionResponse> getPaymentSubscription(GetPaymentSubscriptionRequest request) {
        AsyncRequestOperation<GetPaymentSubscriptionRequest, GetPaymentSubscriptionResponse> operation
              = new GetPaymentSubscription.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all subscriptions
     * 
     * @return The async call builder
     */
    public ListPaymentSubscriptionsRequestBuilder listPaymentSubscriptions() {
        return new ListPaymentSubscriptionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all subscriptions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListPaymentSubscriptionsResponse&gt; - The async response
     */
    public CompletableFuture<ListPaymentSubscriptionsResponse> listPaymentSubscriptions(ListPaymentSubscriptionsRequest request) {
        AsyncRequestOperation<ListPaymentSubscriptionsRequest, ListPaymentSubscriptionsResponse> operation
              = new ListPaymentSubscriptions.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a subscription
     * 
     * @return The async call builder
     */
    public PatchPaymentSubscriptionRequestBuilder patchPaymentSubscription() {
        return new PatchPaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchPaymentSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<PatchPaymentSubscriptionResponse> patchPaymentSubscription(PatchPaymentSubscriptionRequest request) {
        AsyncRequestOperation<PatchPaymentSubscriptionRequest, PatchPaymentSubscriptionResponse> operation
              = new PatchPaymentSubscription.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a subscription
     * 
     * @return The async call builder
     */
    public RemovePaymentSubscriptionRequestBuilder removePaymentSubscription() {
        return new RemovePaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemovePaymentSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<RemovePaymentSubscriptionResponse> removePaymentSubscription(RemovePaymentSubscriptionRequest request) {
        AsyncRequestOperation<RemovePaymentSubscriptionRequest, RemovePaymentSubscriptionResponse> operation
              = new RemovePaymentSubscription.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a subscription
     * 
     * @return The async call builder
     */
    public UpdatePaymentSubscriptionRequestBuilder updatePaymentSubscription() {
        return new UpdatePaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdatePaymentSubscriptionResponse&gt; - The async response
     */
    public CompletableFuture<UpdatePaymentSubscriptionResponse> updatePaymentSubscription(UpdatePaymentSubscriptionRequest request) {
        AsyncRequestOperation<UpdatePaymentSubscriptionRequest, UpdatePaymentSubscriptionResponse> operation
              = new UpdatePaymentSubscription.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

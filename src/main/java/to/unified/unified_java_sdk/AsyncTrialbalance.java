/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.GetAccountingTrialbalanceRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingTrialbalancesRequest;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTrialbalanceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTrialbalanceResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTrialbalancesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTrialbalancesResponse;
import to.unified.unified_java_sdk.operations.GetAccountingTrialbalance;
import to.unified.unified_java_sdk.operations.ListAccountingTrialbalances;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncTrialbalance {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Trialbalance syncSDK;

    AsyncTrialbalance(Trialbalance syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Trialbalance sync() {
        return syncSDK;
    }


    /**
     * Retrieve a trialbalance
     * 
     * @return The async call builder
     */
    public GetAccountingTrialbalanceRequestBuilder getAccountingTrialbalance() {
        return new GetAccountingTrialbalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a trialbalance
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingTrialbalanceResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingTrialbalanceResponse> getAccountingTrialbalance(GetAccountingTrialbalanceRequest request) {
        AsyncRequestOperation<GetAccountingTrialbalanceRequest, GetAccountingTrialbalanceResponse> operation
              = new GetAccountingTrialbalance.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all trialbalances
     * 
     * @return The async call builder
     */
    public ListAccountingTrialbalancesRequestBuilder listAccountingTrialbalances() {
        return new ListAccountingTrialbalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all trialbalances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingTrialbalancesResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingTrialbalancesResponse> listAccountingTrialbalances(ListAccountingTrialbalancesRequest request) {
        AsyncRequestOperation<ListAccountingTrialbalancesRequest, ListAccountingTrialbalancesResponse> operation
              = new ListAccountingTrialbalances.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

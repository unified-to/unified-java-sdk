/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.async.GetRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.async.ListRepoCommitsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListRepoCommitsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoCommitResponse;
import to.unified.unified_java_sdk.operations.CreateRepoCommit;
import to.unified.unified_java_sdk.operations.GetRepoCommit;
import to.unified.unified_java_sdk.operations.ListRepoCommits;
import to.unified.unified_java_sdk.operations.PatchRepoCommit;
import to.unified.unified_java_sdk.operations.RemoveRepoCommit;
import to.unified.unified_java_sdk.operations.UpdateRepoCommit;


public class AsyncCommit {
    private final SDKConfiguration sdkConfiguration;
    private final Commit syncSDK;

    AsyncCommit(Commit syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Commit sync() {
        return syncSDK;
    }


    /**
     * Create a commit
     * 
     * @return The async call builder
     */
    public CreateRepoCommitRequestBuilder createRepoCommit() {
        return new CreateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateRepoCommitResponse&gt; - The async response
     */
    public CompletableFuture<CreateRepoCommitResponse> createRepoCommit(CreateRepoCommitRequest request) {
        AsyncRequestOperation<CreateRepoCommitRequest, CreateRepoCommitResponse> operation
              = new CreateRepoCommit.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a commit
     * 
     * @return The async call builder
     */
    public GetRepoCommitRequestBuilder getRepoCommit() {
        return new GetRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetRepoCommitResponse&gt; - The async response
     */
    public CompletableFuture<GetRepoCommitResponse> getRepoCommit(GetRepoCommitRequest request) {
        AsyncRequestOperation<GetRepoCommitRequest, GetRepoCommitResponse> operation
              = new GetRepoCommit.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all commits
     * 
     * @return The async call builder
     */
    public ListRepoCommitsRequestBuilder listRepoCommits() {
        return new ListRepoCommitsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all commits
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListRepoCommitsResponse&gt; - The async response
     */
    public CompletableFuture<ListRepoCommitsResponse> listRepoCommits(ListRepoCommitsRequest request) {
        AsyncRequestOperation<ListRepoCommitsRequest, ListRepoCommitsResponse> operation
              = new ListRepoCommits.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a commit
     * 
     * @return The async call builder
     */
    public PatchRepoCommitRequestBuilder patchRepoCommit() {
        return new PatchRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchRepoCommitResponse&gt; - The async response
     */
    public CompletableFuture<PatchRepoCommitResponse> patchRepoCommit(PatchRepoCommitRequest request) {
        AsyncRequestOperation<PatchRepoCommitRequest, PatchRepoCommitResponse> operation
              = new PatchRepoCommit.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a commit
     * 
     * @return The async call builder
     */
    public RemoveRepoCommitRequestBuilder removeRepoCommit() {
        return new RemoveRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveRepoCommitResponse&gt; - The async response
     */
    public CompletableFuture<RemoveRepoCommitResponse> removeRepoCommit(RemoveRepoCommitRequest request) {
        AsyncRequestOperation<RemoveRepoCommitRequest, RemoveRepoCommitResponse> operation
              = new RemoveRepoCommit.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a commit
     * 
     * @return The async call builder
     */
    public UpdateRepoCommitRequestBuilder updateRepoCommit() {
        return new UpdateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateRepoCommitResponse&gt; - The async response
     */
    public CompletableFuture<UpdateRepoCommitResponse> updateRepoCommit(UpdateRepoCommitRequest request) {
        AsyncRequestOperation<UpdateRepoCommitRequest, UpdateRepoCommitResponse> operation
              = new UpdateRepoCommit.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

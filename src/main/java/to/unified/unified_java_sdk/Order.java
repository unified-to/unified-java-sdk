/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import to.unified.unified_java_sdk.models.operations.CreateAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.GetAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.ListAccountingOrdersRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingOrdersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListAccountingOrdersResponse;
import to.unified.unified_java_sdk.models.operations.PatchAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingOrderResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingOrder;
import to.unified.unified_java_sdk.operations.GetAccountingOrder;
import to.unified.unified_java_sdk.operations.ListAccountingOrders;
import to.unified.unified_java_sdk.operations.PatchAccountingOrder;
import to.unified.unified_java_sdk.operations.RemoveAccountingOrder;
import to.unified.unified_java_sdk.operations.UpdateAccountingOrder;
import to.unified.unified_java_sdk.utils.Headers;


public class Order {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncOrder asyncSDK;

    Order(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncOrder(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncOrder async() {
        return asyncSDK;
    }

    /**
     * Create an order
     * 
     * @return The call builder
     */
    public CreateAccountingOrderRequestBuilder createAccountingOrder() {
        return new CreateAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateAccountingOrderResponse createAccountingOrder(CreateAccountingOrderRequest request) {
        RequestOperation<CreateAccountingOrderRequest, CreateAccountingOrderResponse> operation
              = new CreateAccountingOrder.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve an order
     * 
     * @return The call builder
     */
    public GetAccountingOrderRequestBuilder getAccountingOrder() {
        return new GetAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetAccountingOrderResponse getAccountingOrder(GetAccountingOrderRequest request) {
        RequestOperation<GetAccountingOrderRequest, GetAccountingOrderResponse> operation
              = new GetAccountingOrder.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all orders
     * 
     * @return The call builder
     */
    public ListAccountingOrdersRequestBuilder listAccountingOrders() {
        return new ListAccountingOrdersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListAccountingOrdersResponse listAccountingOrders(ListAccountingOrdersRequest request) {
        RequestOperation<ListAccountingOrdersRequest, ListAccountingOrdersResponse> operation
              = new ListAccountingOrders.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an order
     * 
     * @return The call builder
     */
    public PatchAccountingOrderRequestBuilder patchAccountingOrder() {
        return new PatchAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public PatchAccountingOrderResponse patchAccountingOrder(PatchAccountingOrderRequest request) {
        RequestOperation<PatchAccountingOrderRequest, PatchAccountingOrderResponse> operation
              = new PatchAccountingOrder.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove an order
     * 
     * @return The call builder
     */
    public RemoveAccountingOrderRequestBuilder removeAccountingOrder() {
        return new RemoveAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RemoveAccountingOrderResponse removeAccountingOrder(RemoveAccountingOrderRequest request) {
        RequestOperation<RemoveAccountingOrderRequest, RemoveAccountingOrderResponse> operation
              = new RemoveAccountingOrder.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an order
     * 
     * @return The call builder
     */
    public UpdateAccountingOrderRequestBuilder updateAccountingOrder() {
        return new UpdateAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateAccountingOrderResponse updateAccountingOrder(UpdateAccountingOrderRequest request) {
        RequestOperation<UpdateAccountingOrderRequest, UpdateAccountingOrderResponse> operation
              = new UpdateAccountingOrder.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}

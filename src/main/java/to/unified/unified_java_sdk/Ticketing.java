/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.CreateTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.CreateTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.CreateTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.CreateTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.GetTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.GetTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.GetTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.ListTicketingCustomersRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingCustomersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListTicketingCustomersResponse;
import to.unified.unified_java_sdk.models.operations.ListTicketingNotesRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingNotesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListTicketingNotesResponse;
import to.unified.unified_java_sdk.models.operations.ListTicketingTicketsRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingTicketsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListTicketingTicketsResponse;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.PatchTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.PatchTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingTicketResponse;
import to.unified.unified_java_sdk.operations.CreateTicketingCustomerOperation;
import to.unified.unified_java_sdk.operations.CreateTicketingNoteOperation;
import to.unified.unified_java_sdk.operations.CreateTicketingTicketOperation;
import to.unified.unified_java_sdk.operations.GetTicketingCustomerOperation;
import to.unified.unified_java_sdk.operations.GetTicketingNoteOperation;
import to.unified.unified_java_sdk.operations.GetTicketingTicketOperation;
import to.unified.unified_java_sdk.operations.ListTicketingCustomersOperation;
import to.unified.unified_java_sdk.operations.ListTicketingNotesOperation;
import to.unified.unified_java_sdk.operations.ListTicketingTicketsOperation;
import to.unified.unified_java_sdk.operations.PatchTicketingCustomerOperation;
import to.unified.unified_java_sdk.operations.PatchTicketingNoteOperation;
import to.unified.unified_java_sdk.operations.PatchTicketingTicketOperation;
import to.unified.unified_java_sdk.operations.RemoveTicketingCustomerOperation;
import to.unified.unified_java_sdk.operations.RemoveTicketingNoteOperation;
import to.unified.unified_java_sdk.operations.RemoveTicketingTicketOperation;
import to.unified.unified_java_sdk.operations.UpdateTicketingCustomerOperation;
import to.unified.unified_java_sdk.operations.UpdateTicketingNoteOperation;
import to.unified.unified_java_sdk.operations.UpdateTicketingTicketOperation;


public class Ticketing {
    private final SDKConfiguration sdkConfiguration;

    Ticketing(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a customer
     * 
     * @return The call builder
     */
    public CreateTicketingCustomerRequestBuilder createTicketingCustomer() {
        return new CreateTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTicketingCustomerResponse createTicketingCustomer(CreateTicketingCustomerRequest request) throws Exception {
        RequestOperation<CreateTicketingCustomerRequest, CreateTicketingCustomerResponse> operation
              = new CreateTicketingCustomerOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a note
     * 
     * @return The call builder
     */
    public CreateTicketingNoteRequestBuilder createTicketingNote() {
        return new CreateTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTicketingNoteResponse createTicketingNote(CreateTicketingNoteRequest request) throws Exception {
        RequestOperation<CreateTicketingNoteRequest, CreateTicketingNoteResponse> operation
              = new CreateTicketingNoteOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a ticket
     * 
     * @return The call builder
     */
    public CreateTicketingTicketRequestBuilder createTicketingTicket() {
        return new CreateTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTicketingTicketResponse createTicketingTicket(CreateTicketingTicketRequest request) throws Exception {
        RequestOperation<CreateTicketingTicketRequest, CreateTicketingTicketResponse> operation
              = new CreateTicketingTicketOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a customer
     * 
     * @return The call builder
     */
    public GetTicketingCustomerRequestBuilder getTicketingCustomer() {
        return new GetTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTicketingCustomerResponse getTicketingCustomer(GetTicketingCustomerRequest request) throws Exception {
        RequestOperation<GetTicketingCustomerRequest, GetTicketingCustomerResponse> operation
              = new GetTicketingCustomerOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a note
     * 
     * @return The call builder
     */
    public GetTicketingNoteRequestBuilder getTicketingNote() {
        return new GetTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTicketingNoteResponse getTicketingNote(GetTicketingNoteRequest request) throws Exception {
        RequestOperation<GetTicketingNoteRequest, GetTicketingNoteResponse> operation
              = new GetTicketingNoteOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a ticket
     * 
     * @return The call builder
     */
    public GetTicketingTicketRequestBuilder getTicketingTicket() {
        return new GetTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTicketingTicketResponse getTicketingTicket(GetTicketingTicketRequest request) throws Exception {
        RequestOperation<GetTicketingTicketRequest, GetTicketingTicketResponse> operation
              = new GetTicketingTicketOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all customers
     * 
     * @return The call builder
     */
    public ListTicketingCustomersRequestBuilder listTicketingCustomers() {
        return new ListTicketingCustomersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTicketingCustomersResponse listTicketingCustomers(ListTicketingCustomersRequest request) throws Exception {
        RequestOperation<ListTicketingCustomersRequest, ListTicketingCustomersResponse> operation
              = new ListTicketingCustomersOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all notes
     * 
     * @return The call builder
     */
    public ListTicketingNotesRequestBuilder listTicketingNotes() {
        return new ListTicketingNotesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all notes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTicketingNotesResponse listTicketingNotes(ListTicketingNotesRequest request) throws Exception {
        RequestOperation<ListTicketingNotesRequest, ListTicketingNotesResponse> operation
              = new ListTicketingNotesOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all tickets
     * 
     * @return The call builder
     */
    public ListTicketingTicketsRequestBuilder listTicketingTickets() {
        return new ListTicketingTicketsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all tickets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTicketingTicketsResponse listTicketingTickets(ListTicketingTicketsRequest request) throws Exception {
        RequestOperation<ListTicketingTicketsRequest, ListTicketingTicketsResponse> operation
              = new ListTicketingTicketsOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a customer
     * 
     * @return The call builder
     */
    public PatchTicketingCustomerRequestBuilder patchTicketingCustomer() {
        return new PatchTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchTicketingCustomerResponse patchTicketingCustomer(PatchTicketingCustomerRequest request) throws Exception {
        RequestOperation<PatchTicketingCustomerRequest, PatchTicketingCustomerResponse> operation
              = new PatchTicketingCustomerOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a note
     * 
     * @return The call builder
     */
    public PatchTicketingNoteRequestBuilder patchTicketingNote() {
        return new PatchTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchTicketingNoteResponse patchTicketingNote(PatchTicketingNoteRequest request) throws Exception {
        RequestOperation<PatchTicketingNoteRequest, PatchTicketingNoteResponse> operation
              = new PatchTicketingNoteOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a ticket
     * 
     * @return The call builder
     */
    public PatchTicketingTicketRequestBuilder patchTicketingTicket() {
        return new PatchTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchTicketingTicketResponse patchTicketingTicket(PatchTicketingTicketRequest request) throws Exception {
        RequestOperation<PatchTicketingTicketRequest, PatchTicketingTicketResponse> operation
              = new PatchTicketingTicketOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a customer
     * 
     * @return The call builder
     */
    public RemoveTicketingCustomerRequestBuilder removeTicketingCustomer() {
        return new RemoveTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveTicketingCustomerResponse removeTicketingCustomer(RemoveTicketingCustomerRequest request) throws Exception {
        RequestOperation<RemoveTicketingCustomerRequest, RemoveTicketingCustomerResponse> operation
              = new RemoveTicketingCustomerOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a note
     * 
     * @return The call builder
     */
    public RemoveTicketingNoteRequestBuilder removeTicketingNote() {
        return new RemoveTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveTicketingNoteResponse removeTicketingNote(RemoveTicketingNoteRequest request) throws Exception {
        RequestOperation<RemoveTicketingNoteRequest, RemoveTicketingNoteResponse> operation
              = new RemoveTicketingNoteOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a ticket
     * 
     * @return The call builder
     */
    public RemoveTicketingTicketRequestBuilder removeTicketingTicket() {
        return new RemoveTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveTicketingTicketResponse removeTicketingTicket(RemoveTicketingTicketRequest request) throws Exception {
        RequestOperation<RemoveTicketingTicketRequest, RemoveTicketingTicketResponse> operation
              = new RemoveTicketingTicketOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a customer
     * 
     * @return The call builder
     */
    public UpdateTicketingCustomerRequestBuilder updateTicketingCustomer() {
        return new UpdateTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTicketingCustomerResponse updateTicketingCustomer(UpdateTicketingCustomerRequest request) throws Exception {
        RequestOperation<UpdateTicketingCustomerRequest, UpdateTicketingCustomerResponse> operation
              = new UpdateTicketingCustomerOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a note
     * 
     * @return The call builder
     */
    public UpdateTicketingNoteRequestBuilder updateTicketingNote() {
        return new UpdateTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTicketingNoteResponse updateTicketingNote(UpdateTicketingNoteRequest request) throws Exception {
        RequestOperation<UpdateTicketingNoteRequest, UpdateTicketingNoteResponse> operation
              = new UpdateTicketingNoteOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a ticket
     * 
     * @return The call builder
     */
    public UpdateTicketingTicketRequestBuilder updateTicketingTicket() {
        return new UpdateTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTicketingTicketResponse updateTicketingTicket(UpdateTicketingTicketRequest request) throws Exception {
        RequestOperation<UpdateTicketingTicketRequest, UpdateTicketingTicketResponse> operation
              = new UpdateTicketingTicketOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}

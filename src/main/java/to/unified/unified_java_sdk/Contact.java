/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.models.operations.CreateAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.CreateCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.CreateCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.CreateUcContactRequest;
import to.unified.unified_java_sdk.models.operations.CreateUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateUcContactResponse;
import to.unified.unified_java_sdk.models.operations.GetAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.GetCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.GetCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.GetUcContactRequest;
import to.unified.unified_java_sdk.models.operations.GetUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetUcContactResponse;
import to.unified.unified_java_sdk.models.operations.ListAccountingContactsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingContactsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListAccountingContactsResponse;
import to.unified.unified_java_sdk.models.operations.ListCrmContactsRequest;
import to.unified.unified_java_sdk.models.operations.ListCrmContactsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListCrmContactsResponse;
import to.unified.unified_java_sdk.models.operations.ListUcContactsRequest;
import to.unified.unified_java_sdk.models.operations.ListUcContactsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUcContactsResponse;
import to.unified.unified_java_sdk.models.operations.PatchAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.PatchCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.PatchCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.PatchUcContactRequest;
import to.unified.unified_java_sdk.models.operations.PatchUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchUcContactResponse;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.RemoveCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.RemoveCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.RemoveUcContactRequest;
import to.unified.unified_java_sdk.models.operations.RemoveUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveUcContactResponse;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.UpdateCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.UpdateCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.UpdateUcContactRequest;
import to.unified.unified_java_sdk.models.operations.UpdateUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateUcContactResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingContactOperation;
import to.unified.unified_java_sdk.operations.CreateCrmContactOperation;
import to.unified.unified_java_sdk.operations.CreateUcContactOperation;
import to.unified.unified_java_sdk.operations.GetAccountingContactOperation;
import to.unified.unified_java_sdk.operations.GetCrmContactOperation;
import to.unified.unified_java_sdk.operations.GetUcContactOperation;
import to.unified.unified_java_sdk.operations.ListAccountingContactsOperation;
import to.unified.unified_java_sdk.operations.ListCrmContactsOperation;
import to.unified.unified_java_sdk.operations.ListUcContactsOperation;
import to.unified.unified_java_sdk.operations.PatchAccountingContactOperation;
import to.unified.unified_java_sdk.operations.PatchCrmContactOperation;
import to.unified.unified_java_sdk.operations.PatchUcContactOperation;
import to.unified.unified_java_sdk.operations.RemoveAccountingContactOperation;
import to.unified.unified_java_sdk.operations.RemoveCrmContactOperation;
import to.unified.unified_java_sdk.operations.RemoveUcContactOperation;
import to.unified.unified_java_sdk.operations.UpdateAccountingContactOperation;
import to.unified.unified_java_sdk.operations.UpdateCrmContactOperation;
import to.unified.unified_java_sdk.operations.UpdateUcContactOperation;


public class Contact {
    private final SDKConfiguration sdkConfiguration;

    Contact(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a contact
     * 
     * @return The call builder
     */
    public CreateAccountingContactRequestBuilder createAccountingContact() {
        return new CreateAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAccountingContactResponse createAccountingContact(
            CreateAccountingContactRequest request) throws Exception {
        RequestOperation<CreateAccountingContactRequest, CreateAccountingContactResponse> operation
              = new CreateAccountingContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create a contact
     * 
     * @return The call builder
     */
    public CreateCrmContactRequestBuilder createCrmContact() {
        return new CreateCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateCrmContactResponse createCrmContact(
            CreateCrmContactRequest request) throws Exception {
        RequestOperation<CreateCrmContactRequest, CreateCrmContactResponse> operation
              = new CreateCrmContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Create a contact
     * 
     * @return The call builder
     */
    public CreateUcContactRequestBuilder createUcContact() {
        return new CreateUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateUcContactResponse createUcContact(
            CreateUcContactRequest request) throws Exception {
        RequestOperation<CreateUcContactRequest, CreateUcContactResponse> operation
              = new CreateUcContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieve a contact
     * 
     * @return The call builder
     */
    public GetAccountingContactRequestBuilder getAccountingContact() {
        return new GetAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAccountingContactResponse getAccountingContact(
            GetAccountingContactRequest request) throws Exception {
        RequestOperation<GetAccountingContactRequest, GetAccountingContactResponse> operation
              = new GetAccountingContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieve a contact
     * 
     * @return The call builder
     */
    public GetCrmContactRequestBuilder getCrmContact() {
        return new GetCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCrmContactResponse getCrmContact(
            GetCrmContactRequest request) throws Exception {
        RequestOperation<GetCrmContactRequest, GetCrmContactResponse> operation
              = new GetCrmContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieve a contact
     * 
     * @return The call builder
     */
    public GetUcContactRequestBuilder getUcContact() {
        return new GetUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUcContactResponse getUcContact(
            GetUcContactRequest request) throws Exception {
        RequestOperation<GetUcContactRequest, GetUcContactResponse> operation
              = new GetUcContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List all contacts
     * 
     * @return The call builder
     */
    public ListAccountingContactsRequestBuilder listAccountingContacts() {
        return new ListAccountingContactsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAccountingContactsResponse listAccountingContacts(
            ListAccountingContactsRequest request) throws Exception {
        RequestOperation<ListAccountingContactsRequest, ListAccountingContactsResponse> operation
              = new ListAccountingContactsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List all contacts
     * 
     * @return The call builder
     */
    public ListCrmContactsRequestBuilder listCrmContacts() {
        return new ListCrmContactsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListCrmContactsResponse listCrmContacts(
            ListCrmContactsRequest request) throws Exception {
        RequestOperation<ListCrmContactsRequest, ListCrmContactsResponse> operation
              = new ListCrmContactsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List all contacts
     * 
     * @return The call builder
     */
    public ListUcContactsRequestBuilder listUcContacts() {
        return new ListUcContactsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUcContactsResponse listUcContacts(
            ListUcContactsRequest request) throws Exception {
        RequestOperation<ListUcContactsRequest, ListUcContactsResponse> operation
              = new ListUcContactsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public PatchAccountingContactRequestBuilder patchAccountingContact() {
        return new PatchAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchAccountingContactResponse patchAccountingContact(
            PatchAccountingContactRequest request) throws Exception {
        RequestOperation<PatchAccountingContactRequest, PatchAccountingContactResponse> operation
              = new PatchAccountingContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public PatchCrmContactRequestBuilder patchCrmContact() {
        return new PatchCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchCrmContactResponse patchCrmContact(
            PatchCrmContactRequest request) throws Exception {
        RequestOperation<PatchCrmContactRequest, PatchCrmContactResponse> operation
              = new PatchCrmContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public PatchUcContactRequestBuilder patchUcContact() {
        return new PatchUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchUcContactResponse patchUcContact(
            PatchUcContactRequest request) throws Exception {
        RequestOperation<PatchUcContactRequest, PatchUcContactResponse> operation
              = new PatchUcContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Remove a contact
     * 
     * @return The call builder
     */
    public RemoveAccountingContactRequestBuilder removeAccountingContact() {
        return new RemoveAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveAccountingContactResponse removeAccountingContact(
            RemoveAccountingContactRequest request) throws Exception {
        RequestOperation<RemoveAccountingContactRequest, RemoveAccountingContactResponse> operation
              = new RemoveAccountingContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Remove a contact
     * 
     * @return The call builder
     */
    public RemoveCrmContactRequestBuilder removeCrmContact() {
        return new RemoveCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveCrmContactResponse removeCrmContact(
            RemoveCrmContactRequest request) throws Exception {
        RequestOperation<RemoveCrmContactRequest, RemoveCrmContactResponse> operation
              = new RemoveCrmContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Remove a contact
     * 
     * @return The call builder
     */
    public RemoveUcContactRequestBuilder removeUcContact() {
        return new RemoveUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveUcContactResponse removeUcContact(
            RemoveUcContactRequest request) throws Exception {
        RequestOperation<RemoveUcContactRequest, RemoveUcContactResponse> operation
              = new RemoveUcContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public UpdateAccountingContactRequestBuilder updateAccountingContact() {
        return new UpdateAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateAccountingContactResponse updateAccountingContact(
            UpdateAccountingContactRequest request) throws Exception {
        RequestOperation<UpdateAccountingContactRequest, UpdateAccountingContactResponse> operation
              = new UpdateAccountingContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public UpdateCrmContactRequestBuilder updateCrmContact() {
        return new UpdateCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateCrmContactResponse updateCrmContact(
            UpdateCrmContactRequest request) throws Exception {
        RequestOperation<UpdateCrmContactRequest, UpdateCrmContactResponse> operation
              = new UpdateCrmContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public UpdateUcContactRequestBuilder updateUcContact() {
        return new UpdateUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUcContactResponse updateUcContact(
            UpdateUcContactRequest request) throws Exception {
        RequestOperation<UpdateUcContactRequest, UpdateUcContactResponse> operation
              = new UpdateUcContactOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}

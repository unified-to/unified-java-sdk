/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import to.unified.unified_java_sdk.models.operations.CreateAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.CreateCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.CreateCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.CreateUcContactRequest;
import to.unified.unified_java_sdk.models.operations.CreateUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateUcContactResponse;
import to.unified.unified_java_sdk.models.operations.GetAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.GetCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.GetCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.GetUcContactRequest;
import to.unified.unified_java_sdk.models.operations.GetUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetUcContactResponse;
import to.unified.unified_java_sdk.models.operations.ListAccountingContactsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingContactsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListAccountingContactsResponse;
import to.unified.unified_java_sdk.models.operations.ListCrmContactsRequest;
import to.unified.unified_java_sdk.models.operations.ListCrmContactsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListCrmContactsResponse;
import to.unified.unified_java_sdk.models.operations.ListUcContactsRequest;
import to.unified.unified_java_sdk.models.operations.ListUcContactsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUcContactsResponse;
import to.unified.unified_java_sdk.models.operations.PatchAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.PatchCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.PatchCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.PatchUcContactRequest;
import to.unified.unified_java_sdk.models.operations.PatchUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchUcContactResponse;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.RemoveCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.RemoveCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.RemoveUcContactRequest;
import to.unified.unified_java_sdk.models.operations.RemoveUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveUcContactResponse;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.UpdateCrmContactRequest;
import to.unified.unified_java_sdk.models.operations.UpdateCrmContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateCrmContactResponse;
import to.unified.unified_java_sdk.models.operations.UpdateUcContactRequest;
import to.unified.unified_java_sdk.models.operations.UpdateUcContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateUcContactResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingContact;
import to.unified.unified_java_sdk.operations.CreateCrmContact;
import to.unified.unified_java_sdk.operations.CreateUcContact;
import to.unified.unified_java_sdk.operations.GetAccountingContact;
import to.unified.unified_java_sdk.operations.GetCrmContact;
import to.unified.unified_java_sdk.operations.GetUcContact;
import to.unified.unified_java_sdk.operations.ListAccountingContacts;
import to.unified.unified_java_sdk.operations.ListCrmContacts;
import to.unified.unified_java_sdk.operations.ListUcContacts;
import to.unified.unified_java_sdk.operations.PatchAccountingContact;
import to.unified.unified_java_sdk.operations.PatchCrmContact;
import to.unified.unified_java_sdk.operations.PatchUcContact;
import to.unified.unified_java_sdk.operations.RemoveAccountingContact;
import to.unified.unified_java_sdk.operations.RemoveCrmContact;
import to.unified.unified_java_sdk.operations.RemoveUcContact;
import to.unified.unified_java_sdk.operations.UpdateAccountingContact;
import to.unified.unified_java_sdk.operations.UpdateCrmContact;
import to.unified.unified_java_sdk.operations.UpdateUcContact;
import to.unified.unified_java_sdk.utils.Headers;


public class Contact {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncContact asyncSDK;

    Contact(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncContact(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncContact async() {
        return asyncSDK;
    }

    /**
     * Create a contact
     * 
     * @return The call builder
     */
    public CreateAccountingContactRequestBuilder createAccountingContact() {
        return new CreateAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateAccountingContactResponse createAccountingContact(CreateAccountingContactRequest request) {
        RequestOperation<CreateAccountingContactRequest, CreateAccountingContactResponse> operation
              = new CreateAccountingContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a contact
     * 
     * @return The call builder
     */
    public CreateCrmContactRequestBuilder createCrmContact() {
        return new CreateCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateCrmContactResponse createCrmContact(CreateCrmContactRequest request) {
        RequestOperation<CreateCrmContactRequest, CreateCrmContactResponse> operation
              = new CreateCrmContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a contact
     * 
     * @return The call builder
     */
    public CreateUcContactRequestBuilder createUcContact() {
        return new CreateUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateUcContactResponse createUcContact(CreateUcContactRequest request) {
        RequestOperation<CreateUcContactRequest, CreateUcContactResponse> operation
              = new CreateUcContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a contact
     * 
     * @return The call builder
     */
    public GetAccountingContactRequestBuilder getAccountingContact() {
        return new GetAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetAccountingContactResponse getAccountingContact(GetAccountingContactRequest request) {
        RequestOperation<GetAccountingContactRequest, GetAccountingContactResponse> operation
              = new GetAccountingContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a contact
     * 
     * @return The call builder
     */
    public GetCrmContactRequestBuilder getCrmContact() {
        return new GetCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetCrmContactResponse getCrmContact(GetCrmContactRequest request) {
        RequestOperation<GetCrmContactRequest, GetCrmContactResponse> operation
              = new GetCrmContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a contact
     * 
     * @return The call builder
     */
    public GetUcContactRequestBuilder getUcContact() {
        return new GetUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetUcContactResponse getUcContact(GetUcContactRequest request) {
        RequestOperation<GetUcContactRequest, GetUcContactResponse> operation
              = new GetUcContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all contacts
     * 
     * @return The call builder
     */
    public ListAccountingContactsRequestBuilder listAccountingContacts() {
        return new ListAccountingContactsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListAccountingContactsResponse listAccountingContacts(ListAccountingContactsRequest request) {
        RequestOperation<ListAccountingContactsRequest, ListAccountingContactsResponse> operation
              = new ListAccountingContacts.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all contacts
     * 
     * @return The call builder
     */
    public ListCrmContactsRequestBuilder listCrmContacts() {
        return new ListCrmContactsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListCrmContactsResponse listCrmContacts(ListCrmContactsRequest request) {
        RequestOperation<ListCrmContactsRequest, ListCrmContactsResponse> operation
              = new ListCrmContacts.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all contacts
     * 
     * @return The call builder
     */
    public ListUcContactsRequestBuilder listUcContacts() {
        return new ListUcContactsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListUcContactsResponse listUcContacts(ListUcContactsRequest request) {
        RequestOperation<ListUcContactsRequest, ListUcContactsResponse> operation
              = new ListUcContacts.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public PatchAccountingContactRequestBuilder patchAccountingContact() {
        return new PatchAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public PatchAccountingContactResponse patchAccountingContact(PatchAccountingContactRequest request) {
        RequestOperation<PatchAccountingContactRequest, PatchAccountingContactResponse> operation
              = new PatchAccountingContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public PatchCrmContactRequestBuilder patchCrmContact() {
        return new PatchCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public PatchCrmContactResponse patchCrmContact(PatchCrmContactRequest request) {
        RequestOperation<PatchCrmContactRequest, PatchCrmContactResponse> operation
              = new PatchCrmContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public PatchUcContactRequestBuilder patchUcContact() {
        return new PatchUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public PatchUcContactResponse patchUcContact(PatchUcContactRequest request) {
        RequestOperation<PatchUcContactRequest, PatchUcContactResponse> operation
              = new PatchUcContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a contact
     * 
     * @return The call builder
     */
    public RemoveAccountingContactRequestBuilder removeAccountingContact() {
        return new RemoveAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RemoveAccountingContactResponse removeAccountingContact(RemoveAccountingContactRequest request) {
        RequestOperation<RemoveAccountingContactRequest, RemoveAccountingContactResponse> operation
              = new RemoveAccountingContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a contact
     * 
     * @return The call builder
     */
    public RemoveCrmContactRequestBuilder removeCrmContact() {
        return new RemoveCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RemoveCrmContactResponse removeCrmContact(RemoveCrmContactRequest request) {
        RequestOperation<RemoveCrmContactRequest, RemoveCrmContactResponse> operation
              = new RemoveCrmContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a contact
     * 
     * @return The call builder
     */
    public RemoveUcContactRequestBuilder removeUcContact() {
        return new RemoveUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RemoveUcContactResponse removeUcContact(RemoveUcContactRequest request) {
        RequestOperation<RemoveUcContactRequest, RemoveUcContactResponse> operation
              = new RemoveUcContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public UpdateAccountingContactRequestBuilder updateAccountingContact() {
        return new UpdateAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateAccountingContactResponse updateAccountingContact(UpdateAccountingContactRequest request) {
        RequestOperation<UpdateAccountingContactRequest, UpdateAccountingContactResponse> operation
              = new UpdateAccountingContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public UpdateCrmContactRequestBuilder updateCrmContact() {
        return new UpdateCrmContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateCrmContactResponse updateCrmContact(UpdateCrmContactRequest request) {
        RequestOperation<UpdateCrmContactRequest, UpdateCrmContactResponse> operation
              = new UpdateCrmContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a contact
     * 
     * @return The call builder
     */
    public UpdateUcContactRequestBuilder updateUcContact() {
        return new UpdateUcContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateUcContactResponse updateUcContact(UpdateUcContactRequest request) {
        RequestOperation<UpdateUcContactRequest, UpdateUcContactResponse> operation
              = new UpdateUcContact.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}

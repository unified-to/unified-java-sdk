/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import to.unified.unified_java_sdk.models.operations.CreateAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.GetAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.GetTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.ListAccountingCategoriesRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingCategoriesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListAccountingCategoriesResponse;
import to.unified.unified_java_sdk.models.operations.ListTicketingCategoriesRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingCategoriesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListTicketingCategoriesResponse;
import to.unified.unified_java_sdk.models.operations.PatchAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCategoryResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingCategory;
import to.unified.unified_java_sdk.operations.CreateTicketingCategory;
import to.unified.unified_java_sdk.operations.GetAccountingCategory;
import to.unified.unified_java_sdk.operations.GetTicketingCategory;
import to.unified.unified_java_sdk.operations.ListAccountingCategories;
import to.unified.unified_java_sdk.operations.ListTicketingCategories;
import to.unified.unified_java_sdk.operations.PatchAccountingCategory;
import to.unified.unified_java_sdk.operations.PatchTicketingCategory;
import to.unified.unified_java_sdk.operations.RemoveAccountingCategory;
import to.unified.unified_java_sdk.operations.RemoveTicketingCategory;
import to.unified.unified_java_sdk.operations.UpdateAccountingCategory;
import to.unified.unified_java_sdk.operations.UpdateTicketingCategory;
import to.unified.unified_java_sdk.utils.Headers;


public class Category {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncCategory asyncSDK;

    Category(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncCategory(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncCategory async() {
        return asyncSDK;
    }

    /**
     * Create a category
     * 
     * @return The call builder
     */
    public CreateAccountingCategoryRequestBuilder createAccountingCategory() {
        return new CreateAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAccountingCategoryResponse createAccountingCategory(CreateAccountingCategoryRequest request) throws Exception {
        RequestOperation<CreateAccountingCategoryRequest, CreateAccountingCategoryResponse> operation
              = new CreateAccountingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a category
     * 
     * @return The call builder
     */
    public CreateTicketingCategoryRequestBuilder createTicketingCategory() {
        return new CreateTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTicketingCategoryResponse createTicketingCategory(CreateTicketingCategoryRequest request) throws Exception {
        RequestOperation<CreateTicketingCategoryRequest, CreateTicketingCategoryResponse> operation
              = new CreateTicketingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a category
     * 
     * @return The call builder
     */
    public GetAccountingCategoryRequestBuilder getAccountingCategory() {
        return new GetAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAccountingCategoryResponse getAccountingCategory(GetAccountingCategoryRequest request) throws Exception {
        RequestOperation<GetAccountingCategoryRequest, GetAccountingCategoryResponse> operation
              = new GetAccountingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a category
     * 
     * @return The call builder
     */
    public GetTicketingCategoryRequestBuilder getTicketingCategory() {
        return new GetTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTicketingCategoryResponse getTicketingCategory(GetTicketingCategoryRequest request) throws Exception {
        RequestOperation<GetTicketingCategoryRequest, GetTicketingCategoryResponse> operation
              = new GetTicketingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all categories
     * 
     * @return The call builder
     */
    public ListAccountingCategoriesRequestBuilder listAccountingCategories() {
        return new ListAccountingCategoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAccountingCategoriesResponse listAccountingCategories(ListAccountingCategoriesRequest request) throws Exception {
        RequestOperation<ListAccountingCategoriesRequest, ListAccountingCategoriesResponse> operation
              = new ListAccountingCategories.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all categories
     * 
     * @return The call builder
     */
    public ListTicketingCategoriesRequestBuilder listTicketingCategories() {
        return new ListTicketingCategoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTicketingCategoriesResponse listTicketingCategories(ListTicketingCategoriesRequest request) throws Exception {
        RequestOperation<ListTicketingCategoriesRequest, ListTicketingCategoriesResponse> operation
              = new ListTicketingCategories.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a category
     * 
     * @return The call builder
     */
    public PatchAccountingCategoryRequestBuilder patchAccountingCategory() {
        return new PatchAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchAccountingCategoryResponse patchAccountingCategory(PatchAccountingCategoryRequest request) throws Exception {
        RequestOperation<PatchAccountingCategoryRequest, PatchAccountingCategoryResponse> operation
              = new PatchAccountingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a category
     * 
     * @return The call builder
     */
    public PatchTicketingCategoryRequestBuilder patchTicketingCategory() {
        return new PatchTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchTicketingCategoryResponse patchTicketingCategory(PatchTicketingCategoryRequest request) throws Exception {
        RequestOperation<PatchTicketingCategoryRequest, PatchTicketingCategoryResponse> operation
              = new PatchTicketingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a category
     * 
     * @return The call builder
     */
    public RemoveAccountingCategoryRequestBuilder removeAccountingCategory() {
        return new RemoveAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveAccountingCategoryResponse removeAccountingCategory(RemoveAccountingCategoryRequest request) throws Exception {
        RequestOperation<RemoveAccountingCategoryRequest, RemoveAccountingCategoryResponse> operation
              = new RemoveAccountingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a category
     * 
     * @return The call builder
     */
    public RemoveTicketingCategoryRequestBuilder removeTicketingCategory() {
        return new RemoveTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveTicketingCategoryResponse removeTicketingCategory(RemoveTicketingCategoryRequest request) throws Exception {
        RequestOperation<RemoveTicketingCategoryRequest, RemoveTicketingCategoryResponse> operation
              = new RemoveTicketingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a category
     * 
     * @return The call builder
     */
    public UpdateAccountingCategoryRequestBuilder updateAccountingCategory() {
        return new UpdateAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateAccountingCategoryResponse updateAccountingCategory(UpdateAccountingCategoryRequest request) throws Exception {
        RequestOperation<UpdateAccountingCategoryRequest, UpdateAccountingCategoryResponse> operation
              = new UpdateAccountingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a category
     * 
     * @return The call builder
     */
    public UpdateTicketingCategoryRequestBuilder updateTicketingCategory() {
        return new UpdateTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTicketingCategoryResponse updateTicketingCategory(UpdateTicketingCategoryRequest request) throws Exception {
        RequestOperation<UpdateTicketingCategoryRequest, UpdateTicketingCategoryResponse> operation
              = new UpdateTicketingCategory.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}

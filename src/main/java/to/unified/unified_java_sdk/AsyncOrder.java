/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingOrdersRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingOrdersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingOrdersResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingOrderResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingOrder;
import to.unified.unified_java_sdk.operations.GetAccountingOrder;
import to.unified.unified_java_sdk.operations.ListAccountingOrders;
import to.unified.unified_java_sdk.operations.PatchAccountingOrder;
import to.unified.unified_java_sdk.operations.RemoveAccountingOrder;
import to.unified.unified_java_sdk.operations.UpdateAccountingOrder;


public class AsyncOrder {
    private final SDKConfiguration sdkConfiguration;
    private final Order syncSDK;

    AsyncOrder(Order syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Order sync() {
        return syncSDK;
    }


    /**
     * Create an order
     * 
     * @return The async call builder
     */
    public CreateAccountingOrderRequestBuilder createAccountingOrder() {
        return new CreateAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingOrderResponse> createAccountingOrder(CreateAccountingOrderRequest request) {
        AsyncRequestOperation<CreateAccountingOrderRequest, CreateAccountingOrderResponse> operation
              = new CreateAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an order
     * 
     * @return The async call builder
     */
    public GetAccountingOrderRequestBuilder getAccountingOrder() {
        return new GetAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingOrderResponse> getAccountingOrder(GetAccountingOrderRequest request) {
        AsyncRequestOperation<GetAccountingOrderRequest, GetAccountingOrderResponse> operation
              = new GetAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all orders
     * 
     * @return The async call builder
     */
    public ListAccountingOrdersRequestBuilder listAccountingOrders() {
        return new ListAccountingOrdersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingOrdersResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingOrdersResponse> listAccountingOrders(ListAccountingOrdersRequest request) {
        AsyncRequestOperation<ListAccountingOrdersRequest, ListAccountingOrdersResponse> operation
              = new ListAccountingOrders.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an order
     * 
     * @return The async call builder
     */
    public PatchAccountingOrderRequestBuilder patchAccountingOrder() {
        return new PatchAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingOrderResponse> patchAccountingOrder(PatchAccountingOrderRequest request) {
        AsyncRequestOperation<PatchAccountingOrderRequest, PatchAccountingOrderResponse> operation
              = new PatchAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an order
     * 
     * @return The async call builder
     */
    public RemoveAccountingOrderRequestBuilder removeAccountingOrder() {
        return new RemoveAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingOrderResponse> removeAccountingOrder(RemoveAccountingOrderRequest request) {
        AsyncRequestOperation<RemoveAccountingOrderRequest, RemoveAccountingOrderResponse> operation
              = new RemoveAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an order
     * 
     * @return The async call builder
     */
    public UpdateAccountingOrderRequestBuilder updateAccountingOrder() {
        return new UpdateAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingOrderResponse> updateAccountingOrder(UpdateAccountingOrderRequest request) {
        AsyncRequestOperation<UpdateAccountingOrderRequest, UpdateAccountingOrderResponse> operation
              = new UpdateAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

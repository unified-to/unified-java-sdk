/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingPurchaseordersRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingPurchaseordersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingPurchaseordersResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingPurchaseorder;
import to.unified.unified_java_sdk.operations.GetAccountingPurchaseorder;
import to.unified.unified_java_sdk.operations.ListAccountingPurchaseorders;
import to.unified.unified_java_sdk.operations.PatchAccountingPurchaseorder;
import to.unified.unified_java_sdk.operations.RemoveAccountingPurchaseorder;
import to.unified.unified_java_sdk.operations.UpdateAccountingPurchaseorder;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncPurchaseorder {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Purchaseorder syncSDK;

    AsyncPurchaseorder(Purchaseorder syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Purchaseorder sync() {
        return syncSDK;
    }


    /**
     * Create a purchaseorder
     * 
     * @return The async call builder
     */
    public CreateAccountingPurchaseorderRequestBuilder createAccountingPurchaseorder() {
        return new CreateAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingPurchaseorderResponse> createAccountingPurchaseorder(CreateAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<CreateAccountingPurchaseorderRequest, CreateAccountingPurchaseorderResponse> operation
              = new CreateAccountingPurchaseorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a purchaseorder
     * 
     * @return The async call builder
     */
    public GetAccountingPurchaseorderRequestBuilder getAccountingPurchaseorder() {
        return new GetAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingPurchaseorderResponse> getAccountingPurchaseorder(GetAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<GetAccountingPurchaseorderRequest, GetAccountingPurchaseorderResponse> operation
              = new GetAccountingPurchaseorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all purchaseorders
     * 
     * @return The async call builder
     */
    public ListAccountingPurchaseordersRequestBuilder listAccountingPurchaseorders() {
        return new ListAccountingPurchaseordersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all purchaseorders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingPurchaseordersResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingPurchaseordersResponse> listAccountingPurchaseorders(ListAccountingPurchaseordersRequest request) {
        AsyncRequestOperation<ListAccountingPurchaseordersRequest, ListAccountingPurchaseordersResponse> operation
              = new ListAccountingPurchaseorders.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a purchaseorder
     * 
     * @return The async call builder
     */
    public PatchAccountingPurchaseorderRequestBuilder patchAccountingPurchaseorder() {
        return new PatchAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingPurchaseorderResponse> patchAccountingPurchaseorder(PatchAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<PatchAccountingPurchaseorderRequest, PatchAccountingPurchaseorderResponse> operation
              = new PatchAccountingPurchaseorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a purchaseorder
     * 
     * @return The async call builder
     */
    public RemoveAccountingPurchaseorderRequestBuilder removeAccountingPurchaseorder() {
        return new RemoveAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingPurchaseorderResponse> removeAccountingPurchaseorder(RemoveAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<RemoveAccountingPurchaseorderRequest, RemoveAccountingPurchaseorderResponse> operation
              = new RemoveAccountingPurchaseorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a purchaseorder
     * 
     * @return The async call builder
     */
    public UpdateAccountingPurchaseorderRequestBuilder updateAccountingPurchaseorder() {
        return new UpdateAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingPurchaseorderResponse> updateAccountingPurchaseorder(UpdateAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<UpdateAccountingPurchaseorderRequest, UpdateAccountingPurchaseorderResponse> operation
              = new UpdateAccountingPurchaseorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

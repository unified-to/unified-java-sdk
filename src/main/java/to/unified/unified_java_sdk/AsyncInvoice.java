/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingInvoicesRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingInvoiceResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingInvoiceResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingInvoicesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingInvoicesResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingInvoiceResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingInvoiceResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingInvoiceResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingInvoice;
import to.unified.unified_java_sdk.operations.GetAccountingInvoice;
import to.unified.unified_java_sdk.operations.ListAccountingInvoices;
import to.unified.unified_java_sdk.operations.PatchAccountingInvoice;
import to.unified.unified_java_sdk.operations.RemoveAccountingInvoice;
import to.unified.unified_java_sdk.operations.UpdateAccountingInvoice;


public class AsyncInvoice {
    private final SDKConfiguration sdkConfiguration;
    private final Invoice syncSDK;

    AsyncInvoice(Invoice syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Invoice sync() {
        return syncSDK;
    }


    /**
     * Create an invoice
     * 
     * @return The async call builder
     */
    public CreateAccountingInvoiceRequestBuilder createAccountingInvoice() {
        return new CreateAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingInvoiceResponse> createAccountingInvoice(CreateAccountingInvoiceRequest request) {
        AsyncRequestOperation<CreateAccountingInvoiceRequest, CreateAccountingInvoiceResponse> operation
              = new CreateAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an invoice
     * 
     * @return The async call builder
     */
    public GetAccountingInvoiceRequestBuilder getAccountingInvoice() {
        return new GetAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingInvoiceResponse> getAccountingInvoice(GetAccountingInvoiceRequest request) {
        AsyncRequestOperation<GetAccountingInvoiceRequest, GetAccountingInvoiceResponse> operation
              = new GetAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all invoices
     * 
     * @return The async call builder
     */
    public ListAccountingInvoicesRequestBuilder listAccountingInvoices() {
        return new ListAccountingInvoicesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all invoices
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingInvoicesResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingInvoicesResponse> listAccountingInvoices(ListAccountingInvoicesRequest request) {
        AsyncRequestOperation<ListAccountingInvoicesRequest, ListAccountingInvoicesResponse> operation
              = new ListAccountingInvoices.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an invoice
     * 
     * @return The async call builder
     */
    public PatchAccountingInvoiceRequestBuilder patchAccountingInvoice() {
        return new PatchAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingInvoiceResponse> patchAccountingInvoice(PatchAccountingInvoiceRequest request) {
        AsyncRequestOperation<PatchAccountingInvoiceRequest, PatchAccountingInvoiceResponse> operation
              = new PatchAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an invoice
     * 
     * @return The async call builder
     */
    public RemoveAccountingInvoiceRequestBuilder removeAccountingInvoice() {
        return new RemoveAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingInvoiceResponse> removeAccountingInvoice(RemoveAccountingInvoiceRequest request) {
        AsyncRequestOperation<RemoveAccountingInvoiceRequest, RemoveAccountingInvoiceResponse> operation
              = new RemoveAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an invoice
     * 
     * @return The async call builder
     */
    public UpdateAccountingInvoiceRequestBuilder updateAccountingInvoice() {
        return new UpdateAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingInvoiceResponse> updateAccountingInvoice(UpdateAccountingInvoiceRequest request) {
        AsyncRequestOperation<UpdateAccountingInvoiceRequest, UpdateAccountingInvoiceResponse> operation
              = new UpdateAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

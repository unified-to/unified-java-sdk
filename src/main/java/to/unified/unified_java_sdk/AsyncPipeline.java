/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateCrmPipelineRequest;
import to.unified.unified_java_sdk.models.operations.GetCrmPipelineRequest;
import to.unified.unified_java_sdk.models.operations.ListCrmPipelinesRequest;
import to.unified.unified_java_sdk.models.operations.PatchCrmPipelineRequest;
import to.unified.unified_java_sdk.models.operations.RemoveCrmPipelineRequest;
import to.unified.unified_java_sdk.models.operations.UpdateCrmPipelineRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateCrmPipelineRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateCrmPipelineResponse;
import to.unified.unified_java_sdk.models.operations.async.GetCrmPipelineRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetCrmPipelineResponse;
import to.unified.unified_java_sdk.models.operations.async.ListCrmPipelinesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListCrmPipelinesResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchCrmPipelineRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchCrmPipelineResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveCrmPipelineRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveCrmPipelineResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateCrmPipelineRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateCrmPipelineResponse;
import to.unified.unified_java_sdk.operations.CreateCrmPipeline;
import to.unified.unified_java_sdk.operations.GetCrmPipeline;
import to.unified.unified_java_sdk.operations.ListCrmPipelines;
import to.unified.unified_java_sdk.operations.PatchCrmPipeline;
import to.unified.unified_java_sdk.operations.RemoveCrmPipeline;
import to.unified.unified_java_sdk.operations.UpdateCrmPipeline;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncPipeline {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Pipeline syncSDK;

    AsyncPipeline(Pipeline syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Pipeline sync() {
        return syncSDK;
    }


    /**
     * Create a pipeline
     * 
     * @return The async call builder
     */
    public CreateCrmPipelineRequestBuilder createCrmPipeline() {
        return new CreateCrmPipelineRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateCrmPipelineResponse&gt; - The async response
     */
    public CompletableFuture<CreateCrmPipelineResponse> createCrmPipeline(CreateCrmPipelineRequest request) {
        AsyncRequestOperation<CreateCrmPipelineRequest, CreateCrmPipelineResponse> operation
              = new CreateCrmPipeline.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a pipeline
     * 
     * @return The async call builder
     */
    public GetCrmPipelineRequestBuilder getCrmPipeline() {
        return new GetCrmPipelineRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetCrmPipelineResponse&gt; - The async response
     */
    public CompletableFuture<GetCrmPipelineResponse> getCrmPipeline(GetCrmPipelineRequest request) {
        AsyncRequestOperation<GetCrmPipelineRequest, GetCrmPipelineResponse> operation
              = new GetCrmPipeline.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all pipelines
     * 
     * @return The async call builder
     */
    public ListCrmPipelinesRequestBuilder listCrmPipelines() {
        return new ListCrmPipelinesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all pipelines
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListCrmPipelinesResponse&gt; - The async response
     */
    public CompletableFuture<ListCrmPipelinesResponse> listCrmPipelines(ListCrmPipelinesRequest request) {
        AsyncRequestOperation<ListCrmPipelinesRequest, ListCrmPipelinesResponse> operation
              = new ListCrmPipelines.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a pipeline
     * 
     * @return The async call builder
     */
    public PatchCrmPipelineRequestBuilder patchCrmPipeline() {
        return new PatchCrmPipelineRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchCrmPipelineResponse&gt; - The async response
     */
    public CompletableFuture<PatchCrmPipelineResponse> patchCrmPipeline(PatchCrmPipelineRequest request) {
        AsyncRequestOperation<PatchCrmPipelineRequest, PatchCrmPipelineResponse> operation
              = new PatchCrmPipeline.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a pipeline
     * 
     * @return The async call builder
     */
    public RemoveCrmPipelineRequestBuilder removeCrmPipeline() {
        return new RemoveCrmPipelineRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveCrmPipelineResponse&gt; - The async response
     */
    public CompletableFuture<RemoveCrmPipelineResponse> removeCrmPipeline(RemoveCrmPipelineRequest request) {
        AsyncRequestOperation<RemoveCrmPipelineRequest, RemoveCrmPipelineResponse> operation
              = new RemoveCrmPipeline.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a pipeline
     * 
     * @return The async call builder
     */
    public UpdateCrmPipelineRequestBuilder updateCrmPipeline() {
        return new UpdateCrmPipelineRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a pipeline
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateCrmPipelineResponse&gt; - The async response
     */
    public CompletableFuture<UpdateCrmPipelineResponse> updateCrmPipeline(UpdateCrmPipelineRequest request) {
        AsyncRequestOperation<UpdateCrmPipelineRequest, UpdateCrmPipelineResponse> operation
              = new UpdateCrmPipeline.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

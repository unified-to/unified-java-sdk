/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingCategoriesRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingCategoriesRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingCategoriesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingCategoriesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingCategoriesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingCategoriesResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingCategoryResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingCategory;
import to.unified.unified_java_sdk.operations.CreateTicketingCategory;
import to.unified.unified_java_sdk.operations.GetAccountingCategory;
import to.unified.unified_java_sdk.operations.GetTicketingCategory;
import to.unified.unified_java_sdk.operations.ListAccountingCategories;
import to.unified.unified_java_sdk.operations.ListTicketingCategories;
import to.unified.unified_java_sdk.operations.PatchAccountingCategory;
import to.unified.unified_java_sdk.operations.PatchTicketingCategory;
import to.unified.unified_java_sdk.operations.RemoveAccountingCategory;
import to.unified.unified_java_sdk.operations.RemoveTicketingCategory;
import to.unified.unified_java_sdk.operations.UpdateAccountingCategory;
import to.unified.unified_java_sdk.operations.UpdateTicketingCategory;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncCategory {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Category syncSDK;

    AsyncCategory(Category syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Category sync() {
        return syncSDK;
    }


    /**
     * Create a category
     * 
     * @return The async call builder
     */
    public CreateAccountingCategoryRequestBuilder createAccountingCategory() {
        return new CreateAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingCategoryResponse> createAccountingCategory(CreateAccountingCategoryRequest request) {
        AsyncRequestOperation<CreateAccountingCategoryRequest, CreateAccountingCategoryResponse> operation
              = new CreateAccountingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a category
     * 
     * @return The async call builder
     */
    public CreateTicketingCategoryRequestBuilder createTicketingCategory() {
        return new CreateTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<CreateTicketingCategoryResponse> createTicketingCategory(CreateTicketingCategoryRequest request) {
        AsyncRequestOperation<CreateTicketingCategoryRequest, CreateTicketingCategoryResponse> operation
              = new CreateTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a category
     * 
     * @return The async call builder
     */
    public GetAccountingCategoryRequestBuilder getAccountingCategory() {
        return new GetAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingCategoryResponse> getAccountingCategory(GetAccountingCategoryRequest request) {
        AsyncRequestOperation<GetAccountingCategoryRequest, GetAccountingCategoryResponse> operation
              = new GetAccountingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a category
     * 
     * @return The async call builder
     */
    public GetTicketingCategoryRequestBuilder getTicketingCategory() {
        return new GetTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<GetTicketingCategoryResponse> getTicketingCategory(GetTicketingCategoryRequest request) {
        AsyncRequestOperation<GetTicketingCategoryRequest, GetTicketingCategoryResponse> operation
              = new GetTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all categories
     * 
     * @return The async call builder
     */
    public ListAccountingCategoriesRequestBuilder listAccountingCategories() {
        return new ListAccountingCategoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingCategoriesResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingCategoriesResponse> listAccountingCategories(ListAccountingCategoriesRequest request) {
        AsyncRequestOperation<ListAccountingCategoriesRequest, ListAccountingCategoriesResponse> operation
              = new ListAccountingCategories.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all categories
     * 
     * @return The async call builder
     */
    public ListTicketingCategoriesRequestBuilder listTicketingCategories() {
        return new ListTicketingCategoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTicketingCategoriesResponse&gt; - The async response
     */
    public CompletableFuture<ListTicketingCategoriesResponse> listTicketingCategories(ListTicketingCategoriesRequest request) {
        AsyncRequestOperation<ListTicketingCategoriesRequest, ListTicketingCategoriesResponse> operation
              = new ListTicketingCategories.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a category
     * 
     * @return The async call builder
     */
    public PatchAccountingCategoryRequestBuilder patchAccountingCategory() {
        return new PatchAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingCategoryResponse> patchAccountingCategory(PatchAccountingCategoryRequest request) {
        AsyncRequestOperation<PatchAccountingCategoryRequest, PatchAccountingCategoryResponse> operation
              = new PatchAccountingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a category
     * 
     * @return The async call builder
     */
    public PatchTicketingCategoryRequestBuilder patchTicketingCategory() {
        return new PatchTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<PatchTicketingCategoryResponse> patchTicketingCategory(PatchTicketingCategoryRequest request) {
        AsyncRequestOperation<PatchTicketingCategoryRequest, PatchTicketingCategoryResponse> operation
              = new PatchTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a category
     * 
     * @return The async call builder
     */
    public RemoveAccountingCategoryRequestBuilder removeAccountingCategory() {
        return new RemoveAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingCategoryResponse> removeAccountingCategory(RemoveAccountingCategoryRequest request) {
        AsyncRequestOperation<RemoveAccountingCategoryRequest, RemoveAccountingCategoryResponse> operation
              = new RemoveAccountingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a category
     * 
     * @return The async call builder
     */
    public RemoveTicketingCategoryRequestBuilder removeTicketingCategory() {
        return new RemoveTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<RemoveTicketingCategoryResponse> removeTicketingCategory(RemoveTicketingCategoryRequest request) {
        AsyncRequestOperation<RemoveTicketingCategoryRequest, RemoveTicketingCategoryResponse> operation
              = new RemoveTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a category
     * 
     * @return The async call builder
     */
    public UpdateAccountingCategoryRequestBuilder updateAccountingCategory() {
        return new UpdateAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingCategoryResponse> updateAccountingCategory(UpdateAccountingCategoryRequest request) {
        AsyncRequestOperation<UpdateAccountingCategoryRequest, UpdateAccountingCategoryResponse> operation
              = new UpdateAccountingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a category
     * 
     * @return The async call builder
     */
    public UpdateTicketingCategoryRequestBuilder updateTicketingCategory() {
        return new UpdateTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTicketingCategoryResponse> updateTicketingCategory(UpdateTicketingCategoryRequest request) {
        AsyncRequestOperation<UpdateTicketingCategoryRequest, UpdateTicketingCategoryResponse> operation
              = new UpdateTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

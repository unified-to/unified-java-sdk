/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import to.unified.unified_java_sdk.models.operations.CreateHrisDeviceRequest;
import to.unified.unified_java_sdk.models.operations.CreateHrisDeviceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateHrisDeviceResponse;
import to.unified.unified_java_sdk.models.operations.GetHrisDeviceRequest;
import to.unified.unified_java_sdk.models.operations.GetHrisDeviceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetHrisDeviceResponse;
import to.unified.unified_java_sdk.models.operations.ListHrisDevicesRequest;
import to.unified.unified_java_sdk.models.operations.ListHrisDevicesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListHrisDevicesResponse;
import to.unified.unified_java_sdk.models.operations.PatchHrisDeviceRequest;
import to.unified.unified_java_sdk.models.operations.PatchHrisDeviceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchHrisDeviceResponse;
import to.unified.unified_java_sdk.models.operations.RemoveHrisDeviceRequest;
import to.unified.unified_java_sdk.models.operations.RemoveHrisDeviceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveHrisDeviceResponse;
import to.unified.unified_java_sdk.models.operations.UpdateHrisDeviceRequest;
import to.unified.unified_java_sdk.models.operations.UpdateHrisDeviceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateHrisDeviceResponse;
import to.unified.unified_java_sdk.operations.CreateHrisDevice;
import to.unified.unified_java_sdk.operations.GetHrisDevice;
import to.unified.unified_java_sdk.operations.ListHrisDevices;
import to.unified.unified_java_sdk.operations.PatchHrisDevice;
import to.unified.unified_java_sdk.operations.RemoveHrisDevice;
import to.unified.unified_java_sdk.operations.UpdateHrisDevice;
import to.unified.unified_java_sdk.utils.Headers;


public class Device {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncDevice asyncSDK;

    Device(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncDevice(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncDevice async() {
        return asyncSDK;
    }

    /**
     * Create a device
     * 
     * @return The call builder
     */
    public CreateHrisDeviceRequestBuilder createHrisDevice() {
        return new CreateHrisDeviceRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a device
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateHrisDeviceResponse createHrisDevice(CreateHrisDeviceRequest request) {
        RequestOperation<CreateHrisDeviceRequest, CreateHrisDeviceResponse> operation
              = new CreateHrisDevice.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a device
     * 
     * @return The call builder
     */
    public GetHrisDeviceRequestBuilder getHrisDevice() {
        return new GetHrisDeviceRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a device
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetHrisDeviceResponse getHrisDevice(GetHrisDeviceRequest request) {
        RequestOperation<GetHrisDeviceRequest, GetHrisDeviceResponse> operation
              = new GetHrisDevice.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all devices
     * 
     * @return The call builder
     */
    public ListHrisDevicesRequestBuilder listHrisDevices() {
        return new ListHrisDevicesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all devices
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListHrisDevicesResponse listHrisDevices(ListHrisDevicesRequest request) {
        RequestOperation<ListHrisDevicesRequest, ListHrisDevicesResponse> operation
              = new ListHrisDevices.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a device
     * 
     * @return The call builder
     */
    public PatchHrisDeviceRequestBuilder patchHrisDevice() {
        return new PatchHrisDeviceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a device
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public PatchHrisDeviceResponse patchHrisDevice(PatchHrisDeviceRequest request) {
        RequestOperation<PatchHrisDeviceRequest, PatchHrisDeviceResponse> operation
              = new PatchHrisDevice.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a device
     * 
     * @return The call builder
     */
    public RemoveHrisDeviceRequestBuilder removeHrisDevice() {
        return new RemoveHrisDeviceRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a device
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RemoveHrisDeviceResponse removeHrisDevice(RemoveHrisDeviceRequest request) {
        RequestOperation<RemoveHrisDeviceRequest, RemoveHrisDeviceResponse> operation
              = new RemoveHrisDevice.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a device
     * 
     * @return The call builder
     */
    public UpdateHrisDeviceRequestBuilder updateHrisDevice() {
        return new UpdateHrisDeviceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a device
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateHrisDeviceResponse updateHrisDevice(UpdateHrisDeviceRequest request) {
        RequestOperation<UpdateHrisDeviceRequest, UpdateHrisDeviceResponse> operation
              = new UpdateHrisDevice.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}

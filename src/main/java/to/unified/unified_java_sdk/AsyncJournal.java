/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingJournalsRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingJournalResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingJournalResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingJournalsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingJournalsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingJournalResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingJournalResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingJournalResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingJournal;
import to.unified.unified_java_sdk.operations.GetAccountingJournal;
import to.unified.unified_java_sdk.operations.ListAccountingJournals;
import to.unified.unified_java_sdk.operations.PatchAccountingJournal;
import to.unified.unified_java_sdk.operations.RemoveAccountingJournal;
import to.unified.unified_java_sdk.operations.UpdateAccountingJournal;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncJournal {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Journal syncSDK;

    AsyncJournal(Journal syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Journal sync() {
        return syncSDK;
    }


    /**
     * Create a journal
     * 
     * @return The async call builder
     */
    public CreateAccountingJournalRequestBuilder createAccountingJournal() {
        return new CreateAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingJournalResponse> createAccountingJournal(CreateAccountingJournalRequest request) {
        AsyncRequestOperation<CreateAccountingJournalRequest, CreateAccountingJournalResponse> operation
              = new CreateAccountingJournal.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a journal
     * 
     * @return The async call builder
     */
    public GetAccountingJournalRequestBuilder getAccountingJournal() {
        return new GetAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingJournalResponse> getAccountingJournal(GetAccountingJournalRequest request) {
        AsyncRequestOperation<GetAccountingJournalRequest, GetAccountingJournalResponse> operation
              = new GetAccountingJournal.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all journals
     * 
     * @return The async call builder
     */
    public ListAccountingJournalsRequestBuilder listAccountingJournals() {
        return new ListAccountingJournalsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all journals
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingJournalsResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingJournalsResponse> listAccountingJournals(ListAccountingJournalsRequest request) {
        AsyncRequestOperation<ListAccountingJournalsRequest, ListAccountingJournalsResponse> operation
              = new ListAccountingJournals.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a journal
     * 
     * @return The async call builder
     */
    public PatchAccountingJournalRequestBuilder patchAccountingJournal() {
        return new PatchAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingJournalResponse> patchAccountingJournal(PatchAccountingJournalRequest request) {
        AsyncRequestOperation<PatchAccountingJournalRequest, PatchAccountingJournalResponse> operation
              = new PatchAccountingJournal.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a journal
     * 
     * @return The async call builder
     */
    public RemoveAccountingJournalRequestBuilder removeAccountingJournal() {
        return new RemoveAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingJournalResponse> removeAccountingJournal(RemoveAccountingJournalRequest request) {
        AsyncRequestOperation<RemoveAccountingJournalRequest, RemoveAccountingJournalResponse> operation
              = new RemoveAccountingJournal.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a journal
     * 
     * @return The async call builder
     */
    public UpdateAccountingJournalRequestBuilder updateAccountingJournal() {
        return new UpdateAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingJournalResponse> updateAccountingJournal(UpdateAccountingJournalRequest request) {
        AsyncRequestOperation<UpdateAccountingJournalRequest, UpdateAccountingJournalResponse> operation
              = new UpdateAccountingJournal.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

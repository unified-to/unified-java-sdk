/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationAuthRequest;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationLoginRequest;
import to.unified.unified_java_sdk.models.operations.async.GetUnifiedIntegrationAuthRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetUnifiedIntegrationAuthResponse;
import to.unified.unified_java_sdk.models.operations.async.GetUnifiedIntegrationLoginRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetUnifiedIntegrationLoginResponse;
import to.unified.unified_java_sdk.operations.GetUnifiedIntegrationAuth;
import to.unified.unified_java_sdk.operations.GetUnifiedIntegrationLogin;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncAuth {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Auth syncSDK;

    AsyncAuth(Auth syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Auth sync() {
        return syncSDK;
    }


    /**
     * Authorize new connection
     * 
     * <p>Returns an authorization URL for the specified integration. Once a successful authorization occurs,
     * a new connection is created.
     * 
     * @return The async call builder
     */
    public GetUnifiedIntegrationAuthRequestBuilder getUnifiedIntegrationAuth() {
        return new GetUnifiedIntegrationAuthRequestBuilder(sdkConfiguration);
    }

    /**
     * Authorize new connection
     * 
     * <p>Returns an authorization URL for the specified integration. Once a successful authorization occurs,
     * a new connection is created.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetUnifiedIntegrationAuthResponse>} - The async response
     */
    public CompletableFuture<GetUnifiedIntegrationAuthResponse> getUnifiedIntegrationAuth(GetUnifiedIntegrationAuthRequest request) {
        AsyncRequestOperation<GetUnifiedIntegrationAuthRequest, GetUnifiedIntegrationAuthResponse> operation
              = new GetUnifiedIntegrationAuth.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Sign in a user
     * 
     * <p>Returns an authentication URL for the specified integration. Once a successful authentication
     * occurs, the name and email are returned inside a jwt parameter, which is a JSON web token that is
     * base-64 encoded.
     * 
     * @return The async call builder
     */
    public GetUnifiedIntegrationLoginRequestBuilder getUnifiedIntegrationLogin() {
        return new GetUnifiedIntegrationLoginRequestBuilder(sdkConfiguration);
    }

    /**
     * Sign in a user
     * 
     * <p>Returns an authentication URL for the specified integration. Once a successful authentication
     * occurs, the name and email are returned inside a jwt parameter, which is a JSON web token that is
     * base-64 encoded.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetUnifiedIntegrationLoginResponse>} - The async response
     */
    public CompletableFuture<GetUnifiedIntegrationLoginResponse> getUnifiedIntegrationLogin(GetUnifiedIntegrationLoginRequest request) {
        AsyncRequestOperation<GetUnifiedIntegrationLoginRequest, GetUnifiedIntegrationLoginResponse> operation
              = new GetUnifiedIntegrationLogin.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

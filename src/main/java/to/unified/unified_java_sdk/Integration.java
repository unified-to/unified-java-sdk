/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationAuthRequest;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationAuthRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationAuthResponse;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationWorkspacesRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationWorkspacesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationWorkspacesResponse;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationsRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationsResponse;
import to.unified.unified_java_sdk.operations.GetUnifiedIntegrationAuth;
import to.unified.unified_java_sdk.operations.ListUnifiedIntegrationWorkspaces;
import to.unified.unified_java_sdk.operations.ListUnifiedIntegrations;
import to.unified.unified_java_sdk.utils.Headers;


public class Integration {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncIntegration asyncSDK;

    Integration(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncIntegration(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncIntegration async() {
        return asyncSDK;
    }

    /**
     * Authorize new connection
     * 
     * <p>Returns an authorization URL for the specified integration.  Once a successful authorization occurs, a new connection is created.
     * 
     * @return The call builder
     */
    public GetUnifiedIntegrationAuthRequestBuilder getUnifiedIntegrationAuth() {
        return new GetUnifiedIntegrationAuthRequestBuilder(sdkConfiguration);
    }

    /**
     * Authorize new connection
     * 
     * <p>Returns an authorization URL for the specified integration.  Once a successful authorization occurs, a new connection is created.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUnifiedIntegrationAuthResponse getUnifiedIntegrationAuth(GetUnifiedIntegrationAuthRequest request) throws Exception {
        RequestOperation<GetUnifiedIntegrationAuthRequest, GetUnifiedIntegrationAuthResponse> operation
              = new GetUnifiedIntegrationAuth.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns all activated integrations in a workspace
     * 
     * <p>No authentication required as this is to be used by front-end interface
     * 
     * @return The call builder
     */
    public ListUnifiedIntegrationWorkspacesRequestBuilder listUnifiedIntegrationWorkspaces() {
        return new ListUnifiedIntegrationWorkspacesRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns all activated integrations in a workspace
     * 
     * <p>No authentication required as this is to be used by front-end interface
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUnifiedIntegrationWorkspacesResponse listUnifiedIntegrationWorkspaces(ListUnifiedIntegrationWorkspacesRequest request) throws Exception {
        RequestOperation<ListUnifiedIntegrationWorkspacesRequest, ListUnifiedIntegrationWorkspacesResponse> operation
              = new ListUnifiedIntegrationWorkspaces.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns all integrations
     * 
     * @return The call builder
     */
    public ListUnifiedIntegrationsRequestBuilder listUnifiedIntegrations() {
        return new ListUnifiedIntegrationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns all integrations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUnifiedIntegrationsResponse listUnifiedIntegrations(ListUnifiedIntegrationsRequest request) throws Exception {
        RequestOperation<ListUnifiedIntegrationsRequest, ListUnifiedIntegrationsResponse> operation
              = new ListUnifiedIntegrations.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}

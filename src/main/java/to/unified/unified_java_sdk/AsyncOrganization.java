/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingOrganizationsRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoOrganizationsRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.GetRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingOrganizationsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingOrganizationsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListRepoOrganizationsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListRepoOrganizationsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoOrganizationResponse;
import to.unified.unified_java_sdk.operations.CreateRepoOrganization;
import to.unified.unified_java_sdk.operations.GetAccountingOrganization;
import to.unified.unified_java_sdk.operations.GetRepoOrganization;
import to.unified.unified_java_sdk.operations.ListAccountingOrganizations;
import to.unified.unified_java_sdk.operations.ListRepoOrganizations;
import to.unified.unified_java_sdk.operations.PatchRepoOrganization;
import to.unified.unified_java_sdk.operations.RemoveRepoOrganization;
import to.unified.unified_java_sdk.operations.UpdateRepoOrganization;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncOrganization {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Organization syncSDK;

    AsyncOrganization(Organization syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Organization sync() {
        return syncSDK;
    }


    /**
     * Create an organization
     * 
     * @return The async call builder
     */
    public CreateRepoOrganizationRequestBuilder createRepoOrganization() {
        return new CreateRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<CreateRepoOrganizationResponse> createRepoOrganization(CreateRepoOrganizationRequest request) {
        AsyncRequestOperation<CreateRepoOrganizationRequest, CreateRepoOrganizationResponse> operation
              = new CreateRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an organization
     * 
     * @return The async call builder
     */
    public GetAccountingOrganizationRequestBuilder getAccountingOrganization() {
        return new GetAccountingOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetAccountingOrganizationResponse>} - The async response
     */
    public CompletableFuture<GetAccountingOrganizationResponse> getAccountingOrganization(GetAccountingOrganizationRequest request) {
        AsyncRequestOperation<GetAccountingOrganizationRequest, GetAccountingOrganizationResponse> operation
              = new GetAccountingOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an organization
     * 
     * @return The async call builder
     */
    public GetRepoOrganizationRequestBuilder getRepoOrganization() {
        return new GetRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<GetRepoOrganizationResponse> getRepoOrganization(GetRepoOrganizationRequest request) {
        AsyncRequestOperation<GetRepoOrganizationRequest, GetRepoOrganizationResponse> operation
              = new GetRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all organizations
     * 
     * @return The async call builder
     */
    public ListAccountingOrganizationsRequestBuilder listAccountingOrganizations() {
        return new ListAccountingOrganizationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all organizations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListAccountingOrganizationsResponse>} - The async response
     */
    public CompletableFuture<ListAccountingOrganizationsResponse> listAccountingOrganizations(ListAccountingOrganizationsRequest request) {
        AsyncRequestOperation<ListAccountingOrganizationsRequest, ListAccountingOrganizationsResponse> operation
              = new ListAccountingOrganizations.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all organizations
     * 
     * @return The async call builder
     */
    public ListRepoOrganizationsRequestBuilder listRepoOrganizations() {
        return new ListRepoOrganizationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all organizations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListRepoOrganizationsResponse>} - The async response
     */
    public CompletableFuture<ListRepoOrganizationsResponse> listRepoOrganizations(ListRepoOrganizationsRequest request) {
        AsyncRequestOperation<ListRepoOrganizationsRequest, ListRepoOrganizationsResponse> operation
              = new ListRepoOrganizations.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an organization
     * 
     * @return The async call builder
     */
    public PatchRepoOrganizationRequestBuilder patchRepoOrganization() {
        return new PatchRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<PatchRepoOrganizationResponse> patchRepoOrganization(PatchRepoOrganizationRequest request) {
        AsyncRequestOperation<PatchRepoOrganizationRequest, PatchRepoOrganizationResponse> operation
              = new PatchRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an organization
     * 
     * @return The async call builder
     */
    public RemoveRepoOrganizationRequestBuilder removeRepoOrganization() {
        return new RemoveRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<RemoveRepoOrganizationResponse> removeRepoOrganization(RemoveRepoOrganizationRequest request) {
        AsyncRequestOperation<RemoveRepoOrganizationRequest, RemoveRepoOrganizationResponse> operation
              = new RemoveRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an organization
     * 
     * @return The async call builder
     */
    public UpdateRepoOrganizationRequestBuilder updateRepoOrganization() {
        return new UpdateRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<UpdateRepoOrganizationResponse> updateRepoOrganization(UpdateRepoOrganizationRequest request) {
        AsyncRequestOperation<UpdateRepoOrganizationRequest, UpdateRepoOrganizationResponse> operation
              = new UpdateRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

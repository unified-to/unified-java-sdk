/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingTransactionsRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingTransactionResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTransactionResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTransactionsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTransactionsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingTransactionResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingTransactionResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingTransactionResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingTransaction;
import to.unified.unified_java_sdk.operations.GetAccountingTransaction;
import to.unified.unified_java_sdk.operations.ListAccountingTransactions;
import to.unified.unified_java_sdk.operations.PatchAccountingTransaction;
import to.unified.unified_java_sdk.operations.RemoveAccountingTransaction;
import to.unified.unified_java_sdk.operations.UpdateAccountingTransaction;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncTransaction {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Transaction syncSDK;

    AsyncTransaction(Transaction syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Transaction sync() {
        return syncSDK;
    }


    /**
     * Create a transaction
     * 
     * @return The async call builder
     */
    public CreateAccountingTransactionRequestBuilder createAccountingTransaction() {
        return new CreateAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateAccountingTransactionResponse>} - The async response
     */
    public CompletableFuture<CreateAccountingTransactionResponse> createAccountingTransaction(CreateAccountingTransactionRequest request) {
        AsyncRequestOperation<CreateAccountingTransactionRequest, CreateAccountingTransactionResponse> operation
              = new CreateAccountingTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a transaction
     * 
     * @return The async call builder
     */
    public GetAccountingTransactionRequestBuilder getAccountingTransaction() {
        return new GetAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetAccountingTransactionResponse>} - The async response
     */
    public CompletableFuture<GetAccountingTransactionResponse> getAccountingTransaction(GetAccountingTransactionRequest request) {
        AsyncRequestOperation<GetAccountingTransactionRequest, GetAccountingTransactionResponse> operation
              = new GetAccountingTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all transactions
     * 
     * @return The async call builder
     */
    public ListAccountingTransactionsRequestBuilder listAccountingTransactions() {
        return new ListAccountingTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all transactions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListAccountingTransactionsResponse>} - The async response
     */
    public CompletableFuture<ListAccountingTransactionsResponse> listAccountingTransactions(ListAccountingTransactionsRequest request) {
        AsyncRequestOperation<ListAccountingTransactionsRequest, ListAccountingTransactionsResponse> operation
              = new ListAccountingTransactions.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a transaction
     * 
     * @return The async call builder
     */
    public PatchAccountingTransactionRequestBuilder patchAccountingTransaction() {
        return new PatchAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchAccountingTransactionResponse>} - The async response
     */
    public CompletableFuture<PatchAccountingTransactionResponse> patchAccountingTransaction(PatchAccountingTransactionRequest request) {
        AsyncRequestOperation<PatchAccountingTransactionRequest, PatchAccountingTransactionResponse> operation
              = new PatchAccountingTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a transaction
     * 
     * @return The async call builder
     */
    public RemoveAccountingTransactionRequestBuilder removeAccountingTransaction() {
        return new RemoveAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveAccountingTransactionResponse>} - The async response
     */
    public CompletableFuture<RemoveAccountingTransactionResponse> removeAccountingTransaction(RemoveAccountingTransactionRequest request) {
        AsyncRequestOperation<RemoveAccountingTransactionRequest, RemoveAccountingTransactionResponse> operation
              = new RemoveAccountingTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a transaction
     * 
     * @return The async call builder
     */
    public UpdateAccountingTransactionRequestBuilder updateAccountingTransaction() {
        return new UpdateAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateAccountingTransactionResponse>} - The async response
     */
    public CompletableFuture<UpdateAccountingTransactionResponse> updateAccountingTransaction(UpdateAccountingTransactionRequest request) {
        AsyncRequestOperation<UpdateAccountingTransactionRequest, UpdateAccountingTransactionResponse> operation
              = new UpdateAccountingTransaction.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

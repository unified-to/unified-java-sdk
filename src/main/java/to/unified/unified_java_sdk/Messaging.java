/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.models.operations.CreateMessagingMessageRequest;
import to.unified.unified_java_sdk.models.operations.CreateMessagingMessageRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateMessagingMessageResponse;
import to.unified.unified_java_sdk.models.operations.GetMessagingChannelRequest;
import to.unified.unified_java_sdk.models.operations.GetMessagingChannelRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetMessagingChannelResponse;
import to.unified.unified_java_sdk.models.operations.GetMessagingMessageRequest;
import to.unified.unified_java_sdk.models.operations.GetMessagingMessageRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetMessagingMessageResponse;
import to.unified.unified_java_sdk.models.operations.ListMessagingChannelsRequest;
import to.unified.unified_java_sdk.models.operations.ListMessagingChannelsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListMessagingChannelsResponse;
import to.unified.unified_java_sdk.models.operations.ListMessagingMessagesRequest;
import to.unified.unified_java_sdk.models.operations.ListMessagingMessagesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListMessagingMessagesResponse;
import to.unified.unified_java_sdk.models.operations.PatchMessagingMessageRequest;
import to.unified.unified_java_sdk.models.operations.PatchMessagingMessageRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchMessagingMessageResponse;
import to.unified.unified_java_sdk.models.operations.RemoveMessagingMessageRequest;
import to.unified.unified_java_sdk.models.operations.RemoveMessagingMessageRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveMessagingMessageResponse;
import to.unified.unified_java_sdk.models.operations.UpdateMessagingMessageRequest;
import to.unified.unified_java_sdk.models.operations.UpdateMessagingMessageRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateMessagingMessageResponse;
import to.unified.unified_java_sdk.operations.CreateMessagingMessageOperation;
import to.unified.unified_java_sdk.operations.GetMessagingChannelOperation;
import to.unified.unified_java_sdk.operations.GetMessagingMessageOperation;
import to.unified.unified_java_sdk.operations.ListMessagingChannelsOperation;
import to.unified.unified_java_sdk.operations.ListMessagingMessagesOperation;
import to.unified.unified_java_sdk.operations.PatchMessagingMessageOperation;
import to.unified.unified_java_sdk.operations.RemoveMessagingMessageOperation;
import to.unified.unified_java_sdk.operations.UpdateMessagingMessageOperation;


public class Messaging {
    private final SDKConfiguration sdkConfiguration;

    Messaging(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a message
     * 
     * @return The call builder
     */
    public CreateMessagingMessageRequestBuilder createMessagingMessage() {
        return new CreateMessagingMessageRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateMessagingMessageResponse createMessagingMessage(
            CreateMessagingMessageRequest request) throws Exception {
        RequestOperation<CreateMessagingMessageRequest, CreateMessagingMessageResponse> operation
              = new CreateMessagingMessageOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieve a channel
     * 
     * @return The call builder
     */
    public GetMessagingChannelRequestBuilder getMessagingChannel() {
        return new GetMessagingChannelRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a channel
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMessagingChannelResponse getMessagingChannel(
            GetMessagingChannelRequest request) throws Exception {
        RequestOperation<GetMessagingChannelRequest, GetMessagingChannelResponse> operation
              = new GetMessagingChannelOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieve a message
     * 
     * @return The call builder
     */
    public GetMessagingMessageRequestBuilder getMessagingMessage() {
        return new GetMessagingMessageRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetMessagingMessageResponse getMessagingMessage(
            GetMessagingMessageRequest request) throws Exception {
        RequestOperation<GetMessagingMessageRequest, GetMessagingMessageResponse> operation
              = new GetMessagingMessageOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List all channels
     * 
     * @return The call builder
     */
    public ListMessagingChannelsRequestBuilder listMessagingChannels() {
        return new ListMessagingChannelsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all channels
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListMessagingChannelsResponse listMessagingChannels(
            ListMessagingChannelsRequest request) throws Exception {
        RequestOperation<ListMessagingChannelsRequest, ListMessagingChannelsResponse> operation
              = new ListMessagingChannelsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List all messages
     * 
     * @return The call builder
     */
    public ListMessagingMessagesRequestBuilder listMessagingMessages() {
        return new ListMessagingMessagesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all messages
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListMessagingMessagesResponse listMessagingMessages(
            ListMessagingMessagesRequest request) throws Exception {
        RequestOperation<ListMessagingMessagesRequest, ListMessagingMessagesResponse> operation
              = new ListMessagingMessagesOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a message
     * 
     * @return The call builder
     */
    public PatchMessagingMessageRequestBuilder patchMessagingMessage() {
        return new PatchMessagingMessageRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchMessagingMessageResponse patchMessagingMessage(
            PatchMessagingMessageRequest request) throws Exception {
        RequestOperation<PatchMessagingMessageRequest, PatchMessagingMessageResponse> operation
              = new PatchMessagingMessageOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Remove a message
     * 
     * @return The call builder
     */
    public RemoveMessagingMessageRequestBuilder removeMessagingMessage() {
        return new RemoveMessagingMessageRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveMessagingMessageResponse removeMessagingMessage(
            RemoveMessagingMessageRequest request) throws Exception {
        RequestOperation<RemoveMessagingMessageRequest, RemoveMessagingMessageResponse> operation
              = new RemoveMessagingMessageOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a message
     * 
     * @return The call builder
     */
    public UpdateMessagingMessageRequestBuilder updateMessagingMessage() {
        return new UpdateMessagingMessageRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a message
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateMessagingMessageResponse updateMessagingMessage(
            UpdateMessagingMessageRequest request) throws Exception {
        RequestOperation<UpdateMessagingMessageRequest, UpdateMessagingMessageResponse> operation
              = new UpdateMessagingMessageOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}

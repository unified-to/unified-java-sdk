/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingTicketsRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingTicketsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingTicketsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingTicketResponse;
import to.unified.unified_java_sdk.operations.CreateTicketingTicket;
import to.unified.unified_java_sdk.operations.GetTicketingTicket;
import to.unified.unified_java_sdk.operations.ListTicketingTickets;
import to.unified.unified_java_sdk.operations.PatchTicketingTicket;
import to.unified.unified_java_sdk.operations.RemoveTicketingTicket;
import to.unified.unified_java_sdk.operations.UpdateTicketingTicket;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncTicket {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Ticket syncSDK;

    AsyncTicket(Ticket syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Ticket sync() {
        return syncSDK;
    }


    /**
     * Create a ticket
     * 
     * @return The async call builder
     */
    public CreateTicketingTicketRequestBuilder createTicketingTicket() {
        return new CreateTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateTicketingTicketResponse>} - The async response
     */
    public CompletableFuture<CreateTicketingTicketResponse> createTicketingTicket(CreateTicketingTicketRequest request) {
        AsyncRequestOperation<CreateTicketingTicketRequest, CreateTicketingTicketResponse> operation
              = new CreateTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a ticket
     * 
     * @return The async call builder
     */
    public GetTicketingTicketRequestBuilder getTicketingTicket() {
        return new GetTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetTicketingTicketResponse>} - The async response
     */
    public CompletableFuture<GetTicketingTicketResponse> getTicketingTicket(GetTicketingTicketRequest request) {
        AsyncRequestOperation<GetTicketingTicketRequest, GetTicketingTicketResponse> operation
              = new GetTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all tickets
     * 
     * @return The async call builder
     */
    public ListTicketingTicketsRequestBuilder listTicketingTickets() {
        return new ListTicketingTicketsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all tickets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListTicketingTicketsResponse>} - The async response
     */
    public CompletableFuture<ListTicketingTicketsResponse> listTicketingTickets(ListTicketingTicketsRequest request) {
        AsyncRequestOperation<ListTicketingTicketsRequest, ListTicketingTicketsResponse> operation
              = new ListTicketingTickets.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a ticket
     * 
     * @return The async call builder
     */
    public PatchTicketingTicketRequestBuilder patchTicketingTicket() {
        return new PatchTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchTicketingTicketResponse>} - The async response
     */
    public CompletableFuture<PatchTicketingTicketResponse> patchTicketingTicket(PatchTicketingTicketRequest request) {
        AsyncRequestOperation<PatchTicketingTicketRequest, PatchTicketingTicketResponse> operation
              = new PatchTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a ticket
     * 
     * @return The async call builder
     */
    public RemoveTicketingTicketRequestBuilder removeTicketingTicket() {
        return new RemoveTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveTicketingTicketResponse>} - The async response
     */
    public CompletableFuture<RemoveTicketingTicketResponse> removeTicketingTicket(RemoveTicketingTicketRequest request) {
        AsyncRequestOperation<RemoveTicketingTicketRequest, RemoveTicketingTicketResponse> operation
              = new RemoveTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a ticket
     * 
     * @return The async call builder
     */
    public UpdateTicketingTicketRequestBuilder updateTicketingTicket() {
        return new UpdateTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateTicketingTicketResponse>} - The async response
     */
    public CompletableFuture<UpdateTicketingTicketResponse> updateTicketingTicket(UpdateTicketingTicketRequest request) {
        AsyncRequestOperation<UpdateTicketingTicketRequest, UpdateTicketingTicketResponse> operation
              = new UpdateTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

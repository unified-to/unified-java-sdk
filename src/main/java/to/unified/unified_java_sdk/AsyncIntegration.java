/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationAuthRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationWorkspacesRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationsRequest;
import to.unified.unified_java_sdk.models.operations.async.GetUnifiedIntegrationAuthRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetUnifiedIntegrationAuthResponse;
import to.unified.unified_java_sdk.models.operations.async.ListUnifiedIntegrationWorkspacesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListUnifiedIntegrationWorkspacesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListUnifiedIntegrationsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListUnifiedIntegrationsResponse;
import to.unified.unified_java_sdk.operations.GetUnifiedIntegrationAuth;
import to.unified.unified_java_sdk.operations.ListUnifiedIntegrationWorkspaces;
import to.unified.unified_java_sdk.operations.ListUnifiedIntegrations;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncIntegration {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Integration syncSDK;

    AsyncIntegration(Integration syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Integration sync() {
        return syncSDK;
    }


    /**
     * Authorize new connection
     * 
     * <p>Returns an authorization URL for the specified integration.  Once a successful authorization occurs, a new connection is created.
     * 
     * @return The async call builder
     */
    public GetUnifiedIntegrationAuthRequestBuilder getUnifiedIntegrationAuth() {
        return new GetUnifiedIntegrationAuthRequestBuilder(sdkConfiguration);
    }

    /**
     * Authorize new connection
     * 
     * <p>Returns an authorization URL for the specified integration.  Once a successful authorization occurs, a new connection is created.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetUnifiedIntegrationAuthResponse&gt; - The async response
     */
    public CompletableFuture<GetUnifiedIntegrationAuthResponse> getUnifiedIntegrationAuth(GetUnifiedIntegrationAuthRequest request) {
        AsyncRequestOperation<GetUnifiedIntegrationAuthRequest, GetUnifiedIntegrationAuthResponse> operation
              = new GetUnifiedIntegrationAuth.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Returns all activated integrations in a workspace
     * 
     * <p>No authentication required as this is to be used by front-end interface
     * 
     * @return The async call builder
     */
    public ListUnifiedIntegrationWorkspacesRequestBuilder listUnifiedIntegrationWorkspaces() {
        return new ListUnifiedIntegrationWorkspacesRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns all activated integrations in a workspace
     * 
     * <p>No authentication required as this is to be used by front-end interface
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListUnifiedIntegrationWorkspacesResponse&gt; - The async response
     */
    public CompletableFuture<ListUnifiedIntegrationWorkspacesResponse> listUnifiedIntegrationWorkspaces(ListUnifiedIntegrationWorkspacesRequest request) {
        AsyncRequestOperation<ListUnifiedIntegrationWorkspacesRequest, ListUnifiedIntegrationWorkspacesResponse> operation
              = new ListUnifiedIntegrationWorkspaces.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Returns all integrations
     * 
     * @return The async call builder
     */
    public ListUnifiedIntegrationsRequestBuilder listUnifiedIntegrations() {
        return new ListUnifiedIntegrationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns all integrations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListUnifiedIntegrationsResponse&gt; - The async response
     */
    public CompletableFuture<ListUnifiedIntegrationsResponse> listUnifiedIntegrations(ListUnifiedIntegrationsRequest request) {
        AsyncRequestOperation<ListUnifiedIntegrationsRequest, ListUnifiedIntegrationsResponse> operation
              = new ListUnifiedIntegrations.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsResponse;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitResponse;
import to.unified.unified_java_sdk.operations.CreateRepoCommitOperation;
import to.unified.unified_java_sdk.operations.GetRepoCommitOperation;
import to.unified.unified_java_sdk.operations.ListRepoCommitsOperation;
import to.unified.unified_java_sdk.operations.PatchRepoCommitOperation;
import to.unified.unified_java_sdk.operations.RemoveRepoCommitOperation;
import to.unified.unified_java_sdk.operations.UpdateRepoCommitOperation;


public class Commit {
    private final SDKConfiguration sdkConfiguration;

    Commit(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a commit
     * 
     * @return The call builder
     */
    public CreateRepoCommitRequestBuilder createRepoCommit() {
        return new CreateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRepoCommitResponse createRepoCommit(
            CreateRepoCommitRequest request) throws Exception {
        RequestOperation<CreateRepoCommitRequest, CreateRepoCommitResponse> operation
              = new CreateRepoCommitOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieve a commit
     * 
     * @return The call builder
     */
    public GetRepoCommitRequestBuilder getRepoCommit() {
        return new GetRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRepoCommitResponse getRepoCommit(
            GetRepoCommitRequest request) throws Exception {
        RequestOperation<GetRepoCommitRequest, GetRepoCommitResponse> operation
              = new GetRepoCommitOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List all commits
     * 
     * @return The call builder
     */
    public ListRepoCommitsRequestBuilder listRepoCommits() {
        return new ListRepoCommitsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all commits
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRepoCommitsResponse listRepoCommits(
            ListRepoCommitsRequest request) throws Exception {
        RequestOperation<ListRepoCommitsRequest, ListRepoCommitsResponse> operation
              = new ListRepoCommitsOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a commit
     * 
     * @return The call builder
     */
    public PatchRepoCommitRequestBuilder patchRepoCommit() {
        return new PatchRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchRepoCommitResponse patchRepoCommit(
            PatchRepoCommitRequest request) throws Exception {
        RequestOperation<PatchRepoCommitRequest, PatchRepoCommitResponse> operation
              = new PatchRepoCommitOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Remove a commit
     * 
     * @return The call builder
     */
    public RemoveRepoCommitRequestBuilder removeRepoCommit() {
        return new RemoveRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveRepoCommitResponse removeRepoCommit(
            RemoveRepoCommitRequest request) throws Exception {
        RequestOperation<RemoveRepoCommitRequest, RemoveRepoCommitResponse> operation
              = new RemoveRepoCommitOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a commit
     * 
     * @return The call builder
     */
    public UpdateRepoCommitRequestBuilder updateRepoCommit() {
        return new UpdateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateRepoCommitResponse updateRepoCommit(
            UpdateRepoCommitRequest request) throws Exception {
        RequestOperation<UpdateRepoCommitRequest, UpdateRepoCommitResponse> operation
              = new UpdateRepoCommitOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import to.unified.unified_java_sdk.models.operations.CreateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsResponse;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitResponse;
import to.unified.unified_java_sdk.operations.CreateRepoCommit;
import to.unified.unified_java_sdk.operations.GetRepoCommit;
import to.unified.unified_java_sdk.operations.ListRepoCommits;
import to.unified.unified_java_sdk.operations.PatchRepoCommit;
import to.unified.unified_java_sdk.operations.RemoveRepoCommit;
import to.unified.unified_java_sdk.operations.UpdateRepoCommit;
import to.unified.unified_java_sdk.utils.Headers;


public class Commit {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncCommit asyncSDK;

    Commit(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncCommit(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncCommit async() {
        return asyncSDK;
    }

    /**
     * Create a commit
     * 
     * @return The call builder
     */
    public CreateRepoCommitRequestBuilder createRepoCommit() {
        return new CreateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateRepoCommitResponse createRepoCommit(CreateRepoCommitRequest request) {
        RequestOperation<CreateRepoCommitRequest, CreateRepoCommitResponse> operation
              = new CreateRepoCommit.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a commit
     * 
     * @return The call builder
     */
    public GetRepoCommitRequestBuilder getRepoCommit() {
        return new GetRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetRepoCommitResponse getRepoCommit(GetRepoCommitRequest request) {
        RequestOperation<GetRepoCommitRequest, GetRepoCommitResponse> operation
              = new GetRepoCommit.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all commits
     * 
     * @return The call builder
     */
    public ListRepoCommitsRequestBuilder listRepoCommits() {
        return new ListRepoCommitsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all commits
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListRepoCommitsResponse listRepoCommits(ListRepoCommitsRequest request) {
        RequestOperation<ListRepoCommitsRequest, ListRepoCommitsResponse> operation
              = new ListRepoCommits.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a commit
     * 
     * @return The call builder
     */
    public PatchRepoCommitRequestBuilder patchRepoCommit() {
        return new PatchRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public PatchRepoCommitResponse patchRepoCommit(PatchRepoCommitRequest request) {
        RequestOperation<PatchRepoCommitRequest, PatchRepoCommitResponse> operation
              = new PatchRepoCommit.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a commit
     * 
     * @return The call builder
     */
    public RemoveRepoCommitRequestBuilder removeRepoCommit() {
        return new RemoveRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RemoveRepoCommitResponse removeRepoCommit(RemoveRepoCommitRequest request) {
        RequestOperation<RemoveRepoCommitRequest, RemoveRepoCommitResponse> operation
              = new RemoveRepoCommit.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a commit
     * 
     * @return The call builder
     */
    public UpdateRepoCommitRequestBuilder updateRepoCommit() {
        return new UpdateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateRepoCommitResponse updateRepoCommit(UpdateRepoCommitRequest request) {
        RequestOperation<UpdateRepoCommitRequest, UpdateRepoCommitResponse> operation
              = new UpdateRepoCommit.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}

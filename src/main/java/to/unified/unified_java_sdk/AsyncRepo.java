/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoBranchesRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoOrganizationsRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoPullrequestsRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoRepositoriesRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.async.GetRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.async.GetRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.async.GetRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.GetRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.async.GetRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.async.ListRepoBranchesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListRepoBranchesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListRepoCommitsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListRepoCommitsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListRepoOrganizationsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListRepoOrganizationsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListRepoPullrequestsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListRepoPullrequestsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListRepoRepositoriesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListRepoRepositoriesResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoRepositoryResponse;
import to.unified.unified_java_sdk.operations.CreateRepoBranch;
import to.unified.unified_java_sdk.operations.CreateRepoCommit;
import to.unified.unified_java_sdk.operations.CreateRepoOrganization;
import to.unified.unified_java_sdk.operations.CreateRepoPullrequest;
import to.unified.unified_java_sdk.operations.CreateRepoRepository;
import to.unified.unified_java_sdk.operations.GetRepoBranch;
import to.unified.unified_java_sdk.operations.GetRepoCommit;
import to.unified.unified_java_sdk.operations.GetRepoOrganization;
import to.unified.unified_java_sdk.operations.GetRepoPullrequest;
import to.unified.unified_java_sdk.operations.GetRepoRepository;
import to.unified.unified_java_sdk.operations.ListRepoBranches;
import to.unified.unified_java_sdk.operations.ListRepoCommits;
import to.unified.unified_java_sdk.operations.ListRepoOrganizations;
import to.unified.unified_java_sdk.operations.ListRepoPullrequests;
import to.unified.unified_java_sdk.operations.ListRepoRepositories;
import to.unified.unified_java_sdk.operations.PatchRepoBranch;
import to.unified.unified_java_sdk.operations.PatchRepoCommit;
import to.unified.unified_java_sdk.operations.PatchRepoOrganization;
import to.unified.unified_java_sdk.operations.PatchRepoPullrequest;
import to.unified.unified_java_sdk.operations.PatchRepoRepository;
import to.unified.unified_java_sdk.operations.RemoveRepoBranch;
import to.unified.unified_java_sdk.operations.RemoveRepoCommit;
import to.unified.unified_java_sdk.operations.RemoveRepoOrganization;
import to.unified.unified_java_sdk.operations.RemoveRepoPullrequest;
import to.unified.unified_java_sdk.operations.RemoveRepoRepository;
import to.unified.unified_java_sdk.operations.UpdateRepoBranch;
import to.unified.unified_java_sdk.operations.UpdateRepoCommit;
import to.unified.unified_java_sdk.operations.UpdateRepoOrganization;
import to.unified.unified_java_sdk.operations.UpdateRepoPullrequest;
import to.unified.unified_java_sdk.operations.UpdateRepoRepository;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncRepo {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Repo syncSDK;

    AsyncRepo(Repo syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Repo sync() {
        return syncSDK;
    }


    /**
     * Create a branch
     * 
     * @return The async call builder
     */
    public CreateRepoBranchRequestBuilder createRepoBranch() {
        return new CreateRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateRepoBranchResponse>} - The async response
     */
    public CompletableFuture<CreateRepoBranchResponse> createRepoBranch(CreateRepoBranchRequest request) {
        AsyncRequestOperation<CreateRepoBranchRequest, CreateRepoBranchResponse> operation
              = new CreateRepoBranch.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a commit
     * 
     * @return The async call builder
     */
    public CreateRepoCommitRequestBuilder createRepoCommit() {
        return new CreateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateRepoCommitResponse>} - The async response
     */
    public CompletableFuture<CreateRepoCommitResponse> createRepoCommit(CreateRepoCommitRequest request) {
        AsyncRequestOperation<CreateRepoCommitRequest, CreateRepoCommitResponse> operation
              = new CreateRepoCommit.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create an organization
     * 
     * @return The async call builder
     */
    public CreateRepoOrganizationRequestBuilder createRepoOrganization() {
        return new CreateRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<CreateRepoOrganizationResponse> createRepoOrganization(CreateRepoOrganizationRequest request) {
        AsyncRequestOperation<CreateRepoOrganizationRequest, CreateRepoOrganizationResponse> operation
              = new CreateRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a pullrequest
     * 
     * @return The async call builder
     */
    public CreateRepoPullrequestRequestBuilder createRepoPullrequest() {
        return new CreateRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateRepoPullrequestResponse>} - The async response
     */
    public CompletableFuture<CreateRepoPullrequestResponse> createRepoPullrequest(CreateRepoPullrequestRequest request) {
        AsyncRequestOperation<CreateRepoPullrequestRequest, CreateRepoPullrequestResponse> operation
              = new CreateRepoPullrequest.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a repository
     * 
     * @return The async call builder
     */
    public CreateRepoRepositoryRequestBuilder createRepoRepository() {
        return new CreateRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateRepoRepositoryResponse>} - The async response
     */
    public CompletableFuture<CreateRepoRepositoryResponse> createRepoRepository(CreateRepoRepositoryRequest request) {
        AsyncRequestOperation<CreateRepoRepositoryRequest, CreateRepoRepositoryResponse> operation
              = new CreateRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a branch
     * 
     * @return The async call builder
     */
    public GetRepoBranchRequestBuilder getRepoBranch() {
        return new GetRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetRepoBranchResponse>} - The async response
     */
    public CompletableFuture<GetRepoBranchResponse> getRepoBranch(GetRepoBranchRequest request) {
        AsyncRequestOperation<GetRepoBranchRequest, GetRepoBranchResponse> operation
              = new GetRepoBranch.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a commit
     * 
     * @return The async call builder
     */
    public GetRepoCommitRequestBuilder getRepoCommit() {
        return new GetRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetRepoCommitResponse>} - The async response
     */
    public CompletableFuture<GetRepoCommitResponse> getRepoCommit(GetRepoCommitRequest request) {
        AsyncRequestOperation<GetRepoCommitRequest, GetRepoCommitResponse> operation
              = new GetRepoCommit.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an organization
     * 
     * @return The async call builder
     */
    public GetRepoOrganizationRequestBuilder getRepoOrganization() {
        return new GetRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<GetRepoOrganizationResponse> getRepoOrganization(GetRepoOrganizationRequest request) {
        AsyncRequestOperation<GetRepoOrganizationRequest, GetRepoOrganizationResponse> operation
              = new GetRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a pullrequest
     * 
     * @return The async call builder
     */
    public GetRepoPullrequestRequestBuilder getRepoPullrequest() {
        return new GetRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetRepoPullrequestResponse>} - The async response
     */
    public CompletableFuture<GetRepoPullrequestResponse> getRepoPullrequest(GetRepoPullrequestRequest request) {
        AsyncRequestOperation<GetRepoPullrequestRequest, GetRepoPullrequestResponse> operation
              = new GetRepoPullrequest.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a repository
     * 
     * @return The async call builder
     */
    public GetRepoRepositoryRequestBuilder getRepoRepository() {
        return new GetRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetRepoRepositoryResponse>} - The async response
     */
    public CompletableFuture<GetRepoRepositoryResponse> getRepoRepository(GetRepoRepositoryRequest request) {
        AsyncRequestOperation<GetRepoRepositoryRequest, GetRepoRepositoryResponse> operation
              = new GetRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all branches
     * 
     * @return The async call builder
     */
    public ListRepoBranchesRequestBuilder listRepoBranches() {
        return new ListRepoBranchesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all branches
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListRepoBranchesResponse>} - The async response
     */
    public CompletableFuture<ListRepoBranchesResponse> listRepoBranches(ListRepoBranchesRequest request) {
        AsyncRequestOperation<ListRepoBranchesRequest, ListRepoBranchesResponse> operation
              = new ListRepoBranches.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all commits
     * 
     * @return The async call builder
     */
    public ListRepoCommitsRequestBuilder listRepoCommits() {
        return new ListRepoCommitsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all commits
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListRepoCommitsResponse>} - The async response
     */
    public CompletableFuture<ListRepoCommitsResponse> listRepoCommits(ListRepoCommitsRequest request) {
        AsyncRequestOperation<ListRepoCommitsRequest, ListRepoCommitsResponse> operation
              = new ListRepoCommits.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all organizations
     * 
     * @return The async call builder
     */
    public ListRepoOrganizationsRequestBuilder listRepoOrganizations() {
        return new ListRepoOrganizationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all organizations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListRepoOrganizationsResponse>} - The async response
     */
    public CompletableFuture<ListRepoOrganizationsResponse> listRepoOrganizations(ListRepoOrganizationsRequest request) {
        AsyncRequestOperation<ListRepoOrganizationsRequest, ListRepoOrganizationsResponse> operation
              = new ListRepoOrganizations.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all pullrequests
     * 
     * @return The async call builder
     */
    public ListRepoPullrequestsRequestBuilder listRepoPullrequests() {
        return new ListRepoPullrequestsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all pullrequests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListRepoPullrequestsResponse>} - The async response
     */
    public CompletableFuture<ListRepoPullrequestsResponse> listRepoPullrequests(ListRepoPullrequestsRequest request) {
        AsyncRequestOperation<ListRepoPullrequestsRequest, ListRepoPullrequestsResponse> operation
              = new ListRepoPullrequests.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all repositories
     * 
     * @return The async call builder
     */
    public ListRepoRepositoriesRequestBuilder listRepoRepositories() {
        return new ListRepoRepositoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all repositories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListRepoRepositoriesResponse>} - The async response
     */
    public CompletableFuture<ListRepoRepositoriesResponse> listRepoRepositories(ListRepoRepositoriesRequest request) {
        AsyncRequestOperation<ListRepoRepositoriesRequest, ListRepoRepositoriesResponse> operation
              = new ListRepoRepositories.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a branch
     * 
     * @return The async call builder
     */
    public PatchRepoBranchRequestBuilder patchRepoBranch() {
        return new PatchRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchRepoBranchResponse>} - The async response
     */
    public CompletableFuture<PatchRepoBranchResponse> patchRepoBranch(PatchRepoBranchRequest request) {
        AsyncRequestOperation<PatchRepoBranchRequest, PatchRepoBranchResponse> operation
              = new PatchRepoBranch.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a commit
     * 
     * @return The async call builder
     */
    public PatchRepoCommitRequestBuilder patchRepoCommit() {
        return new PatchRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchRepoCommitResponse>} - The async response
     */
    public CompletableFuture<PatchRepoCommitResponse> patchRepoCommit(PatchRepoCommitRequest request) {
        AsyncRequestOperation<PatchRepoCommitRequest, PatchRepoCommitResponse> operation
              = new PatchRepoCommit.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an organization
     * 
     * @return The async call builder
     */
    public PatchRepoOrganizationRequestBuilder patchRepoOrganization() {
        return new PatchRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<PatchRepoOrganizationResponse> patchRepoOrganization(PatchRepoOrganizationRequest request) {
        AsyncRequestOperation<PatchRepoOrganizationRequest, PatchRepoOrganizationResponse> operation
              = new PatchRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a pullrequest
     * 
     * @return The async call builder
     */
    public PatchRepoPullrequestRequestBuilder patchRepoPullrequest() {
        return new PatchRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchRepoPullrequestResponse>} - The async response
     */
    public CompletableFuture<PatchRepoPullrequestResponse> patchRepoPullrequest(PatchRepoPullrequestRequest request) {
        AsyncRequestOperation<PatchRepoPullrequestRequest, PatchRepoPullrequestResponse> operation
              = new PatchRepoPullrequest.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a repository
     * 
     * @return The async call builder
     */
    public PatchRepoRepositoryRequestBuilder patchRepoRepository() {
        return new PatchRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchRepoRepositoryResponse>} - The async response
     */
    public CompletableFuture<PatchRepoRepositoryResponse> patchRepoRepository(PatchRepoRepositoryRequest request) {
        AsyncRequestOperation<PatchRepoRepositoryRequest, PatchRepoRepositoryResponse> operation
              = new PatchRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a branch
     * 
     * @return The async call builder
     */
    public RemoveRepoBranchRequestBuilder removeRepoBranch() {
        return new RemoveRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveRepoBranchResponse>} - The async response
     */
    public CompletableFuture<RemoveRepoBranchResponse> removeRepoBranch(RemoveRepoBranchRequest request) {
        AsyncRequestOperation<RemoveRepoBranchRequest, RemoveRepoBranchResponse> operation
              = new RemoveRepoBranch.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a commit
     * 
     * @return The async call builder
     */
    public RemoveRepoCommitRequestBuilder removeRepoCommit() {
        return new RemoveRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveRepoCommitResponse>} - The async response
     */
    public CompletableFuture<RemoveRepoCommitResponse> removeRepoCommit(RemoveRepoCommitRequest request) {
        AsyncRequestOperation<RemoveRepoCommitRequest, RemoveRepoCommitResponse> operation
              = new RemoveRepoCommit.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an organization
     * 
     * @return The async call builder
     */
    public RemoveRepoOrganizationRequestBuilder removeRepoOrganization() {
        return new RemoveRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<RemoveRepoOrganizationResponse> removeRepoOrganization(RemoveRepoOrganizationRequest request) {
        AsyncRequestOperation<RemoveRepoOrganizationRequest, RemoveRepoOrganizationResponse> operation
              = new RemoveRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a pullrequest
     * 
     * @return The async call builder
     */
    public RemoveRepoPullrequestRequestBuilder removeRepoPullrequest() {
        return new RemoveRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveRepoPullrequestResponse>} - The async response
     */
    public CompletableFuture<RemoveRepoPullrequestResponse> removeRepoPullrequest(RemoveRepoPullrequestRequest request) {
        AsyncRequestOperation<RemoveRepoPullrequestRequest, RemoveRepoPullrequestResponse> operation
              = new RemoveRepoPullrequest.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a repository
     * 
     * @return The async call builder
     */
    public RemoveRepoRepositoryRequestBuilder removeRepoRepository() {
        return new RemoveRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveRepoRepositoryResponse>} - The async response
     */
    public CompletableFuture<RemoveRepoRepositoryResponse> removeRepoRepository(RemoveRepoRepositoryRequest request) {
        AsyncRequestOperation<RemoveRepoRepositoryRequest, RemoveRepoRepositoryResponse> operation
              = new RemoveRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a branch
     * 
     * @return The async call builder
     */
    public UpdateRepoBranchRequestBuilder updateRepoBranch() {
        return new UpdateRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateRepoBranchResponse>} - The async response
     */
    public CompletableFuture<UpdateRepoBranchResponse> updateRepoBranch(UpdateRepoBranchRequest request) {
        AsyncRequestOperation<UpdateRepoBranchRequest, UpdateRepoBranchResponse> operation
              = new UpdateRepoBranch.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a commit
     * 
     * @return The async call builder
     */
    public UpdateRepoCommitRequestBuilder updateRepoCommit() {
        return new UpdateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateRepoCommitResponse>} - The async response
     */
    public CompletableFuture<UpdateRepoCommitResponse> updateRepoCommit(UpdateRepoCommitRequest request) {
        AsyncRequestOperation<UpdateRepoCommitRequest, UpdateRepoCommitResponse> operation
              = new UpdateRepoCommit.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an organization
     * 
     * @return The async call builder
     */
    public UpdateRepoOrganizationRequestBuilder updateRepoOrganization() {
        return new UpdateRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateRepoOrganizationResponse>} - The async response
     */
    public CompletableFuture<UpdateRepoOrganizationResponse> updateRepoOrganization(UpdateRepoOrganizationRequest request) {
        AsyncRequestOperation<UpdateRepoOrganizationRequest, UpdateRepoOrganizationResponse> operation
              = new UpdateRepoOrganization.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a pullrequest
     * 
     * @return The async call builder
     */
    public UpdateRepoPullrequestRequestBuilder updateRepoPullrequest() {
        return new UpdateRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateRepoPullrequestResponse>} - The async response
     */
    public CompletableFuture<UpdateRepoPullrequestResponse> updateRepoPullrequest(UpdateRepoPullrequestRequest request) {
        AsyncRequestOperation<UpdateRepoPullrequestRequest, UpdateRepoPullrequestResponse> operation
              = new UpdateRepoPullrequest.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a repository
     * 
     * @return The async call builder
     */
    public UpdateRepoRepositoryRequestBuilder updateRepoRepository() {
        return new UpdateRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateRepoRepositoryResponse>} - The async response
     */
    public CompletableFuture<UpdateRepoRepositoryResponse> updateRepoRepository(UpdateRepoRepositoryRequest request) {
        AsyncRequestOperation<UpdateRepoRepositoryRequest, UpdateRepoRepositoryResponse> operation
              = new UpdateRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

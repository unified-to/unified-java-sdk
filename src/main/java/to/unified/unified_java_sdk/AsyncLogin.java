/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationLoginRequest;
import to.unified.unified_java_sdk.models.operations.async.GetUnifiedIntegrationLoginRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetUnifiedIntegrationLoginResponse;
import to.unified.unified_java_sdk.operations.GetUnifiedIntegrationLogin;


public class AsyncLogin {
    private final SDKConfiguration sdkConfiguration;
    private final Login syncSDK;

    AsyncLogin(Login syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Login sync() {
        return syncSDK;
    }


    /**
     * Sign in a user
     * 
     * <p>Returns an authentication URL for the specified integration.  Once a successful authentication occurs, the name and email are returned inside a jwt parameter, which is a JSON web token that is base-64 encoded.
     * 
     * @return The async call builder
     */
    public GetUnifiedIntegrationLoginRequestBuilder getUnifiedIntegrationLogin() {
        return new GetUnifiedIntegrationLoginRequestBuilder(sdkConfiguration);
    }

    /**
     * Sign in a user
     * 
     * <p>Returns an authentication URL for the specified integration.  Once a successful authentication occurs, the name and email are returned inside a jwt parameter, which is a JSON web token that is base-64 encoded.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetUnifiedIntegrationLoginResponse&gt; - The async response
     */
    public CompletableFuture<GetUnifiedIntegrationLoginResponse> getUnifiedIntegrationLogin(GetUnifiedIntegrationLoginRequest request) {
        AsyncRequestOperation<GetUnifiedIntegrationLoginRequest, GetUnifiedIntegrationLoginResponse> operation
              = new GetUnifiedIntegrationLogin.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

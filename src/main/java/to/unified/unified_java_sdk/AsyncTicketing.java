/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.CreateTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.CreateTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingCategoriesRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingCustomersRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingNotesRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingTicketsRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingNoteRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingCategoriesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingCategoriesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingCustomersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingCustomersResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingNotesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingNotesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingTicketsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingTicketsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingNoteRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingNoteResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingTicketResponse;
import to.unified.unified_java_sdk.operations.CreateTicketingCategory;
import to.unified.unified_java_sdk.operations.CreateTicketingCustomer;
import to.unified.unified_java_sdk.operations.CreateTicketingNote;
import to.unified.unified_java_sdk.operations.CreateTicketingTicket;
import to.unified.unified_java_sdk.operations.GetTicketingCategory;
import to.unified.unified_java_sdk.operations.GetTicketingCustomer;
import to.unified.unified_java_sdk.operations.GetTicketingNote;
import to.unified.unified_java_sdk.operations.GetTicketingTicket;
import to.unified.unified_java_sdk.operations.ListTicketingCategories;
import to.unified.unified_java_sdk.operations.ListTicketingCustomers;
import to.unified.unified_java_sdk.operations.ListTicketingNotes;
import to.unified.unified_java_sdk.operations.ListTicketingTickets;
import to.unified.unified_java_sdk.operations.PatchTicketingCategory;
import to.unified.unified_java_sdk.operations.PatchTicketingCustomer;
import to.unified.unified_java_sdk.operations.PatchTicketingNote;
import to.unified.unified_java_sdk.operations.PatchTicketingTicket;
import to.unified.unified_java_sdk.operations.RemoveTicketingCategory;
import to.unified.unified_java_sdk.operations.RemoveTicketingCustomer;
import to.unified.unified_java_sdk.operations.RemoveTicketingNote;
import to.unified.unified_java_sdk.operations.RemoveTicketingTicket;
import to.unified.unified_java_sdk.operations.UpdateTicketingCategory;
import to.unified.unified_java_sdk.operations.UpdateTicketingCustomer;
import to.unified.unified_java_sdk.operations.UpdateTicketingNote;
import to.unified.unified_java_sdk.operations.UpdateTicketingTicket;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncTicketing {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Ticketing syncSDK;

    AsyncTicketing(Ticketing syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Ticketing sync() {
        return syncSDK;
    }


    /**
     * Create a category
     * 
     * @return The async call builder
     */
    public CreateTicketingCategoryRequestBuilder createTicketingCategory() {
        return new CreateTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<CreateTicketingCategoryResponse> createTicketingCategory(CreateTicketingCategoryRequest request) {
        AsyncRequestOperation<CreateTicketingCategoryRequest, CreateTicketingCategoryResponse> operation
              = new CreateTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a customer
     * 
     * @return The async call builder
     */
    public CreateTicketingCustomerRequestBuilder createTicketingCustomer() {
        return new CreateTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<CreateTicketingCustomerResponse> createTicketingCustomer(CreateTicketingCustomerRequest request) {
        AsyncRequestOperation<CreateTicketingCustomerRequest, CreateTicketingCustomerResponse> operation
              = new CreateTicketingCustomer.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a note
     * 
     * @return The async call builder
     */
    public CreateTicketingNoteRequestBuilder createTicketingNote() {
        return new CreateTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateTicketingNoteResponse&gt; - The async response
     */
    public CompletableFuture<CreateTicketingNoteResponse> createTicketingNote(CreateTicketingNoteRequest request) {
        AsyncRequestOperation<CreateTicketingNoteRequest, CreateTicketingNoteResponse> operation
              = new CreateTicketingNote.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a ticket
     * 
     * @return The async call builder
     */
    public CreateTicketingTicketRequestBuilder createTicketingTicket() {
        return new CreateTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateTicketingTicketResponse&gt; - The async response
     */
    public CompletableFuture<CreateTicketingTicketResponse> createTicketingTicket(CreateTicketingTicketRequest request) {
        AsyncRequestOperation<CreateTicketingTicketRequest, CreateTicketingTicketResponse> operation
              = new CreateTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a category
     * 
     * @return The async call builder
     */
    public GetTicketingCategoryRequestBuilder getTicketingCategory() {
        return new GetTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<GetTicketingCategoryResponse> getTicketingCategory(GetTicketingCategoryRequest request) {
        AsyncRequestOperation<GetTicketingCategoryRequest, GetTicketingCategoryResponse> operation
              = new GetTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a customer
     * 
     * @return The async call builder
     */
    public GetTicketingCustomerRequestBuilder getTicketingCustomer() {
        return new GetTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<GetTicketingCustomerResponse> getTicketingCustomer(GetTicketingCustomerRequest request) {
        AsyncRequestOperation<GetTicketingCustomerRequest, GetTicketingCustomerResponse> operation
              = new GetTicketingCustomer.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a note
     * 
     * @return The async call builder
     */
    public GetTicketingNoteRequestBuilder getTicketingNote() {
        return new GetTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTicketingNoteResponse&gt; - The async response
     */
    public CompletableFuture<GetTicketingNoteResponse> getTicketingNote(GetTicketingNoteRequest request) {
        AsyncRequestOperation<GetTicketingNoteRequest, GetTicketingNoteResponse> operation
              = new GetTicketingNote.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a ticket
     * 
     * @return The async call builder
     */
    public GetTicketingTicketRequestBuilder getTicketingTicket() {
        return new GetTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTicketingTicketResponse&gt; - The async response
     */
    public CompletableFuture<GetTicketingTicketResponse> getTicketingTicket(GetTicketingTicketRequest request) {
        AsyncRequestOperation<GetTicketingTicketRequest, GetTicketingTicketResponse> operation
              = new GetTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all categories
     * 
     * @return The async call builder
     */
    public ListTicketingCategoriesRequestBuilder listTicketingCategories() {
        return new ListTicketingCategoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTicketingCategoriesResponse&gt; - The async response
     */
    public CompletableFuture<ListTicketingCategoriesResponse> listTicketingCategories(ListTicketingCategoriesRequest request) {
        AsyncRequestOperation<ListTicketingCategoriesRequest, ListTicketingCategoriesResponse> operation
              = new ListTicketingCategories.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all customers
     * 
     * @return The async call builder
     */
    public ListTicketingCustomersRequestBuilder listTicketingCustomers() {
        return new ListTicketingCustomersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTicketingCustomersResponse&gt; - The async response
     */
    public CompletableFuture<ListTicketingCustomersResponse> listTicketingCustomers(ListTicketingCustomersRequest request) {
        AsyncRequestOperation<ListTicketingCustomersRequest, ListTicketingCustomersResponse> operation
              = new ListTicketingCustomers.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all notes
     * 
     * @return The async call builder
     */
    public ListTicketingNotesRequestBuilder listTicketingNotes() {
        return new ListTicketingNotesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all notes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTicketingNotesResponse&gt; - The async response
     */
    public CompletableFuture<ListTicketingNotesResponse> listTicketingNotes(ListTicketingNotesRequest request) {
        AsyncRequestOperation<ListTicketingNotesRequest, ListTicketingNotesResponse> operation
              = new ListTicketingNotes.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all tickets
     * 
     * @return The async call builder
     */
    public ListTicketingTicketsRequestBuilder listTicketingTickets() {
        return new ListTicketingTicketsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all tickets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTicketingTicketsResponse&gt; - The async response
     */
    public CompletableFuture<ListTicketingTicketsResponse> listTicketingTickets(ListTicketingTicketsRequest request) {
        AsyncRequestOperation<ListTicketingTicketsRequest, ListTicketingTicketsResponse> operation
              = new ListTicketingTickets.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a category
     * 
     * @return The async call builder
     */
    public PatchTicketingCategoryRequestBuilder patchTicketingCategory() {
        return new PatchTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<PatchTicketingCategoryResponse> patchTicketingCategory(PatchTicketingCategoryRequest request) {
        AsyncRequestOperation<PatchTicketingCategoryRequest, PatchTicketingCategoryResponse> operation
              = new PatchTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a customer
     * 
     * @return The async call builder
     */
    public PatchTicketingCustomerRequestBuilder patchTicketingCustomer() {
        return new PatchTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<PatchTicketingCustomerResponse> patchTicketingCustomer(PatchTicketingCustomerRequest request) {
        AsyncRequestOperation<PatchTicketingCustomerRequest, PatchTicketingCustomerResponse> operation
              = new PatchTicketingCustomer.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a note
     * 
     * @return The async call builder
     */
    public PatchTicketingNoteRequestBuilder patchTicketingNote() {
        return new PatchTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchTicketingNoteResponse&gt; - The async response
     */
    public CompletableFuture<PatchTicketingNoteResponse> patchTicketingNote(PatchTicketingNoteRequest request) {
        AsyncRequestOperation<PatchTicketingNoteRequest, PatchTicketingNoteResponse> operation
              = new PatchTicketingNote.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a ticket
     * 
     * @return The async call builder
     */
    public PatchTicketingTicketRequestBuilder patchTicketingTicket() {
        return new PatchTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchTicketingTicketResponse&gt; - The async response
     */
    public CompletableFuture<PatchTicketingTicketResponse> patchTicketingTicket(PatchTicketingTicketRequest request) {
        AsyncRequestOperation<PatchTicketingTicketRequest, PatchTicketingTicketResponse> operation
              = new PatchTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a category
     * 
     * @return The async call builder
     */
    public RemoveTicketingCategoryRequestBuilder removeTicketingCategory() {
        return new RemoveTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<RemoveTicketingCategoryResponse> removeTicketingCategory(RemoveTicketingCategoryRequest request) {
        AsyncRequestOperation<RemoveTicketingCategoryRequest, RemoveTicketingCategoryResponse> operation
              = new RemoveTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a customer
     * 
     * @return The async call builder
     */
    public RemoveTicketingCustomerRequestBuilder removeTicketingCustomer() {
        return new RemoveTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<RemoveTicketingCustomerResponse> removeTicketingCustomer(RemoveTicketingCustomerRequest request) {
        AsyncRequestOperation<RemoveTicketingCustomerRequest, RemoveTicketingCustomerResponse> operation
              = new RemoveTicketingCustomer.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a note
     * 
     * @return The async call builder
     */
    public RemoveTicketingNoteRequestBuilder removeTicketingNote() {
        return new RemoveTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveTicketingNoteResponse&gt; - The async response
     */
    public CompletableFuture<RemoveTicketingNoteResponse> removeTicketingNote(RemoveTicketingNoteRequest request) {
        AsyncRequestOperation<RemoveTicketingNoteRequest, RemoveTicketingNoteResponse> operation
              = new RemoveTicketingNote.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a ticket
     * 
     * @return The async call builder
     */
    public RemoveTicketingTicketRequestBuilder removeTicketingTicket() {
        return new RemoveTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveTicketingTicketResponse&gt; - The async response
     */
    public CompletableFuture<RemoveTicketingTicketResponse> removeTicketingTicket(RemoveTicketingTicketRequest request) {
        AsyncRequestOperation<RemoveTicketingTicketRequest, RemoveTicketingTicketResponse> operation
              = new RemoveTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a category
     * 
     * @return The async call builder
     */
    public UpdateTicketingCategoryRequestBuilder updateTicketingCategory() {
        return new UpdateTicketingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateTicketingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTicketingCategoryResponse> updateTicketingCategory(UpdateTicketingCategoryRequest request) {
        AsyncRequestOperation<UpdateTicketingCategoryRequest, UpdateTicketingCategoryResponse> operation
              = new UpdateTicketingCategory.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a customer
     * 
     * @return The async call builder
     */
    public UpdateTicketingCustomerRequestBuilder updateTicketingCustomer() {
        return new UpdateTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTicketingCustomerResponse> updateTicketingCustomer(UpdateTicketingCustomerRequest request) {
        AsyncRequestOperation<UpdateTicketingCustomerRequest, UpdateTicketingCustomerResponse> operation
              = new UpdateTicketingCustomer.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a note
     * 
     * @return The async call builder
     */
    public UpdateTicketingNoteRequestBuilder updateTicketingNote() {
        return new UpdateTicketingNoteRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a note
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateTicketingNoteResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTicketingNoteResponse> updateTicketingNote(UpdateTicketingNoteRequest request) {
        AsyncRequestOperation<UpdateTicketingNoteRequest, UpdateTicketingNoteResponse> operation
              = new UpdateTicketingNote.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a ticket
     * 
     * @return The async call builder
     */
    public UpdateTicketingTicketRequestBuilder updateTicketingTicket() {
        return new UpdateTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateTicketingTicketResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTicketingTicketResponse> updateTicketingTicket(UpdateTicketingTicketRequest request) {
        AsyncRequestOperation<UpdateTicketingTicketRequest, UpdateTicketingTicketResponse> operation
              = new UpdateTicketingTicket.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

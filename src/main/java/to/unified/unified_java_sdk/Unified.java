/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import to.unified.unified_java_sdk.models.operations.CreateUnifiedConnectionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateUnifiedConnectionResponse;
import to.unified.unified_java_sdk.models.operations.CreateUnifiedWebhookRequest;
import to.unified.unified_java_sdk.models.operations.CreateUnifiedWebhookRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateUnifiedWebhookResponse;
import to.unified.unified_java_sdk.models.operations.GetUnifiedApicallRequest;
import to.unified.unified_java_sdk.models.operations.GetUnifiedApicallRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetUnifiedApicallResponse;
import to.unified.unified_java_sdk.models.operations.GetUnifiedConnectionRequest;
import to.unified.unified_java_sdk.models.operations.GetUnifiedConnectionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetUnifiedConnectionResponse;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationAuthRequest;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationAuthRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetUnifiedIntegrationAuthResponse;
import to.unified.unified_java_sdk.models.operations.GetUnifiedWebhookRequest;
import to.unified.unified_java_sdk.models.operations.GetUnifiedWebhookRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetUnifiedWebhookResponse;
import to.unified.unified_java_sdk.models.operations.ListUnifiedApicallsRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedApicallsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUnifiedApicallsResponse;
import to.unified.unified_java_sdk.models.operations.ListUnifiedConnectionsRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedConnectionsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUnifiedConnectionsResponse;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationWorkspacesRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationWorkspacesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationWorkspacesResponse;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationsRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIntegrationsResponse;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIssuesRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIssuesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUnifiedIssuesResponse;
import to.unified.unified_java_sdk.models.operations.ListUnifiedWebhooksRequest;
import to.unified.unified_java_sdk.models.operations.ListUnifiedWebhooksRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListUnifiedWebhooksResponse;
import to.unified.unified_java_sdk.models.operations.PatchUnifiedConnectionRequest;
import to.unified.unified_java_sdk.models.operations.PatchUnifiedConnectionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchUnifiedConnectionResponse;
import to.unified.unified_java_sdk.models.operations.PatchUnifiedWebhookRequest;
import to.unified.unified_java_sdk.models.operations.PatchUnifiedWebhookRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchUnifiedWebhookResponse;
import to.unified.unified_java_sdk.models.operations.PatchUnifiedWebhookTriggerRequest;
import to.unified.unified_java_sdk.models.operations.PatchUnifiedWebhookTriggerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchUnifiedWebhookTriggerResponse;
import to.unified.unified_java_sdk.models.operations.RemoveUnifiedConnectionRequest;
import to.unified.unified_java_sdk.models.operations.RemoveUnifiedConnectionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveUnifiedConnectionResponse;
import to.unified.unified_java_sdk.models.operations.RemoveUnifiedWebhookRequest;
import to.unified.unified_java_sdk.models.operations.RemoveUnifiedWebhookRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveUnifiedWebhookResponse;
import to.unified.unified_java_sdk.models.operations.UpdateUnifiedConnectionRequest;
import to.unified.unified_java_sdk.models.operations.UpdateUnifiedConnectionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateUnifiedConnectionResponse;
import to.unified.unified_java_sdk.models.operations.UpdateUnifiedWebhookRequest;
import to.unified.unified_java_sdk.models.operations.UpdateUnifiedWebhookRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateUnifiedWebhookResponse;
import to.unified.unified_java_sdk.models.operations.UpdateUnifiedWebhookTriggerRequest;
import to.unified.unified_java_sdk.models.operations.UpdateUnifiedWebhookTriggerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateUnifiedWebhookTriggerResponse;
import to.unified.unified_java_sdk.models.shared.Connection;
import to.unified.unified_java_sdk.operations.CreateUnifiedConnection;
import to.unified.unified_java_sdk.operations.CreateUnifiedWebhook;
import to.unified.unified_java_sdk.operations.GetUnifiedApicall;
import to.unified.unified_java_sdk.operations.GetUnifiedConnection;
import to.unified.unified_java_sdk.operations.GetUnifiedIntegrationAuth;
import to.unified.unified_java_sdk.operations.GetUnifiedWebhook;
import to.unified.unified_java_sdk.operations.ListUnifiedApicalls;
import to.unified.unified_java_sdk.operations.ListUnifiedConnections;
import to.unified.unified_java_sdk.operations.ListUnifiedIntegrationWorkspaces;
import to.unified.unified_java_sdk.operations.ListUnifiedIntegrations;
import to.unified.unified_java_sdk.operations.ListUnifiedIssues;
import to.unified.unified_java_sdk.operations.ListUnifiedWebhooks;
import to.unified.unified_java_sdk.operations.PatchUnifiedConnection;
import to.unified.unified_java_sdk.operations.PatchUnifiedWebhook;
import to.unified.unified_java_sdk.operations.PatchUnifiedWebhookTrigger;
import to.unified.unified_java_sdk.operations.RemoveUnifiedConnection;
import to.unified.unified_java_sdk.operations.RemoveUnifiedWebhook;
import to.unified.unified_java_sdk.operations.UpdateUnifiedConnection;
import to.unified.unified_java_sdk.operations.UpdateUnifiedWebhook;
import to.unified.unified_java_sdk.operations.UpdateUnifiedWebhookTrigger;


public class Unified {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncUnified asyncSDK;

    Unified(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncUnified(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncUnified async() {
        return asyncSDK;
    }

    /**
     * Create connection
     * 
     * <p>Used only to import existing customer credentials; use "Authorize new connection" instead
     * 
     * @return The call builder
     */
    public CreateUnifiedConnectionRequestBuilder createUnifiedConnection() {
        return new CreateUnifiedConnectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create connection
     * 
     * <p>Used only to import existing customer credentials; use "Authorize new connection" instead
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateUnifiedConnectionResponse createUnifiedConnection(Connection request) throws Exception {
        RequestOperation<Connection, CreateUnifiedConnectionResponse> operation
              = new CreateUnifiedConnection.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create webhook subscription
     * 
     * <p>The data payload received by your server is described at https://docs.unified.to/unified/overview. The `interval` field can be set as low as 1 minute for paid accounts, and 60 minutes for free accounts.
     * 
     * @return The call builder
     */
    public CreateUnifiedWebhookRequestBuilder createUnifiedWebhook() {
        return new CreateUnifiedWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Create webhook subscription
     * 
     * <p>The data payload received by your server is described at https://docs.unified.to/unified/overview. The `interval` field can be set as low as 1 minute for paid accounts, and 60 minutes for free accounts.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateUnifiedWebhookResponse createUnifiedWebhook(CreateUnifiedWebhookRequest request) throws Exception {
        RequestOperation<CreateUnifiedWebhookRequest, CreateUnifiedWebhookResponse> operation
              = new CreateUnifiedWebhook.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve specific API Call by its ID
     * 
     * @return The call builder
     */
    public GetUnifiedApicallRequestBuilder getUnifiedApicall() {
        return new GetUnifiedApicallRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve specific API Call by its ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUnifiedApicallResponse getUnifiedApicall(GetUnifiedApicallRequest request) throws Exception {
        RequestOperation<GetUnifiedApicallRequest, GetUnifiedApicallResponse> operation
              = new GetUnifiedApicall.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve connection
     * 
     * @return The call builder
     */
    public GetUnifiedConnectionRequestBuilder getUnifiedConnection() {
        return new GetUnifiedConnectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve connection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUnifiedConnectionResponse getUnifiedConnection(GetUnifiedConnectionRequest request) throws Exception {
        RequestOperation<GetUnifiedConnectionRequest, GetUnifiedConnectionResponse> operation
              = new GetUnifiedConnection.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Authorize new connection
     * 
     * <p>Returns an authorization URL for the specified integration.  Once a successful authorization occurs, a new connection is created.
     * 
     * @return The call builder
     */
    public GetUnifiedIntegrationAuthRequestBuilder getUnifiedIntegrationAuth() {
        return new GetUnifiedIntegrationAuthRequestBuilder(sdkConfiguration);
    }

    /**
     * Authorize new connection
     * 
     * <p>Returns an authorization URL for the specified integration.  Once a successful authorization occurs, a new connection is created.
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUnifiedIntegrationAuthResponse getUnifiedIntegrationAuth(GetUnifiedIntegrationAuthRequest request) throws Exception {
        RequestOperation<GetUnifiedIntegrationAuthRequest, GetUnifiedIntegrationAuthResponse> operation
              = new GetUnifiedIntegrationAuth.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve webhook by its ID
     * 
     * @return The call builder
     */
    public GetUnifiedWebhookRequestBuilder getUnifiedWebhook() {
        return new GetUnifiedWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve webhook by its ID
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetUnifiedWebhookResponse getUnifiedWebhook(GetUnifiedWebhookRequest request) throws Exception {
        RequestOperation<GetUnifiedWebhookRequest, GetUnifiedWebhookResponse> operation
              = new GetUnifiedWebhook.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns API Calls
     * 
     * @return The call builder
     */
    public ListUnifiedApicallsRequestBuilder listUnifiedApicalls() {
        return new ListUnifiedApicallsRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns API Calls
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUnifiedApicallsResponse listUnifiedApicalls(ListUnifiedApicallsRequest request) throws Exception {
        RequestOperation<ListUnifiedApicallsRequest, ListUnifiedApicallsResponse> operation
              = new ListUnifiedApicalls.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all connections
     * 
     * @return The call builder
     */
    public ListUnifiedConnectionsRequestBuilder listUnifiedConnections() {
        return new ListUnifiedConnectionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all connections
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUnifiedConnectionsResponse listUnifiedConnections(ListUnifiedConnectionsRequest request) throws Exception {
        RequestOperation<ListUnifiedConnectionsRequest, ListUnifiedConnectionsResponse> operation
              = new ListUnifiedConnections.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns all activated integrations in a workspace
     * 
     * <p>No authentication required as this is to be used by front-end interface
     * 
     * @return The call builder
     */
    public ListUnifiedIntegrationWorkspacesRequestBuilder listUnifiedIntegrationWorkspaces() {
        return new ListUnifiedIntegrationWorkspacesRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns all activated integrations in a workspace
     * 
     * <p>No authentication required as this is to be used by front-end interface
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUnifiedIntegrationWorkspacesResponse listUnifiedIntegrationWorkspaces(ListUnifiedIntegrationWorkspacesRequest request) throws Exception {
        RequestOperation<ListUnifiedIntegrationWorkspacesRequest, ListUnifiedIntegrationWorkspacesResponse> operation
              = new ListUnifiedIntegrationWorkspaces.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns all integrations
     * 
     * @return The call builder
     */
    public ListUnifiedIntegrationsRequestBuilder listUnifiedIntegrations() {
        return new ListUnifiedIntegrationsRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns all integrations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUnifiedIntegrationsResponse listUnifiedIntegrations(ListUnifiedIntegrationsRequest request) throws Exception {
        RequestOperation<ListUnifiedIntegrationsRequest, ListUnifiedIntegrationsResponse> operation
              = new ListUnifiedIntegrations.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List support issues
     * 
     * @return The call builder
     */
    public ListUnifiedIssuesRequestBuilder listUnifiedIssues() {
        return new ListUnifiedIssuesRequestBuilder(sdkConfiguration);
    }

    /**
     * List support issues
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUnifiedIssuesResponse listUnifiedIssues(ListUnifiedIssuesRequest request) throws Exception {
        RequestOperation<ListUnifiedIssuesRequest, ListUnifiedIssuesResponse> operation
              = new ListUnifiedIssues.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Returns all registered webhooks
     * 
     * @return The call builder
     */
    public ListUnifiedWebhooksRequestBuilder listUnifiedWebhooks() {
        return new ListUnifiedWebhooksRequestBuilder(sdkConfiguration);
    }

    /**
     * Returns all registered webhooks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListUnifiedWebhooksResponse listUnifiedWebhooks(ListUnifiedWebhooksRequest request) throws Exception {
        RequestOperation<ListUnifiedWebhooksRequest, ListUnifiedWebhooksResponse> operation
              = new ListUnifiedWebhooks.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update connection
     * 
     * @return The call builder
     */
    public PatchUnifiedConnectionRequestBuilder patchUnifiedConnection() {
        return new PatchUnifiedConnectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update connection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchUnifiedConnectionResponse patchUnifiedConnection(PatchUnifiedConnectionRequest request) throws Exception {
        RequestOperation<PatchUnifiedConnectionRequest, PatchUnifiedConnectionResponse> operation
              = new PatchUnifiedConnection.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update webhook subscription
     * 
     * @return The call builder
     */
    public PatchUnifiedWebhookRequestBuilder patchUnifiedWebhook() {
        return new PatchUnifiedWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Update webhook subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchUnifiedWebhookResponse patchUnifiedWebhook(PatchUnifiedWebhookRequest request) throws Exception {
        RequestOperation<PatchUnifiedWebhookRequest, PatchUnifiedWebhookResponse> operation
              = new PatchUnifiedWebhook.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Trigger webhook
     * 
     * @return The call builder
     */
    public PatchUnifiedWebhookTriggerRequestBuilder patchUnifiedWebhookTrigger() {
        return new PatchUnifiedWebhookTriggerRequestBuilder(sdkConfiguration);
    }

    /**
     * Trigger webhook
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchUnifiedWebhookTriggerResponse patchUnifiedWebhookTrigger(PatchUnifiedWebhookTriggerRequest request) throws Exception {
        RequestOperation<PatchUnifiedWebhookTriggerRequest, PatchUnifiedWebhookTriggerResponse> operation
              = new PatchUnifiedWebhookTrigger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove connection
     * 
     * @return The call builder
     */
    public RemoveUnifiedConnectionRequestBuilder removeUnifiedConnection() {
        return new RemoveUnifiedConnectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove connection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveUnifiedConnectionResponse removeUnifiedConnection(RemoveUnifiedConnectionRequest request) throws Exception {
        RequestOperation<RemoveUnifiedConnectionRequest, RemoveUnifiedConnectionResponse> operation
              = new RemoveUnifiedConnection.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove webhook subscription
     * 
     * @return The call builder
     */
    public RemoveUnifiedWebhookRequestBuilder removeUnifiedWebhook() {
        return new RemoveUnifiedWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove webhook subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveUnifiedWebhookResponse removeUnifiedWebhook(RemoveUnifiedWebhookRequest request) throws Exception {
        RequestOperation<RemoveUnifiedWebhookRequest, RemoveUnifiedWebhookResponse> operation
              = new RemoveUnifiedWebhook.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update connection
     * 
     * @return The call builder
     */
    public UpdateUnifiedConnectionRequestBuilder updateUnifiedConnection() {
        return new UpdateUnifiedConnectionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update connection
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUnifiedConnectionResponse updateUnifiedConnection(UpdateUnifiedConnectionRequest request) throws Exception {
        RequestOperation<UpdateUnifiedConnectionRequest, UpdateUnifiedConnectionResponse> operation
              = new UpdateUnifiedConnection.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update webhook subscription
     * 
     * @return The call builder
     */
    public UpdateUnifiedWebhookRequestBuilder updateUnifiedWebhook() {
        return new UpdateUnifiedWebhookRequestBuilder(sdkConfiguration);
    }

    /**
     * Update webhook subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUnifiedWebhookResponse updateUnifiedWebhook(UpdateUnifiedWebhookRequest request) throws Exception {
        RequestOperation<UpdateUnifiedWebhookRequest, UpdateUnifiedWebhookResponse> operation
              = new UpdateUnifiedWebhook.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Trigger webhook
     * 
     * @return The call builder
     */
    public UpdateUnifiedWebhookTriggerRequestBuilder updateUnifiedWebhookTrigger() {
        return new UpdateUnifiedWebhookTriggerRequestBuilder(sdkConfiguration);
    }

    /**
     * Trigger webhook
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateUnifiedWebhookTriggerResponse updateUnifiedWebhookTrigger(UpdateUnifiedWebhookTriggerRequest request) throws Exception {
        RequestOperation<UpdateUnifiedWebhookTriggerRequest, UpdateUnifiedWebhookTriggerResponse> operation
              = new UpdateUnifiedWebhookTrigger.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}

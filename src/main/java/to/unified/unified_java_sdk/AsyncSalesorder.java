/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingSalesordersRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingSalesordersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingSalesordersResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingSalesorderResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingSalesorder;
import to.unified.unified_java_sdk.operations.GetAccountingSalesorder;
import to.unified.unified_java_sdk.operations.ListAccountingSalesorders;
import to.unified.unified_java_sdk.operations.PatchAccountingSalesorder;
import to.unified.unified_java_sdk.operations.RemoveAccountingSalesorder;
import to.unified.unified_java_sdk.operations.UpdateAccountingSalesorder;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncSalesorder {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Salesorder syncSDK;

    AsyncSalesorder(Salesorder syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Salesorder sync() {
        return syncSDK;
    }


    /**
     * Create a salesorder
     * 
     * @return The async call builder
     */
    public CreateAccountingSalesorderRequestBuilder createAccountingSalesorder() {
        return new CreateAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateAccountingSalesorderResponse>} - The async response
     */
    public CompletableFuture<CreateAccountingSalesorderResponse> createAccountingSalesorder(CreateAccountingSalesorderRequest request) {
        AsyncRequestOperation<CreateAccountingSalesorderRequest, CreateAccountingSalesorderResponse> operation
              = new CreateAccountingSalesorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a salesorder
     * 
     * @return The async call builder
     */
    public GetAccountingSalesorderRequestBuilder getAccountingSalesorder() {
        return new GetAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetAccountingSalesorderResponse>} - The async response
     */
    public CompletableFuture<GetAccountingSalesorderResponse> getAccountingSalesorder(GetAccountingSalesorderRequest request) {
        AsyncRequestOperation<GetAccountingSalesorderRequest, GetAccountingSalesorderResponse> operation
              = new GetAccountingSalesorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all salesorders
     * 
     * @return The async call builder
     */
    public ListAccountingSalesordersRequestBuilder listAccountingSalesorders() {
        return new ListAccountingSalesordersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all salesorders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListAccountingSalesordersResponse>} - The async response
     */
    public CompletableFuture<ListAccountingSalesordersResponse> listAccountingSalesorders(ListAccountingSalesordersRequest request) {
        AsyncRequestOperation<ListAccountingSalesordersRequest, ListAccountingSalesordersResponse> operation
              = new ListAccountingSalesorders.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a salesorder
     * 
     * @return The async call builder
     */
    public PatchAccountingSalesorderRequestBuilder patchAccountingSalesorder() {
        return new PatchAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchAccountingSalesorderResponse>} - The async response
     */
    public CompletableFuture<PatchAccountingSalesorderResponse> patchAccountingSalesorder(PatchAccountingSalesorderRequest request) {
        AsyncRequestOperation<PatchAccountingSalesorderRequest, PatchAccountingSalesorderResponse> operation
              = new PatchAccountingSalesorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a salesorder
     * 
     * @return The async call builder
     */
    public RemoveAccountingSalesorderRequestBuilder removeAccountingSalesorder() {
        return new RemoveAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveAccountingSalesorderResponse>} - The async response
     */
    public CompletableFuture<RemoveAccountingSalesorderResponse> removeAccountingSalesorder(RemoveAccountingSalesorderRequest request) {
        AsyncRequestOperation<RemoveAccountingSalesorderRequest, RemoveAccountingSalesorderResponse> operation
              = new RemoveAccountingSalesorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a salesorder
     * 
     * @return The async call builder
     */
    public UpdateAccountingSalesorderRequestBuilder updateAccountingSalesorder() {
        return new UpdateAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateAccountingSalesorderResponse>} - The async response
     */
    public CompletableFuture<UpdateAccountingSalesorderResponse> updateAccountingSalesorder(UpdateAccountingSalesorderRequest request) {
        AsyncRequestOperation<UpdateAccountingSalesorderRequest, UpdateAccountingSalesorderResponse> operation
              = new UpdateAccountingSalesorder.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

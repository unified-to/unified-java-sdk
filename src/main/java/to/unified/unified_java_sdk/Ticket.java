/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import to.unified.unified_java_sdk.models.operations.CreateTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.CreateTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.GetTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.ListTicketingTicketsRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingTicketsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListTicketingTicketsResponse;
import to.unified.unified_java_sdk.models.operations.PatchTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingTicketResponse;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingTicketRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingTicketRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingTicketResponse;
import to.unified.unified_java_sdk.operations.CreateTicketingTicket;
import to.unified.unified_java_sdk.operations.GetTicketingTicket;
import to.unified.unified_java_sdk.operations.ListTicketingTickets;
import to.unified.unified_java_sdk.operations.PatchTicketingTicket;
import to.unified.unified_java_sdk.operations.RemoveTicketingTicket;
import to.unified.unified_java_sdk.operations.UpdateTicketingTicket;


public class Ticket {
    private final SDKConfiguration sdkConfiguration;
    private final AsyncTicket asyncSDK;

    Ticket(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncTicket(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncTicket async() {
        return asyncSDK;
    }

    /**
     * Create a ticket
     * 
     * @return The call builder
     */
    public CreateTicketingTicketRequestBuilder createTicketingTicket() {
        return new CreateTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateTicketingTicketResponse createTicketingTicket(CreateTicketingTicketRequest request) throws Exception {
        RequestOperation<CreateTicketingTicketRequest, CreateTicketingTicketResponse> operation
              = new CreateTicketingTicket.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a ticket
     * 
     * @return The call builder
     */
    public GetTicketingTicketRequestBuilder getTicketingTicket() {
        return new GetTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTicketingTicketResponse getTicketingTicket(GetTicketingTicketRequest request) throws Exception {
        RequestOperation<GetTicketingTicketRequest, GetTicketingTicketResponse> operation
              = new GetTicketingTicket.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all tickets
     * 
     * @return The call builder
     */
    public ListTicketingTicketsRequestBuilder listTicketingTickets() {
        return new ListTicketingTicketsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all tickets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListTicketingTicketsResponse listTicketingTickets(ListTicketingTicketsRequest request) throws Exception {
        RequestOperation<ListTicketingTicketsRequest, ListTicketingTicketsResponse> operation
              = new ListTicketingTickets.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a ticket
     * 
     * @return The call builder
     */
    public PatchTicketingTicketRequestBuilder patchTicketingTicket() {
        return new PatchTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchTicketingTicketResponse patchTicketingTicket(PatchTicketingTicketRequest request) throws Exception {
        RequestOperation<PatchTicketingTicketRequest, PatchTicketingTicketResponse> operation
              = new PatchTicketingTicket.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a ticket
     * 
     * @return The call builder
     */
    public RemoveTicketingTicketRequestBuilder removeTicketingTicket() {
        return new RemoveTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveTicketingTicketResponse removeTicketingTicket(RemoveTicketingTicketRequest request) throws Exception {
        RequestOperation<RemoveTicketingTicketRequest, RemoveTicketingTicketResponse> operation
              = new RemoveTicketingTicket.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a ticket
     * 
     * @return The call builder
     */
    public UpdateTicketingTicketRequestBuilder updateTicketingTicket() {
        return new UpdateTicketingTicketRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a ticket
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateTicketingTicketResponse updateTicketingTicket(UpdateTicketingTicketRequest request) throws Exception {
        RequestOperation<UpdateTicketingTicketRequest, UpdateTicketingTicketResponse> operation
              = new UpdateTicketingTicket.Sync(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}

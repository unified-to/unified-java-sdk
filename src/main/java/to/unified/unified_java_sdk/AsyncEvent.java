/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateCalendarEventRequest;
import to.unified.unified_java_sdk.models.operations.CreateCrmEventRequest;
import to.unified.unified_java_sdk.models.operations.GetCalendarEventRequest;
import to.unified.unified_java_sdk.models.operations.GetCrmEventRequest;
import to.unified.unified_java_sdk.models.operations.ListCalendarEventsRequest;
import to.unified.unified_java_sdk.models.operations.ListCrmEventsRequest;
import to.unified.unified_java_sdk.models.operations.PatchCalendarEventRequest;
import to.unified.unified_java_sdk.models.operations.PatchCrmEventRequest;
import to.unified.unified_java_sdk.models.operations.RemoveCalendarEventRequest;
import to.unified.unified_java_sdk.models.operations.RemoveCrmEventRequest;
import to.unified.unified_java_sdk.models.operations.UpdateCalendarEventRequest;
import to.unified.unified_java_sdk.models.operations.UpdateCrmEventRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateCalendarEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateCalendarEventResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateCrmEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateCrmEventResponse;
import to.unified.unified_java_sdk.models.operations.async.GetCalendarEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetCalendarEventResponse;
import to.unified.unified_java_sdk.models.operations.async.GetCrmEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetCrmEventResponse;
import to.unified.unified_java_sdk.models.operations.async.ListCalendarEventsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListCalendarEventsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListCrmEventsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListCrmEventsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchCalendarEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchCalendarEventResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchCrmEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchCrmEventResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveCalendarEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveCalendarEventResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveCrmEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveCrmEventResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateCalendarEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateCalendarEventResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateCrmEventRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateCrmEventResponse;
import to.unified.unified_java_sdk.operations.CreateCalendarEvent;
import to.unified.unified_java_sdk.operations.CreateCrmEvent;
import to.unified.unified_java_sdk.operations.GetCalendarEvent;
import to.unified.unified_java_sdk.operations.GetCrmEvent;
import to.unified.unified_java_sdk.operations.ListCalendarEvents;
import to.unified.unified_java_sdk.operations.ListCrmEvents;
import to.unified.unified_java_sdk.operations.PatchCalendarEvent;
import to.unified.unified_java_sdk.operations.PatchCrmEvent;
import to.unified.unified_java_sdk.operations.RemoveCalendarEvent;
import to.unified.unified_java_sdk.operations.RemoveCrmEvent;
import to.unified.unified_java_sdk.operations.UpdateCalendarEvent;
import to.unified.unified_java_sdk.operations.UpdateCrmEvent;


public class AsyncEvent {
    private final SDKConfiguration sdkConfiguration;
    private final Event syncSDK;

    AsyncEvent(Event syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Event sync() {
        return syncSDK;
    }


    /**
     * Create an event
     * 
     * @return The async call builder
     */
    public CreateCalendarEventRequestBuilder createCalendarEvent() {
        return new CreateCalendarEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateCalendarEventResponse&gt; - The async response
     */
    public CompletableFuture<CreateCalendarEventResponse> createCalendarEvent(CreateCalendarEventRequest request) {
        AsyncRequestOperation<CreateCalendarEventRequest, CreateCalendarEventResponse> operation
              = new CreateCalendarEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create an event
     * 
     * @return The async call builder
     */
    public CreateCrmEventRequestBuilder createCrmEvent() {
        return new CreateCrmEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateCrmEventResponse&gt; - The async response
     */
    public CompletableFuture<CreateCrmEventResponse> createCrmEvent(CreateCrmEventRequest request) {
        AsyncRequestOperation<CreateCrmEventRequest, CreateCrmEventResponse> operation
              = new CreateCrmEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an event
     * 
     * @return The async call builder
     */
    public GetCalendarEventRequestBuilder getCalendarEvent() {
        return new GetCalendarEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetCalendarEventResponse&gt; - The async response
     */
    public CompletableFuture<GetCalendarEventResponse> getCalendarEvent(GetCalendarEventRequest request) {
        AsyncRequestOperation<GetCalendarEventRequest, GetCalendarEventResponse> operation
              = new GetCalendarEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an event
     * 
     * @return The async call builder
     */
    public GetCrmEventRequestBuilder getCrmEvent() {
        return new GetCrmEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetCrmEventResponse&gt; - The async response
     */
    public CompletableFuture<GetCrmEventResponse> getCrmEvent(GetCrmEventRequest request) {
        AsyncRequestOperation<GetCrmEventRequest, GetCrmEventResponse> operation
              = new GetCrmEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all events
     * 
     * @return The async call builder
     */
    public ListCalendarEventsRequestBuilder listCalendarEvents() {
        return new ListCalendarEventsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all events
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListCalendarEventsResponse&gt; - The async response
     */
    public CompletableFuture<ListCalendarEventsResponse> listCalendarEvents(ListCalendarEventsRequest request) {
        AsyncRequestOperation<ListCalendarEventsRequest, ListCalendarEventsResponse> operation
              = new ListCalendarEvents.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all events
     * 
     * @return The async call builder
     */
    public ListCrmEventsRequestBuilder listCrmEvents() {
        return new ListCrmEventsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all events
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListCrmEventsResponse&gt; - The async response
     */
    public CompletableFuture<ListCrmEventsResponse> listCrmEvents(ListCrmEventsRequest request) {
        AsyncRequestOperation<ListCrmEventsRequest, ListCrmEventsResponse> operation
              = new ListCrmEvents.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an event
     * 
     * @return The async call builder
     */
    public PatchCalendarEventRequestBuilder patchCalendarEvent() {
        return new PatchCalendarEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchCalendarEventResponse&gt; - The async response
     */
    public CompletableFuture<PatchCalendarEventResponse> patchCalendarEvent(PatchCalendarEventRequest request) {
        AsyncRequestOperation<PatchCalendarEventRequest, PatchCalendarEventResponse> operation
              = new PatchCalendarEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an event
     * 
     * @return The async call builder
     */
    public PatchCrmEventRequestBuilder patchCrmEvent() {
        return new PatchCrmEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchCrmEventResponse&gt; - The async response
     */
    public CompletableFuture<PatchCrmEventResponse> patchCrmEvent(PatchCrmEventRequest request) {
        AsyncRequestOperation<PatchCrmEventRequest, PatchCrmEventResponse> operation
              = new PatchCrmEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an event
     * 
     * @return The async call builder
     */
    public RemoveCalendarEventRequestBuilder removeCalendarEvent() {
        return new RemoveCalendarEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveCalendarEventResponse&gt; - The async response
     */
    public CompletableFuture<RemoveCalendarEventResponse> removeCalendarEvent(RemoveCalendarEventRequest request) {
        AsyncRequestOperation<RemoveCalendarEventRequest, RemoveCalendarEventResponse> operation
              = new RemoveCalendarEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an event
     * 
     * @return The async call builder
     */
    public RemoveCrmEventRequestBuilder removeCrmEvent() {
        return new RemoveCrmEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveCrmEventResponse&gt; - The async response
     */
    public CompletableFuture<RemoveCrmEventResponse> removeCrmEvent(RemoveCrmEventRequest request) {
        AsyncRequestOperation<RemoveCrmEventRequest, RemoveCrmEventResponse> operation
              = new RemoveCrmEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an event
     * 
     * @return The async call builder
     */
    public UpdateCalendarEventRequestBuilder updateCalendarEvent() {
        return new UpdateCalendarEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateCalendarEventResponse&gt; - The async response
     */
    public CompletableFuture<UpdateCalendarEventResponse> updateCalendarEvent(UpdateCalendarEventRequest request) {
        AsyncRequestOperation<UpdateCalendarEventRequest, UpdateCalendarEventResponse> operation
              = new UpdateCalendarEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an event
     * 
     * @return The async call builder
     */
    public UpdateCrmEventRequestBuilder updateCrmEvent() {
        return new UpdateCrmEventRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an event
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateCrmEventResponse&gt; - The async response
     */
    public CompletableFuture<UpdateCrmEventResponse> updateCrmEvent(UpdateCrmEventRequest request) {
        AsyncRequestOperation<UpdateCrmEventRequest, UpdateCrmEventResponse> operation
              = new UpdateCrmEvent.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

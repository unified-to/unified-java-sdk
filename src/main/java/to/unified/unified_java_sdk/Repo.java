/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import to.unified.unified_java_sdk.models.operations.CreateRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.CreateRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.CreateRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.CreateRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.CreateRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.GetRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.GetRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.GetRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.GetRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.ListRepoBranchesRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoBranchesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListRepoBranchesResponse;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListRepoCommitsResponse;
import to.unified.unified_java_sdk.models.operations.ListRepoOrganizationsRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoOrganizationsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListRepoOrganizationsResponse;
import to.unified.unified_java_sdk.models.operations.ListRepoPullrequestsRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoPullrequestsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListRepoPullrequestsResponse;
import to.unified.unified_java_sdk.models.operations.ListRepoRepositoriesRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoRepositoriesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListRepoRepositoriesResponse;
import to.unified.unified_java_sdk.models.operations.PatchRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.PatchRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.PatchRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.PatchRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.RemoveRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.RemoveRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.RemoveRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.RemoveRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.UpdateRepoBranchRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoBranchRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateRepoBranchResponse;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateRepoCommitResponse;
import to.unified.unified_java_sdk.models.operations.UpdateRepoOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateRepoOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.UpdateRepoPullrequestRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoPullrequestRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateRepoPullrequestResponse;
import to.unified.unified_java_sdk.models.operations.UpdateRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateRepoRepositoryResponse;
import to.unified.unified_java_sdk.operations.CreateRepoBranchOperation;
import to.unified.unified_java_sdk.operations.CreateRepoCommitOperation;
import to.unified.unified_java_sdk.operations.CreateRepoOrganizationOperation;
import to.unified.unified_java_sdk.operations.CreateRepoPullrequestOperation;
import to.unified.unified_java_sdk.operations.CreateRepoRepositoryOperation;
import to.unified.unified_java_sdk.operations.GetRepoBranchOperation;
import to.unified.unified_java_sdk.operations.GetRepoCommitOperation;
import to.unified.unified_java_sdk.operations.GetRepoOrganizationOperation;
import to.unified.unified_java_sdk.operations.GetRepoPullrequestOperation;
import to.unified.unified_java_sdk.operations.GetRepoRepositoryOperation;
import to.unified.unified_java_sdk.operations.ListRepoBranchesOperation;
import to.unified.unified_java_sdk.operations.ListRepoCommitsOperation;
import to.unified.unified_java_sdk.operations.ListRepoOrganizationsOperation;
import to.unified.unified_java_sdk.operations.ListRepoPullrequestsOperation;
import to.unified.unified_java_sdk.operations.ListRepoRepositoriesOperation;
import to.unified.unified_java_sdk.operations.PatchRepoBranchOperation;
import to.unified.unified_java_sdk.operations.PatchRepoCommitOperation;
import to.unified.unified_java_sdk.operations.PatchRepoOrganizationOperation;
import to.unified.unified_java_sdk.operations.PatchRepoPullrequestOperation;
import to.unified.unified_java_sdk.operations.PatchRepoRepositoryOperation;
import to.unified.unified_java_sdk.operations.RemoveRepoBranchOperation;
import to.unified.unified_java_sdk.operations.RemoveRepoCommitOperation;
import to.unified.unified_java_sdk.operations.RemoveRepoOrganizationOperation;
import to.unified.unified_java_sdk.operations.RemoveRepoPullrequestOperation;
import to.unified.unified_java_sdk.operations.RemoveRepoRepositoryOperation;
import to.unified.unified_java_sdk.operations.UpdateRepoBranchOperation;
import to.unified.unified_java_sdk.operations.UpdateRepoCommitOperation;
import to.unified.unified_java_sdk.operations.UpdateRepoOrganizationOperation;
import to.unified.unified_java_sdk.operations.UpdateRepoPullrequestOperation;
import to.unified.unified_java_sdk.operations.UpdateRepoRepositoryOperation;


public class Repo {
    private final SDKConfiguration sdkConfiguration;

    Repo(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a branch
     * 
     * @return The call builder
     */
    public CreateRepoBranchRequestBuilder createRepoBranch() {
        return new CreateRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRepoBranchResponse createRepoBranch(CreateRepoBranchRequest request) throws Exception {
        RequestOperation<CreateRepoBranchRequest, CreateRepoBranchResponse> operation
              = new CreateRepoBranchOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a commit
     * 
     * @return The call builder
     */
    public CreateRepoCommitRequestBuilder createRepoCommit() {
        return new CreateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRepoCommitResponse createRepoCommit(CreateRepoCommitRequest request) throws Exception {
        RequestOperation<CreateRepoCommitRequest, CreateRepoCommitResponse> operation
              = new CreateRepoCommitOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create an organization
     * 
     * @return The call builder
     */
    public CreateRepoOrganizationRequestBuilder createRepoOrganization() {
        return new CreateRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRepoOrganizationResponse createRepoOrganization(CreateRepoOrganizationRequest request) throws Exception {
        RequestOperation<CreateRepoOrganizationRequest, CreateRepoOrganizationResponse> operation
              = new CreateRepoOrganizationOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a pullrequest
     * 
     * @return The call builder
     */
    public CreateRepoPullrequestRequestBuilder createRepoPullrequest() {
        return new CreateRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRepoPullrequestResponse createRepoPullrequest(CreateRepoPullrequestRequest request) throws Exception {
        RequestOperation<CreateRepoPullrequestRequest, CreateRepoPullrequestResponse> operation
              = new CreateRepoPullrequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Create a repository
     * 
     * @return The call builder
     */
    public CreateRepoRepositoryRequestBuilder createRepoRepository() {
        return new CreateRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateRepoRepositoryResponse createRepoRepository(CreateRepoRepositoryRequest request) throws Exception {
        RequestOperation<CreateRepoRepositoryRequest, CreateRepoRepositoryResponse> operation
              = new CreateRepoRepositoryOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a branch
     * 
     * @return The call builder
     */
    public GetRepoBranchRequestBuilder getRepoBranch() {
        return new GetRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRepoBranchResponse getRepoBranch(GetRepoBranchRequest request) throws Exception {
        RequestOperation<GetRepoBranchRequest, GetRepoBranchResponse> operation
              = new GetRepoBranchOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a commit
     * 
     * @return The call builder
     */
    public GetRepoCommitRequestBuilder getRepoCommit() {
        return new GetRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRepoCommitResponse getRepoCommit(GetRepoCommitRequest request) throws Exception {
        RequestOperation<GetRepoCommitRequest, GetRepoCommitResponse> operation
              = new GetRepoCommitOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve an organization
     * 
     * @return The call builder
     */
    public GetRepoOrganizationRequestBuilder getRepoOrganization() {
        return new GetRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRepoOrganizationResponse getRepoOrganization(GetRepoOrganizationRequest request) throws Exception {
        RequestOperation<GetRepoOrganizationRequest, GetRepoOrganizationResponse> operation
              = new GetRepoOrganizationOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a pullrequest
     * 
     * @return The call builder
     */
    public GetRepoPullrequestRequestBuilder getRepoPullrequest() {
        return new GetRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRepoPullrequestResponse getRepoPullrequest(GetRepoPullrequestRequest request) throws Exception {
        RequestOperation<GetRepoPullrequestRequest, GetRepoPullrequestResponse> operation
              = new GetRepoPullrequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve a repository
     * 
     * @return The call builder
     */
    public GetRepoRepositoryRequestBuilder getRepoRepository() {
        return new GetRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetRepoRepositoryResponse getRepoRepository(GetRepoRepositoryRequest request) throws Exception {
        RequestOperation<GetRepoRepositoryRequest, GetRepoRepositoryResponse> operation
              = new GetRepoRepositoryOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all branches
     * 
     * @return The call builder
     */
    public ListRepoBranchesRequestBuilder listRepoBranches() {
        return new ListRepoBranchesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all branches
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRepoBranchesResponse listRepoBranches(ListRepoBranchesRequest request) throws Exception {
        RequestOperation<ListRepoBranchesRequest, ListRepoBranchesResponse> operation
              = new ListRepoBranchesOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all commits
     * 
     * @return The call builder
     */
    public ListRepoCommitsRequestBuilder listRepoCommits() {
        return new ListRepoCommitsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all commits
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRepoCommitsResponse listRepoCommits(ListRepoCommitsRequest request) throws Exception {
        RequestOperation<ListRepoCommitsRequest, ListRepoCommitsResponse> operation
              = new ListRepoCommitsOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all organizations
     * 
     * @return The call builder
     */
    public ListRepoOrganizationsRequestBuilder listRepoOrganizations() {
        return new ListRepoOrganizationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all organizations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRepoOrganizationsResponse listRepoOrganizations(ListRepoOrganizationsRequest request) throws Exception {
        RequestOperation<ListRepoOrganizationsRequest, ListRepoOrganizationsResponse> operation
              = new ListRepoOrganizationsOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all pullrequests
     * 
     * @return The call builder
     */
    public ListRepoPullrequestsRequestBuilder listRepoPullrequests() {
        return new ListRepoPullrequestsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all pullrequests
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRepoPullrequestsResponse listRepoPullrequests(ListRepoPullrequestsRequest request) throws Exception {
        RequestOperation<ListRepoPullrequestsRequest, ListRepoPullrequestsResponse> operation
              = new ListRepoPullrequestsOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all repositories
     * 
     * @return The call builder
     */
    public ListRepoRepositoriesRequestBuilder listRepoRepositories() {
        return new ListRepoRepositoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all repositories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListRepoRepositoriesResponse listRepoRepositories(ListRepoRepositoriesRequest request) throws Exception {
        RequestOperation<ListRepoRepositoriesRequest, ListRepoRepositoriesResponse> operation
              = new ListRepoRepositoriesOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a branch
     * 
     * @return The call builder
     */
    public PatchRepoBranchRequestBuilder patchRepoBranch() {
        return new PatchRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchRepoBranchResponse patchRepoBranch(PatchRepoBranchRequest request) throws Exception {
        RequestOperation<PatchRepoBranchRequest, PatchRepoBranchResponse> operation
              = new PatchRepoBranchOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a commit
     * 
     * @return The call builder
     */
    public PatchRepoCommitRequestBuilder patchRepoCommit() {
        return new PatchRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchRepoCommitResponse patchRepoCommit(PatchRepoCommitRequest request) throws Exception {
        RequestOperation<PatchRepoCommitRequest, PatchRepoCommitResponse> operation
              = new PatchRepoCommitOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an organization
     * 
     * @return The call builder
     */
    public PatchRepoOrganizationRequestBuilder patchRepoOrganization() {
        return new PatchRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchRepoOrganizationResponse patchRepoOrganization(PatchRepoOrganizationRequest request) throws Exception {
        RequestOperation<PatchRepoOrganizationRequest, PatchRepoOrganizationResponse> operation
              = new PatchRepoOrganizationOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a pullrequest
     * 
     * @return The call builder
     */
    public PatchRepoPullrequestRequestBuilder patchRepoPullrequest() {
        return new PatchRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchRepoPullrequestResponse patchRepoPullrequest(PatchRepoPullrequestRequest request) throws Exception {
        RequestOperation<PatchRepoPullrequestRequest, PatchRepoPullrequestResponse> operation
              = new PatchRepoPullrequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a repository
     * 
     * @return The call builder
     */
    public PatchRepoRepositoryRequestBuilder patchRepoRepository() {
        return new PatchRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchRepoRepositoryResponse patchRepoRepository(PatchRepoRepositoryRequest request) throws Exception {
        RequestOperation<PatchRepoRepositoryRequest, PatchRepoRepositoryResponse> operation
              = new PatchRepoRepositoryOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a branch
     * 
     * @return The call builder
     */
    public RemoveRepoBranchRequestBuilder removeRepoBranch() {
        return new RemoveRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveRepoBranchResponse removeRepoBranch(RemoveRepoBranchRequest request) throws Exception {
        RequestOperation<RemoveRepoBranchRequest, RemoveRepoBranchResponse> operation
              = new RemoveRepoBranchOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a commit
     * 
     * @return The call builder
     */
    public RemoveRepoCommitRequestBuilder removeRepoCommit() {
        return new RemoveRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveRepoCommitResponse removeRepoCommit(RemoveRepoCommitRequest request) throws Exception {
        RequestOperation<RemoveRepoCommitRequest, RemoveRepoCommitResponse> operation
              = new RemoveRepoCommitOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove an organization
     * 
     * @return The call builder
     */
    public RemoveRepoOrganizationRequestBuilder removeRepoOrganization() {
        return new RemoveRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveRepoOrganizationResponse removeRepoOrganization(RemoveRepoOrganizationRequest request) throws Exception {
        RequestOperation<RemoveRepoOrganizationRequest, RemoveRepoOrganizationResponse> operation
              = new RemoveRepoOrganizationOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a pullrequest
     * 
     * @return The call builder
     */
    public RemoveRepoPullrequestRequestBuilder removeRepoPullrequest() {
        return new RemoveRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveRepoPullrequestResponse removeRepoPullrequest(RemoveRepoPullrequestRequest request) throws Exception {
        RequestOperation<RemoveRepoPullrequestRequest, RemoveRepoPullrequestResponse> operation
              = new RemoveRepoPullrequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove a repository
     * 
     * @return The call builder
     */
    public RemoveRepoRepositoryRequestBuilder removeRepoRepository() {
        return new RemoveRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveRepoRepositoryResponse removeRepoRepository(RemoveRepoRepositoryRequest request) throws Exception {
        RequestOperation<RemoveRepoRepositoryRequest, RemoveRepoRepositoryResponse> operation
              = new RemoveRepoRepositoryOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a branch
     * 
     * @return The call builder
     */
    public UpdateRepoBranchRequestBuilder updateRepoBranch() {
        return new UpdateRepoBranchRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a branch
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateRepoBranchResponse updateRepoBranch(UpdateRepoBranchRequest request) throws Exception {
        RequestOperation<UpdateRepoBranchRequest, UpdateRepoBranchResponse> operation
              = new UpdateRepoBranchOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a commit
     * 
     * @return The call builder
     */
    public UpdateRepoCommitRequestBuilder updateRepoCommit() {
        return new UpdateRepoCommitRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a commit
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateRepoCommitResponse updateRepoCommit(UpdateRepoCommitRequest request) throws Exception {
        RequestOperation<UpdateRepoCommitRequest, UpdateRepoCommitResponse> operation
              = new UpdateRepoCommitOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an organization
     * 
     * @return The call builder
     */
    public UpdateRepoOrganizationRequestBuilder updateRepoOrganization() {
        return new UpdateRepoOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateRepoOrganizationResponse updateRepoOrganization(UpdateRepoOrganizationRequest request) throws Exception {
        RequestOperation<UpdateRepoOrganizationRequest, UpdateRepoOrganizationResponse> operation
              = new UpdateRepoOrganizationOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a pullrequest
     * 
     * @return The call builder
     */
    public UpdateRepoPullrequestRequestBuilder updateRepoPullrequest() {
        return new UpdateRepoPullrequestRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a pullrequest
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateRepoPullrequestResponse updateRepoPullrequest(UpdateRepoPullrequestRequest request) throws Exception {
        RequestOperation<UpdateRepoPullrequestRequest, UpdateRepoPullrequestResponse> operation
              = new UpdateRepoPullrequestOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update a repository
     * 
     * @return The call builder
     */
    public UpdateRepoRepositoryRequestBuilder updateRepoRepository() {
        return new UpdateRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateRepoRepositoryResponse updateRepoRepository(UpdateRepoRepositoryRequest request) throws Exception {
        RequestOperation<UpdateRepoRepositoryRequest, UpdateRepoRepositoryResponse> operation
              = new UpdateRepoRepositoryOperation(sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateTaskCommentRequest;
import to.unified.unified_java_sdk.models.operations.CreateTaskProjectRequest;
import to.unified.unified_java_sdk.models.operations.CreateTaskTaskRequest;
import to.unified.unified_java_sdk.models.operations.GetTaskChangeRequest;
import to.unified.unified_java_sdk.models.operations.GetTaskCommentRequest;
import to.unified.unified_java_sdk.models.operations.GetTaskProjectRequest;
import to.unified.unified_java_sdk.models.operations.GetTaskTaskRequest;
import to.unified.unified_java_sdk.models.operations.ListTaskChangesRequest;
import to.unified.unified_java_sdk.models.operations.ListTaskCommentsRequest;
import to.unified.unified_java_sdk.models.operations.ListTaskProjectsRequest;
import to.unified.unified_java_sdk.models.operations.ListTaskTasksRequest;
import to.unified.unified_java_sdk.models.operations.PatchTaskCommentRequest;
import to.unified.unified_java_sdk.models.operations.PatchTaskProjectRequest;
import to.unified.unified_java_sdk.models.operations.PatchTaskTaskRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTaskCommentRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTaskProjectRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTaskTaskRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTaskCommentRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTaskProjectRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTaskTaskRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateTaskCommentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTaskCommentResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateTaskProjectRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTaskProjectResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateTaskTaskRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTaskTaskResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTaskChangeRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTaskChangeResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTaskCommentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTaskCommentResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTaskProjectRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTaskProjectResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTaskTaskRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTaskTaskResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTaskChangesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTaskChangesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTaskCommentsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTaskCommentsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTaskProjectsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTaskProjectsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTaskTasksRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTaskTasksResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTaskCommentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTaskCommentResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTaskProjectRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTaskProjectResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTaskTaskRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTaskTaskResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTaskCommentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTaskCommentResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTaskProjectRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTaskProjectResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTaskTaskRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTaskTaskResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTaskCommentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTaskCommentResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTaskProjectRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTaskProjectResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTaskTaskRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTaskTaskResponse;
import to.unified.unified_java_sdk.operations.CreateTaskComment;
import to.unified.unified_java_sdk.operations.CreateTaskProject;
import to.unified.unified_java_sdk.operations.CreateTaskTask;
import to.unified.unified_java_sdk.operations.GetTaskChange;
import to.unified.unified_java_sdk.operations.GetTaskComment;
import to.unified.unified_java_sdk.operations.GetTaskProject;
import to.unified.unified_java_sdk.operations.GetTaskTask;
import to.unified.unified_java_sdk.operations.ListTaskChanges;
import to.unified.unified_java_sdk.operations.ListTaskComments;
import to.unified.unified_java_sdk.operations.ListTaskProjects;
import to.unified.unified_java_sdk.operations.ListTaskTasks;
import to.unified.unified_java_sdk.operations.PatchTaskComment;
import to.unified.unified_java_sdk.operations.PatchTaskProject;
import to.unified.unified_java_sdk.operations.PatchTaskTask;
import to.unified.unified_java_sdk.operations.RemoveTaskComment;
import to.unified.unified_java_sdk.operations.RemoveTaskProject;
import to.unified.unified_java_sdk.operations.RemoveTaskTask;
import to.unified.unified_java_sdk.operations.UpdateTaskComment;
import to.unified.unified_java_sdk.operations.UpdateTaskProject;
import to.unified.unified_java_sdk.operations.UpdateTaskTask;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncTask {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Task syncSDK;

    AsyncTask(Task syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Task sync() {
        return syncSDK;
    }


    /**
     * Create a comment
     * 
     * @return The async call builder
     */
    public CreateTaskCommentRequestBuilder createTaskComment() {
        return new CreateTaskCommentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateTaskCommentResponse&gt; - The async response
     */
    public CompletableFuture<CreateTaskCommentResponse> createTaskComment(CreateTaskCommentRequest request) {
        AsyncRequestOperation<CreateTaskCommentRequest, CreateTaskCommentResponse> operation
              = new CreateTaskComment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a project
     * 
     * @return The async call builder
     */
    public CreateTaskProjectRequestBuilder createTaskProject() {
        return new CreateTaskProjectRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateTaskProjectResponse&gt; - The async response
     */
    public CompletableFuture<CreateTaskProjectResponse> createTaskProject(CreateTaskProjectRequest request) {
        AsyncRequestOperation<CreateTaskProjectRequest, CreateTaskProjectResponse> operation
              = new CreateTaskProject.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a task
     * 
     * @return The async call builder
     */
    public CreateTaskTaskRequestBuilder createTaskTask() {
        return new CreateTaskTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateTaskTaskResponse&gt; - The async response
     */
    public CompletableFuture<CreateTaskTaskResponse> createTaskTask(CreateTaskTaskRequest request) {
        AsyncRequestOperation<CreateTaskTaskRequest, CreateTaskTaskResponse> operation
              = new CreateTaskTask.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a change
     * 
     * @return The async call builder
     */
    public GetTaskChangeRequestBuilder getTaskChange() {
        return new GetTaskChangeRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a change
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTaskChangeResponse&gt; - The async response
     */
    public CompletableFuture<GetTaskChangeResponse> getTaskChange(GetTaskChangeRequest request) {
        AsyncRequestOperation<GetTaskChangeRequest, GetTaskChangeResponse> operation
              = new GetTaskChange.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a comment
     * 
     * @return The async call builder
     */
    public GetTaskCommentRequestBuilder getTaskComment() {
        return new GetTaskCommentRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTaskCommentResponse&gt; - The async response
     */
    public CompletableFuture<GetTaskCommentResponse> getTaskComment(GetTaskCommentRequest request) {
        AsyncRequestOperation<GetTaskCommentRequest, GetTaskCommentResponse> operation
              = new GetTaskComment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a project
     * 
     * @return The async call builder
     */
    public GetTaskProjectRequestBuilder getTaskProject() {
        return new GetTaskProjectRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTaskProjectResponse&gt; - The async response
     */
    public CompletableFuture<GetTaskProjectResponse> getTaskProject(GetTaskProjectRequest request) {
        AsyncRequestOperation<GetTaskProjectRequest, GetTaskProjectResponse> operation
              = new GetTaskProject.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a task
     * 
     * @return The async call builder
     */
    public GetTaskTaskRequestBuilder getTaskTask() {
        return new GetTaskTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTaskTaskResponse&gt; - The async response
     */
    public CompletableFuture<GetTaskTaskResponse> getTaskTask(GetTaskTaskRequest request) {
        AsyncRequestOperation<GetTaskTaskRequest, GetTaskTaskResponse> operation
              = new GetTaskTask.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all changes
     * 
     * @return The async call builder
     */
    public ListTaskChangesRequestBuilder listTaskChanges() {
        return new ListTaskChangesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all changes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTaskChangesResponse&gt; - The async response
     */
    public CompletableFuture<ListTaskChangesResponse> listTaskChanges(ListTaskChangesRequest request) {
        AsyncRequestOperation<ListTaskChangesRequest, ListTaskChangesResponse> operation
              = new ListTaskChanges.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all comments
     * 
     * @return The async call builder
     */
    public ListTaskCommentsRequestBuilder listTaskComments() {
        return new ListTaskCommentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all comments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTaskCommentsResponse&gt; - The async response
     */
    public CompletableFuture<ListTaskCommentsResponse> listTaskComments(ListTaskCommentsRequest request) {
        AsyncRequestOperation<ListTaskCommentsRequest, ListTaskCommentsResponse> operation
              = new ListTaskComments.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all projects
     * 
     * @return The async call builder
     */
    public ListTaskProjectsRequestBuilder listTaskProjects() {
        return new ListTaskProjectsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all projects
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTaskProjectsResponse&gt; - The async response
     */
    public CompletableFuture<ListTaskProjectsResponse> listTaskProjects(ListTaskProjectsRequest request) {
        AsyncRequestOperation<ListTaskProjectsRequest, ListTaskProjectsResponse> operation
              = new ListTaskProjects.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all tasks
     * 
     * @return The async call builder
     */
    public ListTaskTasksRequestBuilder listTaskTasks() {
        return new ListTaskTasksRequestBuilder(sdkConfiguration);
    }

    /**
     * List all tasks
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTaskTasksResponse&gt; - The async response
     */
    public CompletableFuture<ListTaskTasksResponse> listTaskTasks(ListTaskTasksRequest request) {
        AsyncRequestOperation<ListTaskTasksRequest, ListTaskTasksResponse> operation
              = new ListTaskTasks.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a comment
     * 
     * @return The async call builder
     */
    public PatchTaskCommentRequestBuilder patchTaskComment() {
        return new PatchTaskCommentRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchTaskCommentResponse&gt; - The async response
     */
    public CompletableFuture<PatchTaskCommentResponse> patchTaskComment(PatchTaskCommentRequest request) {
        AsyncRequestOperation<PatchTaskCommentRequest, PatchTaskCommentResponse> operation
              = new PatchTaskComment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a project
     * 
     * @return The async call builder
     */
    public PatchTaskProjectRequestBuilder patchTaskProject() {
        return new PatchTaskProjectRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchTaskProjectResponse&gt; - The async response
     */
    public CompletableFuture<PatchTaskProjectResponse> patchTaskProject(PatchTaskProjectRequest request) {
        AsyncRequestOperation<PatchTaskProjectRequest, PatchTaskProjectResponse> operation
              = new PatchTaskProject.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a task
     * 
     * @return The async call builder
     */
    public PatchTaskTaskRequestBuilder patchTaskTask() {
        return new PatchTaskTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchTaskTaskResponse&gt; - The async response
     */
    public CompletableFuture<PatchTaskTaskResponse> patchTaskTask(PatchTaskTaskRequest request) {
        AsyncRequestOperation<PatchTaskTaskRequest, PatchTaskTaskResponse> operation
              = new PatchTaskTask.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a comment
     * 
     * @return The async call builder
     */
    public RemoveTaskCommentRequestBuilder removeTaskComment() {
        return new RemoveTaskCommentRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveTaskCommentResponse&gt; - The async response
     */
    public CompletableFuture<RemoveTaskCommentResponse> removeTaskComment(RemoveTaskCommentRequest request) {
        AsyncRequestOperation<RemoveTaskCommentRequest, RemoveTaskCommentResponse> operation
              = new RemoveTaskComment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a project
     * 
     * @return The async call builder
     */
    public RemoveTaskProjectRequestBuilder removeTaskProject() {
        return new RemoveTaskProjectRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveTaskProjectResponse&gt; - The async response
     */
    public CompletableFuture<RemoveTaskProjectResponse> removeTaskProject(RemoveTaskProjectRequest request) {
        AsyncRequestOperation<RemoveTaskProjectRequest, RemoveTaskProjectResponse> operation
              = new RemoveTaskProject.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a task
     * 
     * @return The async call builder
     */
    public RemoveTaskTaskRequestBuilder removeTaskTask() {
        return new RemoveTaskTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveTaskTaskResponse&gt; - The async response
     */
    public CompletableFuture<RemoveTaskTaskResponse> removeTaskTask(RemoveTaskTaskRequest request) {
        AsyncRequestOperation<RemoveTaskTaskRequest, RemoveTaskTaskResponse> operation
              = new RemoveTaskTask.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a comment
     * 
     * @return The async call builder
     */
    public UpdateTaskCommentRequestBuilder updateTaskComment() {
        return new UpdateTaskCommentRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a comment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateTaskCommentResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTaskCommentResponse> updateTaskComment(UpdateTaskCommentRequest request) {
        AsyncRequestOperation<UpdateTaskCommentRequest, UpdateTaskCommentResponse> operation
              = new UpdateTaskComment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a project
     * 
     * @return The async call builder
     */
    public UpdateTaskProjectRequestBuilder updateTaskProject() {
        return new UpdateTaskProjectRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a project
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateTaskProjectResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTaskProjectResponse> updateTaskProject(UpdateTaskProjectRequest request) {
        AsyncRequestOperation<UpdateTaskProjectRequest, UpdateTaskProjectResponse> operation
              = new UpdateTaskProject.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a task
     * 
     * @return The async call builder
     */
    public UpdateTaskTaskRequestBuilder updateTaskTask() {
        return new UpdateTaskTaskRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a task
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateTaskTaskResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTaskTaskResponse> updateTaskTask(UpdateTaskTaskRequest request) {
        AsyncRequestOperation<UpdateTaskTaskRequest, UpdateTaskTaskResponse> operation
              = new UpdateTaskTask.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

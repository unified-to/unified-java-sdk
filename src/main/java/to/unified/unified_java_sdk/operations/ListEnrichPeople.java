/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.operations;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Optional;
import to.unified.unified_java_sdk.SDKConfiguration;
import to.unified.unified_java_sdk.SecuritySource;
import to.unified.unified_java_sdk.models.errors.SDKError;
import to.unified.unified_java_sdk.models.operations.ListEnrichPeopleRequest;
import to.unified.unified_java_sdk.models.operations.ListEnrichPeopleResponse;
import to.unified.unified_java_sdk.models.shared.EnrichPerson;
import to.unified.unified_java_sdk.utils.HTTPClient;
import to.unified.unified_java_sdk.utils.HTTPRequest;
import to.unified.unified_java_sdk.utils.Hook.AfterErrorContextImpl;
import to.unified.unified_java_sdk.utils.Hook.AfterSuccessContextImpl;
import to.unified.unified_java_sdk.utils.Hook.BeforeRequestContextImpl;
import to.unified.unified_java_sdk.utils.Utils;



public class ListEnrichPeople {

    static abstract class Base {
        final SDKConfiguration sdkConfiguration;
        final String baseUrl;
        final SecuritySource securitySource;
        final HTTPClient client;

        public Base(SDKConfiguration sdkConfiguration) {
            this.sdkConfiguration = sdkConfiguration;
            this.baseUrl = this.sdkConfiguration.serverUrl();
            this.securitySource = this.sdkConfiguration.securitySource();
            this.client = this.sdkConfiguration.client();
        }

        Optional<SecuritySource> securitySource() {
            return Optional.ofNullable(this.securitySource);
        }

        HttpRequest buildRequest(ListEnrichPeopleRequest request) throws Exception {
            String url = Utils.generateURL(
                    ListEnrichPeopleRequest.class,
                    this.baseUrl,
                    "/enrich/{connection_id}/person",
                    request, null);
            HTTPRequest req = new HTTPRequest(url, "GET");
            req.addHeader("Accept", "application/json")
                    .addHeader("user-agent", SDKConfiguration.USER_AGENT);

            req.addQueryParams(Utils.getQueryParams(
                    ListEnrichPeopleRequest.class,
                    request,
                    null));
            Utils.configureSecurity(req, this.sdkConfiguration.securitySource().getSecurity());

            return sdkConfiguration.hooks().beforeRequest(
                    new BeforeRequestContextImpl(
                            this.sdkConfiguration,
                            this.baseUrl,
                            "listEnrichPeople",
                            java.util.Optional.of(java.util.List.of()),
                            securitySource()),
                    req.build());
        }
    }

    public static class Sync extends Base
            implements RequestOperation<ListEnrichPeopleRequest, ListEnrichPeopleResponse> {
        public Sync(SDKConfiguration sdkConfiguration) {
            super(sdkConfiguration);
        }

        private HttpResponse<InputStream> onError(HttpResponse<InputStream> response, Exception error) throws Exception {
            return sdkConfiguration.hooks()
                    .afterError(
                            new AfterErrorContextImpl(
                                    this.sdkConfiguration,
                                    this.baseUrl,
                                    "listEnrichPeople",
                                    java.util.Optional.of(java.util.List.of()),
                                    securitySource()),
                            Optional.ofNullable(response),
                            Optional.ofNullable(error));
        }

        private HttpResponse<InputStream> onSuccess(HttpResponse<InputStream> response) throws Exception {
            return sdkConfiguration.hooks()
                    .afterSuccess(
                            new AfterSuccessContextImpl(
                                    this.sdkConfiguration,
                                    this.baseUrl,
                                    "listEnrichPeople",
                                    java.util.Optional.of(java.util.List.of()),
                                    securitySource()),
                            response);
        }

        @Override
        public HttpResponse<InputStream> doRequest(ListEnrichPeopleRequest request) throws Exception {
            HttpRequest r = buildRequest(request);
            HttpResponse<InputStream> httpRes;
            try {
                httpRes = client.send(r);
                if (Utils.statusCodeMatches(httpRes.statusCode(), "4XX", "5XX")) {
                    httpRes = onError(httpRes, null);
                } else {
                    httpRes = onSuccess(httpRes);
                }
            } catch (Exception e) {
                httpRes = onError(null, e);
            }

            return httpRes;
        }


        @Override
        public ListEnrichPeopleResponse handleResponse(HttpResponse<InputStream> response) throws Exception {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            ListEnrichPeopleResponse.Builder resBuilder =
                    ListEnrichPeopleResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            ListEnrichPeopleResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "200")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    EnrichPerson out = Utils.mapper().readValue(
                            response.body(),
                            new TypeReference<>() {
                            });
                    res.withEnrichPerson(out);
                    return res;
                } else {
                    throw new SDKError(
                            response,
                            response.statusCode(),
                            "Unexpected content-type received: " + contentType,
                            Utils.extractByteArrayFromBody(response));
                }
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
                // no content
                throw new SDKError(
                        response,
                        response.statusCode(),
                        "API error occurred",
                        Utils.extractByteArrayFromBody(response));
            }
            
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                // no content
                throw new SDKError(
                        response,
                        response.statusCode(),
                        "API error occurred",
                        Utils.extractByteArrayFromBody(response));
            }
            
            throw new SDKError(
                    response,
                    response.statusCode(),
                    "Unexpected status code received: " + response.statusCode(),
                    Utils.extractByteArrayFromBody(response));
        }
    }
}

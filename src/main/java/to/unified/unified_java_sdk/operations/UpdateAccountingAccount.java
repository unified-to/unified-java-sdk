/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.operations;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;
import static to.unified.unified_java_sdk.utils.Exceptions.unchecked;
import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.IllegalArgumentException;
import java.lang.Object;
import java.lang.String;
import java.lang.Throwable;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import java.util.function.Function;
import to.unified.unified_java_sdk.SDKConfiguration;
import to.unified.unified_java_sdk.SecuritySource;
import to.unified.unified_java_sdk.models.errors.SDKError;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingAccountRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingAccountResponse;
import to.unified.unified_java_sdk.models.shared.AccountingAccount;
import to.unified.unified_java_sdk.utils.Blob;
import to.unified.unified_java_sdk.utils.HTTPClient;
import to.unified.unified_java_sdk.utils.HTTPRequest;
import to.unified.unified_java_sdk.utils.Headers;
import to.unified.unified_java_sdk.utils.Hook.AfterErrorContextImpl;
import to.unified.unified_java_sdk.utils.Hook.AfterSuccessContextImpl;
import to.unified.unified_java_sdk.utils.Hook.BeforeRequestContextImpl;
import to.unified.unified_java_sdk.utils.SerializedBody;
import to.unified.unified_java_sdk.utils.Utils.JsonShape;
import to.unified.unified_java_sdk.utils.Utils;


public class UpdateAccountingAccount {

    static abstract class Base {
        final SDKConfiguration sdkConfiguration;
        final String baseUrl;
        final SecuritySource securitySource;
        final HTTPClient client;
        final Headers _headers;

        public Base(SDKConfiguration sdkConfiguration, Headers _headers) {
            this.sdkConfiguration = sdkConfiguration;
            this._headers =_headers;
            this.baseUrl = this.sdkConfiguration.serverUrl();
            this.securitySource = this.sdkConfiguration.securitySource();
            this.client = this.sdkConfiguration.client();
        }

        Optional<SecuritySource> securitySource() {
            return Optional.ofNullable(this.securitySource);
        }

        BeforeRequestContextImpl createBeforeRequestContext() {
            return new BeforeRequestContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "updateAccountingAccount",
                    java.util.Optional.empty(),
                    securitySource());
        }

        AfterSuccessContextImpl createAfterSuccessContext() {
            return new AfterSuccessContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "updateAccountingAccount",
                    java.util.Optional.empty(),
                    securitySource());
        }

        AfterErrorContextImpl createAfterErrorContext() {
            return new AfterErrorContextImpl(
                    this.sdkConfiguration,
                    this.baseUrl,
                    "updateAccountingAccount",
                    java.util.Optional.empty(),
                    securitySource());
        }
        <T, U>HttpRequest buildRequest(T request, Class<T> klass, TypeReference<U> typeReference) throws Exception {
            String url = Utils.generateURL(
                    klass,
                    this.baseUrl,
                    "/accounting/{connection_id}/account/{id}",
                    request, null);
            HTTPRequest req = new HTTPRequest(url, "PUT");
            Object convertedRequest = Utils.convertToShape(
                    request,
                    JsonShape.DEFAULT,
                    typeReference);
            SerializedBody serializedRequestBody = Utils.serializeRequestBody(
                    convertedRequest,
                    "accountingAccount",
                    "json",
                    false);
            if (serializedRequestBody == null) {
                throw new IllegalArgumentException("Request body is required");
            }
            req.setBody(Optional.ofNullable(serializedRequestBody));
            req.addHeader("Accept", "application/json")
                    .addHeader("user-agent", SDKConfiguration.USER_AGENT);
            _headers.forEach((k, list) -> list.forEach(v -> req.addHeader(k, v)));

            req.addQueryParams(Utils.getQueryParams(
                    klass,
                    request,
                    null));
            Utils.configureSecurity(req, this.sdkConfiguration.securitySource().getSecurity());

            return req.build();
        }
    }

    public static class Sync extends Base
            implements RequestOperation<UpdateAccountingAccountRequest, UpdateAccountingAccountResponse> {
        public Sync(SDKConfiguration sdkConfiguration, Headers _headers) {
            super(sdkConfiguration, _headers);
        }

        private HttpRequest onBuildRequest(UpdateAccountingAccountRequest request) throws Exception {
            HttpRequest req = buildRequest(request, UpdateAccountingAccountRequest.class, new TypeReference<UpdateAccountingAccountRequest>() {});
            return sdkConfiguration.hooks().beforeRequest(createBeforeRequestContext(), req);
        }

        private HttpResponse<InputStream> onError(HttpResponse<InputStream> response, Exception error) throws Exception {
            return sdkConfiguration.hooks().afterError(
                    createAfterErrorContext(),
                    Optional.ofNullable(response),
                    Optional.ofNullable(error));
        }

        private HttpResponse<InputStream> onSuccess(HttpResponse<InputStream> response) throws Exception {
            return sdkConfiguration.hooks().afterSuccess(createAfterSuccessContext(), response);
        }

        @Override
        public HttpResponse<InputStream> doRequest(UpdateAccountingAccountRequest request) {
            HttpRequest r = unchecked(() -> onBuildRequest(request)).get();
            HttpResponse<InputStream> httpRes;
            try {
                httpRes = client.send(r);
                if (Utils.statusCodeMatches(httpRes.statusCode(), "4XX", "5XX")) {
                    httpRes = onError(httpRes, null);
                } else {
                    httpRes = onSuccess(httpRes);
                }
            } catch (Exception e) {
                httpRes = unchecked(() -> onError(null, e)).get();
            }

            return httpRes;
        }


        @Override
        public UpdateAccountingAccountResponse handleResponse(HttpResponse<InputStream> response) {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            UpdateAccountingAccountResponse.Builder resBuilder =
                    UpdateAccountingAccountResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            UpdateAccountingAccountResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "200")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    return res.withAccountingAccount(Utils.unmarshal(response, new TypeReference<AccountingAccount>() {}));
                } else {
                    throw SDKError.from("Unexpected content-type received: " + contentType, response);
                }
            }
            if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
                // no content
                throw SDKError.from("API error occurred", response);
            }
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                // no content
                throw SDKError.from("API error occurred", response);
            }
            throw SDKError.from("Unexpected status code received: " + response.statusCode(), response);
        }
    }
    public static class Async extends Base
            implements AsyncRequestOperation<UpdateAccountingAccountRequest, to.unified.unified_java_sdk.models.operations.async.UpdateAccountingAccountResponse> {

        public Async(SDKConfiguration sdkConfiguration, Headers _headers) {
            super(sdkConfiguration, _headers);
        }

        private CompletableFuture<HttpRequest> onBuildRequest(UpdateAccountingAccountRequest request) throws Exception {
            HttpRequest req = buildRequest(request, UpdateAccountingAccountRequest.class, new TypeReference<UpdateAccountingAccountRequest>() {});
            return this.sdkConfiguration.asyncHooks().beforeRequest(createBeforeRequestContext(), req);
        }

        private CompletableFuture<HttpResponse<Blob>> onError(HttpResponse<Blob> response, Throwable error) {
            return this.sdkConfiguration.asyncHooks().afterError(createAfterErrorContext(), response, error);
        }

        private CompletableFuture<HttpResponse<Blob>> onSuccess(HttpResponse<Blob> response) {
            return this.sdkConfiguration.asyncHooks().afterSuccess(createAfterSuccessContext(), response);
        }

        @Override
        public CompletableFuture<HttpResponse<Blob>> doRequest(UpdateAccountingAccountRequest request) {
            return unchecked(() -> onBuildRequest(request)).get().thenCompose(client::sendAsync)
                    .handle((resp, err) -> {
                        if (err != null) {
                            return onError(null, err);
                        }
                        if (Utils.statusCodeMatches(resp.statusCode(), "4XX", "5XX")) {
                            return onError(resp, null);
                        }
                        return CompletableFuture.completedFuture(resp);
                    })
                    .thenCompose(Function.identity())
                    .thenCompose(this::onSuccess);
        }

        @Override
        public CompletableFuture<to.unified.unified_java_sdk.models.operations.async.UpdateAccountingAccountResponse> handleResponse(
                HttpResponse<Blob> response) {
            String contentType = response
                    .headers()
                    .firstValue("Content-Type")
                    .orElse("application/octet-stream");
            to.unified.unified_java_sdk.models.operations.async.UpdateAccountingAccountResponse.Builder resBuilder =
                    to.unified.unified_java_sdk.models.operations.async.UpdateAccountingAccountResponse
                            .builder()
                            .contentType(contentType)
                            .statusCode(response.statusCode())
                            .rawResponse(response);

            to.unified.unified_java_sdk.models.operations.async.UpdateAccountingAccountResponse res = resBuilder.build();
            
            if (Utils.statusCodeMatches(response.statusCode(), "200")) {
                if (Utils.contentTypeMatches(contentType, "application/json")) {
                    return Utils.unmarshalAsync(response, new TypeReference<AccountingAccount>() {})
                            .thenApply(res::withAccountingAccount);
                } else {
                    return Utils.createAsyncApiError(response, "Unexpected content-type received: " + contentType);
                }
            }
            if (Utils.statusCodeMatches(response.statusCode(), "4XX")) {
                // no content
                return Utils.createAsyncApiError(response, "API error occurred");
            }
            if (Utils.statusCodeMatches(response.statusCode(), "5XX")) {
                // no content
                return Utils.createAsyncApiError(response, "API error occurred");
            }
            return Utils.createAsyncApiError(response, "Unexpected status code received: " + response.statusCode());
        }
    }
}

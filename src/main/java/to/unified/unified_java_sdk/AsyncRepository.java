/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.GetRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.ListRepoRepositoriesRequest;
import to.unified.unified_java_sdk.models.operations.PatchRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.RemoveRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.UpdateRepoRepositoryRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.async.GetRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.async.ListRepoRepositoriesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListRepoRepositoriesResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveRepoRepositoryResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoRepositoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateRepoRepositoryResponse;
import to.unified.unified_java_sdk.operations.CreateRepoRepository;
import to.unified.unified_java_sdk.operations.GetRepoRepository;
import to.unified.unified_java_sdk.operations.ListRepoRepositories;
import to.unified.unified_java_sdk.operations.PatchRepoRepository;
import to.unified.unified_java_sdk.operations.RemoveRepoRepository;
import to.unified.unified_java_sdk.operations.UpdateRepoRepository;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncRepository {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Repository syncSDK;

    AsyncRepository(Repository syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Repository sync() {
        return syncSDK;
    }


    /**
     * Create a repository
     * 
     * @return The async call builder
     */
    public CreateRepoRepositoryRequestBuilder createRepoRepository() {
        return new CreateRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateRepoRepositoryResponse&gt; - The async response
     */
    public CompletableFuture<CreateRepoRepositoryResponse> createRepoRepository(CreateRepoRepositoryRequest request) {
        AsyncRequestOperation<CreateRepoRepositoryRequest, CreateRepoRepositoryResponse> operation
              = new CreateRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a repository
     * 
     * @return The async call builder
     */
    public GetRepoRepositoryRequestBuilder getRepoRepository() {
        return new GetRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetRepoRepositoryResponse&gt; - The async response
     */
    public CompletableFuture<GetRepoRepositoryResponse> getRepoRepository(GetRepoRepositoryRequest request) {
        AsyncRequestOperation<GetRepoRepositoryRequest, GetRepoRepositoryResponse> operation
              = new GetRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all repositories
     * 
     * @return The async call builder
     */
    public ListRepoRepositoriesRequestBuilder listRepoRepositories() {
        return new ListRepoRepositoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all repositories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListRepoRepositoriesResponse&gt; - The async response
     */
    public CompletableFuture<ListRepoRepositoriesResponse> listRepoRepositories(ListRepoRepositoriesRequest request) {
        AsyncRequestOperation<ListRepoRepositoriesRequest, ListRepoRepositoriesResponse> operation
              = new ListRepoRepositories.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a repository
     * 
     * @return The async call builder
     */
    public PatchRepoRepositoryRequestBuilder patchRepoRepository() {
        return new PatchRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchRepoRepositoryResponse&gt; - The async response
     */
    public CompletableFuture<PatchRepoRepositoryResponse> patchRepoRepository(PatchRepoRepositoryRequest request) {
        AsyncRequestOperation<PatchRepoRepositoryRequest, PatchRepoRepositoryResponse> operation
              = new PatchRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a repository
     * 
     * @return The async call builder
     */
    public RemoveRepoRepositoryRequestBuilder removeRepoRepository() {
        return new RemoveRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveRepoRepositoryResponse&gt; - The async response
     */
    public CompletableFuture<RemoveRepoRepositoryResponse> removeRepoRepository(RemoveRepoRepositoryRequest request) {
        AsyncRequestOperation<RemoveRepoRepositoryRequest, RemoveRepoRepositoryResponse> operation
              = new RemoveRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a repository
     * 
     * @return The async call builder
     */
    public UpdateRepoRepositoryRequestBuilder updateRepoRepository() {
        return new UpdateRepoRepositoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a repository
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateRepoRepositoryResponse&gt; - The async response
     */
    public CompletableFuture<UpdateRepoRepositoryResponse> updateRepoRepository(UpdateRepoRepositoryRequest request) {
        AsyncRequestOperation<UpdateRepoRepositoryRequest, UpdateRepoRepositoryResponse> operation
              = new UpdateRepoRepository.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

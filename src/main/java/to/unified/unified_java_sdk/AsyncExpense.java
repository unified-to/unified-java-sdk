/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingExpensesRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingExpenseResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingExpenseResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingExpensesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingExpensesResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingExpenseResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingExpenseResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingExpenseResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingExpense;
import to.unified.unified_java_sdk.operations.GetAccountingExpense;
import to.unified.unified_java_sdk.operations.ListAccountingExpenses;
import to.unified.unified_java_sdk.operations.PatchAccountingExpense;
import to.unified.unified_java_sdk.operations.RemoveAccountingExpense;
import to.unified.unified_java_sdk.operations.UpdateAccountingExpense;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncExpense {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Expense syncSDK;

    AsyncExpense(Expense syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Expense sync() {
        return syncSDK;
    }


    /**
     * Create an expense
     * 
     * @return The async call builder
     */
    public CreateAccountingExpenseRequestBuilder createAccountingExpense() {
        return new CreateAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateAccountingExpenseResponse>} - The async response
     */
    public CompletableFuture<CreateAccountingExpenseResponse> createAccountingExpense(CreateAccountingExpenseRequest request) {
        AsyncRequestOperation<CreateAccountingExpenseRequest, CreateAccountingExpenseResponse> operation
              = new CreateAccountingExpense.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an expense
     * 
     * @return The async call builder
     */
    public GetAccountingExpenseRequestBuilder getAccountingExpense() {
        return new GetAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetAccountingExpenseResponse>} - The async response
     */
    public CompletableFuture<GetAccountingExpenseResponse> getAccountingExpense(GetAccountingExpenseRequest request) {
        AsyncRequestOperation<GetAccountingExpenseRequest, GetAccountingExpenseResponse> operation
              = new GetAccountingExpense.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all expenses
     * 
     * @return The async call builder
     */
    public ListAccountingExpensesRequestBuilder listAccountingExpenses() {
        return new ListAccountingExpensesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all expenses
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListAccountingExpensesResponse>} - The async response
     */
    public CompletableFuture<ListAccountingExpensesResponse> listAccountingExpenses(ListAccountingExpensesRequest request) {
        AsyncRequestOperation<ListAccountingExpensesRequest, ListAccountingExpensesResponse> operation
              = new ListAccountingExpenses.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an expense
     * 
     * @return The async call builder
     */
    public PatchAccountingExpenseRequestBuilder patchAccountingExpense() {
        return new PatchAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchAccountingExpenseResponse>} - The async response
     */
    public CompletableFuture<PatchAccountingExpenseResponse> patchAccountingExpense(PatchAccountingExpenseRequest request) {
        AsyncRequestOperation<PatchAccountingExpenseRequest, PatchAccountingExpenseResponse> operation
              = new PatchAccountingExpense.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an expense
     * 
     * @return The async call builder
     */
    public RemoveAccountingExpenseRequestBuilder removeAccountingExpense() {
        return new RemoveAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveAccountingExpenseResponse>} - The async response
     */
    public CompletableFuture<RemoveAccountingExpenseResponse> removeAccountingExpense(RemoveAccountingExpenseRequest request) {
        AsyncRequestOperation<RemoveAccountingExpenseRequest, RemoveAccountingExpenseResponse> operation
              = new RemoveAccountingExpense.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an expense
     * 
     * @return The async call builder
     */
    public UpdateAccountingExpenseRequestBuilder updateAccountingExpense() {
        return new UpdateAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateAccountingExpenseResponse>} - The async response
     */
    public CompletableFuture<UpdateAccountingExpenseResponse> updateAccountingExpense(UpdateAccountingExpenseRequest request) {
        AsyncRequestOperation<UpdateAccountingExpenseRequest, UpdateAccountingExpenseResponse> operation
              = new UpdateAccountingExpense.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

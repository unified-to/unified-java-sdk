/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.GetTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.ListTicketingCustomersRequest;
import to.unified.unified_java_sdk.models.operations.PatchTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.RemoveTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.UpdateTicketingCustomerRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingCustomersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListTicketingCustomersResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveTicketingCustomerResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingCustomerRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateTicketingCustomerResponse;
import to.unified.unified_java_sdk.operations.CreateTicketingCustomer;
import to.unified.unified_java_sdk.operations.GetTicketingCustomer;
import to.unified.unified_java_sdk.operations.ListTicketingCustomers;
import to.unified.unified_java_sdk.operations.PatchTicketingCustomer;
import to.unified.unified_java_sdk.operations.RemoveTicketingCustomer;
import to.unified.unified_java_sdk.operations.UpdateTicketingCustomer;


public class AsyncCustomer {
    private final SDKConfiguration sdkConfiguration;
    private final Customer syncSDK;

    AsyncCustomer(Customer syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Customer sync() {
        return syncSDK;
    }


    /**
     * Create a customer
     * 
     * @return The async call builder
     */
    public CreateTicketingCustomerRequestBuilder createTicketingCustomer() {
        return new CreateTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<CreateTicketingCustomerResponse> createTicketingCustomer(CreateTicketingCustomerRequest request) {
        AsyncRequestOperation<CreateTicketingCustomerRequest, CreateTicketingCustomerResponse> operation
              = new CreateTicketingCustomer.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a customer
     * 
     * @return The async call builder
     */
    public GetTicketingCustomerRequestBuilder getTicketingCustomer() {
        return new GetTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<GetTicketingCustomerResponse> getTicketingCustomer(GetTicketingCustomerRequest request) {
        AsyncRequestOperation<GetTicketingCustomerRequest, GetTicketingCustomerResponse> operation
              = new GetTicketingCustomer.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all customers
     * 
     * @return The async call builder
     */
    public ListTicketingCustomersRequestBuilder listTicketingCustomers() {
        return new ListTicketingCustomersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all customers
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListTicketingCustomersResponse&gt; - The async response
     */
    public CompletableFuture<ListTicketingCustomersResponse> listTicketingCustomers(ListTicketingCustomersRequest request) {
        AsyncRequestOperation<ListTicketingCustomersRequest, ListTicketingCustomersResponse> operation
              = new ListTicketingCustomers.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a customer
     * 
     * @return The async call builder
     */
    public PatchTicketingCustomerRequestBuilder patchTicketingCustomer() {
        return new PatchTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<PatchTicketingCustomerResponse> patchTicketingCustomer(PatchTicketingCustomerRequest request) {
        AsyncRequestOperation<PatchTicketingCustomerRequest, PatchTicketingCustomerResponse> operation
              = new PatchTicketingCustomer.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a customer
     * 
     * @return The async call builder
     */
    public RemoveTicketingCustomerRequestBuilder removeTicketingCustomer() {
        return new RemoveTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<RemoveTicketingCustomerResponse> removeTicketingCustomer(RemoveTicketingCustomerRequest request) {
        AsyncRequestOperation<RemoveTicketingCustomerRequest, RemoveTicketingCustomerResponse> operation
              = new RemoveTicketingCustomer.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a customer
     * 
     * @return The async call builder
     */
    public UpdateTicketingCustomerRequestBuilder updateTicketingCustomer() {
        return new UpdateTicketingCustomerRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a customer
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateTicketingCustomerResponse&gt; - The async response
     */
    public CompletableFuture<UpdateTicketingCustomerResponse> updateTicketingCustomer(UpdateTicketingCustomerRequest request) {
        AsyncRequestOperation<UpdateTicketingCustomerRequest, UpdateTicketingCustomerResponse> operation
              = new UpdateTicketingCustomer.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

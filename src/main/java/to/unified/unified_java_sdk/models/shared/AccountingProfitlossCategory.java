/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * AccountingProfitlossCategory
 * 
 * <p>&#64;deprecated
 */
public class AccountingProfitlossCategory {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<Double> amount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_items")
    private Optional<? extends List<AccountingProfitlossSubcategory>> subItems;

    @JsonCreator
    public AccountingProfitlossCategory(
            @JsonProperty("amount") Optional<Double> amount,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("sub_items") Optional<? extends List<AccountingProfitlossSubcategory>> subItems) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(subItems, "subItems");
        this.amount = amount;
        this.name = name;
        this.subItems = subItems;
    }
    
    public AccountingProfitlossCategory() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> amount() {
        return amount;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingProfitlossSubcategory>> subItems() {
        return (Optional<List<AccountingProfitlossSubcategory>>) subItems;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AccountingProfitlossCategory withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    public AccountingProfitlossCategory withAmount(Optional<Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public AccountingProfitlossCategory withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public AccountingProfitlossCategory withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AccountingProfitlossCategory withSubItems(List<AccountingProfitlossSubcategory> subItems) {
        Utils.checkNotNull(subItems, "subItems");
        this.subItems = Optional.ofNullable(subItems);
        return this;
    }


    public AccountingProfitlossCategory withSubItems(Optional<? extends List<AccountingProfitlossSubcategory>> subItems) {
        Utils.checkNotNull(subItems, "subItems");
        this.subItems = subItems;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingProfitlossCategory other = (AccountingProfitlossCategory) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.subItems, other.subItems);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, name, subItems);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingProfitlossCategory.class,
                "amount", amount,
                "name", name,
                "subItems", subItems);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Double> amount = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends List<AccountingProfitlossSubcategory>> subItems = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder subItems(List<AccountingProfitlossSubcategory> subItems) {
            Utils.checkNotNull(subItems, "subItems");
            this.subItems = Optional.ofNullable(subItems);
            return this;
        }

        public Builder subItems(Optional<? extends List<AccountingProfitlossSubcategory>> subItems) {
            Utils.checkNotNull(subItems, "subItems");
            this.subItems = subItems;
            return this;
        }

        public AccountingProfitlossCategory build() {

            return new AccountingProfitlossCategory(
                amount, name, subItems);
        }

    }
}

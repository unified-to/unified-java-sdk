/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class StoragePermission {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_id")
    private Optional<String> groupId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_hidden")
    private Optional<Boolean> isHidden;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_public")
    private Optional<Boolean> isPublic;


    @JsonProperty("roles")
    private List<PropertyStoragePermissionRoles> roles;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    @JsonCreator
    public StoragePermission(
            @JsonProperty("group_id") Optional<String> groupId,
            @JsonProperty("is_hidden") Optional<Boolean> isHidden,
            @JsonProperty("is_public") Optional<Boolean> isPublic,
            @JsonProperty("roles") List<PropertyStoragePermissionRoles> roles,
            @JsonProperty("user_id") Optional<String> userId) {
        Utils.checkNotNull(groupId, "groupId");
        Utils.checkNotNull(isHidden, "isHidden");
        Utils.checkNotNull(isPublic, "isPublic");
        Utils.checkNotNull(roles, "roles");
        Utils.checkNotNull(userId, "userId");
        this.groupId = groupId;
        this.isHidden = isHidden;
        this.isPublic = isPublic;
        this.roles = roles;
        this.userId = userId;
    }
    
    public StoragePermission(
            List<PropertyStoragePermissionRoles> roles) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            roles, Optional.empty());
    }

    @JsonIgnore
    public Optional<String> groupId() {
        return groupId;
    }

    @JsonIgnore
    public Optional<Boolean> isHidden() {
        return isHidden;
    }

    @JsonIgnore
    public Optional<Boolean> isPublic() {
        return isPublic;
    }

    @JsonIgnore
    public List<PropertyStoragePermissionRoles> roles() {
        return roles;
    }

    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public StoragePermission withGroupId(String groupId) {
        Utils.checkNotNull(groupId, "groupId");
        this.groupId = Optional.ofNullable(groupId);
        return this;
    }


    public StoragePermission withGroupId(Optional<String> groupId) {
        Utils.checkNotNull(groupId, "groupId");
        this.groupId = groupId;
        return this;
    }

    public StoragePermission withIsHidden(boolean isHidden) {
        Utils.checkNotNull(isHidden, "isHidden");
        this.isHidden = Optional.ofNullable(isHidden);
        return this;
    }


    public StoragePermission withIsHidden(Optional<Boolean> isHidden) {
        Utils.checkNotNull(isHidden, "isHidden");
        this.isHidden = isHidden;
        return this;
    }

    public StoragePermission withIsPublic(boolean isPublic) {
        Utils.checkNotNull(isPublic, "isPublic");
        this.isPublic = Optional.ofNullable(isPublic);
        return this;
    }


    public StoragePermission withIsPublic(Optional<Boolean> isPublic) {
        Utils.checkNotNull(isPublic, "isPublic");
        this.isPublic = isPublic;
        return this;
    }

    public StoragePermission withRoles(List<PropertyStoragePermissionRoles> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    public StoragePermission withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }


    public StoragePermission withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StoragePermission other = (StoragePermission) o;
        return 
            Utils.enhancedDeepEquals(this.groupId, other.groupId) &&
            Utils.enhancedDeepEquals(this.isHidden, other.isHidden) &&
            Utils.enhancedDeepEquals(this.isPublic, other.isPublic) &&
            Utils.enhancedDeepEquals(this.roles, other.roles) &&
            Utils.enhancedDeepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            groupId, isHidden, isPublic,
            roles, userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StoragePermission.class,
                "groupId", groupId,
                "isHidden", isHidden,
                "isPublic", isPublic,
                "roles", roles,
                "userId", userId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> groupId = Optional.empty();

        private Optional<Boolean> isHidden = Optional.empty();

        private Optional<Boolean> isPublic = Optional.empty();

        private List<PropertyStoragePermissionRoles> roles;

        private Optional<String> userId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder groupId(String groupId) {
            Utils.checkNotNull(groupId, "groupId");
            this.groupId = Optional.ofNullable(groupId);
            return this;
        }

        public Builder groupId(Optional<String> groupId) {
            Utils.checkNotNull(groupId, "groupId");
            this.groupId = groupId;
            return this;
        }


        public Builder isHidden(boolean isHidden) {
            Utils.checkNotNull(isHidden, "isHidden");
            this.isHidden = Optional.ofNullable(isHidden);
            return this;
        }

        public Builder isHidden(Optional<Boolean> isHidden) {
            Utils.checkNotNull(isHidden, "isHidden");
            this.isHidden = isHidden;
            return this;
        }


        public Builder isPublic(boolean isPublic) {
            Utils.checkNotNull(isPublic, "isPublic");
            this.isPublic = Optional.ofNullable(isPublic);
            return this;
        }

        public Builder isPublic(Optional<Boolean> isPublic) {
            Utils.checkNotNull(isPublic, "isPublic");
            this.isPublic = isPublic;
            return this;
        }


        public Builder roles(List<PropertyStoragePermissionRoles> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }


        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public StoragePermission build() {

            return new StoragePermission(
                groupId, isHidden, isPublic,
                roles, userId);
        }

    }
}

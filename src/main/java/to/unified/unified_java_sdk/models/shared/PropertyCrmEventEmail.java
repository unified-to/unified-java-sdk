/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * PropertyCrmEventEmail
 * 
 * <p>The email object, when type = email
 */
public class PropertyCrmEventEmail {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachment_file_ids")
    private Optional<? extends List<String>> attachmentFileIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("body")
    private Optional<String> body;

    /**
     * The event email's cc name &amp; email (name &lt;test@test.com&gt;)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cc")
    private Optional<? extends List<String>> cc;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private Optional<String> from;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private Optional<String> subject;

    /**
     * The event email's "to" name &amp; email (name &lt;test@test.com&gt;)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to")
    private Optional<? extends List<String>> to;

    @JsonCreator
    public PropertyCrmEventEmail(
            @JsonProperty("attachment_file_ids") Optional<? extends List<String>> attachmentFileIds,
            @JsonProperty("body") Optional<String> body,
            @JsonProperty("cc") Optional<? extends List<String>> cc,
            @JsonProperty("from") Optional<String> from,
            @JsonProperty("subject") Optional<String> subject,
            @JsonProperty("to") Optional<? extends List<String>> to) {
        Utils.checkNotNull(attachmentFileIds, "attachmentFileIds");
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(cc, "cc");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(subject, "subject");
        Utils.checkNotNull(to, "to");
        this.attachmentFileIds = attachmentFileIds;
        this.body = body;
        this.cc = cc;
        this.from = from;
        this.subject = subject;
        this.to = to;
    }
    
    public PropertyCrmEventEmail() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> attachmentFileIds() {
        return (Optional<List<String>>) attachmentFileIds;
    }

    @JsonIgnore
    public Optional<String> body() {
        return body;
    }

    /**
     * The event email's cc name &amp; email (name &lt;test@test.com&gt;)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> cc() {
        return (Optional<List<String>>) cc;
    }

    @JsonIgnore
    public Optional<String> from() {
        return from;
    }

    @JsonIgnore
    public Optional<String> subject() {
        return subject;
    }

    /**
     * The event email's "to" name &amp; email (name &lt;test@test.com&gt;)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> to() {
        return (Optional<List<String>>) to;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PropertyCrmEventEmail withAttachmentFileIds(List<String> attachmentFileIds) {
        Utils.checkNotNull(attachmentFileIds, "attachmentFileIds");
        this.attachmentFileIds = Optional.ofNullable(attachmentFileIds);
        return this;
    }

    public PropertyCrmEventEmail withAttachmentFileIds(Optional<? extends List<String>> attachmentFileIds) {
        Utils.checkNotNull(attachmentFileIds, "attachmentFileIds");
        this.attachmentFileIds = attachmentFileIds;
        return this;
    }

    public PropertyCrmEventEmail withBody(String body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    public PropertyCrmEventEmail withBody(Optional<String> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    /**
     * The event email's cc name &amp; email (name &lt;test@test.com&gt;)
     */
    public PropertyCrmEventEmail withCc(List<String> cc) {
        Utils.checkNotNull(cc, "cc");
        this.cc = Optional.ofNullable(cc);
        return this;
    }

    /**
     * The event email's cc name &amp; email (name &lt;test@test.com&gt;)
     */
    public PropertyCrmEventEmail withCc(Optional<? extends List<String>> cc) {
        Utils.checkNotNull(cc, "cc");
        this.cc = cc;
        return this;
    }

    public PropertyCrmEventEmail withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }

    public PropertyCrmEventEmail withFrom(Optional<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public PropertyCrmEventEmail withSubject(String subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = Optional.ofNullable(subject);
        return this;
    }

    public PropertyCrmEventEmail withSubject(Optional<String> subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = subject;
        return this;
    }

    /**
     * The event email's "to" name &amp; email (name &lt;test@test.com&gt;)
     */
    public PropertyCrmEventEmail withTo(List<String> to) {
        Utils.checkNotNull(to, "to");
        this.to = Optional.ofNullable(to);
        return this;
    }

    /**
     * The event email's "to" name &amp; email (name &lt;test@test.com&gt;)
     */
    public PropertyCrmEventEmail withTo(Optional<? extends List<String>> to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyCrmEventEmail other = (PropertyCrmEventEmail) o;
        return 
            Objects.deepEquals(this.attachmentFileIds, other.attachmentFileIds) &&
            Objects.deepEquals(this.body, other.body) &&
            Objects.deepEquals(this.cc, other.cc) &&
            Objects.deepEquals(this.from, other.from) &&
            Objects.deepEquals(this.subject, other.subject) &&
            Objects.deepEquals(this.to, other.to);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            attachmentFileIds,
            body,
            cc,
            from,
            subject,
            to);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyCrmEventEmail.class,
                "attachmentFileIds", attachmentFileIds,
                "body", body,
                "cc", cc,
                "from", from,
                "subject", subject,
                "to", to);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> attachmentFileIds = Optional.empty();
 
        private Optional<String> body = Optional.empty();
 
        private Optional<? extends List<String>> cc = Optional.empty();
 
        private Optional<String> from = Optional.empty();
 
        private Optional<String> subject = Optional.empty();
 
        private Optional<? extends List<String>> to = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder attachmentFileIds(List<String> attachmentFileIds) {
            Utils.checkNotNull(attachmentFileIds, "attachmentFileIds");
            this.attachmentFileIds = Optional.ofNullable(attachmentFileIds);
            return this;
        }

        public Builder attachmentFileIds(Optional<? extends List<String>> attachmentFileIds) {
            Utils.checkNotNull(attachmentFileIds, "attachmentFileIds");
            this.attachmentFileIds = attachmentFileIds;
            return this;
        }

        public Builder body(String body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        public Builder body(Optional<String> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        /**
         * The event email's cc name &amp; email (name &lt;test@test.com&gt;)
         */
        public Builder cc(List<String> cc) {
            Utils.checkNotNull(cc, "cc");
            this.cc = Optional.ofNullable(cc);
            return this;
        }

        /**
         * The event email's cc name &amp; email (name &lt;test@test.com&gt;)
         */
        public Builder cc(Optional<? extends List<String>> cc) {
            Utils.checkNotNull(cc, "cc");
            this.cc = cc;
            return this;
        }

        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        public Builder from(Optional<String> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }

        public Builder subject(String subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = Optional.ofNullable(subject);
            return this;
        }

        public Builder subject(Optional<String> subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = subject;
            return this;
        }

        /**
         * The event email's "to" name &amp; email (name &lt;test@test.com&gt;)
         */
        public Builder to(List<String> to) {
            Utils.checkNotNull(to, "to");
            this.to = Optional.ofNullable(to);
            return this;
        }

        /**
         * The event email's "to" name &amp; email (name &lt;test@test.com&gt;)
         */
        public Builder to(Optional<? extends List<String>> to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }
        
        public PropertyCrmEventEmail build() {
            return new PropertyCrmEventEmail(
                attachmentFileIds,
                body,
                cc,
                from,
                subject,
                to);
        }
    }
}

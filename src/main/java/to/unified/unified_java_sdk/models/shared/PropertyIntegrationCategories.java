/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = PropertyIntegrationCategories._Deserializer.class)
@JsonSerialize(using = PropertyIntegrationCategories._Serializer.class)
public class PropertyIntegrationCategories {

    public static final PropertyIntegrationCategories PASSTHROUGH = new PropertyIntegrationCategories("passthrough");
    public static final PropertyIntegrationCategories HRIS = new PropertyIntegrationCategories("hris");
    public static final PropertyIntegrationCategories ATS = new PropertyIntegrationCategories("ats");
    public static final PropertyIntegrationCategories AUTH = new PropertyIntegrationCategories("auth");
    public static final PropertyIntegrationCategories CRM = new PropertyIntegrationCategories("crm");
    public static final PropertyIntegrationCategories ENRICH = new PropertyIntegrationCategories("enrich");
    public static final PropertyIntegrationCategories MARTECH = new PropertyIntegrationCategories("martech");
    public static final PropertyIntegrationCategories TICKETING = new PropertyIntegrationCategories("ticketing");
    public static final PropertyIntegrationCategories UC = new PropertyIntegrationCategories("uc");
    public static final PropertyIntegrationCategories ACCOUNTING = new PropertyIntegrationCategories("accounting");
    public static final PropertyIntegrationCategories STORAGE = new PropertyIntegrationCategories("storage");
    public static final PropertyIntegrationCategories COMMERCE = new PropertyIntegrationCategories("commerce");
    public static final PropertyIntegrationCategories PAYMENT = new PropertyIntegrationCategories("payment");
    public static final PropertyIntegrationCategories GENAI = new PropertyIntegrationCategories("genai");
    public static final PropertyIntegrationCategories MESSAGING = new PropertyIntegrationCategories("messaging");
    public static final PropertyIntegrationCategories KMS = new PropertyIntegrationCategories("kms");
    public static final PropertyIntegrationCategories TASK = new PropertyIntegrationCategories("task");
    public static final PropertyIntegrationCategories SCIM = new PropertyIntegrationCategories("scim");
    public static final PropertyIntegrationCategories LMS = new PropertyIntegrationCategories("lms");
    public static final PropertyIntegrationCategories REPO = new PropertyIntegrationCategories("repo");
    public static final PropertyIntegrationCategories METADATA = new PropertyIntegrationCategories("metadata");
    public static final PropertyIntegrationCategories CALENDAR = new PropertyIntegrationCategories("calendar");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, PropertyIntegrationCategories> values = createValuesMap();
    private static final Map<String, PropertyIntegrationCategoriesEnum> enums = createEnumsMap();

    private final String value;

    private PropertyIntegrationCategories(String value) {
        this.value = value;
    }

    /**
     * Returns a PropertyIntegrationCategories with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as PropertyIntegrationCategories
     */ 
    public static PropertyIntegrationCategories of(String value) {
        synchronized (PropertyIntegrationCategories.class) {
            return values.computeIfAbsent(value, v -> new PropertyIntegrationCategories(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<PropertyIntegrationCategoriesEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        PropertyIntegrationCategories other = (PropertyIntegrationCategories) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "PropertyIntegrationCategories [value=" + value + "]";
    }

    // return an array just like an enum
    public static PropertyIntegrationCategories[] values() {
        synchronized (PropertyIntegrationCategories.class) {
            return values.values().toArray(new PropertyIntegrationCategories[] {});
        }
    }

    private static final Map<String, PropertyIntegrationCategories> createValuesMap() {
        Map<String, PropertyIntegrationCategories> map = new LinkedHashMap<>();
        map.put("passthrough", PASSTHROUGH);
        map.put("hris", HRIS);
        map.put("ats", ATS);
        map.put("auth", AUTH);
        map.put("crm", CRM);
        map.put("enrich", ENRICH);
        map.put("martech", MARTECH);
        map.put("ticketing", TICKETING);
        map.put("uc", UC);
        map.put("accounting", ACCOUNTING);
        map.put("storage", STORAGE);
        map.put("commerce", COMMERCE);
        map.put("payment", PAYMENT);
        map.put("genai", GENAI);
        map.put("messaging", MESSAGING);
        map.put("kms", KMS);
        map.put("task", TASK);
        map.put("scim", SCIM);
        map.put("lms", LMS);
        map.put("repo", REPO);
        map.put("metadata", METADATA);
        map.put("calendar", CALENDAR);
        return map;
    }

    private static final Map<String, PropertyIntegrationCategoriesEnum> createEnumsMap() {
        Map<String, PropertyIntegrationCategoriesEnum> map = new HashMap<>();
        map.put("passthrough", PropertyIntegrationCategoriesEnum.PASSTHROUGH);
        map.put("hris", PropertyIntegrationCategoriesEnum.HRIS);
        map.put("ats", PropertyIntegrationCategoriesEnum.ATS);
        map.put("auth", PropertyIntegrationCategoriesEnum.AUTH);
        map.put("crm", PropertyIntegrationCategoriesEnum.CRM);
        map.put("enrich", PropertyIntegrationCategoriesEnum.ENRICH);
        map.put("martech", PropertyIntegrationCategoriesEnum.MARTECH);
        map.put("ticketing", PropertyIntegrationCategoriesEnum.TICKETING);
        map.put("uc", PropertyIntegrationCategoriesEnum.UC);
        map.put("accounting", PropertyIntegrationCategoriesEnum.ACCOUNTING);
        map.put("storage", PropertyIntegrationCategoriesEnum.STORAGE);
        map.put("commerce", PropertyIntegrationCategoriesEnum.COMMERCE);
        map.put("payment", PropertyIntegrationCategoriesEnum.PAYMENT);
        map.put("genai", PropertyIntegrationCategoriesEnum.GENAI);
        map.put("messaging", PropertyIntegrationCategoriesEnum.MESSAGING);
        map.put("kms", PropertyIntegrationCategoriesEnum.KMS);
        map.put("task", PropertyIntegrationCategoriesEnum.TASK);
        map.put("scim", PropertyIntegrationCategoriesEnum.SCIM);
        map.put("lms", PropertyIntegrationCategoriesEnum.LMS);
        map.put("repo", PropertyIntegrationCategoriesEnum.REPO);
        map.put("metadata", PropertyIntegrationCategoriesEnum.METADATA);
        map.put("calendar", PropertyIntegrationCategoriesEnum.CALENDAR);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<PropertyIntegrationCategories> {

        protected _Serializer() {
            super(PropertyIntegrationCategories.class);
        }

        @Override
        public void serialize(PropertyIntegrationCategories value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<PropertyIntegrationCategories> {

        protected _Deserializer() {
            super(PropertyIntegrationCategories.class);
        }

        @Override
        public PropertyIntegrationCategories deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return PropertyIntegrationCategories.of(v);
        }
    }
    
    public enum PropertyIntegrationCategoriesEnum {

        PASSTHROUGH("passthrough"),
        HRIS("hris"),
        ATS("ats"),
        AUTH("auth"),
        CRM("crm"),
        ENRICH("enrich"),
        MARTECH("martech"),
        TICKETING("ticketing"),
        UC("uc"),
        ACCOUNTING("accounting"),
        STORAGE("storage"),
        COMMERCE("commerce"),
        PAYMENT("payment"),
        GENAI("genai"),
        MESSAGING("messaging"),
        KMS("kms"),
        TASK("task"),
        SCIM("scim"),
        LMS("lms"),
        REPO("repo"),
        METADATA("metadata"),
        CALENDAR("calendar"),;

        private final String value;

        private PropertyIntegrationCategoriesEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class CalendarAttachment {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("download_url")
    private Optional<String> downloadUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mime_type")
    private Optional<String> mimeType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonCreator
    public CalendarAttachment(
            @JsonProperty("download_url") Optional<String> downloadUrl,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("mime_type") Optional<String> mimeType,
            @JsonProperty("name") Optional<String> name) {
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(mimeType, "mimeType");
        Utils.checkNotNull(name, "name");
        this.downloadUrl = downloadUrl;
        this.id = id;
        this.mimeType = mimeType;
        this.name = name;
    }
    
    public CalendarAttachment() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> downloadUrl() {
        return downloadUrl;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> mimeType() {
        return mimeType;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CalendarAttachment withDownloadUrl(String downloadUrl) {
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        this.downloadUrl = Optional.ofNullable(downloadUrl);
        return this;
    }

    public CalendarAttachment withDownloadUrl(Optional<String> downloadUrl) {
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        this.downloadUrl = downloadUrl;
        return this;
    }

    public CalendarAttachment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CalendarAttachment withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CalendarAttachment withMimeType(String mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = Optional.ofNullable(mimeType);
        return this;
    }

    public CalendarAttachment withMimeType(Optional<String> mimeType) {
        Utils.checkNotNull(mimeType, "mimeType");
        this.mimeType = mimeType;
        return this;
    }

    public CalendarAttachment withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public CalendarAttachment withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalendarAttachment other = (CalendarAttachment) o;
        return 
            Objects.deepEquals(this.downloadUrl, other.downloadUrl) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.mimeType, other.mimeType) &&
            Objects.deepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            downloadUrl,
            id,
            mimeType,
            name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CalendarAttachment.class,
                "downloadUrl", downloadUrl,
                "id", id,
                "mimeType", mimeType,
                "name", name);
    }
    
    public final static class Builder {
 
        private Optional<String> downloadUrl = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> mimeType = Optional.empty();
 
        private Optional<String> name = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder downloadUrl(String downloadUrl) {
            Utils.checkNotNull(downloadUrl, "downloadUrl");
            this.downloadUrl = Optional.ofNullable(downloadUrl);
            return this;
        }

        public Builder downloadUrl(Optional<String> downloadUrl) {
            Utils.checkNotNull(downloadUrl, "downloadUrl");
            this.downloadUrl = downloadUrl;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder mimeType(String mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = Optional.ofNullable(mimeType);
            return this;
        }

        public Builder mimeType(Optional<String> mimeType) {
            Utils.checkNotNull(mimeType, "mimeType");
            this.mimeType = mimeType;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }
        
        public CalendarAttachment build() {
            return new CalendarAttachment(
                downloadUrl,
                id,
                mimeType,
                name);
        }
    }
}

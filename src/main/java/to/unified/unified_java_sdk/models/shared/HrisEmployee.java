/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class HrisEmployee {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends PropertyHrisEmployeeAddress> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bio")
    private Optional<String> bio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private Optional<String> companyId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensation")
    private Optional<? extends List<HrisCompensation>> compensation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_of_birth")
    private Optional<OffsetDateTime> dateOfBirth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private Optional<String> department;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("division")
    private Optional<String> division;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<HrisEmail>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_number")
    private Optional<String> employeeNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_roles")
    private Optional<? extends List<PropertyHrisEmployeeEmployeeRoles>> employeeRoles;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_status")
    private Optional<? extends EmploymentStatus> employmentStatus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_type")
    private Optional<? extends HrisEmployeeEmploymentType> employmentType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private Optional<? extends HrisEmployeeGender> gender;

    /**
     * Which groups/teams/units that this employee/user belongs to.  May not have all of the Group fields present, but should have id, name, or email.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    private Optional<? extends List<HrisGroup>> groups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hired_at")
    private Optional<OffsetDateTime> hiredAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    private Optional<String> imageUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language_locale")
    private Optional<String> languageLocale;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<String> location;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    private Optional<? extends List<HrisLocation>> locations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager_id")
    private Optional<String> managerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("marital_status")
    private Optional<? extends MaritalStatus> maritalStatus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends List<HrisMetadata>> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pronouns")
    private Optional<String> pronouns;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salutation")
    private Optional<String> salutation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssn_sin")
    private Optional<String> ssnSin;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storage_quota_allocated")
    private Optional<Double> storageQuotaAllocated;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storage_quota_available")
    private Optional<Double> storageQuotaAvailable;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("storage_quota_used")
    private Optional<Double> storageQuotaUsed;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telephones")
    private Optional<? extends List<HrisTelephone>> telephones;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminated_at")
    private Optional<OffsetDateTime> terminatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public HrisEmployee(
            @JsonProperty("address") Optional<? extends PropertyHrisEmployeeAddress> address,
            @JsonProperty("bio") Optional<String> bio,
            @JsonProperty("company_id") Optional<String> companyId,
            @JsonProperty("compensation") Optional<? extends List<HrisCompensation>> compensation,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("date_of_birth") Optional<OffsetDateTime> dateOfBirth,
            @JsonProperty("department") Optional<String> department,
            @JsonProperty("division") Optional<String> division,
            @JsonProperty("emails") Optional<? extends List<HrisEmail>> emails,
            @JsonProperty("employee_number") Optional<String> employeeNumber,
            @JsonProperty("employee_roles") Optional<? extends List<PropertyHrisEmployeeEmployeeRoles>> employeeRoles,
            @JsonProperty("employment_status") Optional<? extends EmploymentStatus> employmentStatus,
            @JsonProperty("employment_type") Optional<? extends HrisEmployeeEmploymentType> employmentType,
            @JsonProperty("gender") Optional<? extends HrisEmployeeGender> gender,
            @JsonProperty("groups") Optional<? extends List<HrisGroup>> groups,
            @JsonProperty("hired_at") Optional<OffsetDateTime> hiredAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("image_url") Optional<String> imageUrl,
            @JsonProperty("language_locale") Optional<String> languageLocale,
            @JsonProperty("location") Optional<String> location,
            @JsonProperty("locations") Optional<? extends List<HrisLocation>> locations,
            @JsonProperty("manager_id") Optional<String> managerId,
            @JsonProperty("marital_status") Optional<? extends MaritalStatus> maritalStatus,
            @JsonProperty("metadata") Optional<? extends List<HrisMetadata>> metadata,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("pronouns") Optional<String> pronouns,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("salutation") Optional<String> salutation,
            @JsonProperty("ssn_sin") Optional<String> ssnSin,
            @JsonProperty("storage_quota_allocated") Optional<Double> storageQuotaAllocated,
            @JsonProperty("storage_quota_available") Optional<Double> storageQuotaAvailable,
            @JsonProperty("storage_quota_used") Optional<Double> storageQuotaUsed,
            @JsonProperty("telephones") Optional<? extends List<HrisTelephone>> telephones,
            @JsonProperty("terminated_at") Optional<OffsetDateTime> terminatedAt,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(bio, "bio");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(compensation, "compensation");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(division, "division");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        Utils.checkNotNull(employeeRoles, "employeeRoles");
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        Utils.checkNotNull(employmentType, "employmentType");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(groups, "groups");
        Utils.checkNotNull(hiredAt, "hiredAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(languageLocale, "languageLocale");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(locations, "locations");
        Utils.checkNotNull(managerId, "managerId");
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(pronouns, "pronouns");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(salutation, "salutation");
        Utils.checkNotNull(ssnSin, "ssnSin");
        Utils.checkNotNull(storageQuotaAllocated, "storageQuotaAllocated");
        Utils.checkNotNull(storageQuotaAvailable, "storageQuotaAvailable");
        Utils.checkNotNull(storageQuotaUsed, "storageQuotaUsed");
        Utils.checkNotNull(telephones, "telephones");
        Utils.checkNotNull(terminatedAt, "terminatedAt");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.address = address;
        this.bio = bio;
        this.companyId = companyId;
        this.compensation = compensation;
        this.createdAt = createdAt;
        this.currency = currency;
        this.dateOfBirth = dateOfBirth;
        this.department = department;
        this.division = division;
        this.emails = emails;
        this.employeeNumber = employeeNumber;
        this.employeeRoles = employeeRoles;
        this.employmentStatus = employmentStatus;
        this.employmentType = employmentType;
        this.gender = gender;
        this.groups = groups;
        this.hiredAt = hiredAt;
        this.id = id;
        this.imageUrl = imageUrl;
        this.languageLocale = languageLocale;
        this.location = location;
        this.locations = locations;
        this.managerId = managerId;
        this.maritalStatus = maritalStatus;
        this.metadata = metadata;
        this.name = name;
        this.pronouns = pronouns;
        this.raw = raw;
        this.salutation = salutation;
        this.ssnSin = ssnSin;
        this.storageQuotaAllocated = storageQuotaAllocated;
        this.storageQuotaAvailable = storageQuotaAvailable;
        this.storageQuotaUsed = storageQuotaUsed;
        this.telephones = telephones;
        this.terminatedAt = terminatedAt;
        this.timezone = timezone;
        this.title = title;
        this.updatedAt = updatedAt;
    }
    
    public HrisEmployee() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyHrisEmployeeAddress> address() {
        return (Optional<PropertyHrisEmployeeAddress>) address;
    }

    @JsonIgnore
    public Optional<String> bio() {
        return bio;
    }

    @JsonIgnore
    public Optional<String> companyId() {
        return companyId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HrisCompensation>> compensation() {
        return (Optional<List<HrisCompensation>>) compensation;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> dateOfBirth() {
        return dateOfBirth;
    }

    @JsonIgnore
    public Optional<String> department() {
        return department;
    }

    @JsonIgnore
    public Optional<String> division() {
        return division;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HrisEmail>> emails() {
        return (Optional<List<HrisEmail>>) emails;
    }

    @JsonIgnore
    public Optional<String> employeeNumber() {
        return employeeNumber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyHrisEmployeeEmployeeRoles>> employeeRoles() {
        return (Optional<List<PropertyHrisEmployeeEmployeeRoles>>) employeeRoles;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmploymentStatus> employmentStatus() {
        return (Optional<EmploymentStatus>) employmentStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HrisEmployeeEmploymentType> employmentType() {
        return (Optional<HrisEmployeeEmploymentType>) employmentType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HrisEmployeeGender> gender() {
        return (Optional<HrisEmployeeGender>) gender;
    }

    /**
     * Which groups/teams/units that this employee/user belongs to.  May not have all of the Group fields present, but should have id, name, or email.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HrisGroup>> groups() {
        return (Optional<List<HrisGroup>>) groups;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> hiredAt() {
        return hiredAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> imageUrl() {
        return imageUrl;
    }

    @JsonIgnore
    public Optional<String> languageLocale() {
        return languageLocale;
    }

    @JsonIgnore
    public Optional<String> location() {
        return location;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HrisLocation>> locations() {
        return (Optional<List<HrisLocation>>) locations;
    }

    @JsonIgnore
    public Optional<String> managerId() {
        return managerId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<MaritalStatus> maritalStatus() {
        return (Optional<MaritalStatus>) maritalStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HrisMetadata>> metadata() {
        return (Optional<List<HrisMetadata>>) metadata;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> pronouns() {
        return pronouns;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<String> salutation() {
        return salutation;
    }

    @JsonIgnore
    public Optional<String> ssnSin() {
        return ssnSin;
    }

    @JsonIgnore
    public Optional<Double> storageQuotaAllocated() {
        return storageQuotaAllocated;
    }

    @JsonIgnore
    public Optional<Double> storageQuotaAvailable() {
        return storageQuotaAvailable;
    }

    @JsonIgnore
    public Optional<Double> storageQuotaUsed() {
        return storageQuotaUsed;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HrisTelephone>> telephones() {
        return (Optional<List<HrisTelephone>>) telephones;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> terminatedAt() {
        return terminatedAt;
    }

    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public HrisEmployee withAddress(PropertyHrisEmployeeAddress address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public HrisEmployee withAddress(Optional<? extends PropertyHrisEmployeeAddress> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public HrisEmployee withBio(String bio) {
        Utils.checkNotNull(bio, "bio");
        this.bio = Optional.ofNullable(bio);
        return this;
    }

    public HrisEmployee withBio(Optional<String> bio) {
        Utils.checkNotNull(bio, "bio");
        this.bio = bio;
        return this;
    }

    public HrisEmployee withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = Optional.ofNullable(companyId);
        return this;
    }

    public HrisEmployee withCompanyId(Optional<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    public HrisEmployee withCompensation(List<HrisCompensation> compensation) {
        Utils.checkNotNull(compensation, "compensation");
        this.compensation = Optional.ofNullable(compensation);
        return this;
    }

    public HrisEmployee withCompensation(Optional<? extends List<HrisCompensation>> compensation) {
        Utils.checkNotNull(compensation, "compensation");
        this.compensation = compensation;
        return this;
    }

    public HrisEmployee withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public HrisEmployee withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public HrisEmployee withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    public HrisEmployee withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public HrisEmployee withDateOfBirth(OffsetDateTime dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = Optional.ofNullable(dateOfBirth);
        return this;
    }

    public HrisEmployee withDateOfBirth(Optional<OffsetDateTime> dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = dateOfBirth;
        return this;
    }

    public HrisEmployee withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = Optional.ofNullable(department);
        return this;
    }

    public HrisEmployee withDepartment(Optional<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    public HrisEmployee withDivision(String division) {
        Utils.checkNotNull(division, "division");
        this.division = Optional.ofNullable(division);
        return this;
    }

    public HrisEmployee withDivision(Optional<String> division) {
        Utils.checkNotNull(division, "division");
        this.division = division;
        return this;
    }

    public HrisEmployee withEmails(List<HrisEmail> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public HrisEmployee withEmails(Optional<? extends List<HrisEmail>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public HrisEmployee withEmployeeNumber(String employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = Optional.ofNullable(employeeNumber);
        return this;
    }

    public HrisEmployee withEmployeeNumber(Optional<String> employeeNumber) {
        Utils.checkNotNull(employeeNumber, "employeeNumber");
        this.employeeNumber = employeeNumber;
        return this;
    }

    public HrisEmployee withEmployeeRoles(List<PropertyHrisEmployeeEmployeeRoles> employeeRoles) {
        Utils.checkNotNull(employeeRoles, "employeeRoles");
        this.employeeRoles = Optional.ofNullable(employeeRoles);
        return this;
    }

    public HrisEmployee withEmployeeRoles(Optional<? extends List<PropertyHrisEmployeeEmployeeRoles>> employeeRoles) {
        Utils.checkNotNull(employeeRoles, "employeeRoles");
        this.employeeRoles = employeeRoles;
        return this;
    }

    public HrisEmployee withEmploymentStatus(EmploymentStatus employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = Optional.ofNullable(employmentStatus);
        return this;
    }

    public HrisEmployee withEmploymentStatus(Optional<? extends EmploymentStatus> employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = employmentStatus;
        return this;
    }

    public HrisEmployee withEmploymentType(HrisEmployeeEmploymentType employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = Optional.ofNullable(employmentType);
        return this;
    }

    public HrisEmployee withEmploymentType(Optional<? extends HrisEmployeeEmploymentType> employmentType) {
        Utils.checkNotNull(employmentType, "employmentType");
        this.employmentType = employmentType;
        return this;
    }

    public HrisEmployee withGender(HrisEmployeeGender gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = Optional.ofNullable(gender);
        return this;
    }

    public HrisEmployee withGender(Optional<? extends HrisEmployeeGender> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    /**
     * Which groups/teams/units that this employee/user belongs to.  May not have all of the Group fields present, but should have id, name, or email.
     */
    public HrisEmployee withGroups(List<HrisGroup> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = Optional.ofNullable(groups);
        return this;
    }

    /**
     * Which groups/teams/units that this employee/user belongs to.  May not have all of the Group fields present, but should have id, name, or email.
     */
    public HrisEmployee withGroups(Optional<? extends List<HrisGroup>> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = groups;
        return this;
    }

    public HrisEmployee withHiredAt(OffsetDateTime hiredAt) {
        Utils.checkNotNull(hiredAt, "hiredAt");
        this.hiredAt = Optional.ofNullable(hiredAt);
        return this;
    }

    public HrisEmployee withHiredAt(Optional<OffsetDateTime> hiredAt) {
        Utils.checkNotNull(hiredAt, "hiredAt");
        this.hiredAt = hiredAt;
        return this;
    }

    public HrisEmployee withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public HrisEmployee withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public HrisEmployee withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }

    public HrisEmployee withImageUrl(Optional<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public HrisEmployee withLanguageLocale(String languageLocale) {
        Utils.checkNotNull(languageLocale, "languageLocale");
        this.languageLocale = Optional.ofNullable(languageLocale);
        return this;
    }

    public HrisEmployee withLanguageLocale(Optional<String> languageLocale) {
        Utils.checkNotNull(languageLocale, "languageLocale");
        this.languageLocale = languageLocale;
        return this;
    }

    public HrisEmployee withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    public HrisEmployee withLocation(Optional<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public HrisEmployee withLocations(List<HrisLocation> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = Optional.ofNullable(locations);
        return this;
    }

    public HrisEmployee withLocations(Optional<? extends List<HrisLocation>> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = locations;
        return this;
    }

    public HrisEmployee withManagerId(String managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = Optional.ofNullable(managerId);
        return this;
    }

    public HrisEmployee withManagerId(Optional<String> managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = managerId;
        return this;
    }

    public HrisEmployee withMaritalStatus(MaritalStatus maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = Optional.ofNullable(maritalStatus);
        return this;
    }

    public HrisEmployee withMaritalStatus(Optional<? extends MaritalStatus> maritalStatus) {
        Utils.checkNotNull(maritalStatus, "maritalStatus");
        this.maritalStatus = maritalStatus;
        return this;
    }

    public HrisEmployee withMetadata(List<HrisMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public HrisEmployee withMetadata(Optional<? extends List<HrisMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public HrisEmployee withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public HrisEmployee withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public HrisEmployee withPronouns(String pronouns) {
        Utils.checkNotNull(pronouns, "pronouns");
        this.pronouns = Optional.ofNullable(pronouns);
        return this;
    }

    public HrisEmployee withPronouns(Optional<String> pronouns) {
        Utils.checkNotNull(pronouns, "pronouns");
        this.pronouns = pronouns;
        return this;
    }

    public HrisEmployee withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public HrisEmployee withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public HrisEmployee withSalutation(String salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = Optional.ofNullable(salutation);
        return this;
    }

    public HrisEmployee withSalutation(Optional<String> salutation) {
        Utils.checkNotNull(salutation, "salutation");
        this.salutation = salutation;
        return this;
    }

    public HrisEmployee withSsnSin(String ssnSin) {
        Utils.checkNotNull(ssnSin, "ssnSin");
        this.ssnSin = Optional.ofNullable(ssnSin);
        return this;
    }

    public HrisEmployee withSsnSin(Optional<String> ssnSin) {
        Utils.checkNotNull(ssnSin, "ssnSin");
        this.ssnSin = ssnSin;
        return this;
    }

    public HrisEmployee withStorageQuotaAllocated(double storageQuotaAllocated) {
        Utils.checkNotNull(storageQuotaAllocated, "storageQuotaAllocated");
        this.storageQuotaAllocated = Optional.ofNullable(storageQuotaAllocated);
        return this;
    }

    public HrisEmployee withStorageQuotaAllocated(Optional<Double> storageQuotaAllocated) {
        Utils.checkNotNull(storageQuotaAllocated, "storageQuotaAllocated");
        this.storageQuotaAllocated = storageQuotaAllocated;
        return this;
    }

    public HrisEmployee withStorageQuotaAvailable(double storageQuotaAvailable) {
        Utils.checkNotNull(storageQuotaAvailable, "storageQuotaAvailable");
        this.storageQuotaAvailable = Optional.ofNullable(storageQuotaAvailable);
        return this;
    }

    public HrisEmployee withStorageQuotaAvailable(Optional<Double> storageQuotaAvailable) {
        Utils.checkNotNull(storageQuotaAvailable, "storageQuotaAvailable");
        this.storageQuotaAvailable = storageQuotaAvailable;
        return this;
    }

    public HrisEmployee withStorageQuotaUsed(double storageQuotaUsed) {
        Utils.checkNotNull(storageQuotaUsed, "storageQuotaUsed");
        this.storageQuotaUsed = Optional.ofNullable(storageQuotaUsed);
        return this;
    }

    public HrisEmployee withStorageQuotaUsed(Optional<Double> storageQuotaUsed) {
        Utils.checkNotNull(storageQuotaUsed, "storageQuotaUsed");
        this.storageQuotaUsed = storageQuotaUsed;
        return this;
    }

    public HrisEmployee withTelephones(List<HrisTelephone> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = Optional.ofNullable(telephones);
        return this;
    }

    public HrisEmployee withTelephones(Optional<? extends List<HrisTelephone>> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = telephones;
        return this;
    }

    public HrisEmployee withTerminatedAt(OffsetDateTime terminatedAt) {
        Utils.checkNotNull(terminatedAt, "terminatedAt");
        this.terminatedAt = Optional.ofNullable(terminatedAt);
        return this;
    }

    public HrisEmployee withTerminatedAt(Optional<OffsetDateTime> terminatedAt) {
        Utils.checkNotNull(terminatedAt, "terminatedAt");
        this.terminatedAt = terminatedAt;
        return this;
    }

    public HrisEmployee withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    public HrisEmployee withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public HrisEmployee withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public HrisEmployee withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public HrisEmployee withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public HrisEmployee withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisEmployee other = (HrisEmployee) o;
        return 
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.bio, other.bio) &&
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.compensation, other.compensation) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.dateOfBirth, other.dateOfBirth) &&
            Objects.deepEquals(this.department, other.department) &&
            Objects.deepEquals(this.division, other.division) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.employeeNumber, other.employeeNumber) &&
            Objects.deepEquals(this.employeeRoles, other.employeeRoles) &&
            Objects.deepEquals(this.employmentStatus, other.employmentStatus) &&
            Objects.deepEquals(this.employmentType, other.employmentType) &&
            Objects.deepEquals(this.gender, other.gender) &&
            Objects.deepEquals(this.groups, other.groups) &&
            Objects.deepEquals(this.hiredAt, other.hiredAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            Objects.deepEquals(this.languageLocale, other.languageLocale) &&
            Objects.deepEquals(this.location, other.location) &&
            Objects.deepEquals(this.locations, other.locations) &&
            Objects.deepEquals(this.managerId, other.managerId) &&
            Objects.deepEquals(this.maritalStatus, other.maritalStatus) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.pronouns, other.pronouns) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.salutation, other.salutation) &&
            Objects.deepEquals(this.ssnSin, other.ssnSin) &&
            Objects.deepEquals(this.storageQuotaAllocated, other.storageQuotaAllocated) &&
            Objects.deepEquals(this.storageQuotaAvailable, other.storageQuotaAvailable) &&
            Objects.deepEquals(this.storageQuotaUsed, other.storageQuotaUsed) &&
            Objects.deepEquals(this.telephones, other.telephones) &&
            Objects.deepEquals(this.terminatedAt, other.terminatedAt) &&
            Objects.deepEquals(this.timezone, other.timezone) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            address,
            bio,
            companyId,
            compensation,
            createdAt,
            currency,
            dateOfBirth,
            department,
            division,
            emails,
            employeeNumber,
            employeeRoles,
            employmentStatus,
            employmentType,
            gender,
            groups,
            hiredAt,
            id,
            imageUrl,
            languageLocale,
            location,
            locations,
            managerId,
            maritalStatus,
            metadata,
            name,
            pronouns,
            raw,
            salutation,
            ssnSin,
            storageQuotaAllocated,
            storageQuotaAvailable,
            storageQuotaUsed,
            telephones,
            terminatedAt,
            timezone,
            title,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisEmployee.class,
                "address", address,
                "bio", bio,
                "companyId", companyId,
                "compensation", compensation,
                "createdAt", createdAt,
                "currency", currency,
                "dateOfBirth", dateOfBirth,
                "department", department,
                "division", division,
                "emails", emails,
                "employeeNumber", employeeNumber,
                "employeeRoles", employeeRoles,
                "employmentStatus", employmentStatus,
                "employmentType", employmentType,
                "gender", gender,
                "groups", groups,
                "hiredAt", hiredAt,
                "id", id,
                "imageUrl", imageUrl,
                "languageLocale", languageLocale,
                "location", location,
                "locations", locations,
                "managerId", managerId,
                "maritalStatus", maritalStatus,
                "metadata", metadata,
                "name", name,
                "pronouns", pronouns,
                "raw", raw,
                "salutation", salutation,
                "ssnSin", ssnSin,
                "storageQuotaAllocated", storageQuotaAllocated,
                "storageQuotaAvailable", storageQuotaAvailable,
                "storageQuotaUsed", storageQuotaUsed,
                "telephones", telephones,
                "terminatedAt", terminatedAt,
                "timezone", timezone,
                "title", title,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends PropertyHrisEmployeeAddress> address = Optional.empty();
 
        private Optional<String> bio = Optional.empty();
 
        private Optional<String> companyId = Optional.empty();
 
        private Optional<? extends List<HrisCompensation>> compensation = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<OffsetDateTime> dateOfBirth = Optional.empty();
 
        private Optional<String> department = Optional.empty();
 
        private Optional<String> division = Optional.empty();
 
        private Optional<? extends List<HrisEmail>> emails = Optional.empty();
 
        private Optional<String> employeeNumber = Optional.empty();
 
        private Optional<? extends List<PropertyHrisEmployeeEmployeeRoles>> employeeRoles = Optional.empty();
 
        private Optional<? extends EmploymentStatus> employmentStatus = Optional.empty();
 
        private Optional<? extends HrisEmployeeEmploymentType> employmentType = Optional.empty();
 
        private Optional<? extends HrisEmployeeGender> gender = Optional.empty();
 
        private Optional<? extends List<HrisGroup>> groups = Optional.empty();
 
        private Optional<OffsetDateTime> hiredAt = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> imageUrl = Optional.empty();
 
        private Optional<String> languageLocale = Optional.empty();
 
        private Optional<String> location = Optional.empty();
 
        private Optional<? extends List<HrisLocation>> locations = Optional.empty();
 
        private Optional<String> managerId = Optional.empty();
 
        private Optional<? extends MaritalStatus> maritalStatus = Optional.empty();
 
        private Optional<? extends List<HrisMetadata>> metadata = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> pronouns = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<String> salutation = Optional.empty();
 
        private Optional<String> ssnSin = Optional.empty();
 
        private Optional<Double> storageQuotaAllocated = Optional.empty();
 
        private Optional<Double> storageQuotaAvailable = Optional.empty();
 
        private Optional<Double> storageQuotaUsed = Optional.empty();
 
        private Optional<? extends List<HrisTelephone>> telephones = Optional.empty();
 
        private Optional<OffsetDateTime> terminatedAt = Optional.empty();
 
        private Optional<String> timezone = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder address(PropertyHrisEmployeeAddress address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends PropertyHrisEmployeeAddress> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder bio(String bio) {
            Utils.checkNotNull(bio, "bio");
            this.bio = Optional.ofNullable(bio);
            return this;
        }

        public Builder bio(Optional<String> bio) {
            Utils.checkNotNull(bio, "bio");
            this.bio = bio;
            return this;
        }

        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        public Builder companyId(Optional<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        public Builder compensation(List<HrisCompensation> compensation) {
            Utils.checkNotNull(compensation, "compensation");
            this.compensation = Optional.ofNullable(compensation);
            return this;
        }

        public Builder compensation(Optional<? extends List<HrisCompensation>> compensation) {
            Utils.checkNotNull(compensation, "compensation");
            this.compensation = compensation;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder dateOfBirth(OffsetDateTime dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = Optional.ofNullable(dateOfBirth);
            return this;
        }

        public Builder dateOfBirth(Optional<OffsetDateTime> dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = Optional.ofNullable(department);
            return this;
        }

        public Builder department(Optional<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        public Builder division(String division) {
            Utils.checkNotNull(division, "division");
            this.division = Optional.ofNullable(division);
            return this;
        }

        public Builder division(Optional<String> division) {
            Utils.checkNotNull(division, "division");
            this.division = division;
            return this;
        }

        public Builder emails(List<HrisEmail> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<HrisEmail>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder employeeNumber(String employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = Optional.ofNullable(employeeNumber);
            return this;
        }

        public Builder employeeNumber(Optional<String> employeeNumber) {
            Utils.checkNotNull(employeeNumber, "employeeNumber");
            this.employeeNumber = employeeNumber;
            return this;
        }

        public Builder employeeRoles(List<PropertyHrisEmployeeEmployeeRoles> employeeRoles) {
            Utils.checkNotNull(employeeRoles, "employeeRoles");
            this.employeeRoles = Optional.ofNullable(employeeRoles);
            return this;
        }

        public Builder employeeRoles(Optional<? extends List<PropertyHrisEmployeeEmployeeRoles>> employeeRoles) {
            Utils.checkNotNull(employeeRoles, "employeeRoles");
            this.employeeRoles = employeeRoles;
            return this;
        }

        public Builder employmentStatus(EmploymentStatus employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = Optional.ofNullable(employmentStatus);
            return this;
        }

        public Builder employmentStatus(Optional<? extends EmploymentStatus> employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = employmentStatus;
            return this;
        }

        public Builder employmentType(HrisEmployeeEmploymentType employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = Optional.ofNullable(employmentType);
            return this;
        }

        public Builder employmentType(Optional<? extends HrisEmployeeEmploymentType> employmentType) {
            Utils.checkNotNull(employmentType, "employmentType");
            this.employmentType = employmentType;
            return this;
        }

        public Builder gender(HrisEmployeeGender gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = Optional.ofNullable(gender);
            return this;
        }

        public Builder gender(Optional<? extends HrisEmployeeGender> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }

        /**
         * Which groups/teams/units that this employee/user belongs to.  May not have all of the Group fields present, but should have id, name, or email.
         */
        public Builder groups(List<HrisGroup> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = Optional.ofNullable(groups);
            return this;
        }

        /**
         * Which groups/teams/units that this employee/user belongs to.  May not have all of the Group fields present, but should have id, name, or email.
         */
        public Builder groups(Optional<? extends List<HrisGroup>> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = groups;
            return this;
        }

        public Builder hiredAt(OffsetDateTime hiredAt) {
            Utils.checkNotNull(hiredAt, "hiredAt");
            this.hiredAt = Optional.ofNullable(hiredAt);
            return this;
        }

        public Builder hiredAt(Optional<OffsetDateTime> hiredAt) {
            Utils.checkNotNull(hiredAt, "hiredAt");
            this.hiredAt = hiredAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        public Builder imageUrl(Optional<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        public Builder languageLocale(String languageLocale) {
            Utils.checkNotNull(languageLocale, "languageLocale");
            this.languageLocale = Optional.ofNullable(languageLocale);
            return this;
        }

        public Builder languageLocale(Optional<String> languageLocale) {
            Utils.checkNotNull(languageLocale, "languageLocale");
            this.languageLocale = languageLocale;
            return this;
        }

        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        public Builder location(Optional<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        public Builder locations(List<HrisLocation> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = Optional.ofNullable(locations);
            return this;
        }

        public Builder locations(Optional<? extends List<HrisLocation>> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = locations;
            return this;
        }

        public Builder managerId(String managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = Optional.ofNullable(managerId);
            return this;
        }

        public Builder managerId(Optional<String> managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = managerId;
            return this;
        }

        public Builder maritalStatus(MaritalStatus maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = Optional.ofNullable(maritalStatus);
            return this;
        }

        public Builder maritalStatus(Optional<? extends MaritalStatus> maritalStatus) {
            Utils.checkNotNull(maritalStatus, "maritalStatus");
            this.maritalStatus = maritalStatus;
            return this;
        }

        public Builder metadata(List<HrisMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends List<HrisMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder pronouns(String pronouns) {
            Utils.checkNotNull(pronouns, "pronouns");
            this.pronouns = Optional.ofNullable(pronouns);
            return this;
        }

        public Builder pronouns(Optional<String> pronouns) {
            Utils.checkNotNull(pronouns, "pronouns");
            this.pronouns = pronouns;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder salutation(String salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = Optional.ofNullable(salutation);
            return this;
        }

        public Builder salutation(Optional<String> salutation) {
            Utils.checkNotNull(salutation, "salutation");
            this.salutation = salutation;
            return this;
        }

        public Builder ssnSin(String ssnSin) {
            Utils.checkNotNull(ssnSin, "ssnSin");
            this.ssnSin = Optional.ofNullable(ssnSin);
            return this;
        }

        public Builder ssnSin(Optional<String> ssnSin) {
            Utils.checkNotNull(ssnSin, "ssnSin");
            this.ssnSin = ssnSin;
            return this;
        }

        public Builder storageQuotaAllocated(double storageQuotaAllocated) {
            Utils.checkNotNull(storageQuotaAllocated, "storageQuotaAllocated");
            this.storageQuotaAllocated = Optional.ofNullable(storageQuotaAllocated);
            return this;
        }

        public Builder storageQuotaAllocated(Optional<Double> storageQuotaAllocated) {
            Utils.checkNotNull(storageQuotaAllocated, "storageQuotaAllocated");
            this.storageQuotaAllocated = storageQuotaAllocated;
            return this;
        }

        public Builder storageQuotaAvailable(double storageQuotaAvailable) {
            Utils.checkNotNull(storageQuotaAvailable, "storageQuotaAvailable");
            this.storageQuotaAvailable = Optional.ofNullable(storageQuotaAvailable);
            return this;
        }

        public Builder storageQuotaAvailable(Optional<Double> storageQuotaAvailable) {
            Utils.checkNotNull(storageQuotaAvailable, "storageQuotaAvailable");
            this.storageQuotaAvailable = storageQuotaAvailable;
            return this;
        }

        public Builder storageQuotaUsed(double storageQuotaUsed) {
            Utils.checkNotNull(storageQuotaUsed, "storageQuotaUsed");
            this.storageQuotaUsed = Optional.ofNullable(storageQuotaUsed);
            return this;
        }

        public Builder storageQuotaUsed(Optional<Double> storageQuotaUsed) {
            Utils.checkNotNull(storageQuotaUsed, "storageQuotaUsed");
            this.storageQuotaUsed = storageQuotaUsed;
            return this;
        }

        public Builder telephones(List<HrisTelephone> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = Optional.ofNullable(telephones);
            return this;
        }

        public Builder telephones(Optional<? extends List<HrisTelephone>> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = telephones;
            return this;
        }

        public Builder terminatedAt(OffsetDateTime terminatedAt) {
            Utils.checkNotNull(terminatedAt, "terminatedAt");
            this.terminatedAt = Optional.ofNullable(terminatedAt);
            return this;
        }

        public Builder terminatedAt(Optional<OffsetDateTime> terminatedAt) {
            Utils.checkNotNull(terminatedAt, "terminatedAt");
            this.terminatedAt = terminatedAt;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public HrisEmployee build() {
            return new HrisEmployee(
                address,
                bio,
                companyId,
                compensation,
                createdAt,
                currency,
                dateOfBirth,
                department,
                division,
                emails,
                employeeNumber,
                employeeRoles,
                employmentStatus,
                employmentType,
                gender,
                groups,
                hiredAt,
                id,
                imageUrl,
                languageLocale,
                location,
                locations,
                managerId,
                maritalStatus,
                metadata,
                name,
                pronouns,
                raw,
                salutation,
                ssnSin,
                storageQuotaAllocated,
                storageQuotaAvailable,
                storageQuotaUsed,
                telephones,
                terminatedAt,
                timezone,
                title,
                updatedAt);
        }
    }
}

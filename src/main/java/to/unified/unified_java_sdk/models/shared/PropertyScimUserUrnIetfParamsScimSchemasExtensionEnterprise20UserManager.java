/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager
 * 
 * <p>"id" attribute of another User.
 */
public class PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("$ref")
    private Optional<String> dollarRef;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<String> displayName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("managerId")
    private Optional<String> managerId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<String> value;

    @JsonCreator
    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager(
            @JsonProperty("$ref") Optional<String> dollarRef,
            @JsonProperty("displayName") Optional<String> displayName,
            @JsonProperty("managerId") Optional<String> managerId,
            @JsonProperty("type") Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType> type,
            @JsonProperty("value") Optional<String> value) {
        Utils.checkNotNull(dollarRef, "dollarRef");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(managerId, "managerId");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(value, "value");
        this.dollarRef = dollarRef;
        this.displayName = displayName;
        this.managerId = managerId;
        this.type = type;
        this.value = value;
    }
    
    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> dollarRef() {
        return dollarRef;
    }

    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    @JsonIgnore
    public Optional<String> managerId() {
        return managerId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType> type() {
        return (Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType>) type;
    }

    @JsonIgnore
    public Optional<String> value() {
        return value;
    }

    public static Builder builder() {
        return new Builder();
    }


    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withDollarRef(String dollarRef) {
        Utils.checkNotNull(dollarRef, "dollarRef");
        this.dollarRef = Optional.ofNullable(dollarRef);
        return this;
    }


    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withDollarRef(Optional<String> dollarRef) {
        Utils.checkNotNull(dollarRef, "dollarRef");
        this.dollarRef = dollarRef;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }


    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withManagerId(String managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = Optional.ofNullable(managerId);
        return this;
    }


    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withManagerId(Optional<String> managerId) {
        Utils.checkNotNull(managerId, "managerId");
        this.managerId = managerId;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withType(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withType(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }


    public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager withValue(Optional<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager other = (PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager) o;
        return 
            Utils.enhancedDeepEquals(this.dollarRef, other.dollarRef) &&
            Utils.enhancedDeepEquals(this.displayName, other.displayName) &&
            Utils.enhancedDeepEquals(this.managerId, other.managerId) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            dollarRef, displayName, managerId,
            type, value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager.class,
                "dollarRef", dollarRef,
                "displayName", displayName,
                "managerId", managerId,
                "type", type,
                "value", value);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> dollarRef = Optional.empty();

        private Optional<String> displayName = Optional.empty();

        private Optional<String> managerId = Optional.empty();

        private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType> type = Optional.empty();

        private Optional<String> value = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder dollarRef(String dollarRef) {
            Utils.checkNotNull(dollarRef, "dollarRef");
            this.dollarRef = Optional.ofNullable(dollarRef);
            return this;
        }

        public Builder dollarRef(Optional<String> dollarRef) {
            Utils.checkNotNull(dollarRef, "dollarRef");
            this.dollarRef = dollarRef;
            return this;
        }


        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }


        public Builder managerId(String managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = Optional.ofNullable(managerId);
            return this;
        }

        public Builder managerId(Optional<String> managerId) {
            Utils.checkNotNull(managerId, "managerId");
            this.managerId = managerId;
            return this;
        }


        public Builder type(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManagerType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager build() {

            return new PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20UserManager(
                dollarRef, displayName, managerId,
                type, value);
        }

    }
}

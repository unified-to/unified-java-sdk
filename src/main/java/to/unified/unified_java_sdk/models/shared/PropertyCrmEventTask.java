/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * PropertyCrmEventTask
 * 
 * <p>The task object, when type = task
 */
public class PropertyCrmEventTask {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_at")
    private Optional<OffsetDateTime> dueAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private Optional<? extends Priority> priority;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends PropertyCrmEventTaskStatus> status;

    @JsonCreator
    public PropertyCrmEventTask(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("due_at") Optional<OffsetDateTime> dueAt,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("priority") Optional<? extends Priority> priority,
            @JsonProperty("status") Optional<? extends PropertyCrmEventTaskStatus> status) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(dueAt, "dueAt");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(priority, "priority");
        Utils.checkNotNull(status, "status");
        this.description = description;
        this.dueAt = dueAt;
        this.name = name;
        this.priority = priority;
        this.status = status;
    }
    
    public PropertyCrmEventTask() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> dueAt() {
        return dueAt;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Priority> priority() {
        return (Optional<Priority>) priority;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCrmEventTaskStatus> status() {
        return (Optional<PropertyCrmEventTaskStatus>) status;
    }

    public static Builder builder() {
        return new Builder();
    }


    public PropertyCrmEventTask withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    public PropertyCrmEventTask withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public PropertyCrmEventTask withDueAt(OffsetDateTime dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = Optional.ofNullable(dueAt);
        return this;
    }


    public PropertyCrmEventTask withDueAt(Optional<OffsetDateTime> dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = dueAt;
        return this;
    }

    public PropertyCrmEventTask withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public PropertyCrmEventTask withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public PropertyCrmEventTask withPriority(Priority priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = Optional.ofNullable(priority);
        return this;
    }


    public PropertyCrmEventTask withPriority(Optional<? extends Priority> priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = priority;
        return this;
    }

    public PropertyCrmEventTask withStatus(PropertyCrmEventTaskStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public PropertyCrmEventTask withStatus(Optional<? extends PropertyCrmEventTaskStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyCrmEventTask other = (PropertyCrmEventTask) o;
        return 
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.dueAt, other.dueAt) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.priority, other.priority) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            description, dueAt, name,
            priority, status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyCrmEventTask.class,
                "description", description,
                "dueAt", dueAt,
                "name", name,
                "priority", priority,
                "status", status);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> description = Optional.empty();

        private Optional<OffsetDateTime> dueAt = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends Priority> priority = Optional.empty();

        private Optional<? extends PropertyCrmEventTaskStatus> status = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder dueAt(OffsetDateTime dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = Optional.ofNullable(dueAt);
            return this;
        }

        public Builder dueAt(Optional<OffsetDateTime> dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = dueAt;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder priority(Priority priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = Optional.ofNullable(priority);
            return this;
        }

        public Builder priority(Optional<? extends Priority> priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = priority;
            return this;
        }


        public Builder status(PropertyCrmEventTaskStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends PropertyCrmEventTaskStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public PropertyCrmEventTask build() {

            return new PropertyCrmEventTask(
                description, dueAt, name,
                priority, status);
        }

    }
}

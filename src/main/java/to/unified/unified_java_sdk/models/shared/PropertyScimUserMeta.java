/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class PropertyScimUserMeta {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    private Optional<String> created;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lastModified")
    private Optional<String> lastModified;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<String> location;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resourceType")
    private Optional<? extends PropertyScimUserMetaResourceType> resourceType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    @JsonCreator
    public PropertyScimUserMeta(
            @JsonProperty("created") Optional<String> created,
            @JsonProperty("lastModified") Optional<String> lastModified,
            @JsonProperty("location") Optional<String> location,
            @JsonProperty("resourceType") Optional<? extends PropertyScimUserMetaResourceType> resourceType,
            @JsonProperty("version") Optional<String> version) {
        Utils.checkNotNull(created, "created");
        Utils.checkNotNull(lastModified, "lastModified");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(resourceType, "resourceType");
        Utils.checkNotNull(version, "version");
        this.created = created;
        this.lastModified = lastModified;
        this.location = location;
        this.resourceType = resourceType;
        this.version = version;
    }
    
    public PropertyScimUserMeta() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> created() {
        return created;
    }

    @JsonIgnore
    public Optional<String> lastModified() {
        return lastModified;
    }

    @JsonIgnore
    public Optional<String> location() {
        return location;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyScimUserMetaResourceType> resourceType() {
        return (Optional<PropertyScimUserMetaResourceType>) resourceType;
    }

    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PropertyScimUserMeta withCreated(String created) {
        Utils.checkNotNull(created, "created");
        this.created = Optional.ofNullable(created);
        return this;
    }

    public PropertyScimUserMeta withCreated(Optional<String> created) {
        Utils.checkNotNull(created, "created");
        this.created = created;
        return this;
    }

    public PropertyScimUserMeta withLastModified(String lastModified) {
        Utils.checkNotNull(lastModified, "lastModified");
        this.lastModified = Optional.ofNullable(lastModified);
        return this;
    }

    public PropertyScimUserMeta withLastModified(Optional<String> lastModified) {
        Utils.checkNotNull(lastModified, "lastModified");
        this.lastModified = lastModified;
        return this;
    }

    public PropertyScimUserMeta withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }

    public PropertyScimUserMeta withLocation(Optional<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public PropertyScimUserMeta withResourceType(PropertyScimUserMetaResourceType resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = Optional.ofNullable(resourceType);
        return this;
    }

    public PropertyScimUserMeta withResourceType(Optional<? extends PropertyScimUserMetaResourceType> resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = resourceType;
        return this;
    }

    public PropertyScimUserMeta withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    public PropertyScimUserMeta withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyScimUserMeta other = (PropertyScimUserMeta) o;
        return 
            Objects.deepEquals(this.created, other.created) &&
            Objects.deepEquals(this.lastModified, other.lastModified) &&
            Objects.deepEquals(this.location, other.location) &&
            Objects.deepEquals(this.resourceType, other.resourceType) &&
            Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            created,
            lastModified,
            location,
            resourceType,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyScimUserMeta.class,
                "created", created,
                "lastModified", lastModified,
                "location", location,
                "resourceType", resourceType,
                "version", version);
    }
    
    public final static class Builder {
 
        private Optional<String> created = Optional.empty();
 
        private Optional<String> lastModified = Optional.empty();
 
        private Optional<String> location = Optional.empty();
 
        private Optional<? extends PropertyScimUserMetaResourceType> resourceType = Optional.empty();
 
        private Optional<String> version = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder created(String created) {
            Utils.checkNotNull(created, "created");
            this.created = Optional.ofNullable(created);
            return this;
        }

        public Builder created(Optional<String> created) {
            Utils.checkNotNull(created, "created");
            this.created = created;
            return this;
        }

        public Builder lastModified(String lastModified) {
            Utils.checkNotNull(lastModified, "lastModified");
            this.lastModified = Optional.ofNullable(lastModified);
            return this;
        }

        public Builder lastModified(Optional<String> lastModified) {
            Utils.checkNotNull(lastModified, "lastModified");
            this.lastModified = lastModified;
            return this;
        }

        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        public Builder location(Optional<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }

        public Builder resourceType(PropertyScimUserMetaResourceType resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = Optional.ofNullable(resourceType);
            return this;
        }

        public Builder resourceType(Optional<? extends PropertyScimUserMetaResourceType> resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = resourceType;
            return this;
        }

        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public PropertyScimUserMeta build() {
            return new PropertyScimUserMeta(
                created,
                lastModified,
                location,
                resourceType,
                version);
        }
    }
}

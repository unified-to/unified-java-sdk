/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class VerificationRequest {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_id")
    private Optional<String> candidateId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("package_id")
    private Optional<String> packageId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameters")
    private Optional<? extends List<VerificationParameterInput>> parameters;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_addresses")
    private Optional<? extends List<VerificationAddress>> profileAddresses;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_date_of_birth")
    private Optional<String> profileDateOfBirth;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_emails")
    private Optional<? extends List<String>> profileEmails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_gender")
    private Optional<? extends ProfileGender> profileGender;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_ip_address")
    private Optional<String> profileIpAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_name")
    private Optional<String> profileName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_national_identifier")
    private Optional<String> profileNationalIdentifier;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profile_telephones")
    private Optional<? extends List<String>> profileTelephones;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_completed_at")
    private Optional<OffsetDateTime> responseCompletedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_details")
    private Optional<? extends List<VerificationResponseDetail>> responseDetails;

    /**
     * report download
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_download_urls")
    private Optional<? extends List<String>> responseDownloadUrls;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_expires_at")
    private Optional<OffsetDateTime> responseExpiresAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_issued_at")
    private Optional<OffsetDateTime> responseIssuedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_redirect_url")
    private Optional<String> responseRedirectUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_score")
    private Optional<Double> responseScore;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_source")
    private Optional<String> responseSource;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("response_status")
    private Optional<? extends ResponseStatus> responseStatus;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("target_url")
    private Optional<String> targetUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public VerificationRequest(
            @JsonProperty("candidate_id") Optional<String> candidateId,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("package_id") Optional<String> packageId,
            @JsonProperty("parameters") Optional<? extends List<VerificationParameterInput>> parameters,
            @JsonProperty("profile_addresses") Optional<? extends List<VerificationAddress>> profileAddresses,
            @JsonProperty("profile_date_of_birth") Optional<String> profileDateOfBirth,
            @JsonProperty("profile_emails") Optional<? extends List<String>> profileEmails,
            @JsonProperty("profile_gender") Optional<? extends ProfileGender> profileGender,
            @JsonProperty("profile_ip_address") Optional<String> profileIpAddress,
            @JsonProperty("profile_name") Optional<String> profileName,
            @JsonProperty("profile_national_identifier") Optional<String> profileNationalIdentifier,
            @JsonProperty("profile_telephones") Optional<? extends List<String>> profileTelephones,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("response_completed_at") Optional<OffsetDateTime> responseCompletedAt,
            @JsonProperty("response_details") Optional<? extends List<VerificationResponseDetail>> responseDetails,
            @JsonProperty("response_download_urls") Optional<? extends List<String>> responseDownloadUrls,
            @JsonProperty("response_expires_at") Optional<OffsetDateTime> responseExpiresAt,
            @JsonProperty("response_issued_at") Optional<OffsetDateTime> responseIssuedAt,
            @JsonProperty("response_redirect_url") Optional<String> responseRedirectUrl,
            @JsonProperty("response_score") Optional<Double> responseScore,
            @JsonProperty("response_source") Optional<String> responseSource,
            @JsonProperty("response_status") Optional<? extends ResponseStatus> responseStatus,
            @JsonProperty("target_url") Optional<String> targetUrl,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(candidateId, "candidateId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(packageId, "packageId");
        Utils.checkNotNull(parameters, "parameters");
        Utils.checkNotNull(profileAddresses, "profileAddresses");
        Utils.checkNotNull(profileDateOfBirth, "profileDateOfBirth");
        Utils.checkNotNull(profileEmails, "profileEmails");
        Utils.checkNotNull(profileGender, "profileGender");
        Utils.checkNotNull(profileIpAddress, "profileIpAddress");
        Utils.checkNotNull(profileName, "profileName");
        Utils.checkNotNull(profileNationalIdentifier, "profileNationalIdentifier");
        Utils.checkNotNull(profileTelephones, "profileTelephones");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(responseCompletedAt, "responseCompletedAt");
        Utils.checkNotNull(responseDetails, "responseDetails");
        Utils.checkNotNull(responseDownloadUrls, "responseDownloadUrls");
        Utils.checkNotNull(responseExpiresAt, "responseExpiresAt");
        Utils.checkNotNull(responseIssuedAt, "responseIssuedAt");
        Utils.checkNotNull(responseRedirectUrl, "responseRedirectUrl");
        Utils.checkNotNull(responseScore, "responseScore");
        Utils.checkNotNull(responseSource, "responseSource");
        Utils.checkNotNull(responseStatus, "responseStatus");
        Utils.checkNotNull(targetUrl, "targetUrl");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.candidateId = candidateId;
        this.createdAt = createdAt;
        this.id = id;
        this.packageId = packageId;
        this.parameters = parameters;
        this.profileAddresses = profileAddresses;
        this.profileDateOfBirth = profileDateOfBirth;
        this.profileEmails = profileEmails;
        this.profileGender = profileGender;
        this.profileIpAddress = profileIpAddress;
        this.profileName = profileName;
        this.profileNationalIdentifier = profileNationalIdentifier;
        this.profileTelephones = profileTelephones;
        this.raw = raw;
        this.responseCompletedAt = responseCompletedAt;
        this.responseDetails = responseDetails;
        this.responseDownloadUrls = responseDownloadUrls;
        this.responseExpiresAt = responseExpiresAt;
        this.responseIssuedAt = responseIssuedAt;
        this.responseRedirectUrl = responseRedirectUrl;
        this.responseScore = responseScore;
        this.responseSource = responseSource;
        this.responseStatus = responseStatus;
        this.targetUrl = targetUrl;
        this.updatedAt = updatedAt;
    }
    
    public VerificationRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<String> candidateId() {
        return candidateId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> packageId() {
        return packageId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<VerificationParameterInput>> parameters() {
        return (Optional<List<VerificationParameterInput>>) parameters;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<VerificationAddress>> profileAddresses() {
        return (Optional<List<VerificationAddress>>) profileAddresses;
    }

    @JsonIgnore
    public Optional<String> profileDateOfBirth() {
        return profileDateOfBirth;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> profileEmails() {
        return (Optional<List<String>>) profileEmails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ProfileGender> profileGender() {
        return (Optional<ProfileGender>) profileGender;
    }

    @JsonIgnore
    public Optional<String> profileIpAddress() {
        return profileIpAddress;
    }

    @JsonIgnore
    public Optional<String> profileName() {
        return profileName;
    }

    @JsonIgnore
    public Optional<String> profileNationalIdentifier() {
        return profileNationalIdentifier;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> profileTelephones() {
        return (Optional<List<String>>) profileTelephones;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> responseCompletedAt() {
        return responseCompletedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<VerificationResponseDetail>> responseDetails() {
        return (Optional<List<VerificationResponseDetail>>) responseDetails;
    }

    /**
     * report download
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> responseDownloadUrls() {
        return (Optional<List<String>>) responseDownloadUrls;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> responseExpiresAt() {
        return responseExpiresAt;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> responseIssuedAt() {
        return responseIssuedAt;
    }

    @JsonIgnore
    public Optional<String> responseRedirectUrl() {
        return responseRedirectUrl;
    }

    @JsonIgnore
    public Optional<Double> responseScore() {
        return responseScore;
    }

    @JsonIgnore
    public Optional<String> responseSource() {
        return responseSource;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResponseStatus> responseStatus() {
        return (Optional<ResponseStatus>) responseStatus;
    }

    @JsonIgnore
    public Optional<String> targetUrl() {
        return targetUrl;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public VerificationRequest withCandidateId(String candidateId) {
        Utils.checkNotNull(candidateId, "candidateId");
        this.candidateId = Optional.ofNullable(candidateId);
        return this;
    }


    public VerificationRequest withCandidateId(Optional<String> candidateId) {
        Utils.checkNotNull(candidateId, "candidateId");
        this.candidateId = candidateId;
        return this;
    }

    public VerificationRequest withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public VerificationRequest withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public VerificationRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public VerificationRequest withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public VerificationRequest withPackageId(String packageId) {
        Utils.checkNotNull(packageId, "packageId");
        this.packageId = Optional.ofNullable(packageId);
        return this;
    }


    public VerificationRequest withPackageId(Optional<String> packageId) {
        Utils.checkNotNull(packageId, "packageId");
        this.packageId = packageId;
        return this;
    }

    public VerificationRequest withParameters(List<VerificationParameterInput> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = Optional.ofNullable(parameters);
        return this;
    }


    public VerificationRequest withParameters(Optional<? extends List<VerificationParameterInput>> parameters) {
        Utils.checkNotNull(parameters, "parameters");
        this.parameters = parameters;
        return this;
    }

    public VerificationRequest withProfileAddresses(List<VerificationAddress> profileAddresses) {
        Utils.checkNotNull(profileAddresses, "profileAddresses");
        this.profileAddresses = Optional.ofNullable(profileAddresses);
        return this;
    }


    public VerificationRequest withProfileAddresses(Optional<? extends List<VerificationAddress>> profileAddresses) {
        Utils.checkNotNull(profileAddresses, "profileAddresses");
        this.profileAddresses = profileAddresses;
        return this;
    }

    public VerificationRequest withProfileDateOfBirth(String profileDateOfBirth) {
        Utils.checkNotNull(profileDateOfBirth, "profileDateOfBirth");
        this.profileDateOfBirth = Optional.ofNullable(profileDateOfBirth);
        return this;
    }


    public VerificationRequest withProfileDateOfBirth(Optional<String> profileDateOfBirth) {
        Utils.checkNotNull(profileDateOfBirth, "profileDateOfBirth");
        this.profileDateOfBirth = profileDateOfBirth;
        return this;
    }

    public VerificationRequest withProfileEmails(List<String> profileEmails) {
        Utils.checkNotNull(profileEmails, "profileEmails");
        this.profileEmails = Optional.ofNullable(profileEmails);
        return this;
    }


    public VerificationRequest withProfileEmails(Optional<? extends List<String>> profileEmails) {
        Utils.checkNotNull(profileEmails, "profileEmails");
        this.profileEmails = profileEmails;
        return this;
    }

    public VerificationRequest withProfileGender(ProfileGender profileGender) {
        Utils.checkNotNull(profileGender, "profileGender");
        this.profileGender = Optional.ofNullable(profileGender);
        return this;
    }


    public VerificationRequest withProfileGender(Optional<? extends ProfileGender> profileGender) {
        Utils.checkNotNull(profileGender, "profileGender");
        this.profileGender = profileGender;
        return this;
    }

    public VerificationRequest withProfileIpAddress(String profileIpAddress) {
        Utils.checkNotNull(profileIpAddress, "profileIpAddress");
        this.profileIpAddress = Optional.ofNullable(profileIpAddress);
        return this;
    }


    public VerificationRequest withProfileIpAddress(Optional<String> profileIpAddress) {
        Utils.checkNotNull(profileIpAddress, "profileIpAddress");
        this.profileIpAddress = profileIpAddress;
        return this;
    }

    public VerificationRequest withProfileName(String profileName) {
        Utils.checkNotNull(profileName, "profileName");
        this.profileName = Optional.ofNullable(profileName);
        return this;
    }


    public VerificationRequest withProfileName(Optional<String> profileName) {
        Utils.checkNotNull(profileName, "profileName");
        this.profileName = profileName;
        return this;
    }

    public VerificationRequest withProfileNationalIdentifier(String profileNationalIdentifier) {
        Utils.checkNotNull(profileNationalIdentifier, "profileNationalIdentifier");
        this.profileNationalIdentifier = Optional.ofNullable(profileNationalIdentifier);
        return this;
    }


    public VerificationRequest withProfileNationalIdentifier(Optional<String> profileNationalIdentifier) {
        Utils.checkNotNull(profileNationalIdentifier, "profileNationalIdentifier");
        this.profileNationalIdentifier = profileNationalIdentifier;
        return this;
    }

    public VerificationRequest withProfileTelephones(List<String> profileTelephones) {
        Utils.checkNotNull(profileTelephones, "profileTelephones");
        this.profileTelephones = Optional.ofNullable(profileTelephones);
        return this;
    }


    public VerificationRequest withProfileTelephones(Optional<? extends List<String>> profileTelephones) {
        Utils.checkNotNull(profileTelephones, "profileTelephones");
        this.profileTelephones = profileTelephones;
        return this;
    }

    public VerificationRequest withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public VerificationRequest withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public VerificationRequest withResponseCompletedAt(OffsetDateTime responseCompletedAt) {
        Utils.checkNotNull(responseCompletedAt, "responseCompletedAt");
        this.responseCompletedAt = Optional.ofNullable(responseCompletedAt);
        return this;
    }


    public VerificationRequest withResponseCompletedAt(Optional<OffsetDateTime> responseCompletedAt) {
        Utils.checkNotNull(responseCompletedAt, "responseCompletedAt");
        this.responseCompletedAt = responseCompletedAt;
        return this;
    }

    public VerificationRequest withResponseDetails(List<VerificationResponseDetail> responseDetails) {
        Utils.checkNotNull(responseDetails, "responseDetails");
        this.responseDetails = Optional.ofNullable(responseDetails);
        return this;
    }


    public VerificationRequest withResponseDetails(Optional<? extends List<VerificationResponseDetail>> responseDetails) {
        Utils.checkNotNull(responseDetails, "responseDetails");
        this.responseDetails = responseDetails;
        return this;
    }

    /**
     * report download
     */
    public VerificationRequest withResponseDownloadUrls(List<String> responseDownloadUrls) {
        Utils.checkNotNull(responseDownloadUrls, "responseDownloadUrls");
        this.responseDownloadUrls = Optional.ofNullable(responseDownloadUrls);
        return this;
    }


    /**
     * report download
     */
    public VerificationRequest withResponseDownloadUrls(Optional<? extends List<String>> responseDownloadUrls) {
        Utils.checkNotNull(responseDownloadUrls, "responseDownloadUrls");
        this.responseDownloadUrls = responseDownloadUrls;
        return this;
    }

    public VerificationRequest withResponseExpiresAt(OffsetDateTime responseExpiresAt) {
        Utils.checkNotNull(responseExpiresAt, "responseExpiresAt");
        this.responseExpiresAt = Optional.ofNullable(responseExpiresAt);
        return this;
    }


    public VerificationRequest withResponseExpiresAt(Optional<OffsetDateTime> responseExpiresAt) {
        Utils.checkNotNull(responseExpiresAt, "responseExpiresAt");
        this.responseExpiresAt = responseExpiresAt;
        return this;
    }

    public VerificationRequest withResponseIssuedAt(OffsetDateTime responseIssuedAt) {
        Utils.checkNotNull(responseIssuedAt, "responseIssuedAt");
        this.responseIssuedAt = Optional.ofNullable(responseIssuedAt);
        return this;
    }


    public VerificationRequest withResponseIssuedAt(Optional<OffsetDateTime> responseIssuedAt) {
        Utils.checkNotNull(responseIssuedAt, "responseIssuedAt");
        this.responseIssuedAt = responseIssuedAt;
        return this;
    }

    public VerificationRequest withResponseRedirectUrl(String responseRedirectUrl) {
        Utils.checkNotNull(responseRedirectUrl, "responseRedirectUrl");
        this.responseRedirectUrl = Optional.ofNullable(responseRedirectUrl);
        return this;
    }


    public VerificationRequest withResponseRedirectUrl(Optional<String> responseRedirectUrl) {
        Utils.checkNotNull(responseRedirectUrl, "responseRedirectUrl");
        this.responseRedirectUrl = responseRedirectUrl;
        return this;
    }

    public VerificationRequest withResponseScore(double responseScore) {
        Utils.checkNotNull(responseScore, "responseScore");
        this.responseScore = Optional.ofNullable(responseScore);
        return this;
    }


    public VerificationRequest withResponseScore(Optional<Double> responseScore) {
        Utils.checkNotNull(responseScore, "responseScore");
        this.responseScore = responseScore;
        return this;
    }

    public VerificationRequest withResponseSource(String responseSource) {
        Utils.checkNotNull(responseSource, "responseSource");
        this.responseSource = Optional.ofNullable(responseSource);
        return this;
    }


    public VerificationRequest withResponseSource(Optional<String> responseSource) {
        Utils.checkNotNull(responseSource, "responseSource");
        this.responseSource = responseSource;
        return this;
    }

    public VerificationRequest withResponseStatus(ResponseStatus responseStatus) {
        Utils.checkNotNull(responseStatus, "responseStatus");
        this.responseStatus = Optional.ofNullable(responseStatus);
        return this;
    }


    public VerificationRequest withResponseStatus(Optional<? extends ResponseStatus> responseStatus) {
        Utils.checkNotNull(responseStatus, "responseStatus");
        this.responseStatus = responseStatus;
        return this;
    }

    public VerificationRequest withTargetUrl(String targetUrl) {
        Utils.checkNotNull(targetUrl, "targetUrl");
        this.targetUrl = Optional.ofNullable(targetUrl);
        return this;
    }


    public VerificationRequest withTargetUrl(Optional<String> targetUrl) {
        Utils.checkNotNull(targetUrl, "targetUrl");
        this.targetUrl = targetUrl;
        return this;
    }

    public VerificationRequest withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public VerificationRequest withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerificationRequest other = (VerificationRequest) o;
        return 
            Utils.enhancedDeepEquals(this.candidateId, other.candidateId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.packageId, other.packageId) &&
            Utils.enhancedDeepEquals(this.parameters, other.parameters) &&
            Utils.enhancedDeepEquals(this.profileAddresses, other.profileAddresses) &&
            Utils.enhancedDeepEquals(this.profileDateOfBirth, other.profileDateOfBirth) &&
            Utils.enhancedDeepEquals(this.profileEmails, other.profileEmails) &&
            Utils.enhancedDeepEquals(this.profileGender, other.profileGender) &&
            Utils.enhancedDeepEquals(this.profileIpAddress, other.profileIpAddress) &&
            Utils.enhancedDeepEquals(this.profileName, other.profileName) &&
            Utils.enhancedDeepEquals(this.profileNationalIdentifier, other.profileNationalIdentifier) &&
            Utils.enhancedDeepEquals(this.profileTelephones, other.profileTelephones) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.responseCompletedAt, other.responseCompletedAt) &&
            Utils.enhancedDeepEquals(this.responseDetails, other.responseDetails) &&
            Utils.enhancedDeepEquals(this.responseDownloadUrls, other.responseDownloadUrls) &&
            Utils.enhancedDeepEquals(this.responseExpiresAt, other.responseExpiresAt) &&
            Utils.enhancedDeepEquals(this.responseIssuedAt, other.responseIssuedAt) &&
            Utils.enhancedDeepEquals(this.responseRedirectUrl, other.responseRedirectUrl) &&
            Utils.enhancedDeepEquals(this.responseScore, other.responseScore) &&
            Utils.enhancedDeepEquals(this.responseSource, other.responseSource) &&
            Utils.enhancedDeepEquals(this.responseStatus, other.responseStatus) &&
            Utils.enhancedDeepEquals(this.targetUrl, other.targetUrl) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            candidateId, createdAt, id,
            packageId, parameters, profileAddresses,
            profileDateOfBirth, profileEmails, profileGender,
            profileIpAddress, profileName, profileNationalIdentifier,
            profileTelephones, raw, responseCompletedAt,
            responseDetails, responseDownloadUrls, responseExpiresAt,
            responseIssuedAt, responseRedirectUrl, responseScore,
            responseSource, responseStatus, targetUrl,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerificationRequest.class,
                "candidateId", candidateId,
                "createdAt", createdAt,
                "id", id,
                "packageId", packageId,
                "parameters", parameters,
                "profileAddresses", profileAddresses,
                "profileDateOfBirth", profileDateOfBirth,
                "profileEmails", profileEmails,
                "profileGender", profileGender,
                "profileIpAddress", profileIpAddress,
                "profileName", profileName,
                "profileNationalIdentifier", profileNationalIdentifier,
                "profileTelephones", profileTelephones,
                "raw", raw,
                "responseCompletedAt", responseCompletedAt,
                "responseDetails", responseDetails,
                "responseDownloadUrls", responseDownloadUrls,
                "responseExpiresAt", responseExpiresAt,
                "responseIssuedAt", responseIssuedAt,
                "responseRedirectUrl", responseRedirectUrl,
                "responseScore", responseScore,
                "responseSource", responseSource,
                "responseStatus", responseStatus,
                "targetUrl", targetUrl,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> candidateId = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> packageId = Optional.empty();

        private Optional<? extends List<VerificationParameterInput>> parameters = Optional.empty();

        private Optional<? extends List<VerificationAddress>> profileAddresses = Optional.empty();

        private Optional<String> profileDateOfBirth = Optional.empty();

        private Optional<? extends List<String>> profileEmails = Optional.empty();

        private Optional<? extends ProfileGender> profileGender = Optional.empty();

        private Optional<String> profileIpAddress = Optional.empty();

        private Optional<String> profileName = Optional.empty();

        private Optional<String> profileNationalIdentifier = Optional.empty();

        private Optional<? extends List<String>> profileTelephones = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<OffsetDateTime> responseCompletedAt = Optional.empty();

        private Optional<? extends List<VerificationResponseDetail>> responseDetails = Optional.empty();

        private Optional<? extends List<String>> responseDownloadUrls = Optional.empty();

        private Optional<OffsetDateTime> responseExpiresAt = Optional.empty();

        private Optional<OffsetDateTime> responseIssuedAt = Optional.empty();

        private Optional<String> responseRedirectUrl = Optional.empty();

        private Optional<Double> responseScore = Optional.empty();

        private Optional<String> responseSource = Optional.empty();

        private Optional<? extends ResponseStatus> responseStatus = Optional.empty();

        private Optional<String> targetUrl = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder candidateId(String candidateId) {
            Utils.checkNotNull(candidateId, "candidateId");
            this.candidateId = Optional.ofNullable(candidateId);
            return this;
        }

        public Builder candidateId(Optional<String> candidateId) {
            Utils.checkNotNull(candidateId, "candidateId");
            this.candidateId = candidateId;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder packageId(String packageId) {
            Utils.checkNotNull(packageId, "packageId");
            this.packageId = Optional.ofNullable(packageId);
            return this;
        }

        public Builder packageId(Optional<String> packageId) {
            Utils.checkNotNull(packageId, "packageId");
            this.packageId = packageId;
            return this;
        }


        public Builder parameters(List<VerificationParameterInput> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = Optional.ofNullable(parameters);
            return this;
        }

        public Builder parameters(Optional<? extends List<VerificationParameterInput>> parameters) {
            Utils.checkNotNull(parameters, "parameters");
            this.parameters = parameters;
            return this;
        }


        public Builder profileAddresses(List<VerificationAddress> profileAddresses) {
            Utils.checkNotNull(profileAddresses, "profileAddresses");
            this.profileAddresses = Optional.ofNullable(profileAddresses);
            return this;
        }

        public Builder profileAddresses(Optional<? extends List<VerificationAddress>> profileAddresses) {
            Utils.checkNotNull(profileAddresses, "profileAddresses");
            this.profileAddresses = profileAddresses;
            return this;
        }


        public Builder profileDateOfBirth(String profileDateOfBirth) {
            Utils.checkNotNull(profileDateOfBirth, "profileDateOfBirth");
            this.profileDateOfBirth = Optional.ofNullable(profileDateOfBirth);
            return this;
        }

        public Builder profileDateOfBirth(Optional<String> profileDateOfBirth) {
            Utils.checkNotNull(profileDateOfBirth, "profileDateOfBirth");
            this.profileDateOfBirth = profileDateOfBirth;
            return this;
        }


        public Builder profileEmails(List<String> profileEmails) {
            Utils.checkNotNull(profileEmails, "profileEmails");
            this.profileEmails = Optional.ofNullable(profileEmails);
            return this;
        }

        public Builder profileEmails(Optional<? extends List<String>> profileEmails) {
            Utils.checkNotNull(profileEmails, "profileEmails");
            this.profileEmails = profileEmails;
            return this;
        }


        public Builder profileGender(ProfileGender profileGender) {
            Utils.checkNotNull(profileGender, "profileGender");
            this.profileGender = Optional.ofNullable(profileGender);
            return this;
        }

        public Builder profileGender(Optional<? extends ProfileGender> profileGender) {
            Utils.checkNotNull(profileGender, "profileGender");
            this.profileGender = profileGender;
            return this;
        }


        public Builder profileIpAddress(String profileIpAddress) {
            Utils.checkNotNull(profileIpAddress, "profileIpAddress");
            this.profileIpAddress = Optional.ofNullable(profileIpAddress);
            return this;
        }

        public Builder profileIpAddress(Optional<String> profileIpAddress) {
            Utils.checkNotNull(profileIpAddress, "profileIpAddress");
            this.profileIpAddress = profileIpAddress;
            return this;
        }


        public Builder profileName(String profileName) {
            Utils.checkNotNull(profileName, "profileName");
            this.profileName = Optional.ofNullable(profileName);
            return this;
        }

        public Builder profileName(Optional<String> profileName) {
            Utils.checkNotNull(profileName, "profileName");
            this.profileName = profileName;
            return this;
        }


        public Builder profileNationalIdentifier(String profileNationalIdentifier) {
            Utils.checkNotNull(profileNationalIdentifier, "profileNationalIdentifier");
            this.profileNationalIdentifier = Optional.ofNullable(profileNationalIdentifier);
            return this;
        }

        public Builder profileNationalIdentifier(Optional<String> profileNationalIdentifier) {
            Utils.checkNotNull(profileNationalIdentifier, "profileNationalIdentifier");
            this.profileNationalIdentifier = profileNationalIdentifier;
            return this;
        }


        public Builder profileTelephones(List<String> profileTelephones) {
            Utils.checkNotNull(profileTelephones, "profileTelephones");
            this.profileTelephones = Optional.ofNullable(profileTelephones);
            return this;
        }

        public Builder profileTelephones(Optional<? extends List<String>> profileTelephones) {
            Utils.checkNotNull(profileTelephones, "profileTelephones");
            this.profileTelephones = profileTelephones;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder responseCompletedAt(OffsetDateTime responseCompletedAt) {
            Utils.checkNotNull(responseCompletedAt, "responseCompletedAt");
            this.responseCompletedAt = Optional.ofNullable(responseCompletedAt);
            return this;
        }

        public Builder responseCompletedAt(Optional<OffsetDateTime> responseCompletedAt) {
            Utils.checkNotNull(responseCompletedAt, "responseCompletedAt");
            this.responseCompletedAt = responseCompletedAt;
            return this;
        }


        public Builder responseDetails(List<VerificationResponseDetail> responseDetails) {
            Utils.checkNotNull(responseDetails, "responseDetails");
            this.responseDetails = Optional.ofNullable(responseDetails);
            return this;
        }

        public Builder responseDetails(Optional<? extends List<VerificationResponseDetail>> responseDetails) {
            Utils.checkNotNull(responseDetails, "responseDetails");
            this.responseDetails = responseDetails;
            return this;
        }


        /**
         * report download
         */
        public Builder responseDownloadUrls(List<String> responseDownloadUrls) {
            Utils.checkNotNull(responseDownloadUrls, "responseDownloadUrls");
            this.responseDownloadUrls = Optional.ofNullable(responseDownloadUrls);
            return this;
        }

        /**
         * report download
         */
        public Builder responseDownloadUrls(Optional<? extends List<String>> responseDownloadUrls) {
            Utils.checkNotNull(responseDownloadUrls, "responseDownloadUrls");
            this.responseDownloadUrls = responseDownloadUrls;
            return this;
        }


        public Builder responseExpiresAt(OffsetDateTime responseExpiresAt) {
            Utils.checkNotNull(responseExpiresAt, "responseExpiresAt");
            this.responseExpiresAt = Optional.ofNullable(responseExpiresAt);
            return this;
        }

        public Builder responseExpiresAt(Optional<OffsetDateTime> responseExpiresAt) {
            Utils.checkNotNull(responseExpiresAt, "responseExpiresAt");
            this.responseExpiresAt = responseExpiresAt;
            return this;
        }


        public Builder responseIssuedAt(OffsetDateTime responseIssuedAt) {
            Utils.checkNotNull(responseIssuedAt, "responseIssuedAt");
            this.responseIssuedAt = Optional.ofNullable(responseIssuedAt);
            return this;
        }

        public Builder responseIssuedAt(Optional<OffsetDateTime> responseIssuedAt) {
            Utils.checkNotNull(responseIssuedAt, "responseIssuedAt");
            this.responseIssuedAt = responseIssuedAt;
            return this;
        }


        public Builder responseRedirectUrl(String responseRedirectUrl) {
            Utils.checkNotNull(responseRedirectUrl, "responseRedirectUrl");
            this.responseRedirectUrl = Optional.ofNullable(responseRedirectUrl);
            return this;
        }

        public Builder responseRedirectUrl(Optional<String> responseRedirectUrl) {
            Utils.checkNotNull(responseRedirectUrl, "responseRedirectUrl");
            this.responseRedirectUrl = responseRedirectUrl;
            return this;
        }


        public Builder responseScore(double responseScore) {
            Utils.checkNotNull(responseScore, "responseScore");
            this.responseScore = Optional.ofNullable(responseScore);
            return this;
        }

        public Builder responseScore(Optional<Double> responseScore) {
            Utils.checkNotNull(responseScore, "responseScore");
            this.responseScore = responseScore;
            return this;
        }


        public Builder responseSource(String responseSource) {
            Utils.checkNotNull(responseSource, "responseSource");
            this.responseSource = Optional.ofNullable(responseSource);
            return this;
        }

        public Builder responseSource(Optional<String> responseSource) {
            Utils.checkNotNull(responseSource, "responseSource");
            this.responseSource = responseSource;
            return this;
        }


        public Builder responseStatus(ResponseStatus responseStatus) {
            Utils.checkNotNull(responseStatus, "responseStatus");
            this.responseStatus = Optional.ofNullable(responseStatus);
            return this;
        }

        public Builder responseStatus(Optional<? extends ResponseStatus> responseStatus) {
            Utils.checkNotNull(responseStatus, "responseStatus");
            this.responseStatus = responseStatus;
            return this;
        }


        public Builder targetUrl(String targetUrl) {
            Utils.checkNotNull(targetUrl, "targetUrl");
            this.targetUrl = Optional.ofNullable(targetUrl);
            return this;
        }

        public Builder targetUrl(Optional<String> targetUrl) {
            Utils.checkNotNull(targetUrl, "targetUrl");
            this.targetUrl = targetUrl;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public VerificationRequest build() {

            return new VerificationRequest(
                candidateId, createdAt, id,
                packageId, parameters, profileAddresses,
                profileDateOfBirth, profileEmails, profileGender,
                profileIpAddress, profileName, profileNationalIdentifier,
                profileTelephones, raw, responseCompletedAt,
                responseDetails, responseDownloadUrls, responseExpiresAt,
                responseIssuedAt, responseRedirectUrl, responseScore,
                responseSource, responseStatus, targetUrl,
                updatedAt);
        }

    }
}

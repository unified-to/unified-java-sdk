/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * AccountingProfitAndLossSubcategory
 * 
 * <p>&#64;deprecated
 */
public class AccountingProfitAndLossSubcategory {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<Double> amount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_ids")
    private Optional<? extends List<String>> transactionIds;

    @JsonCreator
    public AccountingProfitAndLossSubcategory(
            @JsonProperty("amount") Optional<Double> amount,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("transaction_ids") Optional<? extends List<String>> transactionIds) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(transactionIds, "transactionIds");
        this.amount = amount;
        this.name = name;
        this.transactionIds = transactionIds;
    }
    
    public AccountingProfitAndLossSubcategory() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> amount() {
        return amount;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> transactionIds() {
        return (Optional<List<String>>) transactionIds;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AccountingProfitAndLossSubcategory withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    public AccountingProfitAndLossSubcategory withAmount(Optional<Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public AccountingProfitAndLossSubcategory withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public AccountingProfitAndLossSubcategory withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AccountingProfitAndLossSubcategory withTransactionIds(List<String> transactionIds) {
        Utils.checkNotNull(transactionIds, "transactionIds");
        this.transactionIds = Optional.ofNullable(transactionIds);
        return this;
    }

    public AccountingProfitAndLossSubcategory withTransactionIds(Optional<? extends List<String>> transactionIds) {
        Utils.checkNotNull(transactionIds, "transactionIds");
        this.transactionIds = transactionIds;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingProfitAndLossSubcategory other = (AccountingProfitAndLossSubcategory) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.transactionIds, other.transactionIds);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount,
            name,
            transactionIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingProfitAndLossSubcategory.class,
                "amount", amount,
                "name", name,
                "transactionIds", transactionIds);
    }
    
    public final static class Builder {
 
        private Optional<Double> amount = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends List<String>> transactionIds = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder transactionIds(List<String> transactionIds) {
            Utils.checkNotNull(transactionIds, "transactionIds");
            this.transactionIds = Optional.ofNullable(transactionIds);
            return this;
        }

        public Builder transactionIds(Optional<? extends List<String>> transactionIds) {
            Utils.checkNotNull(transactionIds, "transactionIds");
            this.transactionIds = transactionIds;
            return this;
        }
        
        public AccountingProfitAndLossSubcategory build() {
            return new AccountingProfitAndLossSubcategory(
                amount,
                name,
                transactionIds);
        }
    }
}

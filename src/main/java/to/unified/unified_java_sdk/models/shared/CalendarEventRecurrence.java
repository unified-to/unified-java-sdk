/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class CalendarEventRecurrence {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Double> count;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    private Optional<OffsetDateTime> endAt;

    /**
     * dates to exclude from the recurrence, defaults to undefined (no exclusions)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("excluded_dates")
    private Optional<? extends List<String>> excludedDates;


    @JsonProperty("frequency")
    private CalendarEventRecurrenceFrequency frequency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interval")
    private Optional<Double> interval;

    /**
     * days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("on_days")
    private Optional<? extends List<PropertyCalendarEventRecurrenceOnDays>> onDays;

    /**
     * days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("on_month_days")
    private Optional<? extends List<Double>> onMonthDays;

    /**
     * months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("on_months")
    private Optional<? extends List<Double>> onMonths;

    /**
     * week ordinals for BYDAY (e.g., -1 for last, -2 for second-to-last, 1 for first, 2 for second), only used with on_days. 0 is used for days without week ordinals.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("on_weeks")
    private Optional<? extends List<Double>> onWeeks;

    /**
     * days of the year to repeat on, defaults to undefined (every day), only used if frequency is YEARLY
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("on_year_days")
    private Optional<? extends List<Double>> onYearDays;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("week_start")
    private Optional<? extends WeekStart> weekStart;

    @JsonCreator
    public CalendarEventRecurrence(
            @JsonProperty("count") Optional<Double> count,
            @JsonProperty("end_at") Optional<OffsetDateTime> endAt,
            @JsonProperty("excluded_dates") Optional<? extends List<String>> excludedDates,
            @JsonProperty("frequency") CalendarEventRecurrenceFrequency frequency,
            @JsonProperty("interval") Optional<Double> interval,
            @JsonProperty("on_days") Optional<? extends List<PropertyCalendarEventRecurrenceOnDays>> onDays,
            @JsonProperty("on_month_days") Optional<? extends List<Double>> onMonthDays,
            @JsonProperty("on_months") Optional<? extends List<Double>> onMonths,
            @JsonProperty("on_weeks") Optional<? extends List<Double>> onWeeks,
            @JsonProperty("on_year_days") Optional<? extends List<Double>> onYearDays,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("week_start") Optional<? extends WeekStart> weekStart) {
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(excludedDates, "excludedDates");
        Utils.checkNotNull(frequency, "frequency");
        Utils.checkNotNull(interval, "interval");
        Utils.checkNotNull(onDays, "onDays");
        Utils.checkNotNull(onMonthDays, "onMonthDays");
        Utils.checkNotNull(onMonths, "onMonths");
        Utils.checkNotNull(onWeeks, "onWeeks");
        Utils.checkNotNull(onYearDays, "onYearDays");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(weekStart, "weekStart");
        this.count = count;
        this.endAt = endAt;
        this.excludedDates = excludedDates;
        this.frequency = frequency;
        this.interval = interval;
        this.onDays = onDays;
        this.onMonthDays = onMonthDays;
        this.onMonths = onMonths;
        this.onWeeks = onWeeks;
        this.onYearDays = onYearDays;
        this.timezone = timezone;
        this.weekStart = weekStart;
    }
    
    public CalendarEventRecurrence(
            CalendarEventRecurrenceFrequency frequency) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            frequency, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> count() {
        return count;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endAt() {
        return endAt;
    }

    /**
     * dates to exclude from the recurrence, defaults to undefined (no exclusions)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> excludedDates() {
        return (Optional<List<String>>) excludedDates;
    }

    @JsonIgnore
    public CalendarEventRecurrenceFrequency frequency() {
        return frequency;
    }

    @JsonIgnore
    public Optional<Double> interval() {
        return interval;
    }

    /**
     * days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyCalendarEventRecurrenceOnDays>> onDays() {
        return (Optional<List<PropertyCalendarEventRecurrenceOnDays>>) onDays;
    }

    /**
     * days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Double>> onMonthDays() {
        return (Optional<List<Double>>) onMonthDays;
    }

    /**
     * months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Double>> onMonths() {
        return (Optional<List<Double>>) onMonths;
    }

    /**
     * week ordinals for BYDAY (e.g., -1 for last, -2 for second-to-last, 1 for first, 2 for second), only used with on_days. 0 is used for days without week ordinals.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Double>> onWeeks() {
        return (Optional<List<Double>>) onWeeks;
    }

    /**
     * days of the year to repeat on, defaults to undefined (every day), only used if frequency is YEARLY
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Double>> onYearDays() {
        return (Optional<List<Double>>) onYearDays;
    }

    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WeekStart> weekStart() {
        return (Optional<WeekStart>) weekStart;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CalendarEventRecurrence withCount(double count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }


    public CalendarEventRecurrence withCount(Optional<Double> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    public CalendarEventRecurrence withEndAt(OffsetDateTime endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = Optional.ofNullable(endAt);
        return this;
    }


    public CalendarEventRecurrence withEndAt(Optional<OffsetDateTime> endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    /**
     * dates to exclude from the recurrence, defaults to undefined (no exclusions)
     */
    public CalendarEventRecurrence withExcludedDates(List<String> excludedDates) {
        Utils.checkNotNull(excludedDates, "excludedDates");
        this.excludedDates = Optional.ofNullable(excludedDates);
        return this;
    }


    /**
     * dates to exclude from the recurrence, defaults to undefined (no exclusions)
     */
    public CalendarEventRecurrence withExcludedDates(Optional<? extends List<String>> excludedDates) {
        Utils.checkNotNull(excludedDates, "excludedDates");
        this.excludedDates = excludedDates;
        return this;
    }

    public CalendarEventRecurrence withFrequency(CalendarEventRecurrenceFrequency frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = frequency;
        return this;
    }

    public CalendarEventRecurrence withInterval(double interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = Optional.ofNullable(interval);
        return this;
    }


    public CalendarEventRecurrence withInterval(Optional<Double> interval) {
        Utils.checkNotNull(interval, "interval");
        this.interval = interval;
        return this;
    }

    /**
     * days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY
     */
    public CalendarEventRecurrence withOnDays(List<PropertyCalendarEventRecurrenceOnDays> onDays) {
        Utils.checkNotNull(onDays, "onDays");
        this.onDays = Optional.ofNullable(onDays);
        return this;
    }


    /**
     * days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY
     */
    public CalendarEventRecurrence withOnDays(Optional<? extends List<PropertyCalendarEventRecurrenceOnDays>> onDays) {
        Utils.checkNotNull(onDays, "onDays");
        this.onDays = onDays;
        return this;
    }

    /**
     * days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY
     */
    public CalendarEventRecurrence withOnMonthDays(List<Double> onMonthDays) {
        Utils.checkNotNull(onMonthDays, "onMonthDays");
        this.onMonthDays = Optional.ofNullable(onMonthDays);
        return this;
    }


    /**
     * days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY
     */
    public CalendarEventRecurrence withOnMonthDays(Optional<? extends List<Double>> onMonthDays) {
        Utils.checkNotNull(onMonthDays, "onMonthDays");
        this.onMonthDays = onMonthDays;
        return this;
    }

    /**
     * months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1
     */
    public CalendarEventRecurrence withOnMonths(List<Double> onMonths) {
        Utils.checkNotNull(onMonths, "onMonths");
        this.onMonths = Optional.ofNullable(onMonths);
        return this;
    }


    /**
     * months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1
     */
    public CalendarEventRecurrence withOnMonths(Optional<? extends List<Double>> onMonths) {
        Utils.checkNotNull(onMonths, "onMonths");
        this.onMonths = onMonths;
        return this;
    }

    /**
     * week ordinals for BYDAY (e.g., -1 for last, -2 for second-to-last, 1 for first, 2 for second), only used with on_days. 0 is used for days without week ordinals.
     */
    public CalendarEventRecurrence withOnWeeks(List<Double> onWeeks) {
        Utils.checkNotNull(onWeeks, "onWeeks");
        this.onWeeks = Optional.ofNullable(onWeeks);
        return this;
    }


    /**
     * week ordinals for BYDAY (e.g., -1 for last, -2 for second-to-last, 1 for first, 2 for second), only used with on_days. 0 is used for days without week ordinals.
     */
    public CalendarEventRecurrence withOnWeeks(Optional<? extends List<Double>> onWeeks) {
        Utils.checkNotNull(onWeeks, "onWeeks");
        this.onWeeks = onWeeks;
        return this;
    }

    /**
     * days of the year to repeat on, defaults to undefined (every day), only used if frequency is YEARLY
     */
    public CalendarEventRecurrence withOnYearDays(List<Double> onYearDays) {
        Utils.checkNotNull(onYearDays, "onYearDays");
        this.onYearDays = Optional.ofNullable(onYearDays);
        return this;
    }


    /**
     * days of the year to repeat on, defaults to undefined (every day), only used if frequency is YEARLY
     */
    public CalendarEventRecurrence withOnYearDays(Optional<? extends List<Double>> onYearDays) {
        Utils.checkNotNull(onYearDays, "onYearDays");
        this.onYearDays = onYearDays;
        return this;
    }

    public CalendarEventRecurrence withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }


    public CalendarEventRecurrence withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public CalendarEventRecurrence withWeekStart(WeekStart weekStart) {
        Utils.checkNotNull(weekStart, "weekStart");
        this.weekStart = Optional.ofNullable(weekStart);
        return this;
    }


    public CalendarEventRecurrence withWeekStart(Optional<? extends WeekStart> weekStart) {
        Utils.checkNotNull(weekStart, "weekStart");
        this.weekStart = weekStart;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalendarEventRecurrence other = (CalendarEventRecurrence) o;
        return 
            Utils.enhancedDeepEquals(this.count, other.count) &&
            Utils.enhancedDeepEquals(this.endAt, other.endAt) &&
            Utils.enhancedDeepEquals(this.excludedDates, other.excludedDates) &&
            Utils.enhancedDeepEquals(this.frequency, other.frequency) &&
            Utils.enhancedDeepEquals(this.interval, other.interval) &&
            Utils.enhancedDeepEquals(this.onDays, other.onDays) &&
            Utils.enhancedDeepEquals(this.onMonthDays, other.onMonthDays) &&
            Utils.enhancedDeepEquals(this.onMonths, other.onMonths) &&
            Utils.enhancedDeepEquals(this.onWeeks, other.onWeeks) &&
            Utils.enhancedDeepEquals(this.onYearDays, other.onYearDays) &&
            Utils.enhancedDeepEquals(this.timezone, other.timezone) &&
            Utils.enhancedDeepEquals(this.weekStart, other.weekStart);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            count, endAt, excludedDates,
            frequency, interval, onDays,
            onMonthDays, onMonths, onWeeks,
            onYearDays, timezone, weekStart);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CalendarEventRecurrence.class,
                "count", count,
                "endAt", endAt,
                "excludedDates", excludedDates,
                "frequency", frequency,
                "interval", interval,
                "onDays", onDays,
                "onMonthDays", onMonthDays,
                "onMonths", onMonths,
                "onWeeks", onWeeks,
                "onYearDays", onYearDays,
                "timezone", timezone,
                "weekStart", weekStart);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Double> count = Optional.empty();

        private Optional<OffsetDateTime> endAt = Optional.empty();

        private Optional<? extends List<String>> excludedDates = Optional.empty();

        private CalendarEventRecurrenceFrequency frequency;

        private Optional<Double> interval = Optional.empty();

        private Optional<? extends List<PropertyCalendarEventRecurrenceOnDays>> onDays = Optional.empty();

        private Optional<? extends List<Double>> onMonthDays = Optional.empty();

        private Optional<? extends List<Double>> onMonths = Optional.empty();

        private Optional<? extends List<Double>> onWeeks = Optional.empty();

        private Optional<? extends List<Double>> onYearDays = Optional.empty();

        private Optional<String> timezone = Optional.empty();

        private Optional<? extends WeekStart> weekStart = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder count(double count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        public Builder count(Optional<Double> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }


        public Builder endAt(OffsetDateTime endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Optional<OffsetDateTime> endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }


        /**
         * dates to exclude from the recurrence, defaults to undefined (no exclusions)
         */
        public Builder excludedDates(List<String> excludedDates) {
            Utils.checkNotNull(excludedDates, "excludedDates");
            this.excludedDates = Optional.ofNullable(excludedDates);
            return this;
        }

        /**
         * dates to exclude from the recurrence, defaults to undefined (no exclusions)
         */
        public Builder excludedDates(Optional<? extends List<String>> excludedDates) {
            Utils.checkNotNull(excludedDates, "excludedDates");
            this.excludedDates = excludedDates;
            return this;
        }


        public Builder frequency(CalendarEventRecurrenceFrequency frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = frequency;
            return this;
        }


        public Builder interval(double interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = Optional.ofNullable(interval);
            return this;
        }

        public Builder interval(Optional<Double> interval) {
            Utils.checkNotNull(interval, "interval");
            this.interval = interval;
            return this;
        }


        /**
         * days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY
         */
        public Builder onDays(List<PropertyCalendarEventRecurrenceOnDays> onDays) {
            Utils.checkNotNull(onDays, "onDays");
            this.onDays = Optional.ofNullable(onDays);
            return this;
        }

        /**
         * days of the week to repeat on, defaults to undefined (every day), only used if frequency is WEEKLY
         */
        public Builder onDays(Optional<? extends List<PropertyCalendarEventRecurrenceOnDays>> onDays) {
            Utils.checkNotNull(onDays, "onDays");
            this.onDays = onDays;
            return this;
        }


        /**
         * days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY
         */
        public Builder onMonthDays(List<Double> onMonthDays) {
            Utils.checkNotNull(onMonthDays, "onMonthDays");
            this.onMonthDays = Optional.ofNullable(onMonthDays);
            return this;
        }

        /**
         * days of the month to repeat on, defaults to undefined (every day), only used if frequency is MONTHLY
         */
        public Builder onMonthDays(Optional<? extends List<Double>> onMonthDays) {
            Utils.checkNotNull(onMonthDays, "onMonthDays");
            this.onMonthDays = onMonthDays;
            return this;
        }


        /**
         * months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1
         */
        public Builder onMonths(List<Double> onMonths) {
            Utils.checkNotNull(onMonths, "onMonths");
            this.onMonths = Optional.ofNullable(onMonths);
            return this;
        }

        /**
         * months of the year to repeat on, defaults to undefined (every month), only used if frequency is YEARLY, January is 1
         */
        public Builder onMonths(Optional<? extends List<Double>> onMonths) {
            Utils.checkNotNull(onMonths, "onMonths");
            this.onMonths = onMonths;
            return this;
        }


        /**
         * week ordinals for BYDAY (e.g., -1 for last, -2 for second-to-last, 1 for first, 2 for second), only used with on_days. 0 is used for days without week ordinals.
         */
        public Builder onWeeks(List<Double> onWeeks) {
            Utils.checkNotNull(onWeeks, "onWeeks");
            this.onWeeks = Optional.ofNullable(onWeeks);
            return this;
        }

        /**
         * week ordinals for BYDAY (e.g., -1 for last, -2 for second-to-last, 1 for first, 2 for second), only used with on_days. 0 is used for days without week ordinals.
         */
        public Builder onWeeks(Optional<? extends List<Double>> onWeeks) {
            Utils.checkNotNull(onWeeks, "onWeeks");
            this.onWeeks = onWeeks;
            return this;
        }


        /**
         * days of the year to repeat on, defaults to undefined (every day), only used if frequency is YEARLY
         */
        public Builder onYearDays(List<Double> onYearDays) {
            Utils.checkNotNull(onYearDays, "onYearDays");
            this.onYearDays = Optional.ofNullable(onYearDays);
            return this;
        }

        /**
         * days of the year to repeat on, defaults to undefined (every day), only used if frequency is YEARLY
         */
        public Builder onYearDays(Optional<? extends List<Double>> onYearDays) {
            Utils.checkNotNull(onYearDays, "onYearDays");
            this.onYearDays = onYearDays;
            return this;
        }


        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }


        public Builder weekStart(WeekStart weekStart) {
            Utils.checkNotNull(weekStart, "weekStart");
            this.weekStart = Optional.ofNullable(weekStart);
            return this;
        }

        public Builder weekStart(Optional<? extends WeekStart> weekStart) {
            Utils.checkNotNull(weekStart, "weekStart");
            this.weekStart = weekStart;
            return this;
        }

        public CalendarEventRecurrence build() {

            return new CalendarEventRecurrence(
                count, endAt, excludedDates,
                frequency, interval, onDays,
                onMonthDays, onMonths, onWeeks,
                onYearDays, timezone, weekStart);
        }

    }
}

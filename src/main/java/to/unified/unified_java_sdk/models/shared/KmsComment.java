/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class KmsComment {

    @JsonProperty("content")
    private String content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content_type")
    private Optional<? extends ContentType> contentType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_id")
    private Optional<String> pageId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private Optional<String> parentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends KmsCommentType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    @JsonCreator
    public KmsComment(
            @JsonProperty("content") String content,
            @JsonProperty("content_type") Optional<? extends ContentType> contentType,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("page_id") Optional<String> pageId,
            @JsonProperty("parent_id") Optional<String> parentId,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("type") Optional<? extends KmsCommentType> type,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("user_id") Optional<String> userId) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(contentType, "contentType");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(pageId, "pageId");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userId, "userId");
        this.content = content;
        this.contentType = contentType;
        this.createdAt = createdAt;
        this.id = id;
        this.pageId = pageId;
        this.parentId = parentId;
        this.raw = raw;
        this.type = type;
        this.updatedAt = updatedAt;
        this.userId = userId;
    }
    
    public KmsComment(
            String content) {
        this(content, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String content() {
        return content;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContentType> contentType() {
        return (Optional<ContentType>) contentType;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> pageId() {
        return pageId;
    }

    @JsonIgnore
    public Optional<String> parentId() {
        return parentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<KmsCommentType> type() {
        return (Optional<KmsCommentType>) type;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public KmsComment withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public KmsComment withContentType(ContentType contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = Optional.ofNullable(contentType);
        return this;
    }

    public KmsComment withContentType(Optional<? extends ContentType> contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    public KmsComment withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public KmsComment withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public KmsComment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public KmsComment withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public KmsComment withPageId(String pageId) {
        Utils.checkNotNull(pageId, "pageId");
        this.pageId = Optional.ofNullable(pageId);
        return this;
    }

    public KmsComment withPageId(Optional<String> pageId) {
        Utils.checkNotNull(pageId, "pageId");
        this.pageId = pageId;
        return this;
    }

    public KmsComment withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = Optional.ofNullable(parentId);
        return this;
    }

    public KmsComment withParentId(Optional<String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    public KmsComment withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public KmsComment withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public KmsComment withType(KmsCommentType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public KmsComment withType(Optional<? extends KmsCommentType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public KmsComment withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public KmsComment withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public KmsComment withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    public KmsComment withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KmsComment other = (KmsComment) o;
        return 
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.contentType, other.contentType) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.pageId, other.pageId) &&
            Objects.deepEquals(this.parentId, other.parentId) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            content,
            contentType,
            createdAt,
            id,
            pageId,
            parentId,
            raw,
            type,
            updatedAt,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(KmsComment.class,
                "content", content,
                "contentType", contentType,
                "createdAt", createdAt,
                "id", id,
                "pageId", pageId,
                "parentId", parentId,
                "raw", raw,
                "type", type,
                "updatedAt", updatedAt,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private String content;
 
        private Optional<? extends ContentType> contentType = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> pageId = Optional.empty();
 
        private Optional<String> parentId = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<? extends KmsCommentType> type = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<String> userId = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder contentType(ContentType contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = Optional.ofNullable(contentType);
            return this;
        }

        public Builder contentType(Optional<? extends ContentType> contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder pageId(String pageId) {
            Utils.checkNotNull(pageId, "pageId");
            this.pageId = Optional.ofNullable(pageId);
            return this;
        }

        public Builder pageId(Optional<String> pageId) {
            Utils.checkNotNull(pageId, "pageId");
            this.pageId = pageId;
            return this;
        }

        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = Optional.ofNullable(parentId);
            return this;
        }

        public Builder parentId(Optional<String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder type(KmsCommentType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends KmsCommentType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public KmsComment build() {
            return new KmsComment(
                content,
                contentType,
                createdAt,
                id,
                pageId,
                parentId,
                raw,
                type,
                updatedAt,
                userId);
        }
    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import to.unified.unified_java_sdk.utils.Utils;


public class AtsApplicationAnswer {

    @JsonProperty("answers")
    private List<String> answers;


    @JsonProperty("question_id")
    private String questionId;

    @JsonCreator
    public AtsApplicationAnswer(
            @JsonProperty("answers") List<String> answers,
            @JsonProperty("question_id") String questionId) {
        Utils.checkNotNull(answers, "answers");
        Utils.checkNotNull(questionId, "questionId");
        this.answers = answers;
        this.questionId = questionId;
    }

    @JsonIgnore
    public List<String> answers() {
        return answers;
    }

    @JsonIgnore
    public String questionId() {
        return questionId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AtsApplicationAnswer withAnswers(List<String> answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = answers;
        return this;
    }

    public AtsApplicationAnswer withQuestionId(String questionId) {
        Utils.checkNotNull(questionId, "questionId");
        this.questionId = questionId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AtsApplicationAnswer other = (AtsApplicationAnswer) o;
        return 
            Utils.enhancedDeepEquals(this.answers, other.answers) &&
            Utils.enhancedDeepEquals(this.questionId, other.questionId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            answers, questionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AtsApplicationAnswer.class,
                "answers", answers,
                "questionId", questionId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private List<String> answers;

        private String questionId;

        private Builder() {
          // force use of static builder() method
        }


        public Builder answers(List<String> answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = answers;
            return this;
        }


        public Builder questionId(String questionId) {
            Utils.checkNotNull(questionId, "questionId");
            this.questionId = questionId;
            return this;
        }

        public AtsApplicationAnswer build() {

            return new AtsApplicationAnswer(
                answers, questionId);
        }

    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class UcRecordingMedia {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    private Optional<OffsetDateTime> endAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private Optional<String> language;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recording_download_url")
    private Optional<String> recordingDownloadUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_at")
    private Optional<OffsetDateTime> startAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcript_download_url")
    private Optional<String> transcriptDownloadUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transcripts")
    private Optional<? extends List<UcRecordingTranscript>> transcripts;

    @JsonCreator
    public UcRecordingMedia(
            @JsonProperty("end_at") Optional<OffsetDateTime> endAt,
            @JsonProperty("language") Optional<String> language,
            @JsonProperty("recording_download_url") Optional<String> recordingDownloadUrl,
            @JsonProperty("start_at") Optional<OffsetDateTime> startAt,
            @JsonProperty("transcript_download_url") Optional<String> transcriptDownloadUrl,
            @JsonProperty("transcripts") Optional<? extends List<UcRecordingTranscript>> transcripts) {
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(recordingDownloadUrl, "recordingDownloadUrl");
        Utils.checkNotNull(startAt, "startAt");
        Utils.checkNotNull(transcriptDownloadUrl, "transcriptDownloadUrl");
        Utils.checkNotNull(transcripts, "transcripts");
        this.endAt = endAt;
        this.language = language;
        this.recordingDownloadUrl = recordingDownloadUrl;
        this.startAt = startAt;
        this.transcriptDownloadUrl = transcriptDownloadUrl;
        this.transcripts = transcripts;
    }
    
    public UcRecordingMedia() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endAt() {
        return endAt;
    }

    @JsonIgnore
    public Optional<String> language() {
        return language;
    }

    @JsonIgnore
    public Optional<String> recordingDownloadUrl() {
        return recordingDownloadUrl;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startAt() {
        return startAt;
    }

    @JsonIgnore
    public Optional<String> transcriptDownloadUrl() {
        return transcriptDownloadUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<UcRecordingTranscript>> transcripts() {
        return (Optional<List<UcRecordingTranscript>>) transcripts;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public UcRecordingMedia withEndAt(OffsetDateTime endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = Optional.ofNullable(endAt);
        return this;
    }

    public UcRecordingMedia withEndAt(Optional<OffsetDateTime> endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    public UcRecordingMedia withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = Optional.ofNullable(language);
        return this;
    }

    public UcRecordingMedia withLanguage(Optional<String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    public UcRecordingMedia withRecordingDownloadUrl(String recordingDownloadUrl) {
        Utils.checkNotNull(recordingDownloadUrl, "recordingDownloadUrl");
        this.recordingDownloadUrl = Optional.ofNullable(recordingDownloadUrl);
        return this;
    }

    public UcRecordingMedia withRecordingDownloadUrl(Optional<String> recordingDownloadUrl) {
        Utils.checkNotNull(recordingDownloadUrl, "recordingDownloadUrl");
        this.recordingDownloadUrl = recordingDownloadUrl;
        return this;
    }

    public UcRecordingMedia withStartAt(OffsetDateTime startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = Optional.ofNullable(startAt);
        return this;
    }

    public UcRecordingMedia withStartAt(Optional<OffsetDateTime> startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }

    public UcRecordingMedia withTranscriptDownloadUrl(String transcriptDownloadUrl) {
        Utils.checkNotNull(transcriptDownloadUrl, "transcriptDownloadUrl");
        this.transcriptDownloadUrl = Optional.ofNullable(transcriptDownloadUrl);
        return this;
    }

    public UcRecordingMedia withTranscriptDownloadUrl(Optional<String> transcriptDownloadUrl) {
        Utils.checkNotNull(transcriptDownloadUrl, "transcriptDownloadUrl");
        this.transcriptDownloadUrl = transcriptDownloadUrl;
        return this;
    }

    public UcRecordingMedia withTranscripts(List<UcRecordingTranscript> transcripts) {
        Utils.checkNotNull(transcripts, "transcripts");
        this.transcripts = Optional.ofNullable(transcripts);
        return this;
    }

    public UcRecordingMedia withTranscripts(Optional<? extends List<UcRecordingTranscript>> transcripts) {
        Utils.checkNotNull(transcripts, "transcripts");
        this.transcripts = transcripts;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UcRecordingMedia other = (UcRecordingMedia) o;
        return 
            Utils.enhancedDeepEquals(this.endAt, other.endAt) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.recordingDownloadUrl, other.recordingDownloadUrl) &&
            Utils.enhancedDeepEquals(this.startAt, other.startAt) &&
            Utils.enhancedDeepEquals(this.transcriptDownloadUrl, other.transcriptDownloadUrl) &&
            Utils.enhancedDeepEquals(this.transcripts, other.transcripts);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            endAt,
            language,
            recordingDownloadUrl,
            startAt,
            transcriptDownloadUrl,
            transcripts);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UcRecordingMedia.class,
                "endAt", endAt,
                "language", language,
                "recordingDownloadUrl", recordingDownloadUrl,
                "startAt", startAt,
                "transcriptDownloadUrl", transcriptDownloadUrl,
                "transcripts", transcripts);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> endAt = Optional.empty();
 
        private Optional<String> language = Optional.empty();
 
        private Optional<String> recordingDownloadUrl = Optional.empty();
 
        private Optional<OffsetDateTime> startAt = Optional.empty();
 
        private Optional<String> transcriptDownloadUrl = Optional.empty();
 
        private Optional<? extends List<UcRecordingTranscript>> transcripts = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder endAt(OffsetDateTime endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Optional<OffsetDateTime> endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }

        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = Optional.ofNullable(language);
            return this;
        }

        public Builder language(Optional<String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }

        public Builder recordingDownloadUrl(String recordingDownloadUrl) {
            Utils.checkNotNull(recordingDownloadUrl, "recordingDownloadUrl");
            this.recordingDownloadUrl = Optional.ofNullable(recordingDownloadUrl);
            return this;
        }

        public Builder recordingDownloadUrl(Optional<String> recordingDownloadUrl) {
            Utils.checkNotNull(recordingDownloadUrl, "recordingDownloadUrl");
            this.recordingDownloadUrl = recordingDownloadUrl;
            return this;
        }

        public Builder startAt(OffsetDateTime startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Optional<OffsetDateTime> startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }

        public Builder transcriptDownloadUrl(String transcriptDownloadUrl) {
            Utils.checkNotNull(transcriptDownloadUrl, "transcriptDownloadUrl");
            this.transcriptDownloadUrl = Optional.ofNullable(transcriptDownloadUrl);
            return this;
        }

        public Builder transcriptDownloadUrl(Optional<String> transcriptDownloadUrl) {
            Utils.checkNotNull(transcriptDownloadUrl, "transcriptDownloadUrl");
            this.transcriptDownloadUrl = transcriptDownloadUrl;
            return this;
        }

        public Builder transcripts(List<UcRecordingTranscript> transcripts) {
            Utils.checkNotNull(transcripts, "transcripts");
            this.transcripts = Optional.ofNullable(transcripts);
            return this;
        }

        public Builder transcripts(Optional<? extends List<UcRecordingTranscript>> transcripts) {
            Utils.checkNotNull(transcripts, "transcripts");
            this.transcripts = transcripts;
            return this;
        }
        
        public UcRecordingMedia build() {
            return new UcRecordingMedia(
                endAt,
                language,
                recordingDownloadUrl,
                startAt,
                transcriptDownloadUrl,
                transcripts);
        }
    }
}

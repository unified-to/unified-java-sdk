/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = AtsStatusStatus._Deserializer.class)
@JsonSerialize(using = AtsStatusStatus._Serializer.class)
public class AtsStatusStatus {

    public static final AtsStatusStatus NEW = new AtsStatusStatus("NEW");
    public static final AtsStatusStatus REVIEWING = new AtsStatusStatus("REVIEWING");
    public static final AtsStatusStatus SCREENING = new AtsStatusStatus("SCREENING");
    public static final AtsStatusStatus SUBMITTED = new AtsStatusStatus("SUBMITTED");
    public static final AtsStatusStatus FIRST_INTERVIEW = new AtsStatusStatus("FIRST_INTERVIEW");
    public static final AtsStatusStatus SECOND_INTERVIEW = new AtsStatusStatus("SECOND_INTERVIEW");
    public static final AtsStatusStatus THIRD_INTERVIEW = new AtsStatusStatus("THIRD_INTERVIEW");
    public static final AtsStatusStatus BACKGROUND_CHECK = new AtsStatusStatus("BACKGROUND_CHECK");
    public static final AtsStatusStatus OFFERED = new AtsStatusStatus("OFFERED");
    public static final AtsStatusStatus ACCEPTED = new AtsStatusStatus("ACCEPTED");
    public static final AtsStatusStatus HIRED = new AtsStatusStatus("HIRED");
    public static final AtsStatusStatus REJECTED = new AtsStatusStatus("REJECTED");
    public static final AtsStatusStatus DECLINED = new AtsStatusStatus("DECLINED");
    public static final AtsStatusStatus WITHDRAWN = new AtsStatusStatus("WITHDRAWN");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, AtsStatusStatus> values = createValuesMap();
    private static final Map<String, AtsStatusStatusEnum> enums = createEnumsMap();

    private final String value;

    private AtsStatusStatus(String value) {
        this.value = value;
    }

    /**
     * Returns a AtsStatusStatus with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as AtsStatusStatus
     */ 
    public static AtsStatusStatus of(String value) {
        synchronized (AtsStatusStatus.class) {
            return values.computeIfAbsent(value, v -> new AtsStatusStatus(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<AtsStatusStatusEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        AtsStatusStatus other = (AtsStatusStatus) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "AtsStatusStatus [value=" + value + "]";
    }

    // return an array just like an enum
    public static AtsStatusStatus[] values() {
        synchronized (AtsStatusStatus.class) {
            return values.values().toArray(new AtsStatusStatus[] {});
        }
    }

    private static final Map<String, AtsStatusStatus> createValuesMap() {
        Map<String, AtsStatusStatus> map = new LinkedHashMap<>();
        map.put("NEW", NEW);
        map.put("REVIEWING", REVIEWING);
        map.put("SCREENING", SCREENING);
        map.put("SUBMITTED", SUBMITTED);
        map.put("FIRST_INTERVIEW", FIRST_INTERVIEW);
        map.put("SECOND_INTERVIEW", SECOND_INTERVIEW);
        map.put("THIRD_INTERVIEW", THIRD_INTERVIEW);
        map.put("BACKGROUND_CHECK", BACKGROUND_CHECK);
        map.put("OFFERED", OFFERED);
        map.put("ACCEPTED", ACCEPTED);
        map.put("HIRED", HIRED);
        map.put("REJECTED", REJECTED);
        map.put("DECLINED", DECLINED);
        map.put("WITHDRAWN", WITHDRAWN);
        return map;
    }

    private static final Map<String, AtsStatusStatusEnum> createEnumsMap() {
        Map<String, AtsStatusStatusEnum> map = new HashMap<>();
        map.put("NEW", AtsStatusStatusEnum.NEW);
        map.put("REVIEWING", AtsStatusStatusEnum.REVIEWING);
        map.put("SCREENING", AtsStatusStatusEnum.SCREENING);
        map.put("SUBMITTED", AtsStatusStatusEnum.SUBMITTED);
        map.put("FIRST_INTERVIEW", AtsStatusStatusEnum.FIRST_INTERVIEW);
        map.put("SECOND_INTERVIEW", AtsStatusStatusEnum.SECOND_INTERVIEW);
        map.put("THIRD_INTERVIEW", AtsStatusStatusEnum.THIRD_INTERVIEW);
        map.put("BACKGROUND_CHECK", AtsStatusStatusEnum.BACKGROUND_CHECK);
        map.put("OFFERED", AtsStatusStatusEnum.OFFERED);
        map.put("ACCEPTED", AtsStatusStatusEnum.ACCEPTED);
        map.put("HIRED", AtsStatusStatusEnum.HIRED);
        map.put("REJECTED", AtsStatusStatusEnum.REJECTED);
        map.put("DECLINED", AtsStatusStatusEnum.DECLINED);
        map.put("WITHDRAWN", AtsStatusStatusEnum.WITHDRAWN);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<AtsStatusStatus> {

        protected _Serializer() {
            super(AtsStatusStatus.class);
        }

        @Override
        public void serialize(AtsStatusStatus value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<AtsStatusStatus> {

        protected _Deserializer() {
            super(AtsStatusStatus.class);
        }

        @Override
        public AtsStatusStatus deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return AtsStatusStatus.of(v);
        }
    }
    
    public enum AtsStatusStatusEnum {

        NEW("NEW"),
        REVIEWING("REVIEWING"),
        SCREENING("SCREENING"),
        SUBMITTED("SUBMITTED"),
        FIRST_INTERVIEW("FIRST_INTERVIEW"),
        SECOND_INTERVIEW("SECOND_INTERVIEW"),
        THIRD_INTERVIEW("THIRD_INTERVIEW"),
        BACKGROUND_CHECK("BACKGROUND_CHECK"),
        OFFERED("OFFERED"),
        ACCEPTED("ACCEPTED"),
        HIRED("HIRED"),
        REJECTED("REJECTED"),
        DECLINED("DECLINED"),
        WITHDRAWN("WITHDRAWN"),;

        private final String value;

        private AtsStatusStatusEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}


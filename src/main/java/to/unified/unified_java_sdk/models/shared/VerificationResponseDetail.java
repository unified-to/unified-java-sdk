/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class VerificationResponseDetail {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("download_url")
    private Optional<String> downloadUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_failed_reason")
    private Optional<Boolean> isFailedReason;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_private")
    private Optional<Boolean> isPrivate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parameter_id")
    private Optional<String> parameterId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text")
    private Optional<String> text;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonCreator
    public VerificationResponseDetail(
            @JsonProperty("download_url") Optional<String> downloadUrl,
            @JsonProperty("is_failed_reason") Optional<Boolean> isFailedReason,
            @JsonProperty("is_private") Optional<Boolean> isPrivate,
            @JsonProperty("parameter_id") Optional<String> parameterId,
            @JsonProperty("text") Optional<String> text,
            @JsonProperty("title") Optional<String> title) {
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        Utils.checkNotNull(isFailedReason, "isFailedReason");
        Utils.checkNotNull(isPrivate, "isPrivate");
        Utils.checkNotNull(parameterId, "parameterId");
        Utils.checkNotNull(text, "text");
        Utils.checkNotNull(title, "title");
        this.downloadUrl = downloadUrl;
        this.isFailedReason = isFailedReason;
        this.isPrivate = isPrivate;
        this.parameterId = parameterId;
        this.text = text;
        this.title = title;
    }
    
    public VerificationResponseDetail() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> downloadUrl() {
        return downloadUrl;
    }

    @JsonIgnore
    public Optional<Boolean> isFailedReason() {
        return isFailedReason;
    }

    @JsonIgnore
    public Optional<Boolean> isPrivate() {
        return isPrivate;
    }

    @JsonIgnore
    public Optional<String> parameterId() {
        return parameterId;
    }

    @JsonIgnore
    public Optional<String> text() {
        return text;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    public static Builder builder() {
        return new Builder();
    }


    public VerificationResponseDetail withDownloadUrl(String downloadUrl) {
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        this.downloadUrl = Optional.ofNullable(downloadUrl);
        return this;
    }


    public VerificationResponseDetail withDownloadUrl(Optional<String> downloadUrl) {
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        this.downloadUrl = downloadUrl;
        return this;
    }

    public VerificationResponseDetail withIsFailedReason(boolean isFailedReason) {
        Utils.checkNotNull(isFailedReason, "isFailedReason");
        this.isFailedReason = Optional.ofNullable(isFailedReason);
        return this;
    }


    public VerificationResponseDetail withIsFailedReason(Optional<Boolean> isFailedReason) {
        Utils.checkNotNull(isFailedReason, "isFailedReason");
        this.isFailedReason = isFailedReason;
        return this;
    }

    public VerificationResponseDetail withIsPrivate(boolean isPrivate) {
        Utils.checkNotNull(isPrivate, "isPrivate");
        this.isPrivate = Optional.ofNullable(isPrivate);
        return this;
    }


    public VerificationResponseDetail withIsPrivate(Optional<Boolean> isPrivate) {
        Utils.checkNotNull(isPrivate, "isPrivate");
        this.isPrivate = isPrivate;
        return this;
    }

    public VerificationResponseDetail withParameterId(String parameterId) {
        Utils.checkNotNull(parameterId, "parameterId");
        this.parameterId = Optional.ofNullable(parameterId);
        return this;
    }


    public VerificationResponseDetail withParameterId(Optional<String> parameterId) {
        Utils.checkNotNull(parameterId, "parameterId");
        this.parameterId = parameterId;
        return this;
    }

    public VerificationResponseDetail withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = Optional.ofNullable(text);
        return this;
    }


    public VerificationResponseDetail withText(Optional<String> text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    public VerificationResponseDetail withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }


    public VerificationResponseDetail withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerificationResponseDetail other = (VerificationResponseDetail) o;
        return 
            Utils.enhancedDeepEquals(this.downloadUrl, other.downloadUrl) &&
            Utils.enhancedDeepEquals(this.isFailedReason, other.isFailedReason) &&
            Utils.enhancedDeepEquals(this.isPrivate, other.isPrivate) &&
            Utils.enhancedDeepEquals(this.parameterId, other.parameterId) &&
            Utils.enhancedDeepEquals(this.text, other.text) &&
            Utils.enhancedDeepEquals(this.title, other.title);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            downloadUrl, isFailedReason, isPrivate,
            parameterId, text, title);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerificationResponseDetail.class,
                "downloadUrl", downloadUrl,
                "isFailedReason", isFailedReason,
                "isPrivate", isPrivate,
                "parameterId", parameterId,
                "text", text,
                "title", title);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> downloadUrl = Optional.empty();

        private Optional<Boolean> isFailedReason = Optional.empty();

        private Optional<Boolean> isPrivate = Optional.empty();

        private Optional<String> parameterId = Optional.empty();

        private Optional<String> text = Optional.empty();

        private Optional<String> title = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder downloadUrl(String downloadUrl) {
            Utils.checkNotNull(downloadUrl, "downloadUrl");
            this.downloadUrl = Optional.ofNullable(downloadUrl);
            return this;
        }

        public Builder downloadUrl(Optional<String> downloadUrl) {
            Utils.checkNotNull(downloadUrl, "downloadUrl");
            this.downloadUrl = downloadUrl;
            return this;
        }


        public Builder isFailedReason(boolean isFailedReason) {
            Utils.checkNotNull(isFailedReason, "isFailedReason");
            this.isFailedReason = Optional.ofNullable(isFailedReason);
            return this;
        }

        public Builder isFailedReason(Optional<Boolean> isFailedReason) {
            Utils.checkNotNull(isFailedReason, "isFailedReason");
            this.isFailedReason = isFailedReason;
            return this;
        }


        public Builder isPrivate(boolean isPrivate) {
            Utils.checkNotNull(isPrivate, "isPrivate");
            this.isPrivate = Optional.ofNullable(isPrivate);
            return this;
        }

        public Builder isPrivate(Optional<Boolean> isPrivate) {
            Utils.checkNotNull(isPrivate, "isPrivate");
            this.isPrivate = isPrivate;
            return this;
        }


        public Builder parameterId(String parameterId) {
            Utils.checkNotNull(parameterId, "parameterId");
            this.parameterId = Optional.ofNullable(parameterId);
            return this;
        }

        public Builder parameterId(Optional<String> parameterId) {
            Utils.checkNotNull(parameterId, "parameterId");
            this.parameterId = parameterId;
            return this;
        }


        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = Optional.ofNullable(text);
            return this;
        }

        public Builder text(Optional<String> text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }


        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public VerificationResponseDetail build() {

            return new VerificationResponseDetail(
                downloadUrl, isFailedReason, isPrivate,
                parameterId, text, title);
        }

    }
}

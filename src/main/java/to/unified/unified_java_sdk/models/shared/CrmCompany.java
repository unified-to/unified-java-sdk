/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * CrmCompany
 * 
 * <p>A company represents an organization that optionally is associated with a deal and/or contacts
 */
public class CrmCompany {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends PropertyCrmCompanyAddress> address;

    /**
     * An array of contact IDs associated with this company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_ids")
    private Optional<? extends List<String>> contactIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    /**
     * An array of deal IDs associated with this contact
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deal_ids")
    private Optional<? extends List<String>> dealIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<CrmEmail>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employees")
    private Optional<Double> employees;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("industry")
    private Optional<String> industry;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    private Optional<Boolean> isActive;

    /**
     * Additional URLs associated with the contact e.g., LinkedIn, website, etc
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link_urls")
    private Optional<? extends List<String>> linkUrls;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends List<CrmMetadata>> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends List<String>> tags;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telephones")
    private Optional<? extends List<CrmTelephone>> telephones;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("websites")
    private Optional<? extends List<String>> websites;

    @JsonCreator
    public CrmCompany(
            @JsonProperty("address") Optional<? extends PropertyCrmCompanyAddress> address,
            @JsonProperty("contact_ids") Optional<? extends List<String>> contactIds,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("deal_ids") Optional<? extends List<String>> dealIds,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("emails") Optional<? extends List<CrmEmail>> emails,
            @JsonProperty("employees") Optional<Double> employees,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("industry") Optional<String> industry,
            @JsonProperty("is_active") Optional<Boolean> isActive,
            @JsonProperty("link_urls") Optional<? extends List<String>> linkUrls,
            @JsonProperty("metadata") Optional<? extends List<CrmMetadata>> metadata,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("tags") Optional<? extends List<String>> tags,
            @JsonProperty("telephones") Optional<? extends List<CrmTelephone>> telephones,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("user_id") Optional<String> userId,
            @JsonProperty("websites") Optional<? extends List<String>> websites) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(contactIds, "contactIds");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(dealIds, "dealIds");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(employees, "employees");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(industry, "industry");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(linkUrls, "linkUrls");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(telephones, "telephones");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userId, "userId");
        Utils.checkNotNull(websites, "websites");
        this.address = address;
        this.contactIds = contactIds;
        this.createdAt = createdAt;
        this.dealIds = dealIds;
        this.description = description;
        this.emails = emails;
        this.employees = employees;
        this.id = id;
        this.industry = industry;
        this.isActive = isActive;
        this.linkUrls = linkUrls;
        this.metadata = metadata;
        this.name = name;
        this.raw = raw;
        this.tags = tags;
        this.telephones = telephones;
        this.timezone = timezone;
        this.updatedAt = updatedAt;
        this.userId = userId;
        this.websites = websites;
    }
    
    public CrmCompany() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCrmCompanyAddress> address() {
        return (Optional<PropertyCrmCompanyAddress>) address;
    }

    /**
     * An array of contact IDs associated with this company
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> contactIds() {
        return (Optional<List<String>>) contactIds;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * An array of deal IDs associated with this contact
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> dealIds() {
        return (Optional<List<String>>) dealIds;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CrmEmail>> emails() {
        return (Optional<List<CrmEmail>>) emails;
    }

    @JsonIgnore
    public Optional<Double> employees() {
        return employees;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> industry() {
        return industry;
    }

    @JsonIgnore
    public Optional<Boolean> isActive() {
        return isActive;
    }

    /**
     * Additional URLs associated with the contact e.g., LinkedIn, website, etc
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> linkUrls() {
        return (Optional<List<String>>) linkUrls;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CrmMetadata>> metadata() {
        return (Optional<List<CrmMetadata>>) metadata;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tags() {
        return (Optional<List<String>>) tags;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CrmTelephone>> telephones() {
        return (Optional<List<CrmTelephone>>) telephones;
    }

    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> websites() {
        return (Optional<List<String>>) websites;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CrmCompany withAddress(PropertyCrmCompanyAddress address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public CrmCompany withAddress(Optional<? extends PropertyCrmCompanyAddress> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * An array of contact IDs associated with this company
     */
    public CrmCompany withContactIds(List<String> contactIds) {
        Utils.checkNotNull(contactIds, "contactIds");
        this.contactIds = Optional.ofNullable(contactIds);
        return this;
    }

    /**
     * An array of contact IDs associated with this company
     */
    public CrmCompany withContactIds(Optional<? extends List<String>> contactIds) {
        Utils.checkNotNull(contactIds, "contactIds");
        this.contactIds = contactIds;
        return this;
    }

    public CrmCompany withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public CrmCompany withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An array of deal IDs associated with this contact
     */
    public CrmCompany withDealIds(List<String> dealIds) {
        Utils.checkNotNull(dealIds, "dealIds");
        this.dealIds = Optional.ofNullable(dealIds);
        return this;
    }

    /**
     * An array of deal IDs associated with this contact
     */
    public CrmCompany withDealIds(Optional<? extends List<String>> dealIds) {
        Utils.checkNotNull(dealIds, "dealIds");
        this.dealIds = dealIds;
        return this;
    }

    public CrmCompany withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public CrmCompany withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public CrmCompany withEmails(List<CrmEmail> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public CrmCompany withEmails(Optional<? extends List<CrmEmail>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public CrmCompany withEmployees(double employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = Optional.ofNullable(employees);
        return this;
    }

    public CrmCompany withEmployees(Optional<Double> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = employees;
        return this;
    }

    public CrmCompany withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CrmCompany withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CrmCompany withIndustry(String industry) {
        Utils.checkNotNull(industry, "industry");
        this.industry = Optional.ofNullable(industry);
        return this;
    }

    public CrmCompany withIndustry(Optional<String> industry) {
        Utils.checkNotNull(industry, "industry");
        this.industry = industry;
        return this;
    }

    public CrmCompany withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }

    public CrmCompany withIsActive(Optional<Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    /**
     * Additional URLs associated with the contact e.g., LinkedIn, website, etc
     */
    public CrmCompany withLinkUrls(List<String> linkUrls) {
        Utils.checkNotNull(linkUrls, "linkUrls");
        this.linkUrls = Optional.ofNullable(linkUrls);
        return this;
    }

    /**
     * Additional URLs associated with the contact e.g., LinkedIn, website, etc
     */
    public CrmCompany withLinkUrls(Optional<? extends List<String>> linkUrls) {
        Utils.checkNotNull(linkUrls, "linkUrls");
        this.linkUrls = linkUrls;
        return this;
    }

    public CrmCompany withMetadata(List<CrmMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public CrmCompany withMetadata(Optional<? extends List<CrmMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public CrmCompany withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public CrmCompany withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CrmCompany withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public CrmCompany withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public CrmCompany withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    public CrmCompany withTags(Optional<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    public CrmCompany withTelephones(List<CrmTelephone> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = Optional.ofNullable(telephones);
        return this;
    }

    public CrmCompany withTelephones(Optional<? extends List<CrmTelephone>> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = telephones;
        return this;
    }

    public CrmCompany withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    public CrmCompany withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public CrmCompany withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public CrmCompany withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public CrmCompany withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    public CrmCompany withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    public CrmCompany withWebsites(List<String> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = Optional.ofNullable(websites);
        return this;
    }

    public CrmCompany withWebsites(Optional<? extends List<String>> websites) {
        Utils.checkNotNull(websites, "websites");
        this.websites = websites;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CrmCompany other = (CrmCompany) o;
        return 
            Utils.enhancedDeepEquals(this.address, other.address) &&
            Utils.enhancedDeepEquals(this.contactIds, other.contactIds) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.dealIds, other.dealIds) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.employees, other.employees) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.industry, other.industry) &&
            Utils.enhancedDeepEquals(this.isActive, other.isActive) &&
            Utils.enhancedDeepEquals(this.linkUrls, other.linkUrls) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.telephones, other.telephones) &&
            Utils.enhancedDeepEquals(this.timezone, other.timezone) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.userId, other.userId) &&
            Utils.enhancedDeepEquals(this.websites, other.websites);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            address,
            contactIds,
            createdAt,
            dealIds,
            description,
            emails,
            employees,
            id,
            industry,
            isActive,
            linkUrls,
            metadata,
            name,
            raw,
            tags,
            telephones,
            timezone,
            updatedAt,
            userId,
            websites);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CrmCompany.class,
                "address", address,
                "contactIds", contactIds,
                "createdAt", createdAt,
                "dealIds", dealIds,
                "description", description,
                "emails", emails,
                "employees", employees,
                "id", id,
                "industry", industry,
                "isActive", isActive,
                "linkUrls", linkUrls,
                "metadata", metadata,
                "name", name,
                "raw", raw,
                "tags", tags,
                "telephones", telephones,
                "timezone", timezone,
                "updatedAt", updatedAt,
                "userId", userId,
                "websites", websites);
    }
    
    public final static class Builder {
 
        private Optional<? extends PropertyCrmCompanyAddress> address = Optional.empty();
 
        private Optional<? extends List<String>> contactIds = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends List<String>> dealIds = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<? extends List<CrmEmail>> emails = Optional.empty();
 
        private Optional<Double> employees = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> industry = Optional.empty();
 
        private Optional<Boolean> isActive = Optional.empty();
 
        private Optional<? extends List<String>> linkUrls = Optional.empty();
 
        private Optional<? extends List<CrmMetadata>> metadata = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<? extends List<String>> tags = Optional.empty();
 
        private Optional<? extends List<CrmTelephone>> telephones = Optional.empty();
 
        private Optional<String> timezone = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<String> userId = Optional.empty();
 
        private Optional<? extends List<String>> websites = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder address(PropertyCrmCompanyAddress address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends PropertyCrmCompanyAddress> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        /**
         * An array of contact IDs associated with this company
         */
        public Builder contactIds(List<String> contactIds) {
            Utils.checkNotNull(contactIds, "contactIds");
            this.contactIds = Optional.ofNullable(contactIds);
            return this;
        }

        /**
         * An array of contact IDs associated with this company
         */
        public Builder contactIds(Optional<? extends List<String>> contactIds) {
            Utils.checkNotNull(contactIds, "contactIds");
            this.contactIds = contactIds;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * An array of deal IDs associated with this contact
         */
        public Builder dealIds(List<String> dealIds) {
            Utils.checkNotNull(dealIds, "dealIds");
            this.dealIds = Optional.ofNullable(dealIds);
            return this;
        }

        /**
         * An array of deal IDs associated with this contact
         */
        public Builder dealIds(Optional<? extends List<String>> dealIds) {
            Utils.checkNotNull(dealIds, "dealIds");
            this.dealIds = dealIds;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder emails(List<CrmEmail> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<CrmEmail>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder employees(double employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = Optional.ofNullable(employees);
            return this;
        }

        public Builder employees(Optional<Double> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = employees;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder industry(String industry) {
            Utils.checkNotNull(industry, "industry");
            this.industry = Optional.ofNullable(industry);
            return this;
        }

        public Builder industry(Optional<String> industry) {
            Utils.checkNotNull(industry, "industry");
            this.industry = industry;
            return this;
        }

        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        public Builder isActive(Optional<Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }

        /**
         * Additional URLs associated with the contact e.g., LinkedIn, website, etc
         */
        public Builder linkUrls(List<String> linkUrls) {
            Utils.checkNotNull(linkUrls, "linkUrls");
            this.linkUrls = Optional.ofNullable(linkUrls);
            return this;
        }

        /**
         * Additional URLs associated with the contact e.g., LinkedIn, website, etc
         */
        public Builder linkUrls(Optional<? extends List<String>> linkUrls) {
            Utils.checkNotNull(linkUrls, "linkUrls");
            this.linkUrls = linkUrls;
            return this;
        }

        public Builder metadata(List<CrmMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends List<CrmMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Builder tags(Optional<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        public Builder telephones(List<CrmTelephone> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = Optional.ofNullable(telephones);
            return this;
        }

        public Builder telephones(Optional<? extends List<CrmTelephone>> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = telephones;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public Builder websites(List<String> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = Optional.ofNullable(websites);
            return this;
        }

        public Builder websites(Optional<? extends List<String>> websites) {
            Utils.checkNotNull(websites, "websites");
            this.websites = websites;
            return this;
        }
        
        public CrmCompany build() {
            return new CrmCompany(
                address,
                contactIds,
                createdAt,
                dealIds,
                description,
                emails,
                employees,
                id,
                industry,
                isActive,
                linkUrls,
                metadata,
                name,
                raw,
                tags,
                telephones,
                timezone,
                updatedAt,
                userId,
                websites);
        }
    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = HrisPayslipDetailType._Deserializer.class)
@JsonSerialize(using = HrisPayslipDetailType._Serializer.class)
public class HrisPayslipDetailType {

    public static final HrisPayslipDetailType EARNING_SALARY = new HrisPayslipDetailType("EARNING_SALARY");
    public static final HrisPayslipDetailType EARNING_OVERTIME = new HrisPayslipDetailType("EARNING_OVERTIME");
    public static final HrisPayslipDetailType EARNING_TIP = new HrisPayslipDetailType("EARNING_TIP");
    public static final HrisPayslipDetailType EARNING_BONUS = new HrisPayslipDetailType("EARNING_BONUS");
    public static final HrisPayslipDetailType EARNING_COMMISSION = new HrisPayslipDetailType("EARNING_COMMISSION");
    public static final HrisPayslipDetailType EARNING_ADJUSTMENT = new HrisPayslipDetailType("EARNING_ADJUSTMENT");
    public static final HrisPayslipDetailType EARNING = new HrisPayslipDetailType("EARNING");
    public static final HrisPayslipDetailType PRETAX_DEDUCTION = new HrisPayslipDetailType("PRETAX_DEDUCTION");
    public static final HrisPayslipDetailType PRETAX_DEDUCTION_HEALTH_INSURANCE = new HrisPayslipDetailType("PRETAX_DEDUCTION_HEALTH_INSURANCE");
    public static final HrisPayslipDetailType PRETAX_DEDUCTION_RETIREMENT = new HrisPayslipDetailType("PRETAX_DEDUCTION_RETIREMENT");
    public static final HrisPayslipDetailType PRETAX_DEDUCTION_HRA = new HrisPayslipDetailType("PRETAX_DEDUCTION_HRA");
    public static final HrisPayslipDetailType TAX_FEDERAL = new HrisPayslipDetailType("TAX_FEDERAL");
    public static final HrisPayslipDetailType TAX_REGION = new HrisPayslipDetailType("TAX_REGION");
    public static final HrisPayslipDetailType TAX_LOCAL = new HrisPayslipDetailType("TAX_LOCAL");
    public static final HrisPayslipDetailType POSTTAX_BENEFIT = new HrisPayslipDetailType("POSTTAX_BENEFIT");
    public static final HrisPayslipDetailType POSTTAX_GARNISHMENT = new HrisPayslipDetailType("POSTTAX_GARNISHMENT");
    public static final HrisPayslipDetailType REIMBURSEMENT = new HrisPayslipDetailType("REIMBURSEMENT");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, HrisPayslipDetailType> values = createValuesMap();
    private static final Map<String, HrisPayslipDetailTypeEnum> enums = createEnumsMap();

    private final String value;

    private HrisPayslipDetailType(String value) {
        this.value = value;
    }

    /**
     * Returns a HrisPayslipDetailType with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as HrisPayslipDetailType
     */ 
    public static HrisPayslipDetailType of(String value) {
        synchronized (HrisPayslipDetailType.class) {
            return values.computeIfAbsent(value, v -> new HrisPayslipDetailType(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<HrisPayslipDetailTypeEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        HrisPayslipDetailType other = (HrisPayslipDetailType) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "HrisPayslipDetailType [value=" + value + "]";
    }

    // return an array just like an enum
    public static HrisPayslipDetailType[] values() {
        synchronized (HrisPayslipDetailType.class) {
            return values.values().toArray(new HrisPayslipDetailType[] {});
        }
    }

    private static final Map<String, HrisPayslipDetailType> createValuesMap() {
        Map<String, HrisPayslipDetailType> map = new LinkedHashMap<>();
        map.put("EARNING_SALARY", EARNING_SALARY);
        map.put("EARNING_OVERTIME", EARNING_OVERTIME);
        map.put("EARNING_TIP", EARNING_TIP);
        map.put("EARNING_BONUS", EARNING_BONUS);
        map.put("EARNING_COMMISSION", EARNING_COMMISSION);
        map.put("EARNING_ADJUSTMENT", EARNING_ADJUSTMENT);
        map.put("EARNING", EARNING);
        map.put("PRETAX_DEDUCTION", PRETAX_DEDUCTION);
        map.put("PRETAX_DEDUCTION_HEALTH_INSURANCE", PRETAX_DEDUCTION_HEALTH_INSURANCE);
        map.put("PRETAX_DEDUCTION_RETIREMENT", PRETAX_DEDUCTION_RETIREMENT);
        map.put("PRETAX_DEDUCTION_HRA", PRETAX_DEDUCTION_HRA);
        map.put("TAX_FEDERAL", TAX_FEDERAL);
        map.put("TAX_REGION", TAX_REGION);
        map.put("TAX_LOCAL", TAX_LOCAL);
        map.put("POSTTAX_BENEFIT", POSTTAX_BENEFIT);
        map.put("POSTTAX_GARNISHMENT", POSTTAX_GARNISHMENT);
        map.put("REIMBURSEMENT", REIMBURSEMENT);
        return map;
    }

    private static final Map<String, HrisPayslipDetailTypeEnum> createEnumsMap() {
        Map<String, HrisPayslipDetailTypeEnum> map = new HashMap<>();
        map.put("EARNING_SALARY", HrisPayslipDetailTypeEnum.EARNING_SALARY);
        map.put("EARNING_OVERTIME", HrisPayslipDetailTypeEnum.EARNING_OVERTIME);
        map.put("EARNING_TIP", HrisPayslipDetailTypeEnum.EARNING_TIP);
        map.put("EARNING_BONUS", HrisPayslipDetailTypeEnum.EARNING_BONUS);
        map.put("EARNING_COMMISSION", HrisPayslipDetailTypeEnum.EARNING_COMMISSION);
        map.put("EARNING_ADJUSTMENT", HrisPayslipDetailTypeEnum.EARNING_ADJUSTMENT);
        map.put("EARNING", HrisPayslipDetailTypeEnum.EARNING);
        map.put("PRETAX_DEDUCTION", HrisPayslipDetailTypeEnum.PRETAX_DEDUCTION);
        map.put("PRETAX_DEDUCTION_HEALTH_INSURANCE", HrisPayslipDetailTypeEnum.PRETAX_DEDUCTION_HEALTH_INSURANCE);
        map.put("PRETAX_DEDUCTION_RETIREMENT", HrisPayslipDetailTypeEnum.PRETAX_DEDUCTION_RETIREMENT);
        map.put("PRETAX_DEDUCTION_HRA", HrisPayslipDetailTypeEnum.PRETAX_DEDUCTION_HRA);
        map.put("TAX_FEDERAL", HrisPayslipDetailTypeEnum.TAX_FEDERAL);
        map.put("TAX_REGION", HrisPayslipDetailTypeEnum.TAX_REGION);
        map.put("TAX_LOCAL", HrisPayslipDetailTypeEnum.TAX_LOCAL);
        map.put("POSTTAX_BENEFIT", HrisPayslipDetailTypeEnum.POSTTAX_BENEFIT);
        map.put("POSTTAX_GARNISHMENT", HrisPayslipDetailTypeEnum.POSTTAX_GARNISHMENT);
        map.put("REIMBURSEMENT", HrisPayslipDetailTypeEnum.REIMBURSEMENT);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<HrisPayslipDetailType> {

        protected _Serializer() {
            super(HrisPayslipDetailType.class);
        }

        @Override
        public void serialize(HrisPayslipDetailType value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<HrisPayslipDetailType> {

        protected _Deserializer() {
            super(HrisPayslipDetailType.class);
        }

        @Override
        public HrisPayslipDetailType deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return HrisPayslipDetailType.of(v);
        }
    }
    
    public enum HrisPayslipDetailTypeEnum {

        EARNING_SALARY("EARNING_SALARY"),
        EARNING_OVERTIME("EARNING_OVERTIME"),
        EARNING_TIP("EARNING_TIP"),
        EARNING_BONUS("EARNING_BONUS"),
        EARNING_COMMISSION("EARNING_COMMISSION"),
        EARNING_ADJUSTMENT("EARNING_ADJUSTMENT"),
        EARNING("EARNING"),
        PRETAX_DEDUCTION("PRETAX_DEDUCTION"),
        PRETAX_DEDUCTION_HEALTH_INSURANCE("PRETAX_DEDUCTION_HEALTH_INSURANCE"),
        PRETAX_DEDUCTION_RETIREMENT("PRETAX_DEDUCTION_RETIREMENT"),
        PRETAX_DEDUCTION_HRA("PRETAX_DEDUCTION_HRA"),
        TAX_FEDERAL("TAX_FEDERAL"),
        TAX_REGION("TAX_REGION"),
        TAX_LOCAL("TAX_LOCAL"),
        POSTTAX_BENEFIT("POSTTAX_BENEFIT"),
        POSTTAX_GARNISHMENT("POSTTAX_GARNISHMENT"),
        REIMBURSEMENT("REIMBURSEMENT"),;

        private final String value;

        private HrisPayslipDetailTypeEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}


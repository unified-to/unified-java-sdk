/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class CalendarEvent {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    private Optional<? extends List<CalendarAttachment>> attachments;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendees")
    private Optional<? extends List<CalendarAttendee>> attendees;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("calendar_id")
    private Optional<String> calendarId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conference")
    private Optional<? extends List<CalendarConference>> conference;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<String> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    private Optional<String> endAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_conference")
    private Optional<Boolean> hasConference;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_all_day")
    private Optional<Boolean> isAllDay;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_free")
    private Optional<Boolean> isFree;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_private")
    private Optional<Boolean> isPrivate;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location")
    private Optional<String> location;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private Optional<String> notes;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organizer")
    private Optional<? extends PropertyCalendarEventOrganizer> organizer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurrence")
    private Optional<? extends List<CalendarEventRecurrence>> recurrence;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurring_event_id")
    private Optional<String> recurringEventId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_at")
    private Optional<String> startAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CalendarEventStatus> status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subject")
    private Optional<String> subject;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<String> updatedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("web_url")
    private Optional<String> webUrl;

    @JsonCreator
    public CalendarEvent(
            @JsonProperty("attachments") Optional<? extends List<CalendarAttachment>> attachments,
            @JsonProperty("attendees") Optional<? extends List<CalendarAttendee>> attendees,
            @JsonProperty("calendar_id") Optional<String> calendarId,
            @JsonProperty("conference") Optional<? extends List<CalendarConference>> conference,
            @JsonProperty("created_at") Optional<String> createdAt,
            @JsonProperty("end_at") Optional<String> endAt,
            @JsonProperty("has_conference") Optional<Boolean> hasConference,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_all_day") Optional<Boolean> isAllDay,
            @JsonProperty("is_free") Optional<Boolean> isFree,
            @JsonProperty("is_private") Optional<Boolean> isPrivate,
            @JsonProperty("location") Optional<String> location,
            @JsonProperty("notes") Optional<String> notes,
            @JsonProperty("organizer") Optional<? extends PropertyCalendarEventOrganizer> organizer,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("recurrence") Optional<? extends List<CalendarEventRecurrence>> recurrence,
            @JsonProperty("recurring_event_id") Optional<String> recurringEventId,
            @JsonProperty("start_at") Optional<String> startAt,
            @JsonProperty("status") Optional<? extends CalendarEventStatus> status,
            @JsonProperty("subject") Optional<String> subject,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("updated_at") Optional<String> updatedAt,
            @JsonProperty("web_url") Optional<String> webUrl) {
        Utils.checkNotNull(attachments, "attachments");
        Utils.checkNotNull(attendees, "attendees");
        Utils.checkNotNull(calendarId, "calendarId");
        Utils.checkNotNull(conference, "conference");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(hasConference, "hasConference");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isAllDay, "isAllDay");
        Utils.checkNotNull(isFree, "isFree");
        Utils.checkNotNull(isPrivate, "isPrivate");
        Utils.checkNotNull(location, "location");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(organizer, "organizer");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(recurrence, "recurrence");
        Utils.checkNotNull(recurringEventId, "recurringEventId");
        Utils.checkNotNull(startAt, "startAt");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(subject, "subject");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(webUrl, "webUrl");
        this.attachments = attachments;
        this.attendees = attendees;
        this.calendarId = calendarId;
        this.conference = conference;
        this.createdAt = createdAt;
        this.endAt = endAt;
        this.hasConference = hasConference;
        this.id = id;
        this.isAllDay = isAllDay;
        this.isFree = isFree;
        this.isPrivate = isPrivate;
        this.location = location;
        this.notes = notes;
        this.organizer = organizer;
        this.raw = raw;
        this.recurrence = recurrence;
        this.recurringEventId = recurringEventId;
        this.startAt = startAt;
        this.status = status;
        this.subject = subject;
        this.timezone = timezone;
        this.updatedAt = updatedAt;
        this.webUrl = webUrl;
    }
    
    public CalendarEvent() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CalendarAttachment>> attachments() {
        return (Optional<List<CalendarAttachment>>) attachments;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CalendarAttendee>> attendees() {
        return (Optional<List<CalendarAttendee>>) attendees;
    }

    @JsonIgnore
    public Optional<String> calendarId() {
        return calendarId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CalendarConference>> conference() {
        return (Optional<List<CalendarConference>>) conference;
    }

    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> endAt() {
        return endAt;
    }

    @JsonIgnore
    public Optional<Boolean> hasConference() {
        return hasConference;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isAllDay() {
        return isAllDay;
    }

    @JsonIgnore
    public Optional<Boolean> isFree() {
        return isFree;
    }

    @JsonIgnore
    public Optional<Boolean> isPrivate() {
        return isPrivate;
    }

    @JsonIgnore
    public Optional<String> location() {
        return location;
    }

    @JsonIgnore
    public Optional<String> notes() {
        return notes;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCalendarEventOrganizer> organizer() {
        return (Optional<PropertyCalendarEventOrganizer>) organizer;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CalendarEventRecurrence>> recurrence() {
        return (Optional<List<CalendarEventRecurrence>>) recurrence;
    }

    @JsonIgnore
    public Optional<String> recurringEventId() {
        return recurringEventId;
    }

    @JsonIgnore
    public Optional<String> startAt() {
        return startAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CalendarEventStatus> status() {
        return (Optional<CalendarEventStatus>) status;
    }

    @JsonIgnore
    public Optional<String> subject() {
        return subject;
    }

    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    @JsonIgnore
    public Optional<String> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> webUrl() {
        return webUrl;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CalendarEvent withAttachments(List<CalendarAttachment> attachments) {
        Utils.checkNotNull(attachments, "attachments");
        this.attachments = Optional.ofNullable(attachments);
        return this;
    }


    public CalendarEvent withAttachments(Optional<? extends List<CalendarAttachment>> attachments) {
        Utils.checkNotNull(attachments, "attachments");
        this.attachments = attachments;
        return this;
    }

    public CalendarEvent withAttendees(List<CalendarAttendee> attendees) {
        Utils.checkNotNull(attendees, "attendees");
        this.attendees = Optional.ofNullable(attendees);
        return this;
    }


    public CalendarEvent withAttendees(Optional<? extends List<CalendarAttendee>> attendees) {
        Utils.checkNotNull(attendees, "attendees");
        this.attendees = attendees;
        return this;
    }

    public CalendarEvent withCalendarId(String calendarId) {
        Utils.checkNotNull(calendarId, "calendarId");
        this.calendarId = Optional.ofNullable(calendarId);
        return this;
    }


    public CalendarEvent withCalendarId(Optional<String> calendarId) {
        Utils.checkNotNull(calendarId, "calendarId");
        this.calendarId = calendarId;
        return this;
    }

    public CalendarEvent withConference(List<CalendarConference> conference) {
        Utils.checkNotNull(conference, "conference");
        this.conference = Optional.ofNullable(conference);
        return this;
    }


    public CalendarEvent withConference(Optional<? extends List<CalendarConference>> conference) {
        Utils.checkNotNull(conference, "conference");
        this.conference = conference;
        return this;
    }

    public CalendarEvent withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public CalendarEvent withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public CalendarEvent withEndAt(String endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = Optional.ofNullable(endAt);
        return this;
    }


    public CalendarEvent withEndAt(Optional<String> endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    public CalendarEvent withHasConference(boolean hasConference) {
        Utils.checkNotNull(hasConference, "hasConference");
        this.hasConference = Optional.ofNullable(hasConference);
        return this;
    }


    public CalendarEvent withHasConference(Optional<Boolean> hasConference) {
        Utils.checkNotNull(hasConference, "hasConference");
        this.hasConference = hasConference;
        return this;
    }

    public CalendarEvent withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public CalendarEvent withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CalendarEvent withIsAllDay(boolean isAllDay) {
        Utils.checkNotNull(isAllDay, "isAllDay");
        this.isAllDay = Optional.ofNullable(isAllDay);
        return this;
    }


    public CalendarEvent withIsAllDay(Optional<Boolean> isAllDay) {
        Utils.checkNotNull(isAllDay, "isAllDay");
        this.isAllDay = isAllDay;
        return this;
    }

    public CalendarEvent withIsFree(boolean isFree) {
        Utils.checkNotNull(isFree, "isFree");
        this.isFree = Optional.ofNullable(isFree);
        return this;
    }


    public CalendarEvent withIsFree(Optional<Boolean> isFree) {
        Utils.checkNotNull(isFree, "isFree");
        this.isFree = isFree;
        return this;
    }

    public CalendarEvent withIsPrivate(boolean isPrivate) {
        Utils.checkNotNull(isPrivate, "isPrivate");
        this.isPrivate = Optional.ofNullable(isPrivate);
        return this;
    }


    public CalendarEvent withIsPrivate(Optional<Boolean> isPrivate) {
        Utils.checkNotNull(isPrivate, "isPrivate");
        this.isPrivate = isPrivate;
        return this;
    }

    public CalendarEvent withLocation(String location) {
        Utils.checkNotNull(location, "location");
        this.location = Optional.ofNullable(location);
        return this;
    }


    public CalendarEvent withLocation(Optional<String> location) {
        Utils.checkNotNull(location, "location");
        this.location = location;
        return this;
    }

    public CalendarEvent withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = Optional.ofNullable(notes);
        return this;
    }


    public CalendarEvent withNotes(Optional<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    public CalendarEvent withOrganizer(PropertyCalendarEventOrganizer organizer) {
        Utils.checkNotNull(organizer, "organizer");
        this.organizer = Optional.ofNullable(organizer);
        return this;
    }


    public CalendarEvent withOrganizer(Optional<? extends PropertyCalendarEventOrganizer> organizer) {
        Utils.checkNotNull(organizer, "organizer");
        this.organizer = organizer;
        return this;
    }

    public CalendarEvent withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public CalendarEvent withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public CalendarEvent withRecurrence(List<CalendarEventRecurrence> recurrence) {
        Utils.checkNotNull(recurrence, "recurrence");
        this.recurrence = Optional.ofNullable(recurrence);
        return this;
    }


    public CalendarEvent withRecurrence(Optional<? extends List<CalendarEventRecurrence>> recurrence) {
        Utils.checkNotNull(recurrence, "recurrence");
        this.recurrence = recurrence;
        return this;
    }

    public CalendarEvent withRecurringEventId(String recurringEventId) {
        Utils.checkNotNull(recurringEventId, "recurringEventId");
        this.recurringEventId = Optional.ofNullable(recurringEventId);
        return this;
    }


    public CalendarEvent withRecurringEventId(Optional<String> recurringEventId) {
        Utils.checkNotNull(recurringEventId, "recurringEventId");
        this.recurringEventId = recurringEventId;
        return this;
    }

    public CalendarEvent withStartAt(String startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = Optional.ofNullable(startAt);
        return this;
    }


    public CalendarEvent withStartAt(Optional<String> startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }

    public CalendarEvent withStatus(CalendarEventStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public CalendarEvent withStatus(Optional<? extends CalendarEventStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public CalendarEvent withSubject(String subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = Optional.ofNullable(subject);
        return this;
    }


    public CalendarEvent withSubject(Optional<String> subject) {
        Utils.checkNotNull(subject, "subject");
        this.subject = subject;
        return this;
    }

    public CalendarEvent withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }


    public CalendarEvent withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public CalendarEvent withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public CalendarEvent withUpdatedAt(Optional<String> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public CalendarEvent withWebUrl(String webUrl) {
        Utils.checkNotNull(webUrl, "webUrl");
        this.webUrl = Optional.ofNullable(webUrl);
        return this;
    }


    public CalendarEvent withWebUrl(Optional<String> webUrl) {
        Utils.checkNotNull(webUrl, "webUrl");
        this.webUrl = webUrl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalendarEvent other = (CalendarEvent) o;
        return 
            Utils.enhancedDeepEquals(this.attachments, other.attachments) &&
            Utils.enhancedDeepEquals(this.attendees, other.attendees) &&
            Utils.enhancedDeepEquals(this.calendarId, other.calendarId) &&
            Utils.enhancedDeepEquals(this.conference, other.conference) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.endAt, other.endAt) &&
            Utils.enhancedDeepEquals(this.hasConference, other.hasConference) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.isAllDay, other.isAllDay) &&
            Utils.enhancedDeepEquals(this.isFree, other.isFree) &&
            Utils.enhancedDeepEquals(this.isPrivate, other.isPrivate) &&
            Utils.enhancedDeepEquals(this.location, other.location) &&
            Utils.enhancedDeepEquals(this.notes, other.notes) &&
            Utils.enhancedDeepEquals(this.organizer, other.organizer) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.recurrence, other.recurrence) &&
            Utils.enhancedDeepEquals(this.recurringEventId, other.recurringEventId) &&
            Utils.enhancedDeepEquals(this.startAt, other.startAt) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.subject, other.subject) &&
            Utils.enhancedDeepEquals(this.timezone, other.timezone) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.webUrl, other.webUrl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            attachments, attendees, calendarId,
            conference, createdAt, endAt,
            hasConference, id, isAllDay,
            isFree, isPrivate, location,
            notes, organizer, raw,
            recurrence, recurringEventId, startAt,
            status, subject, timezone,
            updatedAt, webUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CalendarEvent.class,
                "attachments", attachments,
                "attendees", attendees,
                "calendarId", calendarId,
                "conference", conference,
                "createdAt", createdAt,
                "endAt", endAt,
                "hasConference", hasConference,
                "id", id,
                "isAllDay", isAllDay,
                "isFree", isFree,
                "isPrivate", isPrivate,
                "location", location,
                "notes", notes,
                "organizer", organizer,
                "raw", raw,
                "recurrence", recurrence,
                "recurringEventId", recurringEventId,
                "startAt", startAt,
                "status", status,
                "subject", subject,
                "timezone", timezone,
                "updatedAt", updatedAt,
                "webUrl", webUrl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<CalendarAttachment>> attachments = Optional.empty();

        private Optional<? extends List<CalendarAttendee>> attendees = Optional.empty();

        private Optional<String> calendarId = Optional.empty();

        private Optional<? extends List<CalendarConference>> conference = Optional.empty();

        private Optional<String> createdAt = Optional.empty();

        private Optional<String> endAt = Optional.empty();

        private Optional<Boolean> hasConference = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<Boolean> isAllDay = Optional.empty();

        private Optional<Boolean> isFree = Optional.empty();

        private Optional<Boolean> isPrivate = Optional.empty();

        private Optional<String> location = Optional.empty();

        private Optional<String> notes = Optional.empty();

        private Optional<? extends PropertyCalendarEventOrganizer> organizer = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<? extends List<CalendarEventRecurrence>> recurrence = Optional.empty();

        private Optional<String> recurringEventId = Optional.empty();

        private Optional<String> startAt = Optional.empty();

        private Optional<? extends CalendarEventStatus> status = Optional.empty();

        private Optional<String> subject = Optional.empty();

        private Optional<String> timezone = Optional.empty();

        private Optional<String> updatedAt = Optional.empty();

        private Optional<String> webUrl = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder attachments(List<CalendarAttachment> attachments) {
            Utils.checkNotNull(attachments, "attachments");
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        public Builder attachments(Optional<? extends List<CalendarAttachment>> attachments) {
            Utils.checkNotNull(attachments, "attachments");
            this.attachments = attachments;
            return this;
        }


        public Builder attendees(List<CalendarAttendee> attendees) {
            Utils.checkNotNull(attendees, "attendees");
            this.attendees = Optional.ofNullable(attendees);
            return this;
        }

        public Builder attendees(Optional<? extends List<CalendarAttendee>> attendees) {
            Utils.checkNotNull(attendees, "attendees");
            this.attendees = attendees;
            return this;
        }


        public Builder calendarId(String calendarId) {
            Utils.checkNotNull(calendarId, "calendarId");
            this.calendarId = Optional.ofNullable(calendarId);
            return this;
        }

        public Builder calendarId(Optional<String> calendarId) {
            Utils.checkNotNull(calendarId, "calendarId");
            this.calendarId = calendarId;
            return this;
        }


        public Builder conference(List<CalendarConference> conference) {
            Utils.checkNotNull(conference, "conference");
            this.conference = Optional.ofNullable(conference);
            return this;
        }

        public Builder conference(Optional<? extends List<CalendarConference>> conference) {
            Utils.checkNotNull(conference, "conference");
            this.conference = conference;
            return this;
        }


        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder endAt(String endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Optional<String> endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }


        public Builder hasConference(boolean hasConference) {
            Utils.checkNotNull(hasConference, "hasConference");
            this.hasConference = Optional.ofNullable(hasConference);
            return this;
        }

        public Builder hasConference(Optional<Boolean> hasConference) {
            Utils.checkNotNull(hasConference, "hasConference");
            this.hasConference = hasConference;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder isAllDay(boolean isAllDay) {
            Utils.checkNotNull(isAllDay, "isAllDay");
            this.isAllDay = Optional.ofNullable(isAllDay);
            return this;
        }

        public Builder isAllDay(Optional<Boolean> isAllDay) {
            Utils.checkNotNull(isAllDay, "isAllDay");
            this.isAllDay = isAllDay;
            return this;
        }


        public Builder isFree(boolean isFree) {
            Utils.checkNotNull(isFree, "isFree");
            this.isFree = Optional.ofNullable(isFree);
            return this;
        }

        public Builder isFree(Optional<Boolean> isFree) {
            Utils.checkNotNull(isFree, "isFree");
            this.isFree = isFree;
            return this;
        }


        public Builder isPrivate(boolean isPrivate) {
            Utils.checkNotNull(isPrivate, "isPrivate");
            this.isPrivate = Optional.ofNullable(isPrivate);
            return this;
        }

        public Builder isPrivate(Optional<Boolean> isPrivate) {
            Utils.checkNotNull(isPrivate, "isPrivate");
            this.isPrivate = isPrivate;
            return this;
        }


        public Builder location(String location) {
            Utils.checkNotNull(location, "location");
            this.location = Optional.ofNullable(location);
            return this;
        }

        public Builder location(Optional<String> location) {
            Utils.checkNotNull(location, "location");
            this.location = location;
            return this;
        }


        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        public Builder notes(Optional<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }


        public Builder organizer(PropertyCalendarEventOrganizer organizer) {
            Utils.checkNotNull(organizer, "organizer");
            this.organizer = Optional.ofNullable(organizer);
            return this;
        }

        public Builder organizer(Optional<? extends PropertyCalendarEventOrganizer> organizer) {
            Utils.checkNotNull(organizer, "organizer");
            this.organizer = organizer;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder recurrence(List<CalendarEventRecurrence> recurrence) {
            Utils.checkNotNull(recurrence, "recurrence");
            this.recurrence = Optional.ofNullable(recurrence);
            return this;
        }

        public Builder recurrence(Optional<? extends List<CalendarEventRecurrence>> recurrence) {
            Utils.checkNotNull(recurrence, "recurrence");
            this.recurrence = recurrence;
            return this;
        }


        public Builder recurringEventId(String recurringEventId) {
            Utils.checkNotNull(recurringEventId, "recurringEventId");
            this.recurringEventId = Optional.ofNullable(recurringEventId);
            return this;
        }

        public Builder recurringEventId(Optional<String> recurringEventId) {
            Utils.checkNotNull(recurringEventId, "recurringEventId");
            this.recurringEventId = recurringEventId;
            return this;
        }


        public Builder startAt(String startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Optional<String> startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }


        public Builder status(CalendarEventStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends CalendarEventStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder subject(String subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = Optional.ofNullable(subject);
            return this;
        }

        public Builder subject(Optional<String> subject) {
            Utils.checkNotNull(subject, "subject");
            this.subject = subject;
            return this;
        }


        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }


        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<String> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder webUrl(String webUrl) {
            Utils.checkNotNull(webUrl, "webUrl");
            this.webUrl = Optional.ofNullable(webUrl);
            return this;
        }

        public Builder webUrl(Optional<String> webUrl) {
            Utils.checkNotNull(webUrl, "webUrl");
            this.webUrl = webUrl;
            return this;
        }

        public CalendarEvent build() {

            return new CalendarEvent(
                attachments, attendees, calendarId,
                conference, createdAt, endAt,
                hasConference, id, isAllDay,
                isFree, isPrivate, location,
                notes, organizer, raw,
                recurrence, recurringEventId, startAt,
                status, subject, timezone,
                updatedAt, webUrl);
        }

    }
}

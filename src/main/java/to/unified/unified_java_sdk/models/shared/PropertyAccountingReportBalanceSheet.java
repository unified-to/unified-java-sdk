/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class PropertyAccountingReportBalanceSheet {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assets")
    private Optional<? extends List<AccountingBalancesheetItem>> assets;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    private Optional<OffsetDateTime> endAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("equity")
    private Optional<? extends List<AccountingBalancesheetItem>> equity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liabilities")
    private Optional<? extends List<AccountingBalancesheetItem>> liabilities;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_assets_amount")
    private Optional<Double> netAssetsAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_at")
    private Optional<OffsetDateTime> startAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public PropertyAccountingReportBalanceSheet(
            @JsonProperty("assets") Optional<? extends List<AccountingBalancesheetItem>> assets,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("end_at") Optional<OffsetDateTime> endAt,
            @JsonProperty("equity") Optional<? extends List<AccountingBalancesheetItem>> equity,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("liabilities") Optional<? extends List<AccountingBalancesheetItem>> liabilities,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("net_assets_amount") Optional<Double> netAssetsAmount,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("start_at") Optional<OffsetDateTime> startAt,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(assets, "assets");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(equity, "equity");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(liabilities, "liabilities");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(startAt, "startAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.assets = assets;
        this.createdAt = createdAt;
        this.currency = currency;
        this.endAt = endAt;
        this.equity = equity;
        this.id = id;
        this.liabilities = liabilities;
        this.name = name;
        this.netAssetsAmount = netAssetsAmount;
        this.raw = raw;
        this.startAt = startAt;
        this.updatedAt = updatedAt;
    }
    
    public PropertyAccountingReportBalanceSheet() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingBalancesheetItem>> assets() {
        return (Optional<List<AccountingBalancesheetItem>>) assets;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endAt() {
        return endAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingBalancesheetItem>> equity() {
        return (Optional<List<AccountingBalancesheetItem>>) equity;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingBalancesheetItem>> liabilities() {
        return (Optional<List<AccountingBalancesheetItem>>) liabilities;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<Double> netAssetsAmount() {
        return netAssetsAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startAt() {
        return startAt;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PropertyAccountingReportBalanceSheet withAssets(List<AccountingBalancesheetItem> assets) {
        Utils.checkNotNull(assets, "assets");
        this.assets = Optional.ofNullable(assets);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withAssets(Optional<? extends List<AccountingBalancesheetItem>> assets) {
        Utils.checkNotNull(assets, "assets");
        this.assets = assets;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withEndAt(OffsetDateTime endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = Optional.ofNullable(endAt);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withEndAt(Optional<OffsetDateTime> endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withEquity(List<AccountingBalancesheetItem> equity) {
        Utils.checkNotNull(equity, "equity");
        this.equity = Optional.ofNullable(equity);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withEquity(Optional<? extends List<AccountingBalancesheetItem>> equity) {
        Utils.checkNotNull(equity, "equity");
        this.equity = equity;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withLiabilities(List<AccountingBalancesheetItem> liabilities) {
        Utils.checkNotNull(liabilities, "liabilities");
        this.liabilities = Optional.ofNullable(liabilities);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withLiabilities(Optional<? extends List<AccountingBalancesheetItem>> liabilities) {
        Utils.checkNotNull(liabilities, "liabilities");
        this.liabilities = liabilities;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withNetAssetsAmount(double netAssetsAmount) {
        Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
        this.netAssetsAmount = Optional.ofNullable(netAssetsAmount);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withNetAssetsAmount(Optional<Double> netAssetsAmount) {
        Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
        this.netAssetsAmount = netAssetsAmount;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withStartAt(OffsetDateTime startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = Optional.ofNullable(startAt);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withStartAt(Optional<OffsetDateTime> startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyAccountingReportBalanceSheet other = (PropertyAccountingReportBalanceSheet) o;
        return 
            Utils.enhancedDeepEquals(this.assets, other.assets) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.endAt, other.endAt) &&
            Utils.enhancedDeepEquals(this.equity, other.equity) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.liabilities, other.liabilities) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.netAssetsAmount, other.netAssetsAmount) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.startAt, other.startAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            assets,
            createdAt,
            currency,
            endAt,
            equity,
            id,
            liabilities,
            name,
            netAssetsAmount,
            raw,
            startAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyAccountingReportBalanceSheet.class,
                "assets", assets,
                "createdAt", createdAt,
                "currency", currency,
                "endAt", endAt,
                "equity", equity,
                "id", id,
                "liabilities", liabilities,
                "name", name,
                "netAssetsAmount", netAssetsAmount,
                "raw", raw,
                "startAt", startAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AccountingBalancesheetItem>> assets = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<OffsetDateTime> endAt = Optional.empty();
 
        private Optional<? extends List<AccountingBalancesheetItem>> equity = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends List<AccountingBalancesheetItem>> liabilities = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<Double> netAssetsAmount = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<OffsetDateTime> startAt = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder assets(List<AccountingBalancesheetItem> assets) {
            Utils.checkNotNull(assets, "assets");
            this.assets = Optional.ofNullable(assets);
            return this;
        }

        public Builder assets(Optional<? extends List<AccountingBalancesheetItem>> assets) {
            Utils.checkNotNull(assets, "assets");
            this.assets = assets;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder endAt(OffsetDateTime endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Optional<OffsetDateTime> endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }

        public Builder equity(List<AccountingBalancesheetItem> equity) {
            Utils.checkNotNull(equity, "equity");
            this.equity = Optional.ofNullable(equity);
            return this;
        }

        public Builder equity(Optional<? extends List<AccountingBalancesheetItem>> equity) {
            Utils.checkNotNull(equity, "equity");
            this.equity = equity;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder liabilities(List<AccountingBalancesheetItem> liabilities) {
            Utils.checkNotNull(liabilities, "liabilities");
            this.liabilities = Optional.ofNullable(liabilities);
            return this;
        }

        public Builder liabilities(Optional<? extends List<AccountingBalancesheetItem>> liabilities) {
            Utils.checkNotNull(liabilities, "liabilities");
            this.liabilities = liabilities;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder netAssetsAmount(double netAssetsAmount) {
            Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
            this.netAssetsAmount = Optional.ofNullable(netAssetsAmount);
            return this;
        }

        public Builder netAssetsAmount(Optional<Double> netAssetsAmount) {
            Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
            this.netAssetsAmount = netAssetsAmount;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder startAt(OffsetDateTime startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Optional<OffsetDateTime> startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public PropertyAccountingReportBalanceSheet build() {
            return new PropertyAccountingReportBalanceSheet(
                assets,
                createdAt,
                currency,
                endAt,
                equity,
                id,
                liabilities,
                name,
                netAssetsAmount,
                raw,
                startAt,
                updatedAt);
        }
    }
}

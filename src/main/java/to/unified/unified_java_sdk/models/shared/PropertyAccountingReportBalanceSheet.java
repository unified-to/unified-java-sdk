/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class PropertyAccountingReportBalanceSheet {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assets")
    private Optional<? extends List<AccountingBalanceSheetItem>> assets;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("equity")
    private Optional<? extends List<AccountingBalanceSheetItem>> equity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liabilities")
    private Optional<? extends List<AccountingBalanceSheetItem>> liabilities;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_assets_amount")
    private Optional<Double> netAssetsAmount;

    @JsonCreator
    public PropertyAccountingReportBalanceSheet(
            @JsonProperty("assets") Optional<? extends List<AccountingBalanceSheetItem>> assets,
            @JsonProperty("equity") Optional<? extends List<AccountingBalanceSheetItem>> equity,
            @JsonProperty("liabilities") Optional<? extends List<AccountingBalanceSheetItem>> liabilities,
            @JsonProperty("net_assets_amount") Optional<Double> netAssetsAmount) {
        Utils.checkNotNull(assets, "assets");
        Utils.checkNotNull(equity, "equity");
        Utils.checkNotNull(liabilities, "liabilities");
        Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
        this.assets = assets;
        this.equity = equity;
        this.liabilities = liabilities;
        this.netAssetsAmount = netAssetsAmount;
    }
    
    public PropertyAccountingReportBalanceSheet() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingBalanceSheetItem>> assets() {
        return (Optional<List<AccountingBalanceSheetItem>>) assets;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingBalanceSheetItem>> equity() {
        return (Optional<List<AccountingBalanceSheetItem>>) equity;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingBalanceSheetItem>> liabilities() {
        return (Optional<List<AccountingBalanceSheetItem>>) liabilities;
    }

    @JsonIgnore
    public Optional<Double> netAssetsAmount() {
        return netAssetsAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PropertyAccountingReportBalanceSheet withAssets(List<AccountingBalanceSheetItem> assets) {
        Utils.checkNotNull(assets, "assets");
        this.assets = Optional.ofNullable(assets);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withAssets(Optional<? extends List<AccountingBalanceSheetItem>> assets) {
        Utils.checkNotNull(assets, "assets");
        this.assets = assets;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withEquity(List<AccountingBalanceSheetItem> equity) {
        Utils.checkNotNull(equity, "equity");
        this.equity = Optional.ofNullable(equity);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withEquity(Optional<? extends List<AccountingBalanceSheetItem>> equity) {
        Utils.checkNotNull(equity, "equity");
        this.equity = equity;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withLiabilities(List<AccountingBalanceSheetItem> liabilities) {
        Utils.checkNotNull(liabilities, "liabilities");
        this.liabilities = Optional.ofNullable(liabilities);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withLiabilities(Optional<? extends List<AccountingBalanceSheetItem>> liabilities) {
        Utils.checkNotNull(liabilities, "liabilities");
        this.liabilities = liabilities;
        return this;
    }

    public PropertyAccountingReportBalanceSheet withNetAssetsAmount(double netAssetsAmount) {
        Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
        this.netAssetsAmount = Optional.ofNullable(netAssetsAmount);
        return this;
    }

    public PropertyAccountingReportBalanceSheet withNetAssetsAmount(Optional<Double> netAssetsAmount) {
        Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
        this.netAssetsAmount = netAssetsAmount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyAccountingReportBalanceSheet other = (PropertyAccountingReportBalanceSheet) o;
        return 
            Utils.enhancedDeepEquals(this.assets, other.assets) &&
            Utils.enhancedDeepEquals(this.equity, other.equity) &&
            Utils.enhancedDeepEquals(this.liabilities, other.liabilities) &&
            Utils.enhancedDeepEquals(this.netAssetsAmount, other.netAssetsAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            assets,
            equity,
            liabilities,
            netAssetsAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyAccountingReportBalanceSheet.class,
                "assets", assets,
                "equity", equity,
                "liabilities", liabilities,
                "netAssetsAmount", netAssetsAmount);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AccountingBalanceSheetItem>> assets = Optional.empty();
 
        private Optional<? extends List<AccountingBalanceSheetItem>> equity = Optional.empty();
 
        private Optional<? extends List<AccountingBalanceSheetItem>> liabilities = Optional.empty();
 
        private Optional<Double> netAssetsAmount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder assets(List<AccountingBalanceSheetItem> assets) {
            Utils.checkNotNull(assets, "assets");
            this.assets = Optional.ofNullable(assets);
            return this;
        }

        public Builder assets(Optional<? extends List<AccountingBalanceSheetItem>> assets) {
            Utils.checkNotNull(assets, "assets");
            this.assets = assets;
            return this;
        }

        public Builder equity(List<AccountingBalanceSheetItem> equity) {
            Utils.checkNotNull(equity, "equity");
            this.equity = Optional.ofNullable(equity);
            return this;
        }

        public Builder equity(Optional<? extends List<AccountingBalanceSheetItem>> equity) {
            Utils.checkNotNull(equity, "equity");
            this.equity = equity;
            return this;
        }

        public Builder liabilities(List<AccountingBalanceSheetItem> liabilities) {
            Utils.checkNotNull(liabilities, "liabilities");
            this.liabilities = Optional.ofNullable(liabilities);
            return this;
        }

        public Builder liabilities(Optional<? extends List<AccountingBalanceSheetItem>> liabilities) {
            Utils.checkNotNull(liabilities, "liabilities");
            this.liabilities = liabilities;
            return this;
        }

        public Builder netAssetsAmount(double netAssetsAmount) {
            Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
            this.netAssetsAmount = Optional.ofNullable(netAssetsAmount);
            return this;
        }

        public Builder netAssetsAmount(Optional<Double> netAssetsAmount) {
            Utils.checkNotNull(netAssetsAmount, "netAssetsAmount");
            this.netAssetsAmount = netAssetsAmount;
            return this;
        }
        
        public PropertyAccountingReportBalanceSheet build() {
            return new PropertyAccountingReportBalanceSheet(
                assets,
                equity,
                liabilities,
                netAssetsAmount);
        }
    }
}

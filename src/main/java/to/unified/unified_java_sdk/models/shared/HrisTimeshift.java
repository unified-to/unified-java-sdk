/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class HrisTimeshift {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approved_at")
    private Optional<OffsetDateTime> approvedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approver_user_id")
    private Optional<String> approverUserId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private Optional<String> companyId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensation")
    private Optional<? extends List<HrisCompensation>> compensation;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonProperty("employee_user_id")
    private String employeeUserId;


    @JsonProperty("end_at")
    private OffsetDateTime endAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_id")
    private Optional<String> groupId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hours")
    private Optional<Double> hours;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_approved")
    private Optional<Boolean> isApproved;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private Optional<String> locationId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonProperty("start_at")
    private OffsetDateTime startAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public HrisTimeshift(
            @JsonProperty("approved_at") Optional<OffsetDateTime> approvedAt,
            @JsonProperty("approver_user_id") Optional<String> approverUserId,
            @JsonProperty("company_id") Optional<String> companyId,
            @JsonProperty("compensation") Optional<? extends List<HrisCompensation>> compensation,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("employee_user_id") String employeeUserId,
            @JsonProperty("end_at") OffsetDateTime endAt,
            @JsonProperty("group_id") Optional<String> groupId,
            @JsonProperty("hours") Optional<Double> hours,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_approved") Optional<Boolean> isApproved,
            @JsonProperty("location_id") Optional<String> locationId,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("start_at") OffsetDateTime startAt,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        Utils.checkNotNull(approverUserId, "approverUserId");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(compensation, "compensation");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(employeeUserId, "employeeUserId");
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(groupId, "groupId");
        Utils.checkNotNull(hours, "hours");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isApproved, "isApproved");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(startAt, "startAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.approvedAt = approvedAt;
        this.approverUserId = approverUserId;
        this.companyId = companyId;
        this.compensation = compensation;
        this.createdAt = createdAt;
        this.employeeUserId = employeeUserId;
        this.endAt = endAt;
        this.groupId = groupId;
        this.hours = hours;
        this.id = id;
        this.isApproved = isApproved;
        this.locationId = locationId;
        this.raw = raw;
        this.startAt = startAt;
        this.updatedAt = updatedAt;
    }
    
    public HrisTimeshift(
            String employeeUserId,
            OffsetDateTime endAt,
            OffsetDateTime startAt) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), employeeUserId,
            endAt, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), startAt, Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> approvedAt() {
        return approvedAt;
    }

    @JsonIgnore
    public Optional<String> approverUserId() {
        return approverUserId;
    }

    @JsonIgnore
    public Optional<String> companyId() {
        return companyId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<HrisCompensation>> compensation() {
        return (Optional<List<HrisCompensation>>) compensation;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String employeeUserId() {
        return employeeUserId;
    }

    @JsonIgnore
    public OffsetDateTime endAt() {
        return endAt;
    }

    @JsonIgnore
    public Optional<String> groupId() {
        return groupId;
    }

    @JsonIgnore
    public Optional<Double> hours() {
        return hours;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isApproved() {
        return isApproved;
    }

    @JsonIgnore
    public Optional<String> locationId() {
        return locationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public OffsetDateTime startAt() {
        return startAt;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public HrisTimeshift withApprovedAt(OffsetDateTime approvedAt) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        this.approvedAt = Optional.ofNullable(approvedAt);
        return this;
    }


    public HrisTimeshift withApprovedAt(Optional<OffsetDateTime> approvedAt) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        this.approvedAt = approvedAt;
        return this;
    }

    public HrisTimeshift withApproverUserId(String approverUserId) {
        Utils.checkNotNull(approverUserId, "approverUserId");
        this.approverUserId = Optional.ofNullable(approverUserId);
        return this;
    }


    public HrisTimeshift withApproverUserId(Optional<String> approverUserId) {
        Utils.checkNotNull(approverUserId, "approverUserId");
        this.approverUserId = approverUserId;
        return this;
    }

    public HrisTimeshift withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = Optional.ofNullable(companyId);
        return this;
    }


    public HrisTimeshift withCompanyId(Optional<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    public HrisTimeshift withCompensation(List<HrisCompensation> compensation) {
        Utils.checkNotNull(compensation, "compensation");
        this.compensation = Optional.ofNullable(compensation);
        return this;
    }


    public HrisTimeshift withCompensation(Optional<? extends List<HrisCompensation>> compensation) {
        Utils.checkNotNull(compensation, "compensation");
        this.compensation = compensation;
        return this;
    }

    public HrisTimeshift withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public HrisTimeshift withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public HrisTimeshift withEmployeeUserId(String employeeUserId) {
        Utils.checkNotNull(employeeUserId, "employeeUserId");
        this.employeeUserId = employeeUserId;
        return this;
    }

    public HrisTimeshift withEndAt(OffsetDateTime endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    public HrisTimeshift withGroupId(String groupId) {
        Utils.checkNotNull(groupId, "groupId");
        this.groupId = Optional.ofNullable(groupId);
        return this;
    }


    public HrisTimeshift withGroupId(Optional<String> groupId) {
        Utils.checkNotNull(groupId, "groupId");
        this.groupId = groupId;
        return this;
    }

    public HrisTimeshift withHours(double hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = Optional.ofNullable(hours);
        return this;
    }


    public HrisTimeshift withHours(Optional<Double> hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = hours;
        return this;
    }

    public HrisTimeshift withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public HrisTimeshift withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public HrisTimeshift withIsApproved(boolean isApproved) {
        Utils.checkNotNull(isApproved, "isApproved");
        this.isApproved = Optional.ofNullable(isApproved);
        return this;
    }


    public HrisTimeshift withIsApproved(Optional<Boolean> isApproved) {
        Utils.checkNotNull(isApproved, "isApproved");
        this.isApproved = isApproved;
        return this;
    }

    public HrisTimeshift withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = Optional.ofNullable(locationId);
        return this;
    }


    public HrisTimeshift withLocationId(Optional<String> locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    public HrisTimeshift withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public HrisTimeshift withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public HrisTimeshift withStartAt(OffsetDateTime startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }

    public HrisTimeshift withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public HrisTimeshift withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisTimeshift other = (HrisTimeshift) o;
        return 
            Utils.enhancedDeepEquals(this.approvedAt, other.approvedAt) &&
            Utils.enhancedDeepEquals(this.approverUserId, other.approverUserId) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.compensation, other.compensation) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.employeeUserId, other.employeeUserId) &&
            Utils.enhancedDeepEquals(this.endAt, other.endAt) &&
            Utils.enhancedDeepEquals(this.groupId, other.groupId) &&
            Utils.enhancedDeepEquals(this.hours, other.hours) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.isApproved, other.isApproved) &&
            Utils.enhancedDeepEquals(this.locationId, other.locationId) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.startAt, other.startAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            approvedAt, approverUserId, companyId,
            compensation, createdAt, employeeUserId,
            endAt, groupId, hours,
            id, isApproved, locationId,
            raw, startAt, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisTimeshift.class,
                "approvedAt", approvedAt,
                "approverUserId", approverUserId,
                "companyId", companyId,
                "compensation", compensation,
                "createdAt", createdAt,
                "employeeUserId", employeeUserId,
                "endAt", endAt,
                "groupId", groupId,
                "hours", hours,
                "id", id,
                "isApproved", isApproved,
                "locationId", locationId,
                "raw", raw,
                "startAt", startAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<OffsetDateTime> approvedAt = Optional.empty();

        private Optional<String> approverUserId = Optional.empty();

        private Optional<String> companyId = Optional.empty();

        private Optional<? extends List<HrisCompensation>> compensation = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private String employeeUserId;

        private OffsetDateTime endAt;

        private Optional<String> groupId = Optional.empty();

        private Optional<Double> hours = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<Boolean> isApproved = Optional.empty();

        private Optional<String> locationId = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private OffsetDateTime startAt;

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder approvedAt(OffsetDateTime approvedAt) {
            Utils.checkNotNull(approvedAt, "approvedAt");
            this.approvedAt = Optional.ofNullable(approvedAt);
            return this;
        }

        public Builder approvedAt(Optional<OffsetDateTime> approvedAt) {
            Utils.checkNotNull(approvedAt, "approvedAt");
            this.approvedAt = approvedAt;
            return this;
        }


        public Builder approverUserId(String approverUserId) {
            Utils.checkNotNull(approverUserId, "approverUserId");
            this.approverUserId = Optional.ofNullable(approverUserId);
            return this;
        }

        public Builder approverUserId(Optional<String> approverUserId) {
            Utils.checkNotNull(approverUserId, "approverUserId");
            this.approverUserId = approverUserId;
            return this;
        }


        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        public Builder companyId(Optional<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        public Builder compensation(List<HrisCompensation> compensation) {
            Utils.checkNotNull(compensation, "compensation");
            this.compensation = Optional.ofNullable(compensation);
            return this;
        }

        public Builder compensation(Optional<? extends List<HrisCompensation>> compensation) {
            Utils.checkNotNull(compensation, "compensation");
            this.compensation = compensation;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder employeeUserId(String employeeUserId) {
            Utils.checkNotNull(employeeUserId, "employeeUserId");
            this.employeeUserId = employeeUserId;
            return this;
        }


        public Builder endAt(OffsetDateTime endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }


        public Builder groupId(String groupId) {
            Utils.checkNotNull(groupId, "groupId");
            this.groupId = Optional.ofNullable(groupId);
            return this;
        }

        public Builder groupId(Optional<String> groupId) {
            Utils.checkNotNull(groupId, "groupId");
            this.groupId = groupId;
            return this;
        }


        public Builder hours(double hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = Optional.ofNullable(hours);
            return this;
        }

        public Builder hours(Optional<Double> hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = hours;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder isApproved(boolean isApproved) {
            Utils.checkNotNull(isApproved, "isApproved");
            this.isApproved = Optional.ofNullable(isApproved);
            return this;
        }

        public Builder isApproved(Optional<Boolean> isApproved) {
            Utils.checkNotNull(isApproved, "isApproved");
            this.isApproved = isApproved;
            return this;
        }


        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Optional<String> locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder startAt(OffsetDateTime startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public HrisTimeshift build() {

            return new HrisTimeshift(
                approvedAt, approverUserId, companyId,
                compensation, createdAt, employeeUserId,
                endAt, groupId, hours,
                id, isApproved, locationId,
                raw, startAt, updatedAt);
        }

    }
}

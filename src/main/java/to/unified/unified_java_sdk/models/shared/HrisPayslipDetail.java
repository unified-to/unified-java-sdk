/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class HrisPayslipDetail {

    @JsonProperty("amount")
    private double amount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_amount")
    private Optional<Double> companyAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_amount")
    private Optional<Double> employeeAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends HrisPayslipDetailType> type;

    @JsonCreator
    public HrisPayslipDetail(
            @JsonProperty("amount") double amount,
            @JsonProperty("company_amount") Optional<Double> companyAmount,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("employee_amount") Optional<Double> employeeAmount,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("type") Optional<? extends HrisPayslipDetailType> type) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(companyAmount, "companyAmount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(employeeAmount, "employeeAmount");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        this.amount = amount;
        this.companyAmount = companyAmount;
        this.description = description;
        this.employeeAmount = employeeAmount;
        this.name = name;
        this.type = type;
    }
    
    public HrisPayslipDetail(
            double amount) {
        this(amount, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public double amount() {
        return amount;
    }

    @JsonIgnore
    public Optional<Double> companyAmount() {
        return companyAmount;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<Double> employeeAmount() {
        return employeeAmount;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HrisPayslipDetailType> type() {
        return (Optional<HrisPayslipDetailType>) type;
    }

    public static Builder builder() {
        return new Builder();
    }


    public HrisPayslipDetail withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public HrisPayslipDetail withCompanyAmount(double companyAmount) {
        Utils.checkNotNull(companyAmount, "companyAmount");
        this.companyAmount = Optional.ofNullable(companyAmount);
        return this;
    }


    public HrisPayslipDetail withCompanyAmount(Optional<Double> companyAmount) {
        Utils.checkNotNull(companyAmount, "companyAmount");
        this.companyAmount = companyAmount;
        return this;
    }

    public HrisPayslipDetail withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    public HrisPayslipDetail withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public HrisPayslipDetail withEmployeeAmount(double employeeAmount) {
        Utils.checkNotNull(employeeAmount, "employeeAmount");
        this.employeeAmount = Optional.ofNullable(employeeAmount);
        return this;
    }


    public HrisPayslipDetail withEmployeeAmount(Optional<Double> employeeAmount) {
        Utils.checkNotNull(employeeAmount, "employeeAmount");
        this.employeeAmount = employeeAmount;
        return this;
    }

    public HrisPayslipDetail withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public HrisPayslipDetail withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public HrisPayslipDetail withType(HrisPayslipDetailType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public HrisPayslipDetail withType(Optional<? extends HrisPayslipDetailType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisPayslipDetail other = (HrisPayslipDetail) o;
        return 
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.companyAmount, other.companyAmount) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.employeeAmount, other.employeeAmount) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            amount, companyAmount, description,
            employeeAmount, name, type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisPayslipDetail.class,
                "amount", amount,
                "companyAmount", companyAmount,
                "description", description,
                "employeeAmount", employeeAmount,
                "name", name,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Double amount;

        private Optional<Double> companyAmount = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<Double> employeeAmount = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends HrisPayslipDetailType> type = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        public Builder companyAmount(double companyAmount) {
            Utils.checkNotNull(companyAmount, "companyAmount");
            this.companyAmount = Optional.ofNullable(companyAmount);
            return this;
        }

        public Builder companyAmount(Optional<Double> companyAmount) {
            Utils.checkNotNull(companyAmount, "companyAmount");
            this.companyAmount = companyAmount;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder employeeAmount(double employeeAmount) {
            Utils.checkNotNull(employeeAmount, "employeeAmount");
            this.employeeAmount = Optional.ofNullable(employeeAmount);
            return this;
        }

        public Builder employeeAmount(Optional<Double> employeeAmount) {
            Utils.checkNotNull(employeeAmount, "employeeAmount");
            this.employeeAmount = employeeAmount;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder type(HrisPayslipDetailType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends HrisPayslipDetailType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public HrisPayslipDetail build() {

            return new HrisPayslipDetail(
                amount, companyAmount, description,
                employeeAmount, name, type);
        }

    }
}

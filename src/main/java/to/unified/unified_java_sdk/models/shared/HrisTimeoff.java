/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class HrisTimeoff {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approved_at")
    private Optional<OffsetDateTime> approvedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approver_user_id")
    private Optional<String> approverUserId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    private Optional<String> comments;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_id")
    private Optional<String> companyId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    private Optional<OffsetDateTime> endAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_paid")
    private Optional<Boolean> isPaid;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private Optional<String> reason;


    @JsonProperty("start_at")
    private OffsetDateTime startAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends HrisTimeoffStatus> status;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    @JsonCreator
    public HrisTimeoff(
            @JsonProperty("approved_at") Optional<OffsetDateTime> approvedAt,
            @JsonProperty("approver_user_id") Optional<String> approverUserId,
            @JsonProperty("comments") Optional<String> comments,
            @JsonProperty("company_id") Optional<String> companyId,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("end_at") Optional<OffsetDateTime> endAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_paid") Optional<Boolean> isPaid,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("reason") Optional<String> reason,
            @JsonProperty("start_at") OffsetDateTime startAt,
            @JsonProperty("status") Optional<? extends HrisTimeoffStatus> status,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("user_id") Optional<String> userId) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        Utils.checkNotNull(approverUserId, "approverUserId");
        Utils.checkNotNull(comments, "comments");
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isPaid, "isPaid");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(startAt, "startAt");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userId, "userId");
        this.approvedAt = approvedAt;
        this.approverUserId = approverUserId;
        this.comments = comments;
        this.companyId = companyId;
        this.createdAt = createdAt;
        this.endAt = endAt;
        this.id = id;
        this.isPaid = isPaid;
        this.raw = raw;
        this.reason = reason;
        this.startAt = startAt;
        this.status = status;
        this.updatedAt = updatedAt;
        this.userId = userId;
    }
    
    public HrisTimeoff(
            OffsetDateTime startAt) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), startAt, Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> approvedAt() {
        return approvedAt;
    }

    @JsonIgnore
    public Optional<String> approverUserId() {
        return approverUserId;
    }

    @JsonIgnore
    public Optional<String> comments() {
        return comments;
    }

    @JsonIgnore
    public Optional<String> companyId() {
        return companyId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endAt() {
        return endAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isPaid() {
        return isPaid;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<String> reason() {
        return reason;
    }

    @JsonIgnore
    public OffsetDateTime startAt() {
        return startAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<HrisTimeoffStatus> status() {
        return (Optional<HrisTimeoffStatus>) status;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public HrisTimeoff withApprovedAt(OffsetDateTime approvedAt) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        this.approvedAt = Optional.ofNullable(approvedAt);
        return this;
    }


    public HrisTimeoff withApprovedAt(Optional<OffsetDateTime> approvedAt) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        this.approvedAt = approvedAt;
        return this;
    }

    public HrisTimeoff withApproverUserId(String approverUserId) {
        Utils.checkNotNull(approverUserId, "approverUserId");
        this.approverUserId = Optional.ofNullable(approverUserId);
        return this;
    }


    public HrisTimeoff withApproverUserId(Optional<String> approverUserId) {
        Utils.checkNotNull(approverUserId, "approverUserId");
        this.approverUserId = approverUserId;
        return this;
    }

    public HrisTimeoff withComments(String comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = Optional.ofNullable(comments);
        return this;
    }


    public HrisTimeoff withComments(Optional<String> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = comments;
        return this;
    }

    public HrisTimeoff withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = Optional.ofNullable(companyId);
        return this;
    }


    public HrisTimeoff withCompanyId(Optional<String> companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    public HrisTimeoff withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public HrisTimeoff withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public HrisTimeoff withEndAt(OffsetDateTime endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = Optional.ofNullable(endAt);
        return this;
    }


    public HrisTimeoff withEndAt(Optional<OffsetDateTime> endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    public HrisTimeoff withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public HrisTimeoff withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public HrisTimeoff withIsPaid(boolean isPaid) {
        Utils.checkNotNull(isPaid, "isPaid");
        this.isPaid = Optional.ofNullable(isPaid);
        return this;
    }


    public HrisTimeoff withIsPaid(Optional<Boolean> isPaid) {
        Utils.checkNotNull(isPaid, "isPaid");
        this.isPaid = isPaid;
        return this;
    }

    public HrisTimeoff withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public HrisTimeoff withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public HrisTimeoff withReason(String reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = Optional.ofNullable(reason);
        return this;
    }


    public HrisTimeoff withReason(Optional<String> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    public HrisTimeoff withStartAt(OffsetDateTime startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }

    public HrisTimeoff withStatus(HrisTimeoffStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }


    public HrisTimeoff withStatus(Optional<? extends HrisTimeoffStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public HrisTimeoff withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public HrisTimeoff withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public HrisTimeoff withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }


    public HrisTimeoff withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisTimeoff other = (HrisTimeoff) o;
        return 
            Utils.enhancedDeepEquals(this.approvedAt, other.approvedAt) &&
            Utils.enhancedDeepEquals(this.approverUserId, other.approverUserId) &&
            Utils.enhancedDeepEquals(this.comments, other.comments) &&
            Utils.enhancedDeepEquals(this.companyId, other.companyId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.endAt, other.endAt) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.isPaid, other.isPaid) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.reason, other.reason) &&
            Utils.enhancedDeepEquals(this.startAt, other.startAt) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            approvedAt, approverUserId, comments,
            companyId, createdAt, endAt,
            id, isPaid, raw,
            reason, startAt, status,
            updatedAt, userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisTimeoff.class,
                "approvedAt", approvedAt,
                "approverUserId", approverUserId,
                "comments", comments,
                "companyId", companyId,
                "createdAt", createdAt,
                "endAt", endAt,
                "id", id,
                "isPaid", isPaid,
                "raw", raw,
                "reason", reason,
                "startAt", startAt,
                "status", status,
                "updatedAt", updatedAt,
                "userId", userId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<OffsetDateTime> approvedAt = Optional.empty();

        private Optional<String> approverUserId = Optional.empty();

        private Optional<String> comments = Optional.empty();

        private Optional<String> companyId = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<OffsetDateTime> endAt = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<Boolean> isPaid = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<String> reason = Optional.empty();

        private OffsetDateTime startAt;

        private Optional<? extends HrisTimeoffStatus> status = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder approvedAt(OffsetDateTime approvedAt) {
            Utils.checkNotNull(approvedAt, "approvedAt");
            this.approvedAt = Optional.ofNullable(approvedAt);
            return this;
        }

        public Builder approvedAt(Optional<OffsetDateTime> approvedAt) {
            Utils.checkNotNull(approvedAt, "approvedAt");
            this.approvedAt = approvedAt;
            return this;
        }


        public Builder approverUserId(String approverUserId) {
            Utils.checkNotNull(approverUserId, "approverUserId");
            this.approverUserId = Optional.ofNullable(approverUserId);
            return this;
        }

        public Builder approverUserId(Optional<String> approverUserId) {
            Utils.checkNotNull(approverUserId, "approverUserId");
            this.approverUserId = approverUserId;
            return this;
        }


        public Builder comments(String comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        public Builder comments(Optional<String> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = comments;
            return this;
        }


        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = Optional.ofNullable(companyId);
            return this;
        }

        public Builder companyId(Optional<String> companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder endAt(OffsetDateTime endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Optional<OffsetDateTime> endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder isPaid(boolean isPaid) {
            Utils.checkNotNull(isPaid, "isPaid");
            this.isPaid = Optional.ofNullable(isPaid);
            return this;
        }

        public Builder isPaid(Optional<Boolean> isPaid) {
            Utils.checkNotNull(isPaid, "isPaid");
            this.isPaid = isPaid;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder reason(String reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        public Builder reason(Optional<String> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }


        public Builder startAt(OffsetDateTime startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }


        public Builder status(HrisTimeoffStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends HrisTimeoffStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public HrisTimeoff build() {

            return new HrisTimeoff(
                approvedAt, approverUserId, comments,
                companyId, createdAt, endAt,
                id, isPaid, raw,
                reason, startAt, status,
                updatedAt, userId);
        }

    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class HrisDevice {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("admin_user_ids")
    private Optional<? extends List<String>> adminUserIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("asset_tag")
    private Optional<String> assetTag;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_antivirus")
    private Optional<Boolean> hasAntivirus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_firewall")
    private Optional<Boolean> hasFirewall;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_hd_encrypted")
    private Optional<Boolean> hasHdEncrypted;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_password_manager")
    private Optional<Boolean> hasPasswordManager;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_screenlock")
    private Optional<Boolean> hasScreenlock;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_missing")
    private Optional<Boolean> isMissing;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private Optional<String> locationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manufacturer")
    private Optional<String> manufacturer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model")
    private Optional<String> model;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("os")
    private Optional<String> os;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("os_version")
    private Optional<String> osVersion;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    /**
     * users who have this device
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_ids")
    private Optional<? extends List<String>> userIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    @JsonCreator
    public HrisDevice(
            @JsonProperty("admin_user_ids") Optional<? extends List<String>> adminUserIds,
            @JsonProperty("asset_tag") Optional<String> assetTag,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("has_antivirus") Optional<Boolean> hasAntivirus,
            @JsonProperty("has_firewall") Optional<Boolean> hasFirewall,
            @JsonProperty("has_hd_encrypted") Optional<Boolean> hasHdEncrypted,
            @JsonProperty("has_password_manager") Optional<Boolean> hasPasswordManager,
            @JsonProperty("has_screenlock") Optional<Boolean> hasScreenlock,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_missing") Optional<Boolean> isMissing,
            @JsonProperty("location_id") Optional<String> locationId,
            @JsonProperty("manufacturer") Optional<String> manufacturer,
            @JsonProperty("model") Optional<String> model,
            @JsonProperty("name") String name,
            @JsonProperty("os") Optional<String> os,
            @JsonProperty("os_version") Optional<String> osVersion,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("user_ids") Optional<? extends List<String>> userIds,
            @JsonProperty("version") Optional<String> version) {
        Utils.checkNotNull(adminUserIds, "adminUserIds");
        Utils.checkNotNull(assetTag, "assetTag");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(hasAntivirus, "hasAntivirus");
        Utils.checkNotNull(hasFirewall, "hasFirewall");
        Utils.checkNotNull(hasHdEncrypted, "hasHdEncrypted");
        Utils.checkNotNull(hasPasswordManager, "hasPasswordManager");
        Utils.checkNotNull(hasScreenlock, "hasScreenlock");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isMissing, "isMissing");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(manufacturer, "manufacturer");
        Utils.checkNotNull(model, "model");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(os, "os");
        Utils.checkNotNull(osVersion, "osVersion");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userIds, "userIds");
        Utils.checkNotNull(version, "version");
        this.adminUserIds = adminUserIds;
        this.assetTag = assetTag;
        this.createdAt = createdAt;
        this.hasAntivirus = hasAntivirus;
        this.hasFirewall = hasFirewall;
        this.hasHdEncrypted = hasHdEncrypted;
        this.hasPasswordManager = hasPasswordManager;
        this.hasScreenlock = hasScreenlock;
        this.id = id;
        this.isMissing = isMissing;
        this.locationId = locationId;
        this.manufacturer = manufacturer;
        this.model = model;
        this.name = name;
        this.os = os;
        this.osVersion = osVersion;
        this.raw = raw;
        this.updatedAt = updatedAt;
        this.userIds = userIds;
        this.version = version;
    }
    
    public HrisDevice(
            String name) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> adminUserIds() {
        return (Optional<List<String>>) adminUserIds;
    }

    @JsonIgnore
    public Optional<String> assetTag() {
        return assetTag;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<Boolean> hasAntivirus() {
        return hasAntivirus;
    }

    @JsonIgnore
    public Optional<Boolean> hasFirewall() {
        return hasFirewall;
    }

    @JsonIgnore
    public Optional<Boolean> hasHdEncrypted() {
        return hasHdEncrypted;
    }

    @JsonIgnore
    public Optional<Boolean> hasPasswordManager() {
        return hasPasswordManager;
    }

    @JsonIgnore
    public Optional<Boolean> hasScreenlock() {
        return hasScreenlock;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isMissing() {
        return isMissing;
    }

    @JsonIgnore
    public Optional<String> locationId() {
        return locationId;
    }

    @JsonIgnore
    public Optional<String> manufacturer() {
        return manufacturer;
    }

    @JsonIgnore
    public Optional<String> model() {
        return model;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> os() {
        return os;
    }

    @JsonIgnore
    public Optional<String> osVersion() {
        return osVersion;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * users who have this device
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> userIds() {
        return (Optional<List<String>>) userIds;
    }

    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public HrisDevice withAdminUserIds(List<String> adminUserIds) {
        Utils.checkNotNull(adminUserIds, "adminUserIds");
        this.adminUserIds = Optional.ofNullable(adminUserIds);
        return this;
    }

    public HrisDevice withAdminUserIds(Optional<? extends List<String>> adminUserIds) {
        Utils.checkNotNull(adminUserIds, "adminUserIds");
        this.adminUserIds = adminUserIds;
        return this;
    }

    public HrisDevice withAssetTag(String assetTag) {
        Utils.checkNotNull(assetTag, "assetTag");
        this.assetTag = Optional.ofNullable(assetTag);
        return this;
    }

    public HrisDevice withAssetTag(Optional<String> assetTag) {
        Utils.checkNotNull(assetTag, "assetTag");
        this.assetTag = assetTag;
        return this;
    }

    public HrisDevice withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public HrisDevice withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public HrisDevice withHasAntivirus(boolean hasAntivirus) {
        Utils.checkNotNull(hasAntivirus, "hasAntivirus");
        this.hasAntivirus = Optional.ofNullable(hasAntivirus);
        return this;
    }

    public HrisDevice withHasAntivirus(Optional<Boolean> hasAntivirus) {
        Utils.checkNotNull(hasAntivirus, "hasAntivirus");
        this.hasAntivirus = hasAntivirus;
        return this;
    }

    public HrisDevice withHasFirewall(boolean hasFirewall) {
        Utils.checkNotNull(hasFirewall, "hasFirewall");
        this.hasFirewall = Optional.ofNullable(hasFirewall);
        return this;
    }

    public HrisDevice withHasFirewall(Optional<Boolean> hasFirewall) {
        Utils.checkNotNull(hasFirewall, "hasFirewall");
        this.hasFirewall = hasFirewall;
        return this;
    }

    public HrisDevice withHasHdEncrypted(boolean hasHdEncrypted) {
        Utils.checkNotNull(hasHdEncrypted, "hasHdEncrypted");
        this.hasHdEncrypted = Optional.ofNullable(hasHdEncrypted);
        return this;
    }

    public HrisDevice withHasHdEncrypted(Optional<Boolean> hasHdEncrypted) {
        Utils.checkNotNull(hasHdEncrypted, "hasHdEncrypted");
        this.hasHdEncrypted = hasHdEncrypted;
        return this;
    }

    public HrisDevice withHasPasswordManager(boolean hasPasswordManager) {
        Utils.checkNotNull(hasPasswordManager, "hasPasswordManager");
        this.hasPasswordManager = Optional.ofNullable(hasPasswordManager);
        return this;
    }

    public HrisDevice withHasPasswordManager(Optional<Boolean> hasPasswordManager) {
        Utils.checkNotNull(hasPasswordManager, "hasPasswordManager");
        this.hasPasswordManager = hasPasswordManager;
        return this;
    }

    public HrisDevice withHasScreenlock(boolean hasScreenlock) {
        Utils.checkNotNull(hasScreenlock, "hasScreenlock");
        this.hasScreenlock = Optional.ofNullable(hasScreenlock);
        return this;
    }

    public HrisDevice withHasScreenlock(Optional<Boolean> hasScreenlock) {
        Utils.checkNotNull(hasScreenlock, "hasScreenlock");
        this.hasScreenlock = hasScreenlock;
        return this;
    }

    public HrisDevice withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public HrisDevice withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public HrisDevice withIsMissing(boolean isMissing) {
        Utils.checkNotNull(isMissing, "isMissing");
        this.isMissing = Optional.ofNullable(isMissing);
        return this;
    }

    public HrisDevice withIsMissing(Optional<Boolean> isMissing) {
        Utils.checkNotNull(isMissing, "isMissing");
        this.isMissing = isMissing;
        return this;
    }

    public HrisDevice withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = Optional.ofNullable(locationId);
        return this;
    }

    public HrisDevice withLocationId(Optional<String> locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    public HrisDevice withManufacturer(String manufacturer) {
        Utils.checkNotNull(manufacturer, "manufacturer");
        this.manufacturer = Optional.ofNullable(manufacturer);
        return this;
    }

    public HrisDevice withManufacturer(Optional<String> manufacturer) {
        Utils.checkNotNull(manufacturer, "manufacturer");
        this.manufacturer = manufacturer;
        return this;
    }

    public HrisDevice withModel(String model) {
        Utils.checkNotNull(model, "model");
        this.model = Optional.ofNullable(model);
        return this;
    }

    public HrisDevice withModel(Optional<String> model) {
        Utils.checkNotNull(model, "model");
        this.model = model;
        return this;
    }

    public HrisDevice withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public HrisDevice withOs(String os) {
        Utils.checkNotNull(os, "os");
        this.os = Optional.ofNullable(os);
        return this;
    }

    public HrisDevice withOs(Optional<String> os) {
        Utils.checkNotNull(os, "os");
        this.os = os;
        return this;
    }

    public HrisDevice withOsVersion(String osVersion) {
        Utils.checkNotNull(osVersion, "osVersion");
        this.osVersion = Optional.ofNullable(osVersion);
        return this;
    }

    public HrisDevice withOsVersion(Optional<String> osVersion) {
        Utils.checkNotNull(osVersion, "osVersion");
        this.osVersion = osVersion;
        return this;
    }

    public HrisDevice withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public HrisDevice withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public HrisDevice withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public HrisDevice withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * users who have this device
     */
    public HrisDevice withUserIds(List<String> userIds) {
        Utils.checkNotNull(userIds, "userIds");
        this.userIds = Optional.ofNullable(userIds);
        return this;
    }

    /**
     * users who have this device
     */
    public HrisDevice withUserIds(Optional<? extends List<String>> userIds) {
        Utils.checkNotNull(userIds, "userIds");
        this.userIds = userIds;
        return this;
    }

    public HrisDevice withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    public HrisDevice withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HrisDevice other = (HrisDevice) o;
        return 
            Utils.enhancedDeepEquals(this.adminUserIds, other.adminUserIds) &&
            Utils.enhancedDeepEquals(this.assetTag, other.assetTag) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.hasAntivirus, other.hasAntivirus) &&
            Utils.enhancedDeepEquals(this.hasFirewall, other.hasFirewall) &&
            Utils.enhancedDeepEquals(this.hasHdEncrypted, other.hasHdEncrypted) &&
            Utils.enhancedDeepEquals(this.hasPasswordManager, other.hasPasswordManager) &&
            Utils.enhancedDeepEquals(this.hasScreenlock, other.hasScreenlock) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.isMissing, other.isMissing) &&
            Utils.enhancedDeepEquals(this.locationId, other.locationId) &&
            Utils.enhancedDeepEquals(this.manufacturer, other.manufacturer) &&
            Utils.enhancedDeepEquals(this.model, other.model) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.os, other.os) &&
            Utils.enhancedDeepEquals(this.osVersion, other.osVersion) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.userIds, other.userIds) &&
            Utils.enhancedDeepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            adminUserIds,
            assetTag,
            createdAt,
            hasAntivirus,
            hasFirewall,
            hasHdEncrypted,
            hasPasswordManager,
            hasScreenlock,
            id,
            isMissing,
            locationId,
            manufacturer,
            model,
            name,
            os,
            osVersion,
            raw,
            updatedAt,
            userIds,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HrisDevice.class,
                "adminUserIds", adminUserIds,
                "assetTag", assetTag,
                "createdAt", createdAt,
                "hasAntivirus", hasAntivirus,
                "hasFirewall", hasFirewall,
                "hasHdEncrypted", hasHdEncrypted,
                "hasPasswordManager", hasPasswordManager,
                "hasScreenlock", hasScreenlock,
                "id", id,
                "isMissing", isMissing,
                "locationId", locationId,
                "manufacturer", manufacturer,
                "model", model,
                "name", name,
                "os", os,
                "osVersion", osVersion,
                "raw", raw,
                "updatedAt", updatedAt,
                "userIds", userIds,
                "version", version);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> adminUserIds = Optional.empty();
 
        private Optional<String> assetTag = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<Boolean> hasAntivirus = Optional.empty();
 
        private Optional<Boolean> hasFirewall = Optional.empty();
 
        private Optional<Boolean> hasHdEncrypted = Optional.empty();
 
        private Optional<Boolean> hasPasswordManager = Optional.empty();
 
        private Optional<Boolean> hasScreenlock = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Boolean> isMissing = Optional.empty();
 
        private Optional<String> locationId = Optional.empty();
 
        private Optional<String> manufacturer = Optional.empty();
 
        private Optional<String> model = Optional.empty();
 
        private String name;
 
        private Optional<String> os = Optional.empty();
 
        private Optional<String> osVersion = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<? extends List<String>> userIds = Optional.empty();
 
        private Optional<String> version = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder adminUserIds(List<String> adminUserIds) {
            Utils.checkNotNull(adminUserIds, "adminUserIds");
            this.adminUserIds = Optional.ofNullable(adminUserIds);
            return this;
        }

        public Builder adminUserIds(Optional<? extends List<String>> adminUserIds) {
            Utils.checkNotNull(adminUserIds, "adminUserIds");
            this.adminUserIds = adminUserIds;
            return this;
        }

        public Builder assetTag(String assetTag) {
            Utils.checkNotNull(assetTag, "assetTag");
            this.assetTag = Optional.ofNullable(assetTag);
            return this;
        }

        public Builder assetTag(Optional<String> assetTag) {
            Utils.checkNotNull(assetTag, "assetTag");
            this.assetTag = assetTag;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder hasAntivirus(boolean hasAntivirus) {
            Utils.checkNotNull(hasAntivirus, "hasAntivirus");
            this.hasAntivirus = Optional.ofNullable(hasAntivirus);
            return this;
        }

        public Builder hasAntivirus(Optional<Boolean> hasAntivirus) {
            Utils.checkNotNull(hasAntivirus, "hasAntivirus");
            this.hasAntivirus = hasAntivirus;
            return this;
        }

        public Builder hasFirewall(boolean hasFirewall) {
            Utils.checkNotNull(hasFirewall, "hasFirewall");
            this.hasFirewall = Optional.ofNullable(hasFirewall);
            return this;
        }

        public Builder hasFirewall(Optional<Boolean> hasFirewall) {
            Utils.checkNotNull(hasFirewall, "hasFirewall");
            this.hasFirewall = hasFirewall;
            return this;
        }

        public Builder hasHdEncrypted(boolean hasHdEncrypted) {
            Utils.checkNotNull(hasHdEncrypted, "hasHdEncrypted");
            this.hasHdEncrypted = Optional.ofNullable(hasHdEncrypted);
            return this;
        }

        public Builder hasHdEncrypted(Optional<Boolean> hasHdEncrypted) {
            Utils.checkNotNull(hasHdEncrypted, "hasHdEncrypted");
            this.hasHdEncrypted = hasHdEncrypted;
            return this;
        }

        public Builder hasPasswordManager(boolean hasPasswordManager) {
            Utils.checkNotNull(hasPasswordManager, "hasPasswordManager");
            this.hasPasswordManager = Optional.ofNullable(hasPasswordManager);
            return this;
        }

        public Builder hasPasswordManager(Optional<Boolean> hasPasswordManager) {
            Utils.checkNotNull(hasPasswordManager, "hasPasswordManager");
            this.hasPasswordManager = hasPasswordManager;
            return this;
        }

        public Builder hasScreenlock(boolean hasScreenlock) {
            Utils.checkNotNull(hasScreenlock, "hasScreenlock");
            this.hasScreenlock = Optional.ofNullable(hasScreenlock);
            return this;
        }

        public Builder hasScreenlock(Optional<Boolean> hasScreenlock) {
            Utils.checkNotNull(hasScreenlock, "hasScreenlock");
            this.hasScreenlock = hasScreenlock;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder isMissing(boolean isMissing) {
            Utils.checkNotNull(isMissing, "isMissing");
            this.isMissing = Optional.ofNullable(isMissing);
            return this;
        }

        public Builder isMissing(Optional<Boolean> isMissing) {
            Utils.checkNotNull(isMissing, "isMissing");
            this.isMissing = isMissing;
            return this;
        }

        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Optional<String> locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }

        public Builder manufacturer(String manufacturer) {
            Utils.checkNotNull(manufacturer, "manufacturer");
            this.manufacturer = Optional.ofNullable(manufacturer);
            return this;
        }

        public Builder manufacturer(Optional<String> manufacturer) {
            Utils.checkNotNull(manufacturer, "manufacturer");
            this.manufacturer = manufacturer;
            return this;
        }

        public Builder model(String model) {
            Utils.checkNotNull(model, "model");
            this.model = Optional.ofNullable(model);
            return this;
        }

        public Builder model(Optional<String> model) {
            Utils.checkNotNull(model, "model");
            this.model = model;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder os(String os) {
            Utils.checkNotNull(os, "os");
            this.os = Optional.ofNullable(os);
            return this;
        }

        public Builder os(Optional<String> os) {
            Utils.checkNotNull(os, "os");
            this.os = os;
            return this;
        }

        public Builder osVersion(String osVersion) {
            Utils.checkNotNull(osVersion, "osVersion");
            this.osVersion = Optional.ofNullable(osVersion);
            return this;
        }

        public Builder osVersion(Optional<String> osVersion) {
            Utils.checkNotNull(osVersion, "osVersion");
            this.osVersion = osVersion;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        /**
         * users who have this device
         */
        public Builder userIds(List<String> userIds) {
            Utils.checkNotNull(userIds, "userIds");
            this.userIds = Optional.ofNullable(userIds);
            return this;
        }

        /**
         * users who have this device
         */
        public Builder userIds(Optional<? extends List<String>> userIds) {
            Utils.checkNotNull(userIds, "userIds");
            this.userIds = userIds;
            return this;
        }

        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public HrisDevice build() {
            return new HrisDevice(
                adminUserIds,
                assetTag,
                createdAt,
                hasAntivirus,
                hasFirewall,
                hasHdEncrypted,
                hasPasswordManager,
                hasScreenlock,
                id,
                isMissing,
                locationId,
                manufacturer,
                model,
                name,
                os,
                osVersion,
                raw,
                updatedAt,
                userIds,
                version);
        }
    }
}

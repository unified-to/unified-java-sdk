/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.core.JacksonException;
import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonParser;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.core.type.TypeReference;
import com.fasterxml.jackson.databind.DeserializationContext;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.fasterxml.jackson.databind.deser.std.StdDeserializer;
import com.fasterxml.jackson.databind.ser.std.StdSerializer;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * <p>Wrapper class for an "open" enum. "Open" enums are those that are expected
 * to evolve (particularly with the addition of enum members over time). If an
 * open enum is used then the appearance of unexpected enum values (say in a 
 * response from an updated an API) will not bring about a runtime error thus 
 * ensuring that non-updated client versions can continue to work without error.
 *
 * <p>Note that instances are immutable and are singletons (an internal thread-safe
 * cache is maintained to ensure that). As a consequence instances created with the 
 * same value will satisfy reference equality (via {@code ==}).
 * 
 * <p>This class is intended to emulate an enum (in terms of common usage and with 
 * reference equality) but with the ability to carry unknown values. Unfortunately
 * Java does not permit the use of an instance in a switch expression but you can 
 * use the {@code asEnum()} method (after dealing with the `Optional` appropriately).
 *
 */
@JsonDeserialize(using = ObjectType._Deserializer.class)
@JsonSerialize(using = ObjectType._Serializer.class)
public class ObjectType {

    public static final ObjectType ACCOUNTING_ACCOUNT = new ObjectType("accounting_account");
    public static final ObjectType ACCOUNTING_TRANSACTION = new ObjectType("accounting_transaction");
    public static final ObjectType ACCOUNTING_JOURNAL = new ObjectType("accounting_journal");
    public static final ObjectType ACCOUNTING_CONTACT = new ObjectType("accounting_contact");
    public static final ObjectType ACCOUNTING_INVOICE = new ObjectType("accounting_invoice");
    public static final ObjectType ACCOUNTING_BILL = new ObjectType("accounting_bill");
    public static final ObjectType ACCOUNTING_CREDITMEMO = new ObjectType("accounting_creditmemo");
    public static final ObjectType ACCOUNTING_TAXRATE = new ObjectType("accounting_taxrate");
    public static final ObjectType ACCOUNTING_ORGANIZATION = new ObjectType("accounting_organization");
    public static final ObjectType ACCOUNTING_ORDER = new ObjectType("accounting_order");
    public static final ObjectType ACCOUNTING_SALESORDER = new ObjectType("accounting_salesorder");
    public static final ObjectType ACCOUNTING_PURCHASEORDER = new ObjectType("accounting_purchaseorder");
    public static final ObjectType ACCOUNTING_REPORT = new ObjectType("accounting_report");
    public static final ObjectType ACCOUNTING_BALANCESHEET = new ObjectType("accounting_balancesheet");
    public static final ObjectType ACCOUNTING_PROFITLOSS = new ObjectType("accounting_profitloss");
    public static final ObjectType ACCOUNTING_TRIALBALANCE = new ObjectType("accounting_trialbalance");
    public static final ObjectType ACCOUNTING_CATEGORY = new ObjectType("accounting_category");
    public static final ObjectType ACCOUNTING_EXPENSE = new ObjectType("accounting_expense");
    public static final ObjectType ACCOUNTING_CASHFLOW = new ObjectType("accounting_cashflow");
    public static final ObjectType PAYMENT_PAYMENT = new ObjectType("payment_payment");
    public static final ObjectType PAYMENT_LINK = new ObjectType("payment_link");
    public static final ObjectType PAYMENT_PAYOUT = new ObjectType("payment_payout");
    public static final ObjectType PAYMENT_REFUND = new ObjectType("payment_refund");
    public static final ObjectType PAYMENT_SUBSCRIPTION = new ObjectType("payment_subscription");
    public static final ObjectType COMMERCE_ITEM = new ObjectType("commerce_item");
    public static final ObjectType COMMERCE_COLLECTION = new ObjectType("commerce_collection");
    public static final ObjectType COMMERCE_INVENTORY = new ObjectType("commerce_inventory");
    public static final ObjectType COMMERCE_LOCATION = new ObjectType("commerce_location");
    public static final ObjectType COMMERCE_REVIEW = new ObjectType("commerce_review");
    public static final ObjectType VERIFICATION_PACKAGE = new ObjectType("verification_package");
    public static final ObjectType VERIFICATION_REQUEST = new ObjectType("verification_request");
    public static final ObjectType ATS_ACTIVITY = new ObjectType("ats_activity");
    public static final ObjectType ATS_APPLICATION = new ObjectType("ats_application");
    public static final ObjectType ATS_APPLICATIONSTATUS = new ObjectType("ats_applicationstatus");
    public static final ObjectType ATS_CANDIDATE = new ObjectType("ats_candidate");
    public static final ObjectType ATS_DOCUMENT = new ObjectType("ats_document");
    public static final ObjectType ATS_INTERVIEW = new ObjectType("ats_interview");
    public static final ObjectType ATS_JOB = new ObjectType("ats_job");
    public static final ObjectType ATS_SCORECARD = new ObjectType("ats_scorecard");
    public static final ObjectType ATS_COMPANY = new ObjectType("ats_company");
    public static final ObjectType CRM_COMPANY = new ObjectType("crm_company");
    public static final ObjectType CRM_CONTACT = new ObjectType("crm_contact");
    public static final ObjectType CRM_DEAL = new ObjectType("crm_deal");
    public static final ObjectType CRM_EVENT = new ObjectType("crm_event");
    public static final ObjectType CRM_LEAD = new ObjectType("crm_lead");
    public static final ObjectType CRM_PIPELINE = new ObjectType("crm_pipeline");
    public static final ObjectType HRIS_EMPLOYEE = new ObjectType("hris_employee");
    public static final ObjectType HRIS_GROUP = new ObjectType("hris_group");
    public static final ObjectType HRIS_PAYSLIP = new ObjectType("hris_payslip");
    public static final ObjectType HRIS_TIMEOFF = new ObjectType("hris_timeoff");
    public static final ObjectType HRIS_COMPANY = new ObjectType("hris_company");
    public static final ObjectType HRIS_LOCATION = new ObjectType("hris_location");
    public static final ObjectType HRIS_DEVICE = new ObjectType("hris_device");
    public static final ObjectType HRIS_TIMESHIFT = new ObjectType("hris_timeshift");
    public static final ObjectType MARTECH_LIST = new ObjectType("martech_list");
    public static final ObjectType MARTECH_MEMBER = new ObjectType("martech_member");
    public static final ObjectType PASSTHROUGH = new ObjectType("passthrough");
    public static final ObjectType TICKETING_NOTE = new ObjectType("ticketing_note");
    public static final ObjectType TICKETING_TICKET = new ObjectType("ticketing_ticket");
    public static final ObjectType TICKETING_CUSTOMER = new ObjectType("ticketing_customer");
    public static final ObjectType TICKETING_CATEGORY = new ObjectType("ticketing_category");
    public static final ObjectType UC_CONTACT = new ObjectType("uc_contact");
    public static final ObjectType UC_CALL = new ObjectType("uc_call");
    public static final ObjectType UC_COMMENT = new ObjectType("uc_comment");
    public static final ObjectType UC_RECORDING = new ObjectType("uc_recording");
    public static final ObjectType ENRICH_PERSON = new ObjectType("enrich_person");
    public static final ObjectType ENRICH_COMPANY = new ObjectType("enrich_company");
    public static final ObjectType STORAGE_FILE = new ObjectType("storage_file");
    public static final ObjectType GENAI_MODEL = new ObjectType("genai_model");
    public static final ObjectType GENAI_PROMPT = new ObjectType("genai_prompt");
    public static final ObjectType GENAI_EMBEDDING = new ObjectType("genai_embedding");
    public static final ObjectType MESSAGING_MESSAGE = new ObjectType("messaging_message");
    public static final ObjectType MESSAGING_CHANNEL = new ObjectType("messaging_channel");
    public static final ObjectType KMS_SPACE = new ObjectType("kms_space");
    public static final ObjectType KMS_PAGE = new ObjectType("kms_page");
    public static final ObjectType KMS_COMMENT = new ObjectType("kms_comment");
    public static final ObjectType TASK_PROJECT = new ObjectType("task_project");
    public static final ObjectType TASK_TASK = new ObjectType("task_task");
    public static final ObjectType TASK_COMMENT = new ObjectType("task_comment");
    public static final ObjectType TASK_CHANGE = new ObjectType("task_change");
    public static final ObjectType SCIM_USERS = new ObjectType("scim_users");
    public static final ObjectType SCIM_GROUPS = new ObjectType("scim_groups");
    public static final ObjectType LMS_COURSE = new ObjectType("lms_course");
    public static final ObjectType LMS_CLASS = new ObjectType("lms_class");
    public static final ObjectType LMS_STUDENT = new ObjectType("lms_student");
    public static final ObjectType LMS_INSTRUCTOR = new ObjectType("lms_instructor");
    public static final ObjectType REPO_ORGANIZATION = new ObjectType("repo_organization");
    public static final ObjectType REPO_REPOSITORY = new ObjectType("repo_repository");
    public static final ObjectType REPO_BRANCH = new ObjectType("repo_branch");
    public static final ObjectType REPO_COMMIT = new ObjectType("repo_commit");
    public static final ObjectType REPO_PULLREQUEST = new ObjectType("repo_pullrequest");
    public static final ObjectType METADATA_METADATA = new ObjectType("metadata_metadata");
    public static final ObjectType CALENDAR_CALENDAR = new ObjectType("calendar_calendar");
    public static final ObjectType CALENDAR_EVENT = new ObjectType("calendar_event");
    public static final ObjectType CALENDAR_BUSY = new ObjectType("calendar_busy");
    public static final ObjectType CALENDAR_LINK = new ObjectType("calendar_link");
    public static final ObjectType CALENDAR_RECORDING = new ObjectType("calendar_recording");

    // This map will grow whenever a Color gets created with a new
    // unrecognized value (a potential memory leak if the user is not
    // careful). Keep this field lower case to avoid clashing with
    // generated member names which will always be upper cased (Java
    // convention)
    private static final Map<String, ObjectType> values = createValuesMap();
    private static final Map<String, ObjectTypeEnum> enums = createEnumsMap();

    private final String value;

    private ObjectType(String value) {
        this.value = value;
    }

    /**
     * Returns a ObjectType with the given value. For a specific value the 
     * returned object will always be a singleton so reference equality 
     * is satisfied when the values are the same.
     * 
     * @param value value to be wrapped as ObjectType
     */ 
    public static ObjectType of(String value) {
        synchronized (ObjectType.class) {
            return values.computeIfAbsent(value, v -> new ObjectType(v));
        }
    }

    public String value() {
        return value;
    }

    public Optional<ObjectTypeEnum> asEnum() {
        return Optional.ofNullable(enums.getOrDefault(value, null));
    }

    public boolean isKnown() {
        return asEnum().isPresent();
    }

    @Override
    public int hashCode() {
        return Objects.hash(value);
    }

    @Override
    public boolean equals(java.lang.Object obj) {
        if (this == obj)
            return true;
        if (obj == null)
            return false;
        if (getClass() != obj.getClass())
            return false;
        ObjectType other = (ObjectType) obj;
        return Objects.equals(value, other.value);
    }

    @Override
    public String toString() {
        return "ObjectType [value=" + value + "]";
    }

    // return an array just like an enum
    public static ObjectType[] values() {
        synchronized (ObjectType.class) {
            return values.values().toArray(new ObjectType[] {});
        }
    }

    private static final Map<String, ObjectType> createValuesMap() {
        Map<String, ObjectType> map = new LinkedHashMap<>();
        map.put("accounting_account", ACCOUNTING_ACCOUNT);
        map.put("accounting_transaction", ACCOUNTING_TRANSACTION);
        map.put("accounting_journal", ACCOUNTING_JOURNAL);
        map.put("accounting_contact", ACCOUNTING_CONTACT);
        map.put("accounting_invoice", ACCOUNTING_INVOICE);
        map.put("accounting_bill", ACCOUNTING_BILL);
        map.put("accounting_creditmemo", ACCOUNTING_CREDITMEMO);
        map.put("accounting_taxrate", ACCOUNTING_TAXRATE);
        map.put("accounting_organization", ACCOUNTING_ORGANIZATION);
        map.put("accounting_order", ACCOUNTING_ORDER);
        map.put("accounting_salesorder", ACCOUNTING_SALESORDER);
        map.put("accounting_purchaseorder", ACCOUNTING_PURCHASEORDER);
        map.put("accounting_report", ACCOUNTING_REPORT);
        map.put("accounting_balancesheet", ACCOUNTING_BALANCESHEET);
        map.put("accounting_profitloss", ACCOUNTING_PROFITLOSS);
        map.put("accounting_trialbalance", ACCOUNTING_TRIALBALANCE);
        map.put("accounting_category", ACCOUNTING_CATEGORY);
        map.put("accounting_expense", ACCOUNTING_EXPENSE);
        map.put("accounting_cashflow", ACCOUNTING_CASHFLOW);
        map.put("payment_payment", PAYMENT_PAYMENT);
        map.put("payment_link", PAYMENT_LINK);
        map.put("payment_payout", PAYMENT_PAYOUT);
        map.put("payment_refund", PAYMENT_REFUND);
        map.put("payment_subscription", PAYMENT_SUBSCRIPTION);
        map.put("commerce_item", COMMERCE_ITEM);
        map.put("commerce_collection", COMMERCE_COLLECTION);
        map.put("commerce_inventory", COMMERCE_INVENTORY);
        map.put("commerce_location", COMMERCE_LOCATION);
        map.put("commerce_review", COMMERCE_REVIEW);
        map.put("verification_package", VERIFICATION_PACKAGE);
        map.put("verification_request", VERIFICATION_REQUEST);
        map.put("ats_activity", ATS_ACTIVITY);
        map.put("ats_application", ATS_APPLICATION);
        map.put("ats_applicationstatus", ATS_APPLICATIONSTATUS);
        map.put("ats_candidate", ATS_CANDIDATE);
        map.put("ats_document", ATS_DOCUMENT);
        map.put("ats_interview", ATS_INTERVIEW);
        map.put("ats_job", ATS_JOB);
        map.put("ats_scorecard", ATS_SCORECARD);
        map.put("ats_company", ATS_COMPANY);
        map.put("crm_company", CRM_COMPANY);
        map.put("crm_contact", CRM_CONTACT);
        map.put("crm_deal", CRM_DEAL);
        map.put("crm_event", CRM_EVENT);
        map.put("crm_lead", CRM_LEAD);
        map.put("crm_pipeline", CRM_PIPELINE);
        map.put("hris_employee", HRIS_EMPLOYEE);
        map.put("hris_group", HRIS_GROUP);
        map.put("hris_payslip", HRIS_PAYSLIP);
        map.put("hris_timeoff", HRIS_TIMEOFF);
        map.put("hris_company", HRIS_COMPANY);
        map.put("hris_location", HRIS_LOCATION);
        map.put("hris_device", HRIS_DEVICE);
        map.put("hris_timeshift", HRIS_TIMESHIFT);
        map.put("martech_list", MARTECH_LIST);
        map.put("martech_member", MARTECH_MEMBER);
        map.put("passthrough", PASSTHROUGH);
        map.put("ticketing_note", TICKETING_NOTE);
        map.put("ticketing_ticket", TICKETING_TICKET);
        map.put("ticketing_customer", TICKETING_CUSTOMER);
        map.put("ticketing_category", TICKETING_CATEGORY);
        map.put("uc_contact", UC_CONTACT);
        map.put("uc_call", UC_CALL);
        map.put("uc_comment", UC_COMMENT);
        map.put("uc_recording", UC_RECORDING);
        map.put("enrich_person", ENRICH_PERSON);
        map.put("enrich_company", ENRICH_COMPANY);
        map.put("storage_file", STORAGE_FILE);
        map.put("genai_model", GENAI_MODEL);
        map.put("genai_prompt", GENAI_PROMPT);
        map.put("genai_embedding", GENAI_EMBEDDING);
        map.put("messaging_message", MESSAGING_MESSAGE);
        map.put("messaging_channel", MESSAGING_CHANNEL);
        map.put("kms_space", KMS_SPACE);
        map.put("kms_page", KMS_PAGE);
        map.put("kms_comment", KMS_COMMENT);
        map.put("task_project", TASK_PROJECT);
        map.put("task_task", TASK_TASK);
        map.put("task_comment", TASK_COMMENT);
        map.put("task_change", TASK_CHANGE);
        map.put("scim_users", SCIM_USERS);
        map.put("scim_groups", SCIM_GROUPS);
        map.put("lms_course", LMS_COURSE);
        map.put("lms_class", LMS_CLASS);
        map.put("lms_student", LMS_STUDENT);
        map.put("lms_instructor", LMS_INSTRUCTOR);
        map.put("repo_organization", REPO_ORGANIZATION);
        map.put("repo_repository", REPO_REPOSITORY);
        map.put("repo_branch", REPO_BRANCH);
        map.put("repo_commit", REPO_COMMIT);
        map.put("repo_pullrequest", REPO_PULLREQUEST);
        map.put("metadata_metadata", METADATA_METADATA);
        map.put("calendar_calendar", CALENDAR_CALENDAR);
        map.put("calendar_event", CALENDAR_EVENT);
        map.put("calendar_busy", CALENDAR_BUSY);
        map.put("calendar_link", CALENDAR_LINK);
        map.put("calendar_recording", CALENDAR_RECORDING);
        return map;
    }

    private static final Map<String, ObjectTypeEnum> createEnumsMap() {
        Map<String, ObjectTypeEnum> map = new HashMap<>();
        map.put("accounting_account", ObjectTypeEnum.ACCOUNTING_ACCOUNT);
        map.put("accounting_transaction", ObjectTypeEnum.ACCOUNTING_TRANSACTION);
        map.put("accounting_journal", ObjectTypeEnum.ACCOUNTING_JOURNAL);
        map.put("accounting_contact", ObjectTypeEnum.ACCOUNTING_CONTACT);
        map.put("accounting_invoice", ObjectTypeEnum.ACCOUNTING_INVOICE);
        map.put("accounting_bill", ObjectTypeEnum.ACCOUNTING_BILL);
        map.put("accounting_creditmemo", ObjectTypeEnum.ACCOUNTING_CREDITMEMO);
        map.put("accounting_taxrate", ObjectTypeEnum.ACCOUNTING_TAXRATE);
        map.put("accounting_organization", ObjectTypeEnum.ACCOUNTING_ORGANIZATION);
        map.put("accounting_order", ObjectTypeEnum.ACCOUNTING_ORDER);
        map.put("accounting_salesorder", ObjectTypeEnum.ACCOUNTING_SALESORDER);
        map.put("accounting_purchaseorder", ObjectTypeEnum.ACCOUNTING_PURCHASEORDER);
        map.put("accounting_report", ObjectTypeEnum.ACCOUNTING_REPORT);
        map.put("accounting_balancesheet", ObjectTypeEnum.ACCOUNTING_BALANCESHEET);
        map.put("accounting_profitloss", ObjectTypeEnum.ACCOUNTING_PROFITLOSS);
        map.put("accounting_trialbalance", ObjectTypeEnum.ACCOUNTING_TRIALBALANCE);
        map.put("accounting_category", ObjectTypeEnum.ACCOUNTING_CATEGORY);
        map.put("accounting_expense", ObjectTypeEnum.ACCOUNTING_EXPENSE);
        map.put("accounting_cashflow", ObjectTypeEnum.ACCOUNTING_CASHFLOW);
        map.put("payment_payment", ObjectTypeEnum.PAYMENT_PAYMENT);
        map.put("payment_link", ObjectTypeEnum.PAYMENT_LINK);
        map.put("payment_payout", ObjectTypeEnum.PAYMENT_PAYOUT);
        map.put("payment_refund", ObjectTypeEnum.PAYMENT_REFUND);
        map.put("payment_subscription", ObjectTypeEnum.PAYMENT_SUBSCRIPTION);
        map.put("commerce_item", ObjectTypeEnum.COMMERCE_ITEM);
        map.put("commerce_collection", ObjectTypeEnum.COMMERCE_COLLECTION);
        map.put("commerce_inventory", ObjectTypeEnum.COMMERCE_INVENTORY);
        map.put("commerce_location", ObjectTypeEnum.COMMERCE_LOCATION);
        map.put("commerce_review", ObjectTypeEnum.COMMERCE_REVIEW);
        map.put("verification_package", ObjectTypeEnum.VERIFICATION_PACKAGE);
        map.put("verification_request", ObjectTypeEnum.VERIFICATION_REQUEST);
        map.put("ats_activity", ObjectTypeEnum.ATS_ACTIVITY);
        map.put("ats_application", ObjectTypeEnum.ATS_APPLICATION);
        map.put("ats_applicationstatus", ObjectTypeEnum.ATS_APPLICATIONSTATUS);
        map.put("ats_candidate", ObjectTypeEnum.ATS_CANDIDATE);
        map.put("ats_document", ObjectTypeEnum.ATS_DOCUMENT);
        map.put("ats_interview", ObjectTypeEnum.ATS_INTERVIEW);
        map.put("ats_job", ObjectTypeEnum.ATS_JOB);
        map.put("ats_scorecard", ObjectTypeEnum.ATS_SCORECARD);
        map.put("ats_company", ObjectTypeEnum.ATS_COMPANY);
        map.put("crm_company", ObjectTypeEnum.CRM_COMPANY);
        map.put("crm_contact", ObjectTypeEnum.CRM_CONTACT);
        map.put("crm_deal", ObjectTypeEnum.CRM_DEAL);
        map.put("crm_event", ObjectTypeEnum.CRM_EVENT);
        map.put("crm_lead", ObjectTypeEnum.CRM_LEAD);
        map.put("crm_pipeline", ObjectTypeEnum.CRM_PIPELINE);
        map.put("hris_employee", ObjectTypeEnum.HRIS_EMPLOYEE);
        map.put("hris_group", ObjectTypeEnum.HRIS_GROUP);
        map.put("hris_payslip", ObjectTypeEnum.HRIS_PAYSLIP);
        map.put("hris_timeoff", ObjectTypeEnum.HRIS_TIMEOFF);
        map.put("hris_company", ObjectTypeEnum.HRIS_COMPANY);
        map.put("hris_location", ObjectTypeEnum.HRIS_LOCATION);
        map.put("hris_device", ObjectTypeEnum.HRIS_DEVICE);
        map.put("hris_timeshift", ObjectTypeEnum.HRIS_TIMESHIFT);
        map.put("martech_list", ObjectTypeEnum.MARTECH_LIST);
        map.put("martech_member", ObjectTypeEnum.MARTECH_MEMBER);
        map.put("passthrough", ObjectTypeEnum.PASSTHROUGH);
        map.put("ticketing_note", ObjectTypeEnum.TICKETING_NOTE);
        map.put("ticketing_ticket", ObjectTypeEnum.TICKETING_TICKET);
        map.put("ticketing_customer", ObjectTypeEnum.TICKETING_CUSTOMER);
        map.put("ticketing_category", ObjectTypeEnum.TICKETING_CATEGORY);
        map.put("uc_contact", ObjectTypeEnum.UC_CONTACT);
        map.put("uc_call", ObjectTypeEnum.UC_CALL);
        map.put("uc_comment", ObjectTypeEnum.UC_COMMENT);
        map.put("uc_recording", ObjectTypeEnum.UC_RECORDING);
        map.put("enrich_person", ObjectTypeEnum.ENRICH_PERSON);
        map.put("enrich_company", ObjectTypeEnum.ENRICH_COMPANY);
        map.put("storage_file", ObjectTypeEnum.STORAGE_FILE);
        map.put("genai_model", ObjectTypeEnum.GENAI_MODEL);
        map.put("genai_prompt", ObjectTypeEnum.GENAI_PROMPT);
        map.put("genai_embedding", ObjectTypeEnum.GENAI_EMBEDDING);
        map.put("messaging_message", ObjectTypeEnum.MESSAGING_MESSAGE);
        map.put("messaging_channel", ObjectTypeEnum.MESSAGING_CHANNEL);
        map.put("kms_space", ObjectTypeEnum.KMS_SPACE);
        map.put("kms_page", ObjectTypeEnum.KMS_PAGE);
        map.put("kms_comment", ObjectTypeEnum.KMS_COMMENT);
        map.put("task_project", ObjectTypeEnum.TASK_PROJECT);
        map.put("task_task", ObjectTypeEnum.TASK_TASK);
        map.put("task_comment", ObjectTypeEnum.TASK_COMMENT);
        map.put("task_change", ObjectTypeEnum.TASK_CHANGE);
        map.put("scim_users", ObjectTypeEnum.SCIM_USERS);
        map.put("scim_groups", ObjectTypeEnum.SCIM_GROUPS);
        map.put("lms_course", ObjectTypeEnum.LMS_COURSE);
        map.put("lms_class", ObjectTypeEnum.LMS_CLASS);
        map.put("lms_student", ObjectTypeEnum.LMS_STUDENT);
        map.put("lms_instructor", ObjectTypeEnum.LMS_INSTRUCTOR);
        map.put("repo_organization", ObjectTypeEnum.REPO_ORGANIZATION);
        map.put("repo_repository", ObjectTypeEnum.REPO_REPOSITORY);
        map.put("repo_branch", ObjectTypeEnum.REPO_BRANCH);
        map.put("repo_commit", ObjectTypeEnum.REPO_COMMIT);
        map.put("repo_pullrequest", ObjectTypeEnum.REPO_PULLREQUEST);
        map.put("metadata_metadata", ObjectTypeEnum.METADATA_METADATA);
        map.put("calendar_calendar", ObjectTypeEnum.CALENDAR_CALENDAR);
        map.put("calendar_event", ObjectTypeEnum.CALENDAR_EVENT);
        map.put("calendar_busy", ObjectTypeEnum.CALENDAR_BUSY);
        map.put("calendar_link", ObjectTypeEnum.CALENDAR_LINK);
        map.put("calendar_recording", ObjectTypeEnum.CALENDAR_RECORDING);
        return map;
    }
    
    @SuppressWarnings("serial")
    public static final class _Serializer extends StdSerializer<ObjectType> {

        protected _Serializer() {
            super(ObjectType.class);
        }

        @Override
        public void serialize(ObjectType value, JsonGenerator g, SerializerProvider provider)
                throws IOException, JsonProcessingException {
            g.writeObject(value.value);
        }
    }

    @SuppressWarnings("serial")
    public static final class _Deserializer extends StdDeserializer<ObjectType> {

        protected _Deserializer() {
            super(ObjectType.class);
        }

        @Override
        public ObjectType deserialize(JsonParser p, DeserializationContext ctxt)
                throws IOException, JacksonException {
            String v = p.readValueAs(new TypeReference<String>() {});
            // use the factory method to ensure we get singletons
            return ObjectType.of(v);
        }
    }
    
    public enum ObjectTypeEnum {

        ACCOUNTING_ACCOUNT("accounting_account"),
        ACCOUNTING_TRANSACTION("accounting_transaction"),
        ACCOUNTING_JOURNAL("accounting_journal"),
        ACCOUNTING_CONTACT("accounting_contact"),
        ACCOUNTING_INVOICE("accounting_invoice"),
        ACCOUNTING_BILL("accounting_bill"),
        ACCOUNTING_CREDITMEMO("accounting_creditmemo"),
        ACCOUNTING_TAXRATE("accounting_taxrate"),
        ACCOUNTING_ORGANIZATION("accounting_organization"),
        ACCOUNTING_ORDER("accounting_order"),
        ACCOUNTING_SALESORDER("accounting_salesorder"),
        ACCOUNTING_PURCHASEORDER("accounting_purchaseorder"),
        ACCOUNTING_REPORT("accounting_report"),
        ACCOUNTING_BALANCESHEET("accounting_balancesheet"),
        ACCOUNTING_PROFITLOSS("accounting_profitloss"),
        ACCOUNTING_TRIALBALANCE("accounting_trialbalance"),
        ACCOUNTING_CATEGORY("accounting_category"),
        ACCOUNTING_EXPENSE("accounting_expense"),
        ACCOUNTING_CASHFLOW("accounting_cashflow"),
        PAYMENT_PAYMENT("payment_payment"),
        PAYMENT_LINK("payment_link"),
        PAYMENT_PAYOUT("payment_payout"),
        PAYMENT_REFUND("payment_refund"),
        PAYMENT_SUBSCRIPTION("payment_subscription"),
        COMMERCE_ITEM("commerce_item"),
        COMMERCE_COLLECTION("commerce_collection"),
        COMMERCE_INVENTORY("commerce_inventory"),
        COMMERCE_LOCATION("commerce_location"),
        COMMERCE_REVIEW("commerce_review"),
        VERIFICATION_PACKAGE("verification_package"),
        VERIFICATION_REQUEST("verification_request"),
        ATS_ACTIVITY("ats_activity"),
        ATS_APPLICATION("ats_application"),
        ATS_APPLICATIONSTATUS("ats_applicationstatus"),
        ATS_CANDIDATE("ats_candidate"),
        ATS_DOCUMENT("ats_document"),
        ATS_INTERVIEW("ats_interview"),
        ATS_JOB("ats_job"),
        ATS_SCORECARD("ats_scorecard"),
        ATS_COMPANY("ats_company"),
        CRM_COMPANY("crm_company"),
        CRM_CONTACT("crm_contact"),
        CRM_DEAL("crm_deal"),
        CRM_EVENT("crm_event"),
        CRM_LEAD("crm_lead"),
        CRM_PIPELINE("crm_pipeline"),
        HRIS_EMPLOYEE("hris_employee"),
        HRIS_GROUP("hris_group"),
        HRIS_PAYSLIP("hris_payslip"),
        HRIS_TIMEOFF("hris_timeoff"),
        HRIS_COMPANY("hris_company"),
        HRIS_LOCATION("hris_location"),
        HRIS_DEVICE("hris_device"),
        HRIS_TIMESHIFT("hris_timeshift"),
        MARTECH_LIST("martech_list"),
        MARTECH_MEMBER("martech_member"),
        PASSTHROUGH("passthrough"),
        TICKETING_NOTE("ticketing_note"),
        TICKETING_TICKET("ticketing_ticket"),
        TICKETING_CUSTOMER("ticketing_customer"),
        TICKETING_CATEGORY("ticketing_category"),
        UC_CONTACT("uc_contact"),
        UC_CALL("uc_call"),
        UC_COMMENT("uc_comment"),
        UC_RECORDING("uc_recording"),
        ENRICH_PERSON("enrich_person"),
        ENRICH_COMPANY("enrich_company"),
        STORAGE_FILE("storage_file"),
        GENAI_MODEL("genai_model"),
        GENAI_PROMPT("genai_prompt"),
        GENAI_EMBEDDING("genai_embedding"),
        MESSAGING_MESSAGE("messaging_message"),
        MESSAGING_CHANNEL("messaging_channel"),
        KMS_SPACE("kms_space"),
        KMS_PAGE("kms_page"),
        KMS_COMMENT("kms_comment"),
        TASK_PROJECT("task_project"),
        TASK_TASK("task_task"),
        TASK_COMMENT("task_comment"),
        TASK_CHANGE("task_change"),
        SCIM_USERS("scim_users"),
        SCIM_GROUPS("scim_groups"),
        LMS_COURSE("lms_course"),
        LMS_CLASS("lms_class"),
        LMS_STUDENT("lms_student"),
        LMS_INSTRUCTOR("lms_instructor"),
        REPO_ORGANIZATION("repo_organization"),
        REPO_REPOSITORY("repo_repository"),
        REPO_BRANCH("repo_branch"),
        REPO_COMMIT("repo_commit"),
        REPO_PULLREQUEST("repo_pullrequest"),
        METADATA_METADATA("metadata_metadata"),
        CALENDAR_CALENDAR("calendar_calendar"),
        CALENDAR_EVENT("calendar_event"),
        CALENDAR_BUSY("calendar_busy"),
        CALENDAR_LINK("calendar_link"),
        CALENDAR_RECORDING("calendar_recording"),;

        private final String value;

        private ObjectTypeEnum(String value) {
            this.value = value;
        }

        public String value() {
            return value;
        }
    }
}


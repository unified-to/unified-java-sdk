/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class CommerceReview {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_avatar_url")
    private Optional<String> authorAvatarUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_email")
    private Optional<String> authorEmail;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_location")
    private Optional<String> authorLocation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_name")
    private Optional<String> authorName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    private Optional<? extends List<CommerceReviewComment>> comments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<String> content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("helpful_votes")
    private Optional<Double> helpfulVotes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_featured")
    private Optional<Boolean> isFeatured;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_public")
    private Optional<Boolean> isPublic;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_verified")
    private Optional<Boolean> isVerified;

    @JsonProperty("item_id")
    private String itemId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_variant_id")
    private Optional<String> itemVariantId;

    /**
     * Photosvideos attached to the review
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("media")
    private Optional<? extends List<CommerceItemMedia>> media;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends List<CommerceMetadata>> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rating")
    private Optional<Double> rating;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CommerceReviewStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unhelpful_votes")
    private Optional<Double> unhelpfulVotes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("verified_purchase")
    private Optional<Boolean> verifiedPurchase;

    @JsonCreator
    public CommerceReview(
            @JsonProperty("author_avatar_url") Optional<String> authorAvatarUrl,
            @JsonProperty("author_email") Optional<String> authorEmail,
            @JsonProperty("author_location") Optional<String> authorLocation,
            @JsonProperty("author_name") Optional<String> authorName,
            @JsonProperty("comments") Optional<? extends List<CommerceReviewComment>> comments,
            @JsonProperty("content") Optional<String> content,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("helpful_votes") Optional<Double> helpfulVotes,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_featured") Optional<Boolean> isFeatured,
            @JsonProperty("is_public") Optional<Boolean> isPublic,
            @JsonProperty("is_verified") Optional<Boolean> isVerified,
            @JsonProperty("item_id") String itemId,
            @JsonProperty("item_variant_id") Optional<String> itemVariantId,
            @JsonProperty("media") Optional<? extends List<CommerceItemMedia>> media,
            @JsonProperty("metadata") Optional<? extends List<CommerceMetadata>> metadata,
            @JsonProperty("rating") Optional<Double> rating,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("status") Optional<? extends CommerceReviewStatus> status,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("unhelpful_votes") Optional<Double> unhelpfulVotes,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("verified_purchase") Optional<Boolean> verifiedPurchase) {
        Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
        Utils.checkNotNull(authorEmail, "authorEmail");
        Utils.checkNotNull(authorLocation, "authorLocation");
        Utils.checkNotNull(authorName, "authorName");
        Utils.checkNotNull(comments, "comments");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(helpfulVotes, "helpfulVotes");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isFeatured, "isFeatured");
        Utils.checkNotNull(isPublic, "isPublic");
        Utils.checkNotNull(isVerified, "isVerified");
        Utils.checkNotNull(itemId, "itemId");
        Utils.checkNotNull(itemVariantId, "itemVariantId");
        Utils.checkNotNull(media, "media");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(rating, "rating");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(verifiedPurchase, "verifiedPurchase");
        this.authorAvatarUrl = authorAvatarUrl;
        this.authorEmail = authorEmail;
        this.authorLocation = authorLocation;
        this.authorName = authorName;
        this.comments = comments;
        this.content = content;
        this.createdAt = createdAt;
        this.helpfulVotes = helpfulVotes;
        this.id = id;
        this.isFeatured = isFeatured;
        this.isPublic = isPublic;
        this.isVerified = isVerified;
        this.itemId = itemId;
        this.itemVariantId = itemVariantId;
        this.media = media;
        this.metadata = metadata;
        this.rating = rating;
        this.raw = raw;
        this.status = status;
        this.title = title;
        this.unhelpfulVotes = unhelpfulVotes;
        this.updatedAt = updatedAt;
        this.verifiedPurchase = verifiedPurchase;
    }
    
    public CommerceReview(
            String itemId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), itemId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> authorAvatarUrl() {
        return authorAvatarUrl;
    }

    @JsonIgnore
    public Optional<String> authorEmail() {
        return authorEmail;
    }

    @JsonIgnore
    public Optional<String> authorLocation() {
        return authorLocation;
    }

    @JsonIgnore
    public Optional<String> authorName() {
        return authorName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceReviewComment>> comments() {
        return (Optional<List<CommerceReviewComment>>) comments;
    }

    @JsonIgnore
    public Optional<String> content() {
        return content;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<Double> helpfulVotes() {
        return helpfulVotes;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isFeatured() {
        return isFeatured;
    }

    @JsonIgnore
    public Optional<Boolean> isPublic() {
        return isPublic;
    }

    @JsonIgnore
    public Optional<Boolean> isVerified() {
        return isVerified;
    }

    @JsonIgnore
    public String itemId() {
        return itemId;
    }

    @JsonIgnore
    public Optional<String> itemVariantId() {
        return itemVariantId;
    }

    /**
     * Photosvideos attached to the review
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceItemMedia>> media() {
        return (Optional<List<CommerceItemMedia>>) media;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceMetadata>> metadata() {
        return (Optional<List<CommerceMetadata>>) metadata;
    }

    @JsonIgnore
    public Optional<Double> rating() {
        return rating;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CommerceReviewStatus> status() {
        return (Optional<CommerceReviewStatus>) status;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @JsonIgnore
    public Optional<Double> unhelpfulVotes() {
        return unhelpfulVotes;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<Boolean> verifiedPurchase() {
        return verifiedPurchase;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CommerceReview withAuthorAvatarUrl(String authorAvatarUrl) {
        Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
        this.authorAvatarUrl = Optional.ofNullable(authorAvatarUrl);
        return this;
    }

    public CommerceReview withAuthorAvatarUrl(Optional<String> authorAvatarUrl) {
        Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
        this.authorAvatarUrl = authorAvatarUrl;
        return this;
    }

    public CommerceReview withAuthorEmail(String authorEmail) {
        Utils.checkNotNull(authorEmail, "authorEmail");
        this.authorEmail = Optional.ofNullable(authorEmail);
        return this;
    }

    public CommerceReview withAuthorEmail(Optional<String> authorEmail) {
        Utils.checkNotNull(authorEmail, "authorEmail");
        this.authorEmail = authorEmail;
        return this;
    }

    public CommerceReview withAuthorLocation(String authorLocation) {
        Utils.checkNotNull(authorLocation, "authorLocation");
        this.authorLocation = Optional.ofNullable(authorLocation);
        return this;
    }

    public CommerceReview withAuthorLocation(Optional<String> authorLocation) {
        Utils.checkNotNull(authorLocation, "authorLocation");
        this.authorLocation = authorLocation;
        return this;
    }

    public CommerceReview withAuthorName(String authorName) {
        Utils.checkNotNull(authorName, "authorName");
        this.authorName = Optional.ofNullable(authorName);
        return this;
    }

    public CommerceReview withAuthorName(Optional<String> authorName) {
        Utils.checkNotNull(authorName, "authorName");
        this.authorName = authorName;
        return this;
    }

    public CommerceReview withComments(List<CommerceReviewComment> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = Optional.ofNullable(comments);
        return this;
    }

    public CommerceReview withComments(Optional<? extends List<CommerceReviewComment>> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = comments;
        return this;
    }

    public CommerceReview withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }

    public CommerceReview withContent(Optional<String> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public CommerceReview withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public CommerceReview withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public CommerceReview withHelpfulVotes(double helpfulVotes) {
        Utils.checkNotNull(helpfulVotes, "helpfulVotes");
        this.helpfulVotes = Optional.ofNullable(helpfulVotes);
        return this;
    }

    public CommerceReview withHelpfulVotes(Optional<Double> helpfulVotes) {
        Utils.checkNotNull(helpfulVotes, "helpfulVotes");
        this.helpfulVotes = helpfulVotes;
        return this;
    }

    public CommerceReview withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CommerceReview withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CommerceReview withIsFeatured(boolean isFeatured) {
        Utils.checkNotNull(isFeatured, "isFeatured");
        this.isFeatured = Optional.ofNullable(isFeatured);
        return this;
    }

    public CommerceReview withIsFeatured(Optional<Boolean> isFeatured) {
        Utils.checkNotNull(isFeatured, "isFeatured");
        this.isFeatured = isFeatured;
        return this;
    }

    public CommerceReview withIsPublic(boolean isPublic) {
        Utils.checkNotNull(isPublic, "isPublic");
        this.isPublic = Optional.ofNullable(isPublic);
        return this;
    }

    public CommerceReview withIsPublic(Optional<Boolean> isPublic) {
        Utils.checkNotNull(isPublic, "isPublic");
        this.isPublic = isPublic;
        return this;
    }

    public CommerceReview withIsVerified(boolean isVerified) {
        Utils.checkNotNull(isVerified, "isVerified");
        this.isVerified = Optional.ofNullable(isVerified);
        return this;
    }

    public CommerceReview withIsVerified(Optional<Boolean> isVerified) {
        Utils.checkNotNull(isVerified, "isVerified");
        this.isVerified = isVerified;
        return this;
    }

    public CommerceReview withItemId(String itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = itemId;
        return this;
    }

    public CommerceReview withItemVariantId(String itemVariantId) {
        Utils.checkNotNull(itemVariantId, "itemVariantId");
        this.itemVariantId = Optional.ofNullable(itemVariantId);
        return this;
    }

    public CommerceReview withItemVariantId(Optional<String> itemVariantId) {
        Utils.checkNotNull(itemVariantId, "itemVariantId");
        this.itemVariantId = itemVariantId;
        return this;
    }

    /**
     * Photosvideos attached to the review
     */
    public CommerceReview withMedia(List<CommerceItemMedia> media) {
        Utils.checkNotNull(media, "media");
        this.media = Optional.ofNullable(media);
        return this;
    }

    /**
     * Photosvideos attached to the review
     */
    public CommerceReview withMedia(Optional<? extends List<CommerceItemMedia>> media) {
        Utils.checkNotNull(media, "media");
        this.media = media;
        return this;
    }

    public CommerceReview withMetadata(List<CommerceMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public CommerceReview withMetadata(Optional<? extends List<CommerceMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public CommerceReview withRating(double rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = Optional.ofNullable(rating);
        return this;
    }

    public CommerceReview withRating(Optional<Double> rating) {
        Utils.checkNotNull(rating, "rating");
        this.rating = rating;
        return this;
    }

    public CommerceReview withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public CommerceReview withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public CommerceReview withStatus(CommerceReviewStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public CommerceReview withStatus(Optional<? extends CommerceReviewStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public CommerceReview withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public CommerceReview withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public CommerceReview withUnhelpfulVotes(double unhelpfulVotes) {
        Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
        this.unhelpfulVotes = Optional.ofNullable(unhelpfulVotes);
        return this;
    }

    public CommerceReview withUnhelpfulVotes(Optional<Double> unhelpfulVotes) {
        Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
        this.unhelpfulVotes = unhelpfulVotes;
        return this;
    }

    public CommerceReview withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public CommerceReview withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public CommerceReview withVerifiedPurchase(boolean verifiedPurchase) {
        Utils.checkNotNull(verifiedPurchase, "verifiedPurchase");
        this.verifiedPurchase = Optional.ofNullable(verifiedPurchase);
        return this;
    }

    public CommerceReview withVerifiedPurchase(Optional<Boolean> verifiedPurchase) {
        Utils.checkNotNull(verifiedPurchase, "verifiedPurchase");
        this.verifiedPurchase = verifiedPurchase;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceReview other = (CommerceReview) o;
        return 
            Objects.deepEquals(this.authorAvatarUrl, other.authorAvatarUrl) &&
            Objects.deepEquals(this.authorEmail, other.authorEmail) &&
            Objects.deepEquals(this.authorLocation, other.authorLocation) &&
            Objects.deepEquals(this.authorName, other.authorName) &&
            Objects.deepEquals(this.comments, other.comments) &&
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.helpfulVotes, other.helpfulVotes) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.isFeatured, other.isFeatured) &&
            Objects.deepEquals(this.isPublic, other.isPublic) &&
            Objects.deepEquals(this.isVerified, other.isVerified) &&
            Objects.deepEquals(this.itemId, other.itemId) &&
            Objects.deepEquals(this.itemVariantId, other.itemVariantId) &&
            Objects.deepEquals(this.media, other.media) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.rating, other.rating) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.unhelpfulVotes, other.unhelpfulVotes) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.verifiedPurchase, other.verifiedPurchase);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authorAvatarUrl,
            authorEmail,
            authorLocation,
            authorName,
            comments,
            content,
            createdAt,
            helpfulVotes,
            id,
            isFeatured,
            isPublic,
            isVerified,
            itemId,
            itemVariantId,
            media,
            metadata,
            rating,
            raw,
            status,
            title,
            unhelpfulVotes,
            updatedAt,
            verifiedPurchase);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceReview.class,
                "authorAvatarUrl", authorAvatarUrl,
                "authorEmail", authorEmail,
                "authorLocation", authorLocation,
                "authorName", authorName,
                "comments", comments,
                "content", content,
                "createdAt", createdAt,
                "helpfulVotes", helpfulVotes,
                "id", id,
                "isFeatured", isFeatured,
                "isPublic", isPublic,
                "isVerified", isVerified,
                "itemId", itemId,
                "itemVariantId", itemVariantId,
                "media", media,
                "metadata", metadata,
                "rating", rating,
                "raw", raw,
                "status", status,
                "title", title,
                "unhelpfulVotes", unhelpfulVotes,
                "updatedAt", updatedAt,
                "verifiedPurchase", verifiedPurchase);
    }
    
    public final static class Builder {
 
        private Optional<String> authorAvatarUrl = Optional.empty();
 
        private Optional<String> authorEmail = Optional.empty();
 
        private Optional<String> authorLocation = Optional.empty();
 
        private Optional<String> authorName = Optional.empty();
 
        private Optional<? extends List<CommerceReviewComment>> comments = Optional.empty();
 
        private Optional<String> content = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<Double> helpfulVotes = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Boolean> isFeatured = Optional.empty();
 
        private Optional<Boolean> isPublic = Optional.empty();
 
        private Optional<Boolean> isVerified = Optional.empty();
 
        private String itemId;
 
        private Optional<String> itemVariantId = Optional.empty();
 
        private Optional<? extends List<CommerceItemMedia>> media = Optional.empty();
 
        private Optional<? extends List<CommerceMetadata>> metadata = Optional.empty();
 
        private Optional<Double> rating = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<? extends CommerceReviewStatus> status = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<Double> unhelpfulVotes = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<Boolean> verifiedPurchase = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder authorAvatarUrl(String authorAvatarUrl) {
            Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
            this.authorAvatarUrl = Optional.ofNullable(authorAvatarUrl);
            return this;
        }

        public Builder authorAvatarUrl(Optional<String> authorAvatarUrl) {
            Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
            this.authorAvatarUrl = authorAvatarUrl;
            return this;
        }

        public Builder authorEmail(String authorEmail) {
            Utils.checkNotNull(authorEmail, "authorEmail");
            this.authorEmail = Optional.ofNullable(authorEmail);
            return this;
        }

        public Builder authorEmail(Optional<String> authorEmail) {
            Utils.checkNotNull(authorEmail, "authorEmail");
            this.authorEmail = authorEmail;
            return this;
        }

        public Builder authorLocation(String authorLocation) {
            Utils.checkNotNull(authorLocation, "authorLocation");
            this.authorLocation = Optional.ofNullable(authorLocation);
            return this;
        }

        public Builder authorLocation(Optional<String> authorLocation) {
            Utils.checkNotNull(authorLocation, "authorLocation");
            this.authorLocation = authorLocation;
            return this;
        }

        public Builder authorName(String authorName) {
            Utils.checkNotNull(authorName, "authorName");
            this.authorName = Optional.ofNullable(authorName);
            return this;
        }

        public Builder authorName(Optional<String> authorName) {
            Utils.checkNotNull(authorName, "authorName");
            this.authorName = authorName;
            return this;
        }

        public Builder comments(List<CommerceReviewComment> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        public Builder comments(Optional<? extends List<CommerceReviewComment>> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = comments;
            return this;
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        public Builder content(Optional<String> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder helpfulVotes(double helpfulVotes) {
            Utils.checkNotNull(helpfulVotes, "helpfulVotes");
            this.helpfulVotes = Optional.ofNullable(helpfulVotes);
            return this;
        }

        public Builder helpfulVotes(Optional<Double> helpfulVotes) {
            Utils.checkNotNull(helpfulVotes, "helpfulVotes");
            this.helpfulVotes = helpfulVotes;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder isFeatured(boolean isFeatured) {
            Utils.checkNotNull(isFeatured, "isFeatured");
            this.isFeatured = Optional.ofNullable(isFeatured);
            return this;
        }

        public Builder isFeatured(Optional<Boolean> isFeatured) {
            Utils.checkNotNull(isFeatured, "isFeatured");
            this.isFeatured = isFeatured;
            return this;
        }

        public Builder isPublic(boolean isPublic) {
            Utils.checkNotNull(isPublic, "isPublic");
            this.isPublic = Optional.ofNullable(isPublic);
            return this;
        }

        public Builder isPublic(Optional<Boolean> isPublic) {
            Utils.checkNotNull(isPublic, "isPublic");
            this.isPublic = isPublic;
            return this;
        }

        public Builder isVerified(boolean isVerified) {
            Utils.checkNotNull(isVerified, "isVerified");
            this.isVerified = Optional.ofNullable(isVerified);
            return this;
        }

        public Builder isVerified(Optional<Boolean> isVerified) {
            Utils.checkNotNull(isVerified, "isVerified");
            this.isVerified = isVerified;
            return this;
        }

        public Builder itemId(String itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = itemId;
            return this;
        }

        public Builder itemVariantId(String itemVariantId) {
            Utils.checkNotNull(itemVariantId, "itemVariantId");
            this.itemVariantId = Optional.ofNullable(itemVariantId);
            return this;
        }

        public Builder itemVariantId(Optional<String> itemVariantId) {
            Utils.checkNotNull(itemVariantId, "itemVariantId");
            this.itemVariantId = itemVariantId;
            return this;
        }

        /**
         * Photosvideos attached to the review
         */
        public Builder media(List<CommerceItemMedia> media) {
            Utils.checkNotNull(media, "media");
            this.media = Optional.ofNullable(media);
            return this;
        }

        /**
         * Photosvideos attached to the review
         */
        public Builder media(Optional<? extends List<CommerceItemMedia>> media) {
            Utils.checkNotNull(media, "media");
            this.media = media;
            return this;
        }

        public Builder metadata(List<CommerceMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends List<CommerceMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder rating(double rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = Optional.ofNullable(rating);
            return this;
        }

        public Builder rating(Optional<Double> rating) {
            Utils.checkNotNull(rating, "rating");
            this.rating = rating;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder status(CommerceReviewStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends CommerceReviewStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder unhelpfulVotes(double unhelpfulVotes) {
            Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
            this.unhelpfulVotes = Optional.ofNullable(unhelpfulVotes);
            return this;
        }

        public Builder unhelpfulVotes(Optional<Double> unhelpfulVotes) {
            Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
            this.unhelpfulVotes = unhelpfulVotes;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder verifiedPurchase(boolean verifiedPurchase) {
            Utils.checkNotNull(verifiedPurchase, "verifiedPurchase");
            this.verifiedPurchase = Optional.ofNullable(verifiedPurchase);
            return this;
        }

        public Builder verifiedPurchase(Optional<Boolean> verifiedPurchase) {
            Utils.checkNotNull(verifiedPurchase, "verifiedPurchase");
            this.verifiedPurchase = verifiedPurchase;
            return this;
        }
        
        public CommerceReview build() {
            return new CommerceReview(
                authorAvatarUrl,
                authorEmail,
                authorLocation,
                authorName,
                comments,
                content,
                createdAt,
                helpfulVotes,
                id,
                isFeatured,
                isPublic,
                isVerified,
                itemId,
                itemVariantId,
                media,
                metadata,
                rating,
                raw,
                status,
                title,
                unhelpfulVotes,
                updatedAt,
                verifiedPurchase);
        }
    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class PropertyCrmEventForm {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("archived_at")
    private Optional<OffsetDateTime> archivedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fields")
    private Optional<? extends List<CrmEventFormField>> fields;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_url")
    private Optional<String> redirectUrl;

    @JsonCreator
    public PropertyCrmEventForm(
            @JsonProperty("archived_at") Optional<OffsetDateTime> archivedAt,
            @JsonProperty("fields") Optional<? extends List<CrmEventFormField>> fields,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("redirect_url") Optional<String> redirectUrl) {
        Utils.checkNotNull(archivedAt, "archivedAt");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.archivedAt = archivedAt;
        this.fields = fields;
        this.name = name;
        this.redirectUrl = redirectUrl;
    }
    
    public PropertyCrmEventForm() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> archivedAt() {
        return archivedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CrmEventFormField>> fields() {
        return (Optional<List<CrmEventFormField>>) fields;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> redirectUrl() {
        return redirectUrl;
    }

    public static Builder builder() {
        return new Builder();
    }


    public PropertyCrmEventForm withArchivedAt(OffsetDateTime archivedAt) {
        Utils.checkNotNull(archivedAt, "archivedAt");
        this.archivedAt = Optional.ofNullable(archivedAt);
        return this;
    }


    public PropertyCrmEventForm withArchivedAt(Optional<OffsetDateTime> archivedAt) {
        Utils.checkNotNull(archivedAt, "archivedAt");
        this.archivedAt = archivedAt;
        return this;
    }

    public PropertyCrmEventForm withFields(List<CrmEventFormField> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }


    public PropertyCrmEventForm withFields(Optional<? extends List<CrmEventFormField>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    public PropertyCrmEventForm withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public PropertyCrmEventForm withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public PropertyCrmEventForm withRedirectUrl(String redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = Optional.ofNullable(redirectUrl);
        return this;
    }


    public PropertyCrmEventForm withRedirectUrl(Optional<String> redirectUrl) {
        Utils.checkNotNull(redirectUrl, "redirectUrl");
        this.redirectUrl = redirectUrl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyCrmEventForm other = (PropertyCrmEventForm) o;
        return 
            Utils.enhancedDeepEquals(this.archivedAt, other.archivedAt) &&
            Utils.enhancedDeepEquals(this.fields, other.fields) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.redirectUrl, other.redirectUrl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            archivedAt, fields, name,
            redirectUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyCrmEventForm.class,
                "archivedAt", archivedAt,
                "fields", fields,
                "name", name,
                "redirectUrl", redirectUrl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<OffsetDateTime> archivedAt = Optional.empty();

        private Optional<? extends List<CrmEventFormField>> fields = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> redirectUrl = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder archivedAt(OffsetDateTime archivedAt) {
            Utils.checkNotNull(archivedAt, "archivedAt");
            this.archivedAt = Optional.ofNullable(archivedAt);
            return this;
        }

        public Builder archivedAt(Optional<OffsetDateTime> archivedAt) {
            Utils.checkNotNull(archivedAt, "archivedAt");
            this.archivedAt = archivedAt;
            return this;
        }


        public Builder fields(List<CrmEventFormField> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        public Builder fields(Optional<? extends List<CrmEventFormField>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder redirectUrl(String redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = Optional.ofNullable(redirectUrl);
            return this;
        }

        public Builder redirectUrl(Optional<String> redirectUrl) {
            Utils.checkNotNull(redirectUrl, "redirectUrl");
            this.redirectUrl = redirectUrl;
            return this;
        }

        public PropertyCrmEventForm build() {

            return new PropertyCrmEventForm(
                archivedAt, fields, name,
                redirectUrl);
        }

    }
}

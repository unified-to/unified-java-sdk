/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class CommerceReviewComment {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_avatar_url")
    private Optional<String> authorAvatarUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_email")
    private Optional<String> authorEmail;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_location")
    private Optional<String> authorLocation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("author_name")
    private Optional<String> authorName;

    @JsonProperty("content")
    private String content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("helpful_votes")
    private Optional<Double> helpfulVotes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_public")
    private Optional<Boolean> isPublic;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_verified")
    private Optional<Boolean> isVerified;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends List<CommerceMetadata>> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends CommerceReviewCommentStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unhelpful_votes")
    private Optional<Double> unhelpfulVotes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public CommerceReviewComment(
            @JsonProperty("author_avatar_url") Optional<String> authorAvatarUrl,
            @JsonProperty("author_email") Optional<String> authorEmail,
            @JsonProperty("author_location") Optional<String> authorLocation,
            @JsonProperty("author_name") Optional<String> authorName,
            @JsonProperty("content") String content,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("helpful_votes") Optional<Double> helpfulVotes,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_public") Optional<Boolean> isPublic,
            @JsonProperty("is_verified") Optional<Boolean> isVerified,
            @JsonProperty("metadata") Optional<? extends List<CommerceMetadata>> metadata,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("status") Optional<? extends CommerceReviewCommentStatus> status,
            @JsonProperty("unhelpful_votes") Optional<Double> unhelpfulVotes,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
        Utils.checkNotNull(authorEmail, "authorEmail");
        Utils.checkNotNull(authorLocation, "authorLocation");
        Utils.checkNotNull(authorName, "authorName");
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(helpfulVotes, "helpfulVotes");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isPublic, "isPublic");
        Utils.checkNotNull(isVerified, "isVerified");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.authorAvatarUrl = authorAvatarUrl;
        this.authorEmail = authorEmail;
        this.authorLocation = authorLocation;
        this.authorName = authorName;
        this.content = content;
        this.createdAt = createdAt;
        this.helpfulVotes = helpfulVotes;
        this.id = id;
        this.isPublic = isPublic;
        this.isVerified = isVerified;
        this.metadata = metadata;
        this.raw = raw;
        this.status = status;
        this.unhelpfulVotes = unhelpfulVotes;
        this.updatedAt = updatedAt;
    }
    
    public CommerceReviewComment(
            String content) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), content, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> authorAvatarUrl() {
        return authorAvatarUrl;
    }

    @JsonIgnore
    public Optional<String> authorEmail() {
        return authorEmail;
    }

    @JsonIgnore
    public Optional<String> authorLocation() {
        return authorLocation;
    }

    @JsonIgnore
    public Optional<String> authorName() {
        return authorName;
    }

    @JsonIgnore
    public String content() {
        return content;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<Double> helpfulVotes() {
        return helpfulVotes;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isPublic() {
        return isPublic;
    }

    @JsonIgnore
    public Optional<Boolean> isVerified() {
        return isVerified;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceMetadata>> metadata() {
        return (Optional<List<CommerceMetadata>>) metadata;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CommerceReviewCommentStatus> status() {
        return (Optional<CommerceReviewCommentStatus>) status;
    }

    @JsonIgnore
    public Optional<Double> unhelpfulVotes() {
        return unhelpfulVotes;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CommerceReviewComment withAuthorAvatarUrl(String authorAvatarUrl) {
        Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
        this.authorAvatarUrl = Optional.ofNullable(authorAvatarUrl);
        return this;
    }

    public CommerceReviewComment withAuthorAvatarUrl(Optional<String> authorAvatarUrl) {
        Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
        this.authorAvatarUrl = authorAvatarUrl;
        return this;
    }

    public CommerceReviewComment withAuthorEmail(String authorEmail) {
        Utils.checkNotNull(authorEmail, "authorEmail");
        this.authorEmail = Optional.ofNullable(authorEmail);
        return this;
    }

    public CommerceReviewComment withAuthorEmail(Optional<String> authorEmail) {
        Utils.checkNotNull(authorEmail, "authorEmail");
        this.authorEmail = authorEmail;
        return this;
    }

    public CommerceReviewComment withAuthorLocation(String authorLocation) {
        Utils.checkNotNull(authorLocation, "authorLocation");
        this.authorLocation = Optional.ofNullable(authorLocation);
        return this;
    }

    public CommerceReviewComment withAuthorLocation(Optional<String> authorLocation) {
        Utils.checkNotNull(authorLocation, "authorLocation");
        this.authorLocation = authorLocation;
        return this;
    }

    public CommerceReviewComment withAuthorName(String authorName) {
        Utils.checkNotNull(authorName, "authorName");
        this.authorName = Optional.ofNullable(authorName);
        return this;
    }

    public CommerceReviewComment withAuthorName(Optional<String> authorName) {
        Utils.checkNotNull(authorName, "authorName");
        this.authorName = authorName;
        return this;
    }

    public CommerceReviewComment withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public CommerceReviewComment withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public CommerceReviewComment withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public CommerceReviewComment withHelpfulVotes(double helpfulVotes) {
        Utils.checkNotNull(helpfulVotes, "helpfulVotes");
        this.helpfulVotes = Optional.ofNullable(helpfulVotes);
        return this;
    }

    public CommerceReviewComment withHelpfulVotes(Optional<Double> helpfulVotes) {
        Utils.checkNotNull(helpfulVotes, "helpfulVotes");
        this.helpfulVotes = helpfulVotes;
        return this;
    }

    public CommerceReviewComment withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CommerceReviewComment withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CommerceReviewComment withIsPublic(boolean isPublic) {
        Utils.checkNotNull(isPublic, "isPublic");
        this.isPublic = Optional.ofNullable(isPublic);
        return this;
    }

    public CommerceReviewComment withIsPublic(Optional<Boolean> isPublic) {
        Utils.checkNotNull(isPublic, "isPublic");
        this.isPublic = isPublic;
        return this;
    }

    public CommerceReviewComment withIsVerified(boolean isVerified) {
        Utils.checkNotNull(isVerified, "isVerified");
        this.isVerified = Optional.ofNullable(isVerified);
        return this;
    }

    public CommerceReviewComment withIsVerified(Optional<Boolean> isVerified) {
        Utils.checkNotNull(isVerified, "isVerified");
        this.isVerified = isVerified;
        return this;
    }

    public CommerceReviewComment withMetadata(List<CommerceMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public CommerceReviewComment withMetadata(Optional<? extends List<CommerceMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public CommerceReviewComment withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public CommerceReviewComment withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public CommerceReviewComment withStatus(CommerceReviewCommentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public CommerceReviewComment withStatus(Optional<? extends CommerceReviewCommentStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public CommerceReviewComment withUnhelpfulVotes(double unhelpfulVotes) {
        Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
        this.unhelpfulVotes = Optional.ofNullable(unhelpfulVotes);
        return this;
    }

    public CommerceReviewComment withUnhelpfulVotes(Optional<Double> unhelpfulVotes) {
        Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
        this.unhelpfulVotes = unhelpfulVotes;
        return this;
    }

    public CommerceReviewComment withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public CommerceReviewComment withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceReviewComment other = (CommerceReviewComment) o;
        return 
            Utils.enhancedDeepEquals(this.authorAvatarUrl, other.authorAvatarUrl) &&
            Utils.enhancedDeepEquals(this.authorEmail, other.authorEmail) &&
            Utils.enhancedDeepEquals(this.authorLocation, other.authorLocation) &&
            Utils.enhancedDeepEquals(this.authorName, other.authorName) &&
            Utils.enhancedDeepEquals(this.content, other.content) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.helpfulVotes, other.helpfulVotes) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.isPublic, other.isPublic) &&
            Utils.enhancedDeepEquals(this.isVerified, other.isVerified) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.unhelpfulVotes, other.unhelpfulVotes) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            authorAvatarUrl,
            authorEmail,
            authorLocation,
            authorName,
            content,
            createdAt,
            helpfulVotes,
            id,
            isPublic,
            isVerified,
            metadata,
            raw,
            status,
            unhelpfulVotes,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceReviewComment.class,
                "authorAvatarUrl", authorAvatarUrl,
                "authorEmail", authorEmail,
                "authorLocation", authorLocation,
                "authorName", authorName,
                "content", content,
                "createdAt", createdAt,
                "helpfulVotes", helpfulVotes,
                "id", id,
                "isPublic", isPublic,
                "isVerified", isVerified,
                "metadata", metadata,
                "raw", raw,
                "status", status,
                "unhelpfulVotes", unhelpfulVotes,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<String> authorAvatarUrl = Optional.empty();
 
        private Optional<String> authorEmail = Optional.empty();
 
        private Optional<String> authorLocation = Optional.empty();
 
        private Optional<String> authorName = Optional.empty();
 
        private String content;
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<Double> helpfulVotes = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Boolean> isPublic = Optional.empty();
 
        private Optional<Boolean> isVerified = Optional.empty();
 
        private Optional<? extends List<CommerceMetadata>> metadata = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<? extends CommerceReviewCommentStatus> status = Optional.empty();
 
        private Optional<Double> unhelpfulVotes = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder authorAvatarUrl(String authorAvatarUrl) {
            Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
            this.authorAvatarUrl = Optional.ofNullable(authorAvatarUrl);
            return this;
        }

        public Builder authorAvatarUrl(Optional<String> authorAvatarUrl) {
            Utils.checkNotNull(authorAvatarUrl, "authorAvatarUrl");
            this.authorAvatarUrl = authorAvatarUrl;
            return this;
        }

        public Builder authorEmail(String authorEmail) {
            Utils.checkNotNull(authorEmail, "authorEmail");
            this.authorEmail = Optional.ofNullable(authorEmail);
            return this;
        }

        public Builder authorEmail(Optional<String> authorEmail) {
            Utils.checkNotNull(authorEmail, "authorEmail");
            this.authorEmail = authorEmail;
            return this;
        }

        public Builder authorLocation(String authorLocation) {
            Utils.checkNotNull(authorLocation, "authorLocation");
            this.authorLocation = Optional.ofNullable(authorLocation);
            return this;
        }

        public Builder authorLocation(Optional<String> authorLocation) {
            Utils.checkNotNull(authorLocation, "authorLocation");
            this.authorLocation = authorLocation;
            return this;
        }

        public Builder authorName(String authorName) {
            Utils.checkNotNull(authorName, "authorName");
            this.authorName = Optional.ofNullable(authorName);
            return this;
        }

        public Builder authorName(Optional<String> authorName) {
            Utils.checkNotNull(authorName, "authorName");
            this.authorName = authorName;
            return this;
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder helpfulVotes(double helpfulVotes) {
            Utils.checkNotNull(helpfulVotes, "helpfulVotes");
            this.helpfulVotes = Optional.ofNullable(helpfulVotes);
            return this;
        }

        public Builder helpfulVotes(Optional<Double> helpfulVotes) {
            Utils.checkNotNull(helpfulVotes, "helpfulVotes");
            this.helpfulVotes = helpfulVotes;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder isPublic(boolean isPublic) {
            Utils.checkNotNull(isPublic, "isPublic");
            this.isPublic = Optional.ofNullable(isPublic);
            return this;
        }

        public Builder isPublic(Optional<Boolean> isPublic) {
            Utils.checkNotNull(isPublic, "isPublic");
            this.isPublic = isPublic;
            return this;
        }

        public Builder isVerified(boolean isVerified) {
            Utils.checkNotNull(isVerified, "isVerified");
            this.isVerified = Optional.ofNullable(isVerified);
            return this;
        }

        public Builder isVerified(Optional<Boolean> isVerified) {
            Utils.checkNotNull(isVerified, "isVerified");
            this.isVerified = isVerified;
            return this;
        }

        public Builder metadata(List<CommerceMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends List<CommerceMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder status(CommerceReviewCommentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends CommerceReviewCommentStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder unhelpfulVotes(double unhelpfulVotes) {
            Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
            this.unhelpfulVotes = Optional.ofNullable(unhelpfulVotes);
            return this;
        }

        public Builder unhelpfulVotes(Optional<Double> unhelpfulVotes) {
            Utils.checkNotNull(unhelpfulVotes, "unhelpfulVotes");
            this.unhelpfulVotes = unhelpfulVotes;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public CommerceReviewComment build() {
            return new CommerceReviewComment(
                authorAvatarUrl,
                authorEmail,
                authorLocation,
                authorName,
                content,
                createdAt,
                helpfulVotes,
                id,
                isPublic,
                isVerified,
                metadata,
                raw,
                status,
                unhelpfulVotes,
                updatedAt);
        }
    }
}

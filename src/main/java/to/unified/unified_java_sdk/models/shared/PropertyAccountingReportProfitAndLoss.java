/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class PropertyAccountingReportProfitAndLoss {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cost_of_goods_sold")
    private Optional<? extends List<AccountingProfitAndLossCategory>> costOfGoodsSold;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expenses")
    private Optional<? extends List<AccountingProfitAndLossCategory>> expenses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_profit_amount")
    private Optional<Double> grossProfitAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("income")
    private Optional<? extends List<AccountingProfitAndLossCategory>> income;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_profit_amount")
    private Optional<Double> netProfitAmount;

    @JsonCreator
    public PropertyAccountingReportProfitAndLoss(
            @JsonProperty("cost_of_goods_sold") Optional<? extends List<AccountingProfitAndLossCategory>> costOfGoodsSold,
            @JsonProperty("expenses") Optional<? extends List<AccountingProfitAndLossCategory>> expenses,
            @JsonProperty("gross_profit_amount") Optional<Double> grossProfitAmount,
            @JsonProperty("income") Optional<? extends List<AccountingProfitAndLossCategory>> income,
            @JsonProperty("net_profit_amount") Optional<Double> netProfitAmount) {
        Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
        Utils.checkNotNull(expenses, "expenses");
        Utils.checkNotNull(grossProfitAmount, "grossProfitAmount");
        Utils.checkNotNull(income, "income");
        Utils.checkNotNull(netProfitAmount, "netProfitAmount");
        this.costOfGoodsSold = costOfGoodsSold;
        this.expenses = expenses;
        this.grossProfitAmount = grossProfitAmount;
        this.income = income;
        this.netProfitAmount = netProfitAmount;
    }
    
    public PropertyAccountingReportProfitAndLoss() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingProfitAndLossCategory>> costOfGoodsSold() {
        return (Optional<List<AccountingProfitAndLossCategory>>) costOfGoodsSold;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingProfitAndLossCategory>> expenses() {
        return (Optional<List<AccountingProfitAndLossCategory>>) expenses;
    }

    @JsonIgnore
    public Optional<Double> grossProfitAmount() {
        return grossProfitAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingProfitAndLossCategory>> income() {
        return (Optional<List<AccountingProfitAndLossCategory>>) income;
    }

    @JsonIgnore
    public Optional<Double> netProfitAmount() {
        return netProfitAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PropertyAccountingReportProfitAndLoss withCostOfGoodsSold(List<AccountingProfitAndLossCategory> costOfGoodsSold) {
        Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
        this.costOfGoodsSold = Optional.ofNullable(costOfGoodsSold);
        return this;
    }

    public PropertyAccountingReportProfitAndLoss withCostOfGoodsSold(Optional<? extends List<AccountingProfitAndLossCategory>> costOfGoodsSold) {
        Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
        this.costOfGoodsSold = costOfGoodsSold;
        return this;
    }

    public PropertyAccountingReportProfitAndLoss withExpenses(List<AccountingProfitAndLossCategory> expenses) {
        Utils.checkNotNull(expenses, "expenses");
        this.expenses = Optional.ofNullable(expenses);
        return this;
    }

    public PropertyAccountingReportProfitAndLoss withExpenses(Optional<? extends List<AccountingProfitAndLossCategory>> expenses) {
        Utils.checkNotNull(expenses, "expenses");
        this.expenses = expenses;
        return this;
    }

    public PropertyAccountingReportProfitAndLoss withGrossProfitAmount(double grossProfitAmount) {
        Utils.checkNotNull(grossProfitAmount, "grossProfitAmount");
        this.grossProfitAmount = Optional.ofNullable(grossProfitAmount);
        return this;
    }

    public PropertyAccountingReportProfitAndLoss withGrossProfitAmount(Optional<Double> grossProfitAmount) {
        Utils.checkNotNull(grossProfitAmount, "grossProfitAmount");
        this.grossProfitAmount = grossProfitAmount;
        return this;
    }

    public PropertyAccountingReportProfitAndLoss withIncome(List<AccountingProfitAndLossCategory> income) {
        Utils.checkNotNull(income, "income");
        this.income = Optional.ofNullable(income);
        return this;
    }

    public PropertyAccountingReportProfitAndLoss withIncome(Optional<? extends List<AccountingProfitAndLossCategory>> income) {
        Utils.checkNotNull(income, "income");
        this.income = income;
        return this;
    }

    public PropertyAccountingReportProfitAndLoss withNetProfitAmount(double netProfitAmount) {
        Utils.checkNotNull(netProfitAmount, "netProfitAmount");
        this.netProfitAmount = Optional.ofNullable(netProfitAmount);
        return this;
    }

    public PropertyAccountingReportProfitAndLoss withNetProfitAmount(Optional<Double> netProfitAmount) {
        Utils.checkNotNull(netProfitAmount, "netProfitAmount");
        this.netProfitAmount = netProfitAmount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyAccountingReportProfitAndLoss other = (PropertyAccountingReportProfitAndLoss) o;
        return 
            Utils.enhancedDeepEquals(this.costOfGoodsSold, other.costOfGoodsSold) &&
            Utils.enhancedDeepEquals(this.expenses, other.expenses) &&
            Utils.enhancedDeepEquals(this.grossProfitAmount, other.grossProfitAmount) &&
            Utils.enhancedDeepEquals(this.income, other.income) &&
            Utils.enhancedDeepEquals(this.netProfitAmount, other.netProfitAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            costOfGoodsSold,
            expenses,
            grossProfitAmount,
            income,
            netProfitAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyAccountingReportProfitAndLoss.class,
                "costOfGoodsSold", costOfGoodsSold,
                "expenses", expenses,
                "grossProfitAmount", grossProfitAmount,
                "income", income,
                "netProfitAmount", netProfitAmount);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AccountingProfitAndLossCategory>> costOfGoodsSold = Optional.empty();
 
        private Optional<? extends List<AccountingProfitAndLossCategory>> expenses = Optional.empty();
 
        private Optional<Double> grossProfitAmount = Optional.empty();
 
        private Optional<? extends List<AccountingProfitAndLossCategory>> income = Optional.empty();
 
        private Optional<Double> netProfitAmount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder costOfGoodsSold(List<AccountingProfitAndLossCategory> costOfGoodsSold) {
            Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
            this.costOfGoodsSold = Optional.ofNullable(costOfGoodsSold);
            return this;
        }

        public Builder costOfGoodsSold(Optional<? extends List<AccountingProfitAndLossCategory>> costOfGoodsSold) {
            Utils.checkNotNull(costOfGoodsSold, "costOfGoodsSold");
            this.costOfGoodsSold = costOfGoodsSold;
            return this;
        }

        public Builder expenses(List<AccountingProfitAndLossCategory> expenses) {
            Utils.checkNotNull(expenses, "expenses");
            this.expenses = Optional.ofNullable(expenses);
            return this;
        }

        public Builder expenses(Optional<? extends List<AccountingProfitAndLossCategory>> expenses) {
            Utils.checkNotNull(expenses, "expenses");
            this.expenses = expenses;
            return this;
        }

        public Builder grossProfitAmount(double grossProfitAmount) {
            Utils.checkNotNull(grossProfitAmount, "grossProfitAmount");
            this.grossProfitAmount = Optional.ofNullable(grossProfitAmount);
            return this;
        }

        public Builder grossProfitAmount(Optional<Double> grossProfitAmount) {
            Utils.checkNotNull(grossProfitAmount, "grossProfitAmount");
            this.grossProfitAmount = grossProfitAmount;
            return this;
        }

        public Builder income(List<AccountingProfitAndLossCategory> income) {
            Utils.checkNotNull(income, "income");
            this.income = Optional.ofNullable(income);
            return this;
        }

        public Builder income(Optional<? extends List<AccountingProfitAndLossCategory>> income) {
            Utils.checkNotNull(income, "income");
            this.income = income;
            return this;
        }

        public Builder netProfitAmount(double netProfitAmount) {
            Utils.checkNotNull(netProfitAmount, "netProfitAmount");
            this.netProfitAmount = Optional.ofNullable(netProfitAmount);
            return this;
        }

        public Builder netProfitAmount(Optional<Double> netProfitAmount) {
            Utils.checkNotNull(netProfitAmount, "netProfitAmount");
            this.netProfitAmount = netProfitAmount;
            return this;
        }
        
        public PropertyAccountingReportProfitAndLoss build() {
            return new PropertyAccountingReportProfitAndLoss(
                costOfGoodsSold,
                expenses,
                grossProfitAmount,
                income,
                netProfitAmount);
        }
    }
}

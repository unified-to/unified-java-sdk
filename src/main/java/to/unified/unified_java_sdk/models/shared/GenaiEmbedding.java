/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class GenaiEmbedding {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("content")
    private Optional<? extends List<GenaiEmbeddingContent>> content;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dimension")
    private Optional<Double> dimension;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("embeddings")
    private Optional<String> embeddings;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("enconding_format")
    private Optional<? extends EncondingFormat> encondingFormat;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_tokens")
    private Optional<Double> maxTokens;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model_id")
    private Optional<String> modelId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokens_used")
    private Optional<Double> tokensUsed;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonCreator
    public GenaiEmbedding(
            @JsonProperty("content") Optional<? extends List<GenaiEmbeddingContent>> content,
            @JsonProperty("dimension") Optional<Double> dimension,
            @JsonProperty("embeddings") Optional<String> embeddings,
            @JsonProperty("enconding_format") Optional<? extends EncondingFormat> encondingFormat,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("max_tokens") Optional<Double> maxTokens,
            @JsonProperty("model_id") Optional<String> modelId,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("tokens_used") Optional<Double> tokensUsed,
            @JsonProperty("type") Optional<String> type) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(dimension, "dimension");
        Utils.checkNotNull(embeddings, "embeddings");
        Utils.checkNotNull(encondingFormat, "encondingFormat");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(maxTokens, "maxTokens");
        Utils.checkNotNull(modelId, "modelId");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(tokensUsed, "tokensUsed");
        Utils.checkNotNull(type, "type");
        this.content = content;
        this.dimension = dimension;
        this.embeddings = embeddings;
        this.encondingFormat = encondingFormat;
        this.id = id;
        this.maxTokens = maxTokens;
        this.modelId = modelId;
        this.raw = raw;
        this.tokensUsed = tokensUsed;
        this.type = type;
    }
    
    public GenaiEmbedding() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GenaiEmbeddingContent>> content() {
        return (Optional<List<GenaiEmbeddingContent>>) content;
    }

    @JsonIgnore
    public Optional<Double> dimension() {
        return dimension;
    }

    @JsonIgnore
    public Optional<String> embeddings() {
        return embeddings;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EncondingFormat> encondingFormat() {
        return (Optional<EncondingFormat>) encondingFormat;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Double> maxTokens() {
        return maxTokens;
    }

    @JsonIgnore
    public Optional<String> modelId() {
        return modelId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<Double> tokensUsed() {
        return tokensUsed;
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    public static Builder builder() {
        return new Builder();
    }


    public GenaiEmbedding withContent(List<GenaiEmbeddingContent> content) {
        Utils.checkNotNull(content, "content");
        this.content = Optional.ofNullable(content);
        return this;
    }


    public GenaiEmbedding withContent(Optional<? extends List<GenaiEmbeddingContent>> content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public GenaiEmbedding withDimension(double dimension) {
        Utils.checkNotNull(dimension, "dimension");
        this.dimension = Optional.ofNullable(dimension);
        return this;
    }


    public GenaiEmbedding withDimension(Optional<Double> dimension) {
        Utils.checkNotNull(dimension, "dimension");
        this.dimension = dimension;
        return this;
    }

    public GenaiEmbedding withEmbeddings(String embeddings) {
        Utils.checkNotNull(embeddings, "embeddings");
        this.embeddings = Optional.ofNullable(embeddings);
        return this;
    }


    public GenaiEmbedding withEmbeddings(Optional<String> embeddings) {
        Utils.checkNotNull(embeddings, "embeddings");
        this.embeddings = embeddings;
        return this;
    }

    public GenaiEmbedding withEncondingFormat(EncondingFormat encondingFormat) {
        Utils.checkNotNull(encondingFormat, "encondingFormat");
        this.encondingFormat = Optional.ofNullable(encondingFormat);
        return this;
    }


    public GenaiEmbedding withEncondingFormat(Optional<? extends EncondingFormat> encondingFormat) {
        Utils.checkNotNull(encondingFormat, "encondingFormat");
        this.encondingFormat = encondingFormat;
        return this;
    }

    public GenaiEmbedding withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public GenaiEmbedding withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public GenaiEmbedding withMaxTokens(double maxTokens) {
        Utils.checkNotNull(maxTokens, "maxTokens");
        this.maxTokens = Optional.ofNullable(maxTokens);
        return this;
    }


    public GenaiEmbedding withMaxTokens(Optional<Double> maxTokens) {
        Utils.checkNotNull(maxTokens, "maxTokens");
        this.maxTokens = maxTokens;
        return this;
    }

    public GenaiEmbedding withModelId(String modelId) {
        Utils.checkNotNull(modelId, "modelId");
        this.modelId = Optional.ofNullable(modelId);
        return this;
    }


    public GenaiEmbedding withModelId(Optional<String> modelId) {
        Utils.checkNotNull(modelId, "modelId");
        this.modelId = modelId;
        return this;
    }

    public GenaiEmbedding withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public GenaiEmbedding withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public GenaiEmbedding withTokensUsed(double tokensUsed) {
        Utils.checkNotNull(tokensUsed, "tokensUsed");
        this.tokensUsed = Optional.ofNullable(tokensUsed);
        return this;
    }


    public GenaiEmbedding withTokensUsed(Optional<Double> tokensUsed) {
        Utils.checkNotNull(tokensUsed, "tokensUsed");
        this.tokensUsed = tokensUsed;
        return this;
    }

    public GenaiEmbedding withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public GenaiEmbedding withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenaiEmbedding other = (GenaiEmbedding) o;
        return 
            Utils.enhancedDeepEquals(this.content, other.content) &&
            Utils.enhancedDeepEquals(this.dimension, other.dimension) &&
            Utils.enhancedDeepEquals(this.embeddings, other.embeddings) &&
            Utils.enhancedDeepEquals(this.encondingFormat, other.encondingFormat) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.maxTokens, other.maxTokens) &&
            Utils.enhancedDeepEquals(this.modelId, other.modelId) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.tokensUsed, other.tokensUsed) &&
            Utils.enhancedDeepEquals(this.type, other.type);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            content, dimension, embeddings,
            encondingFormat, id, maxTokens,
            modelId, raw, tokensUsed,
            type);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GenaiEmbedding.class,
                "content", content,
                "dimension", dimension,
                "embeddings", embeddings,
                "encondingFormat", encondingFormat,
                "id", id,
                "maxTokens", maxTokens,
                "modelId", modelId,
                "raw", raw,
                "tokensUsed", tokensUsed,
                "type", type);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<GenaiEmbeddingContent>> content = Optional.empty();

        private Optional<Double> dimension = Optional.empty();

        private Optional<String> embeddings = Optional.empty();

        private Optional<? extends EncondingFormat> encondingFormat = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<Double> maxTokens = Optional.empty();

        private Optional<String> modelId = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<Double> tokensUsed = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder content(List<GenaiEmbeddingContent> content) {
            Utils.checkNotNull(content, "content");
            this.content = Optional.ofNullable(content);
            return this;
        }

        public Builder content(Optional<? extends List<GenaiEmbeddingContent>> content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }


        public Builder dimension(double dimension) {
            Utils.checkNotNull(dimension, "dimension");
            this.dimension = Optional.ofNullable(dimension);
            return this;
        }

        public Builder dimension(Optional<Double> dimension) {
            Utils.checkNotNull(dimension, "dimension");
            this.dimension = dimension;
            return this;
        }


        public Builder embeddings(String embeddings) {
            Utils.checkNotNull(embeddings, "embeddings");
            this.embeddings = Optional.ofNullable(embeddings);
            return this;
        }

        public Builder embeddings(Optional<String> embeddings) {
            Utils.checkNotNull(embeddings, "embeddings");
            this.embeddings = embeddings;
            return this;
        }


        public Builder encondingFormat(EncondingFormat encondingFormat) {
            Utils.checkNotNull(encondingFormat, "encondingFormat");
            this.encondingFormat = Optional.ofNullable(encondingFormat);
            return this;
        }

        public Builder encondingFormat(Optional<? extends EncondingFormat> encondingFormat) {
            Utils.checkNotNull(encondingFormat, "encondingFormat");
            this.encondingFormat = encondingFormat;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder maxTokens(double maxTokens) {
            Utils.checkNotNull(maxTokens, "maxTokens");
            this.maxTokens = Optional.ofNullable(maxTokens);
            return this;
        }

        public Builder maxTokens(Optional<Double> maxTokens) {
            Utils.checkNotNull(maxTokens, "maxTokens");
            this.maxTokens = maxTokens;
            return this;
        }


        public Builder modelId(String modelId) {
            Utils.checkNotNull(modelId, "modelId");
            this.modelId = Optional.ofNullable(modelId);
            return this;
        }

        public Builder modelId(Optional<String> modelId) {
            Utils.checkNotNull(modelId, "modelId");
            this.modelId = modelId;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder tokensUsed(double tokensUsed) {
            Utils.checkNotNull(tokensUsed, "tokensUsed");
            this.tokensUsed = Optional.ofNullable(tokensUsed);
            return this;
        }

        public Builder tokensUsed(Optional<Double> tokensUsed) {
            Utils.checkNotNull(tokensUsed, "tokensUsed");
            this.tokensUsed = tokensUsed;
            return this;
        }


        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public GenaiEmbedding build() {

            return new GenaiEmbedding(
                content, dimension, embeddings,
                encondingFormat, id, maxTokens,
                modelId, raw, tokensUsed,
                type);
        }

    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * AccountingAccount
 * 
 * <p>Chart of accounts
 */
public class AccountingAccount {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance")
    private Optional<Double> balance;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("customer_defined_code")
    private Optional<String> customerDefinedCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group")
    private Optional<String> group;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_payable")
    private Optional<Boolean> isPayable;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_account_id")
    private Optional<String> parentAccountId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private Optional<String> parentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("section")
    private Optional<String> section;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Status> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subgroup")
    private Optional<String> subgroup;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subsection")
    private Optional<String> subsection;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends Type> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public AccountingAccount(
            @JsonProperty("balance") Optional<Double> balance,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("customer_defined_code") Optional<String> customerDefinedCode,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("group") Optional<String> group,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_payable") Optional<Boolean> isPayable,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("parent_account_id") Optional<String> parentAccountId,
            @JsonProperty("parent_id") Optional<String> parentId,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("section") Optional<String> section,
            @JsonProperty("status") Optional<? extends Status> status,
            @JsonProperty("subgroup") Optional<String> subgroup,
            @JsonProperty("subsection") Optional<String> subsection,
            @JsonProperty("type") Optional<? extends Type> type,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(balance, "balance");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(customerDefinedCode, "customerDefinedCode");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(group, "group");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isPayable, "isPayable");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(parentAccountId, "parentAccountId");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(section, "section");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(subgroup, "subgroup");
        Utils.checkNotNull(subsection, "subsection");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.balance = balance;
        this.createdAt = createdAt;
        this.currency = currency;
        this.customerDefinedCode = customerDefinedCode;
        this.description = description;
        this.group = group;
        this.id = id;
        this.isPayable = isPayable;
        this.name = name;
        this.parentAccountId = parentAccountId;
        this.parentId = parentId;
        this.raw = raw;
        this.section = section;
        this.status = status;
        this.subgroup = subgroup;
        this.subsection = subsection;
        this.type = type;
        this.updatedAt = updatedAt;
    }
    
    public AccountingAccount() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> balance() {
        return balance;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<String> customerDefinedCode() {
        return customerDefinedCode;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> group() {
        return group;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isPayable() {
        return isPayable;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> parentAccountId() {
        return parentAccountId;
    }

    @JsonIgnore
    public Optional<String> parentId() {
        return parentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<String> section() {
        return section;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    @JsonIgnore
    public Optional<String> subgroup() {
        return subgroup;
    }

    @JsonIgnore
    public Optional<String> subsection() {
        return subsection;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Type> type() {
        return (Optional<Type>) type;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AccountingAccount withBalance(double balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = Optional.ofNullable(balance);
        return this;
    }

    public AccountingAccount withBalance(Optional<Double> balance) {
        Utils.checkNotNull(balance, "balance");
        this.balance = balance;
        return this;
    }

    public AccountingAccount withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public AccountingAccount withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AccountingAccount withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    public AccountingAccount withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AccountingAccount withCustomerDefinedCode(String customerDefinedCode) {
        Utils.checkNotNull(customerDefinedCode, "customerDefinedCode");
        this.customerDefinedCode = Optional.ofNullable(customerDefinedCode);
        return this;
    }

    public AccountingAccount withCustomerDefinedCode(Optional<String> customerDefinedCode) {
        Utils.checkNotNull(customerDefinedCode, "customerDefinedCode");
        this.customerDefinedCode = customerDefinedCode;
        return this;
    }

    public AccountingAccount withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public AccountingAccount withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public AccountingAccount withGroup(String group) {
        Utils.checkNotNull(group, "group");
        this.group = Optional.ofNullable(group);
        return this;
    }

    public AccountingAccount withGroup(Optional<String> group) {
        Utils.checkNotNull(group, "group");
        this.group = group;
        return this;
    }

    public AccountingAccount withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public AccountingAccount withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AccountingAccount withIsPayable(boolean isPayable) {
        Utils.checkNotNull(isPayable, "isPayable");
        this.isPayable = Optional.ofNullable(isPayable);
        return this;
    }

    public AccountingAccount withIsPayable(Optional<Boolean> isPayable) {
        Utils.checkNotNull(isPayable, "isPayable");
        this.isPayable = isPayable;
        return this;
    }

    public AccountingAccount withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public AccountingAccount withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AccountingAccount withParentAccountId(String parentAccountId) {
        Utils.checkNotNull(parentAccountId, "parentAccountId");
        this.parentAccountId = Optional.ofNullable(parentAccountId);
        return this;
    }

    public AccountingAccount withParentAccountId(Optional<String> parentAccountId) {
        Utils.checkNotNull(parentAccountId, "parentAccountId");
        this.parentAccountId = parentAccountId;
        return this;
    }

    public AccountingAccount withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = Optional.ofNullable(parentId);
        return this;
    }

    public AccountingAccount withParentId(Optional<String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    public AccountingAccount withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public AccountingAccount withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AccountingAccount withSection(String section) {
        Utils.checkNotNull(section, "section");
        this.section = Optional.ofNullable(section);
        return this;
    }

    public AccountingAccount withSection(Optional<String> section) {
        Utils.checkNotNull(section, "section");
        this.section = section;
        return this;
    }

    public AccountingAccount withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public AccountingAccount withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public AccountingAccount withSubgroup(String subgroup) {
        Utils.checkNotNull(subgroup, "subgroup");
        this.subgroup = Optional.ofNullable(subgroup);
        return this;
    }

    public AccountingAccount withSubgroup(Optional<String> subgroup) {
        Utils.checkNotNull(subgroup, "subgroup");
        this.subgroup = subgroup;
        return this;
    }

    public AccountingAccount withSubsection(String subsection) {
        Utils.checkNotNull(subsection, "subsection");
        this.subsection = Optional.ofNullable(subsection);
        return this;
    }

    public AccountingAccount withSubsection(Optional<String> subsection) {
        Utils.checkNotNull(subsection, "subsection");
        this.subsection = subsection;
        return this;
    }

    public AccountingAccount withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public AccountingAccount withType(Optional<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public AccountingAccount withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public AccountingAccount withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingAccount other = (AccountingAccount) o;
        return 
            Objects.deepEquals(this.balance, other.balance) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.customerDefinedCode, other.customerDefinedCode) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.group, other.group) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.isPayable, other.isPayable) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.parentAccountId, other.parentAccountId) &&
            Objects.deepEquals(this.parentId, other.parentId) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.section, other.section) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.subgroup, other.subgroup) &&
            Objects.deepEquals(this.subsection, other.subsection) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            balance,
            createdAt,
            currency,
            customerDefinedCode,
            description,
            group,
            id,
            isPayable,
            name,
            parentAccountId,
            parentId,
            raw,
            section,
            status,
            subgroup,
            subsection,
            type,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingAccount.class,
                "balance", balance,
                "createdAt", createdAt,
                "currency", currency,
                "customerDefinedCode", customerDefinedCode,
                "description", description,
                "group", group,
                "id", id,
                "isPayable", isPayable,
                "name", name,
                "parentAccountId", parentAccountId,
                "parentId", parentId,
                "raw", raw,
                "section", section,
                "status", status,
                "subgroup", subgroup,
                "subsection", subsection,
                "type", type,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<Double> balance = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<String> customerDefinedCode = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> group = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Boolean> isPayable = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> parentAccountId = Optional.empty();
 
        private Optional<String> parentId = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<String> section = Optional.empty();
 
        private Optional<? extends Status> status = Optional.empty();
 
        private Optional<String> subgroup = Optional.empty();
 
        private Optional<String> subsection = Optional.empty();
 
        private Optional<? extends Type> type = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder balance(double balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = Optional.ofNullable(balance);
            return this;
        }

        public Builder balance(Optional<Double> balance) {
            Utils.checkNotNull(balance, "balance");
            this.balance = balance;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder customerDefinedCode(String customerDefinedCode) {
            Utils.checkNotNull(customerDefinedCode, "customerDefinedCode");
            this.customerDefinedCode = Optional.ofNullable(customerDefinedCode);
            return this;
        }

        public Builder customerDefinedCode(Optional<String> customerDefinedCode) {
            Utils.checkNotNull(customerDefinedCode, "customerDefinedCode");
            this.customerDefinedCode = customerDefinedCode;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder group(String group) {
            Utils.checkNotNull(group, "group");
            this.group = Optional.ofNullable(group);
            return this;
        }

        public Builder group(Optional<String> group) {
            Utils.checkNotNull(group, "group");
            this.group = group;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder isPayable(boolean isPayable) {
            Utils.checkNotNull(isPayable, "isPayable");
            this.isPayable = Optional.ofNullable(isPayable);
            return this;
        }

        public Builder isPayable(Optional<Boolean> isPayable) {
            Utils.checkNotNull(isPayable, "isPayable");
            this.isPayable = isPayable;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder parentAccountId(String parentAccountId) {
            Utils.checkNotNull(parentAccountId, "parentAccountId");
            this.parentAccountId = Optional.ofNullable(parentAccountId);
            return this;
        }

        public Builder parentAccountId(Optional<String> parentAccountId) {
            Utils.checkNotNull(parentAccountId, "parentAccountId");
            this.parentAccountId = parentAccountId;
            return this;
        }

        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = Optional.ofNullable(parentId);
            return this;
        }

        public Builder parentId(Optional<String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder section(String section) {
            Utils.checkNotNull(section, "section");
            this.section = Optional.ofNullable(section);
            return this;
        }

        public Builder section(Optional<String> section) {
            Utils.checkNotNull(section, "section");
            this.section = section;
            return this;
        }

        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder subgroup(String subgroup) {
            Utils.checkNotNull(subgroup, "subgroup");
            this.subgroup = Optional.ofNullable(subgroup);
            return this;
        }

        public Builder subgroup(Optional<String> subgroup) {
            Utils.checkNotNull(subgroup, "subgroup");
            this.subgroup = subgroup;
            return this;
        }

        public Builder subsection(String subsection) {
            Utils.checkNotNull(subsection, "subsection");
            this.subsection = Optional.ofNullable(subsection);
            return this;
        }

        public Builder subsection(Optional<String> subsection) {
            Utils.checkNotNull(subsection, "subsection");
            this.subsection = subsection;
            return this;
        }

        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends Type> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public AccountingAccount build() {
            return new AccountingAccount(
                balance,
                createdAt,
                currency,
                customerDefinedCode,
                description,
                group,
                id,
                isPayable,
                name,
                parentAccountId,
                parentId,
                raw,
                section,
                status,
                subgroup,
                subsection,
                type,
                updatedAt);
        }
    }
}

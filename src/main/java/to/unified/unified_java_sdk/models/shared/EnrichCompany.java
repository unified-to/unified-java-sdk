/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * EnrichCompany
 * 
 * <p>A company object from an enrichment integration
 */
public class EnrichCompany {
    /**
     * The address of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends PropertyEnrichCompanyAddress> address;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alexa_rank")
    private Optional<Double> alexaRank;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("crunchbase_url")
    private Optional<String> crunchbaseUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("domain")
    private Optional<String> domain;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employees")
    private Optional<String> employees;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("exchange")
    private Optional<String> exchange;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facebook_url")
    private Optional<String> facebookUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("industry")
    private Optional<String> industry;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("instagram_url")
    private Optional<String> instagramUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkedin_url")
    private Optional<String> linkedinUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo_url")
    private Optional<String> logoUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("naics_code")
    private Optional<Double> naicsCode;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("revenue")
    private Optional<String> revenue;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sic_code")
    private Optional<Double> sicCode;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("stock")
    private Optional<String> stock;

    /**
     * An array of telephones for this company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telephones")
    private Optional<? extends List<EnrichTelephone>> telephones;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twitter_handle")
    private Optional<String> twitterHandle;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twitter_url")
    private Optional<String> twitterUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year_founded")
    private Optional<Double> yearFounded;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yelp_url")
    private Optional<String> yelpUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("youtube_url")
    private Optional<String> youtubeUrl;

    @JsonCreator
    public EnrichCompany(
            @JsonProperty("address") Optional<? extends PropertyEnrichCompanyAddress> address,
            @JsonProperty("alexa_rank") Optional<Double> alexaRank,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("crunchbase_url") Optional<String> crunchbaseUrl,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("domain") Optional<String> domain,
            @JsonProperty("employees") Optional<String> employees,
            @JsonProperty("exchange") Optional<String> exchange,
            @JsonProperty("facebook_url") Optional<String> facebookUrl,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("industry") Optional<String> industry,
            @JsonProperty("instagram_url") Optional<String> instagramUrl,
            @JsonProperty("linkedin_url") Optional<String> linkedinUrl,
            @JsonProperty("logo_url") Optional<String> logoUrl,
            @JsonProperty("naics_code") Optional<Double> naicsCode,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("revenue") Optional<String> revenue,
            @JsonProperty("sic_code") Optional<Double> sicCode,
            @JsonProperty("stock") Optional<String> stock,
            @JsonProperty("telephones") Optional<? extends List<EnrichTelephone>> telephones,
            @JsonProperty("twitter_handle") Optional<String> twitterHandle,
            @JsonProperty("twitter_url") Optional<String> twitterUrl,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("year_founded") Optional<Double> yearFounded,
            @JsonProperty("yelp_url") Optional<String> yelpUrl,
            @JsonProperty("youtube_url") Optional<String> youtubeUrl) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(alexaRank, "alexaRank");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(crunchbaseUrl, "crunchbaseUrl");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(domain, "domain");
        Utils.checkNotNull(employees, "employees");
        Utils.checkNotNull(exchange, "exchange");
        Utils.checkNotNull(facebookUrl, "facebookUrl");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(industry, "industry");
        Utils.checkNotNull(instagramUrl, "instagramUrl");
        Utils.checkNotNull(linkedinUrl, "linkedinUrl");
        Utils.checkNotNull(logoUrl, "logoUrl");
        Utils.checkNotNull(naicsCode, "naicsCode");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(revenue, "revenue");
        Utils.checkNotNull(sicCode, "sicCode");
        Utils.checkNotNull(stock, "stock");
        Utils.checkNotNull(telephones, "telephones");
        Utils.checkNotNull(twitterHandle, "twitterHandle");
        Utils.checkNotNull(twitterUrl, "twitterUrl");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(yearFounded, "yearFounded");
        Utils.checkNotNull(yelpUrl, "yelpUrl");
        Utils.checkNotNull(youtubeUrl, "youtubeUrl");
        this.address = address;
        this.alexaRank = alexaRank;
        this.createdAt = createdAt;
        this.crunchbaseUrl = crunchbaseUrl;
        this.description = description;
        this.domain = domain;
        this.employees = employees;
        this.exchange = exchange;
        this.facebookUrl = facebookUrl;
        this.id = id;
        this.industry = industry;
        this.instagramUrl = instagramUrl;
        this.linkedinUrl = linkedinUrl;
        this.logoUrl = logoUrl;
        this.naicsCode = naicsCode;
        this.name = name;
        this.raw = raw;
        this.revenue = revenue;
        this.sicCode = sicCode;
        this.stock = stock;
        this.telephones = telephones;
        this.twitterHandle = twitterHandle;
        this.twitterUrl = twitterUrl;
        this.updatedAt = updatedAt;
        this.yearFounded = yearFounded;
        this.yelpUrl = yelpUrl;
        this.youtubeUrl = youtubeUrl;
    }
    
    public EnrichCompany() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The address of the company
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyEnrichCompanyAddress> address() {
        return (Optional<PropertyEnrichCompanyAddress>) address;
    }

    @JsonIgnore
    public Optional<Double> alexaRank() {
        return alexaRank;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> crunchbaseUrl() {
        return crunchbaseUrl;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> domain() {
        return domain;
    }

    @JsonIgnore
    public Optional<String> employees() {
        return employees;
    }

    @JsonIgnore
    public Optional<String> exchange() {
        return exchange;
    }

    @JsonIgnore
    public Optional<String> facebookUrl() {
        return facebookUrl;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> industry() {
        return industry;
    }

    @JsonIgnore
    public Optional<String> instagramUrl() {
        return instagramUrl;
    }

    @JsonIgnore
    public Optional<String> linkedinUrl() {
        return linkedinUrl;
    }

    @JsonIgnore
    public Optional<String> logoUrl() {
        return logoUrl;
    }

    @JsonIgnore
    public Optional<Double> naicsCode() {
        return naicsCode;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<String> revenue() {
        return revenue;
    }

    @JsonIgnore
    public Optional<Double> sicCode() {
        return sicCode;
    }

    @JsonIgnore
    public Optional<String> stock() {
        return stock;
    }

    /**
     * An array of telephones for this company
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EnrichTelephone>> telephones() {
        return (Optional<List<EnrichTelephone>>) telephones;
    }

    @JsonIgnore
    public Optional<String> twitterHandle() {
        return twitterHandle;
    }

    @JsonIgnore
    public Optional<String> twitterUrl() {
        return twitterUrl;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<Double> yearFounded() {
        return yearFounded;
    }

    @JsonIgnore
    public Optional<String> yelpUrl() {
        return yelpUrl;
    }

    @JsonIgnore
    public Optional<String> youtubeUrl() {
        return youtubeUrl;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The address of the company
     */
    public EnrichCompany withAddress(PropertyEnrichCompanyAddress address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }


    /**
     * The address of the company
     */
    public EnrichCompany withAddress(Optional<? extends PropertyEnrichCompanyAddress> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public EnrichCompany withAlexaRank(double alexaRank) {
        Utils.checkNotNull(alexaRank, "alexaRank");
        this.alexaRank = Optional.ofNullable(alexaRank);
        return this;
    }


    public EnrichCompany withAlexaRank(Optional<Double> alexaRank) {
        Utils.checkNotNull(alexaRank, "alexaRank");
        this.alexaRank = alexaRank;
        return this;
    }

    public EnrichCompany withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public EnrichCompany withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public EnrichCompany withCrunchbaseUrl(String crunchbaseUrl) {
        Utils.checkNotNull(crunchbaseUrl, "crunchbaseUrl");
        this.crunchbaseUrl = Optional.ofNullable(crunchbaseUrl);
        return this;
    }


    public EnrichCompany withCrunchbaseUrl(Optional<String> crunchbaseUrl) {
        Utils.checkNotNull(crunchbaseUrl, "crunchbaseUrl");
        this.crunchbaseUrl = crunchbaseUrl;
        return this;
    }

    public EnrichCompany withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    public EnrichCompany withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public EnrichCompany withDomain(String domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = Optional.ofNullable(domain);
        return this;
    }


    public EnrichCompany withDomain(Optional<String> domain) {
        Utils.checkNotNull(domain, "domain");
        this.domain = domain;
        return this;
    }

    public EnrichCompany withEmployees(String employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = Optional.ofNullable(employees);
        return this;
    }


    public EnrichCompany withEmployees(Optional<String> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = employees;
        return this;
    }

    public EnrichCompany withExchange(String exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = Optional.ofNullable(exchange);
        return this;
    }


    public EnrichCompany withExchange(Optional<String> exchange) {
        Utils.checkNotNull(exchange, "exchange");
        this.exchange = exchange;
        return this;
    }

    public EnrichCompany withFacebookUrl(String facebookUrl) {
        Utils.checkNotNull(facebookUrl, "facebookUrl");
        this.facebookUrl = Optional.ofNullable(facebookUrl);
        return this;
    }


    public EnrichCompany withFacebookUrl(Optional<String> facebookUrl) {
        Utils.checkNotNull(facebookUrl, "facebookUrl");
        this.facebookUrl = facebookUrl;
        return this;
    }

    public EnrichCompany withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public EnrichCompany withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public EnrichCompany withIndustry(String industry) {
        Utils.checkNotNull(industry, "industry");
        this.industry = Optional.ofNullable(industry);
        return this;
    }


    public EnrichCompany withIndustry(Optional<String> industry) {
        Utils.checkNotNull(industry, "industry");
        this.industry = industry;
        return this;
    }

    public EnrichCompany withInstagramUrl(String instagramUrl) {
        Utils.checkNotNull(instagramUrl, "instagramUrl");
        this.instagramUrl = Optional.ofNullable(instagramUrl);
        return this;
    }


    public EnrichCompany withInstagramUrl(Optional<String> instagramUrl) {
        Utils.checkNotNull(instagramUrl, "instagramUrl");
        this.instagramUrl = instagramUrl;
        return this;
    }

    public EnrichCompany withLinkedinUrl(String linkedinUrl) {
        Utils.checkNotNull(linkedinUrl, "linkedinUrl");
        this.linkedinUrl = Optional.ofNullable(linkedinUrl);
        return this;
    }


    public EnrichCompany withLinkedinUrl(Optional<String> linkedinUrl) {
        Utils.checkNotNull(linkedinUrl, "linkedinUrl");
        this.linkedinUrl = linkedinUrl;
        return this;
    }

    public EnrichCompany withLogoUrl(String logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = Optional.ofNullable(logoUrl);
        return this;
    }


    public EnrichCompany withLogoUrl(Optional<String> logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = logoUrl;
        return this;
    }

    public EnrichCompany withNaicsCode(double naicsCode) {
        Utils.checkNotNull(naicsCode, "naicsCode");
        this.naicsCode = Optional.ofNullable(naicsCode);
        return this;
    }


    public EnrichCompany withNaicsCode(Optional<Double> naicsCode) {
        Utils.checkNotNull(naicsCode, "naicsCode");
        this.naicsCode = naicsCode;
        return this;
    }

    public EnrichCompany withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public EnrichCompany withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public EnrichCompany withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public EnrichCompany withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public EnrichCompany withRevenue(String revenue) {
        Utils.checkNotNull(revenue, "revenue");
        this.revenue = Optional.ofNullable(revenue);
        return this;
    }


    public EnrichCompany withRevenue(Optional<String> revenue) {
        Utils.checkNotNull(revenue, "revenue");
        this.revenue = revenue;
        return this;
    }

    public EnrichCompany withSicCode(double sicCode) {
        Utils.checkNotNull(sicCode, "sicCode");
        this.sicCode = Optional.ofNullable(sicCode);
        return this;
    }


    public EnrichCompany withSicCode(Optional<Double> sicCode) {
        Utils.checkNotNull(sicCode, "sicCode");
        this.sicCode = sicCode;
        return this;
    }

    public EnrichCompany withStock(String stock) {
        Utils.checkNotNull(stock, "stock");
        this.stock = Optional.ofNullable(stock);
        return this;
    }


    public EnrichCompany withStock(Optional<String> stock) {
        Utils.checkNotNull(stock, "stock");
        this.stock = stock;
        return this;
    }

    /**
     * An array of telephones for this company
     */
    public EnrichCompany withTelephones(List<EnrichTelephone> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = Optional.ofNullable(telephones);
        return this;
    }


    /**
     * An array of telephones for this company
     */
    public EnrichCompany withTelephones(Optional<? extends List<EnrichTelephone>> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = telephones;
        return this;
    }

    public EnrichCompany withTwitterHandle(String twitterHandle) {
        Utils.checkNotNull(twitterHandle, "twitterHandle");
        this.twitterHandle = Optional.ofNullable(twitterHandle);
        return this;
    }


    public EnrichCompany withTwitterHandle(Optional<String> twitterHandle) {
        Utils.checkNotNull(twitterHandle, "twitterHandle");
        this.twitterHandle = twitterHandle;
        return this;
    }

    public EnrichCompany withTwitterUrl(String twitterUrl) {
        Utils.checkNotNull(twitterUrl, "twitterUrl");
        this.twitterUrl = Optional.ofNullable(twitterUrl);
        return this;
    }


    public EnrichCompany withTwitterUrl(Optional<String> twitterUrl) {
        Utils.checkNotNull(twitterUrl, "twitterUrl");
        this.twitterUrl = twitterUrl;
        return this;
    }

    public EnrichCompany withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public EnrichCompany withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public EnrichCompany withYearFounded(double yearFounded) {
        Utils.checkNotNull(yearFounded, "yearFounded");
        this.yearFounded = Optional.ofNullable(yearFounded);
        return this;
    }


    public EnrichCompany withYearFounded(Optional<Double> yearFounded) {
        Utils.checkNotNull(yearFounded, "yearFounded");
        this.yearFounded = yearFounded;
        return this;
    }

    public EnrichCompany withYelpUrl(String yelpUrl) {
        Utils.checkNotNull(yelpUrl, "yelpUrl");
        this.yelpUrl = Optional.ofNullable(yelpUrl);
        return this;
    }


    public EnrichCompany withYelpUrl(Optional<String> yelpUrl) {
        Utils.checkNotNull(yelpUrl, "yelpUrl");
        this.yelpUrl = yelpUrl;
        return this;
    }

    public EnrichCompany withYoutubeUrl(String youtubeUrl) {
        Utils.checkNotNull(youtubeUrl, "youtubeUrl");
        this.youtubeUrl = Optional.ofNullable(youtubeUrl);
        return this;
    }


    public EnrichCompany withYoutubeUrl(Optional<String> youtubeUrl) {
        Utils.checkNotNull(youtubeUrl, "youtubeUrl");
        this.youtubeUrl = youtubeUrl;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EnrichCompany other = (EnrichCompany) o;
        return 
            Utils.enhancedDeepEquals(this.address, other.address) &&
            Utils.enhancedDeepEquals(this.alexaRank, other.alexaRank) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.crunchbaseUrl, other.crunchbaseUrl) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.domain, other.domain) &&
            Utils.enhancedDeepEquals(this.employees, other.employees) &&
            Utils.enhancedDeepEquals(this.exchange, other.exchange) &&
            Utils.enhancedDeepEquals(this.facebookUrl, other.facebookUrl) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.industry, other.industry) &&
            Utils.enhancedDeepEquals(this.instagramUrl, other.instagramUrl) &&
            Utils.enhancedDeepEquals(this.linkedinUrl, other.linkedinUrl) &&
            Utils.enhancedDeepEquals(this.logoUrl, other.logoUrl) &&
            Utils.enhancedDeepEquals(this.naicsCode, other.naicsCode) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.revenue, other.revenue) &&
            Utils.enhancedDeepEquals(this.sicCode, other.sicCode) &&
            Utils.enhancedDeepEquals(this.stock, other.stock) &&
            Utils.enhancedDeepEquals(this.telephones, other.telephones) &&
            Utils.enhancedDeepEquals(this.twitterHandle, other.twitterHandle) &&
            Utils.enhancedDeepEquals(this.twitterUrl, other.twitterUrl) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.yearFounded, other.yearFounded) &&
            Utils.enhancedDeepEquals(this.yelpUrl, other.yelpUrl) &&
            Utils.enhancedDeepEquals(this.youtubeUrl, other.youtubeUrl);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            address, alexaRank, createdAt,
            crunchbaseUrl, description, domain,
            employees, exchange, facebookUrl,
            id, industry, instagramUrl,
            linkedinUrl, logoUrl, naicsCode,
            name, raw, revenue,
            sicCode, stock, telephones,
            twitterHandle, twitterUrl, updatedAt,
            yearFounded, yelpUrl, youtubeUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EnrichCompany.class,
                "address", address,
                "alexaRank", alexaRank,
                "createdAt", createdAt,
                "crunchbaseUrl", crunchbaseUrl,
                "description", description,
                "domain", domain,
                "employees", employees,
                "exchange", exchange,
                "facebookUrl", facebookUrl,
                "id", id,
                "industry", industry,
                "instagramUrl", instagramUrl,
                "linkedinUrl", linkedinUrl,
                "logoUrl", logoUrl,
                "naicsCode", naicsCode,
                "name", name,
                "raw", raw,
                "revenue", revenue,
                "sicCode", sicCode,
                "stock", stock,
                "telephones", telephones,
                "twitterHandle", twitterHandle,
                "twitterUrl", twitterUrl,
                "updatedAt", updatedAt,
                "yearFounded", yearFounded,
                "yelpUrl", yelpUrl,
                "youtubeUrl", youtubeUrl);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends PropertyEnrichCompanyAddress> address = Optional.empty();

        private Optional<Double> alexaRank = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> crunchbaseUrl = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> domain = Optional.empty();

        private Optional<String> employees = Optional.empty();

        private Optional<String> exchange = Optional.empty();

        private Optional<String> facebookUrl = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> industry = Optional.empty();

        private Optional<String> instagramUrl = Optional.empty();

        private Optional<String> linkedinUrl = Optional.empty();

        private Optional<String> logoUrl = Optional.empty();

        private Optional<Double> naicsCode = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<String> revenue = Optional.empty();

        private Optional<Double> sicCode = Optional.empty();

        private Optional<String> stock = Optional.empty();

        private Optional<? extends List<EnrichTelephone>> telephones = Optional.empty();

        private Optional<String> twitterHandle = Optional.empty();

        private Optional<String> twitterUrl = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<Double> yearFounded = Optional.empty();

        private Optional<String> yelpUrl = Optional.empty();

        private Optional<String> youtubeUrl = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The address of the company
         */
        public Builder address(PropertyEnrichCompanyAddress address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * The address of the company
         */
        public Builder address(Optional<? extends PropertyEnrichCompanyAddress> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }


        public Builder alexaRank(double alexaRank) {
            Utils.checkNotNull(alexaRank, "alexaRank");
            this.alexaRank = Optional.ofNullable(alexaRank);
            return this;
        }

        public Builder alexaRank(Optional<Double> alexaRank) {
            Utils.checkNotNull(alexaRank, "alexaRank");
            this.alexaRank = alexaRank;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder crunchbaseUrl(String crunchbaseUrl) {
            Utils.checkNotNull(crunchbaseUrl, "crunchbaseUrl");
            this.crunchbaseUrl = Optional.ofNullable(crunchbaseUrl);
            return this;
        }

        public Builder crunchbaseUrl(Optional<String> crunchbaseUrl) {
            Utils.checkNotNull(crunchbaseUrl, "crunchbaseUrl");
            this.crunchbaseUrl = crunchbaseUrl;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder domain(String domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = Optional.ofNullable(domain);
            return this;
        }

        public Builder domain(Optional<String> domain) {
            Utils.checkNotNull(domain, "domain");
            this.domain = domain;
            return this;
        }


        public Builder employees(String employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = Optional.ofNullable(employees);
            return this;
        }

        public Builder employees(Optional<String> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = employees;
            return this;
        }


        public Builder exchange(String exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = Optional.ofNullable(exchange);
            return this;
        }

        public Builder exchange(Optional<String> exchange) {
            Utils.checkNotNull(exchange, "exchange");
            this.exchange = exchange;
            return this;
        }


        public Builder facebookUrl(String facebookUrl) {
            Utils.checkNotNull(facebookUrl, "facebookUrl");
            this.facebookUrl = Optional.ofNullable(facebookUrl);
            return this;
        }

        public Builder facebookUrl(Optional<String> facebookUrl) {
            Utils.checkNotNull(facebookUrl, "facebookUrl");
            this.facebookUrl = facebookUrl;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder industry(String industry) {
            Utils.checkNotNull(industry, "industry");
            this.industry = Optional.ofNullable(industry);
            return this;
        }

        public Builder industry(Optional<String> industry) {
            Utils.checkNotNull(industry, "industry");
            this.industry = industry;
            return this;
        }


        public Builder instagramUrl(String instagramUrl) {
            Utils.checkNotNull(instagramUrl, "instagramUrl");
            this.instagramUrl = Optional.ofNullable(instagramUrl);
            return this;
        }

        public Builder instagramUrl(Optional<String> instagramUrl) {
            Utils.checkNotNull(instagramUrl, "instagramUrl");
            this.instagramUrl = instagramUrl;
            return this;
        }


        public Builder linkedinUrl(String linkedinUrl) {
            Utils.checkNotNull(linkedinUrl, "linkedinUrl");
            this.linkedinUrl = Optional.ofNullable(linkedinUrl);
            return this;
        }

        public Builder linkedinUrl(Optional<String> linkedinUrl) {
            Utils.checkNotNull(linkedinUrl, "linkedinUrl");
            this.linkedinUrl = linkedinUrl;
            return this;
        }


        public Builder logoUrl(String logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = Optional.ofNullable(logoUrl);
            return this;
        }

        public Builder logoUrl(Optional<String> logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = logoUrl;
            return this;
        }


        public Builder naicsCode(double naicsCode) {
            Utils.checkNotNull(naicsCode, "naicsCode");
            this.naicsCode = Optional.ofNullable(naicsCode);
            return this;
        }

        public Builder naicsCode(Optional<Double> naicsCode) {
            Utils.checkNotNull(naicsCode, "naicsCode");
            this.naicsCode = naicsCode;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder revenue(String revenue) {
            Utils.checkNotNull(revenue, "revenue");
            this.revenue = Optional.ofNullable(revenue);
            return this;
        }

        public Builder revenue(Optional<String> revenue) {
            Utils.checkNotNull(revenue, "revenue");
            this.revenue = revenue;
            return this;
        }


        public Builder sicCode(double sicCode) {
            Utils.checkNotNull(sicCode, "sicCode");
            this.sicCode = Optional.ofNullable(sicCode);
            return this;
        }

        public Builder sicCode(Optional<Double> sicCode) {
            Utils.checkNotNull(sicCode, "sicCode");
            this.sicCode = sicCode;
            return this;
        }


        public Builder stock(String stock) {
            Utils.checkNotNull(stock, "stock");
            this.stock = Optional.ofNullable(stock);
            return this;
        }

        public Builder stock(Optional<String> stock) {
            Utils.checkNotNull(stock, "stock");
            this.stock = stock;
            return this;
        }


        /**
         * An array of telephones for this company
         */
        public Builder telephones(List<EnrichTelephone> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = Optional.ofNullable(telephones);
            return this;
        }

        /**
         * An array of telephones for this company
         */
        public Builder telephones(Optional<? extends List<EnrichTelephone>> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = telephones;
            return this;
        }


        public Builder twitterHandle(String twitterHandle) {
            Utils.checkNotNull(twitterHandle, "twitterHandle");
            this.twitterHandle = Optional.ofNullable(twitterHandle);
            return this;
        }

        public Builder twitterHandle(Optional<String> twitterHandle) {
            Utils.checkNotNull(twitterHandle, "twitterHandle");
            this.twitterHandle = twitterHandle;
            return this;
        }


        public Builder twitterUrl(String twitterUrl) {
            Utils.checkNotNull(twitterUrl, "twitterUrl");
            this.twitterUrl = Optional.ofNullable(twitterUrl);
            return this;
        }

        public Builder twitterUrl(Optional<String> twitterUrl) {
            Utils.checkNotNull(twitterUrl, "twitterUrl");
            this.twitterUrl = twitterUrl;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder yearFounded(double yearFounded) {
            Utils.checkNotNull(yearFounded, "yearFounded");
            this.yearFounded = Optional.ofNullable(yearFounded);
            return this;
        }

        public Builder yearFounded(Optional<Double> yearFounded) {
            Utils.checkNotNull(yearFounded, "yearFounded");
            this.yearFounded = yearFounded;
            return this;
        }


        public Builder yelpUrl(String yelpUrl) {
            Utils.checkNotNull(yelpUrl, "yelpUrl");
            this.yelpUrl = Optional.ofNullable(yelpUrl);
            return this;
        }

        public Builder yelpUrl(Optional<String> yelpUrl) {
            Utils.checkNotNull(yelpUrl, "yelpUrl");
            this.yelpUrl = yelpUrl;
            return this;
        }


        public Builder youtubeUrl(String youtubeUrl) {
            Utils.checkNotNull(youtubeUrl, "youtubeUrl");
            this.youtubeUrl = Optional.ofNullable(youtubeUrl);
            return this;
        }

        public Builder youtubeUrl(Optional<String> youtubeUrl) {
            Utils.checkNotNull(youtubeUrl, "youtubeUrl");
            this.youtubeUrl = youtubeUrl;
            return this;
        }

        public EnrichCompany build() {

            return new EnrichCompany(
                address, alexaRank, createdAt,
                crunchbaseUrl, description, domain,
                employees, exchange, facebookUrl,
                id, industry, instagramUrl,
                linkedinUrl, logoUrl, naicsCode,
                name, raw, revenue,
                sicCode, stock, telephones,
                twitterHandle, twitterUrl, updatedAt,
                yearFounded, yelpUrl, youtubeUrl);
        }

    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class AccountingReport {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance_sheet")
    private Optional<? extends PropertyAccountingReportBalanceSheet> balanceSheet;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    private Optional<OffsetDateTime> endAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profit_and_loss")
    private Optional<? extends PropertyAccountingReportProfitAndLoss> profitAndLoss;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_at")
    private Optional<OffsetDateTime> startAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trial_balance")
    private Optional<? extends PropertyAccountingReportTrialBalance> trialBalance;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends AccountingReportType> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public AccountingReport(
            @JsonProperty("balance_sheet") Optional<? extends PropertyAccountingReportBalanceSheet> balanceSheet,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("end_at") Optional<OffsetDateTime> endAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("profit_and_loss") Optional<? extends PropertyAccountingReportProfitAndLoss> profitAndLoss,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("start_at") Optional<OffsetDateTime> startAt,
            @JsonProperty("trial_balance") Optional<? extends PropertyAccountingReportTrialBalance> trialBalance,
            @JsonProperty("type") Optional<? extends AccountingReportType> type,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(balanceSheet, "balanceSheet");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(profitAndLoss, "profitAndLoss");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(startAt, "startAt");
        Utils.checkNotNull(trialBalance, "trialBalance");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.balanceSheet = balanceSheet;
        this.createdAt = createdAt;
        this.currency = currency;
        this.endAt = endAt;
        this.id = id;
        this.name = name;
        this.profitAndLoss = profitAndLoss;
        this.raw = raw;
        this.startAt = startAt;
        this.trialBalance = trialBalance;
        this.type = type;
        this.updatedAt = updatedAt;
    }
    
    public AccountingReport() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyAccountingReportBalanceSheet> balanceSheet() {
        return (Optional<PropertyAccountingReportBalanceSheet>) balanceSheet;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endAt() {
        return endAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyAccountingReportProfitAndLoss> profitAndLoss() {
        return (Optional<PropertyAccountingReportProfitAndLoss>) profitAndLoss;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startAt() {
        return startAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyAccountingReportTrialBalance> trialBalance() {
        return (Optional<PropertyAccountingReportTrialBalance>) trialBalance;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AccountingReportType> type() {
        return (Optional<AccountingReportType>) type;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AccountingReport withBalanceSheet(PropertyAccountingReportBalanceSheet balanceSheet) {
        Utils.checkNotNull(balanceSheet, "balanceSheet");
        this.balanceSheet = Optional.ofNullable(balanceSheet);
        return this;
    }


    public AccountingReport withBalanceSheet(Optional<? extends PropertyAccountingReportBalanceSheet> balanceSheet) {
        Utils.checkNotNull(balanceSheet, "balanceSheet");
        this.balanceSheet = balanceSheet;
        return this;
    }

    public AccountingReport withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public AccountingReport withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AccountingReport withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public AccountingReport withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AccountingReport withEndAt(OffsetDateTime endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = Optional.ofNullable(endAt);
        return this;
    }


    public AccountingReport withEndAt(Optional<OffsetDateTime> endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    public AccountingReport withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public AccountingReport withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AccountingReport withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public AccountingReport withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AccountingReport withProfitAndLoss(PropertyAccountingReportProfitAndLoss profitAndLoss) {
        Utils.checkNotNull(profitAndLoss, "profitAndLoss");
        this.profitAndLoss = Optional.ofNullable(profitAndLoss);
        return this;
    }


    public AccountingReport withProfitAndLoss(Optional<? extends PropertyAccountingReportProfitAndLoss> profitAndLoss) {
        Utils.checkNotNull(profitAndLoss, "profitAndLoss");
        this.profitAndLoss = profitAndLoss;
        return this;
    }

    public AccountingReport withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public AccountingReport withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AccountingReport withStartAt(OffsetDateTime startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = Optional.ofNullable(startAt);
        return this;
    }


    public AccountingReport withStartAt(Optional<OffsetDateTime> startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }

    public AccountingReport withTrialBalance(PropertyAccountingReportTrialBalance trialBalance) {
        Utils.checkNotNull(trialBalance, "trialBalance");
        this.trialBalance = Optional.ofNullable(trialBalance);
        return this;
    }


    public AccountingReport withTrialBalance(Optional<? extends PropertyAccountingReportTrialBalance> trialBalance) {
        Utils.checkNotNull(trialBalance, "trialBalance");
        this.trialBalance = trialBalance;
        return this;
    }

    public AccountingReport withType(AccountingReportType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public AccountingReport withType(Optional<? extends AccountingReportType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public AccountingReport withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public AccountingReport withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingReport other = (AccountingReport) o;
        return 
            Utils.enhancedDeepEquals(this.balanceSheet, other.balanceSheet) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.endAt, other.endAt) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.profitAndLoss, other.profitAndLoss) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.startAt, other.startAt) &&
            Utils.enhancedDeepEquals(this.trialBalance, other.trialBalance) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            balanceSheet, createdAt, currency,
            endAt, id, name,
            profitAndLoss, raw, startAt,
            trialBalance, type, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingReport.class,
                "balanceSheet", balanceSheet,
                "createdAt", createdAt,
                "currency", currency,
                "endAt", endAt,
                "id", id,
                "name", name,
                "profitAndLoss", profitAndLoss,
                "raw", raw,
                "startAt", startAt,
                "trialBalance", trialBalance,
                "type", type,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends PropertyAccountingReportBalanceSheet> balanceSheet = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> currency = Optional.empty();

        private Optional<OffsetDateTime> endAt = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends PropertyAccountingReportProfitAndLoss> profitAndLoss = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<OffsetDateTime> startAt = Optional.empty();

        private Optional<? extends PropertyAccountingReportTrialBalance> trialBalance = Optional.empty();

        private Optional<? extends AccountingReportType> type = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder balanceSheet(PropertyAccountingReportBalanceSheet balanceSheet) {
            Utils.checkNotNull(balanceSheet, "balanceSheet");
            this.balanceSheet = Optional.ofNullable(balanceSheet);
            return this;
        }

        public Builder balanceSheet(Optional<? extends PropertyAccountingReportBalanceSheet> balanceSheet) {
            Utils.checkNotNull(balanceSheet, "balanceSheet");
            this.balanceSheet = balanceSheet;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder endAt(OffsetDateTime endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Optional<OffsetDateTime> endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder profitAndLoss(PropertyAccountingReportProfitAndLoss profitAndLoss) {
            Utils.checkNotNull(profitAndLoss, "profitAndLoss");
            this.profitAndLoss = Optional.ofNullable(profitAndLoss);
            return this;
        }

        public Builder profitAndLoss(Optional<? extends PropertyAccountingReportProfitAndLoss> profitAndLoss) {
            Utils.checkNotNull(profitAndLoss, "profitAndLoss");
            this.profitAndLoss = profitAndLoss;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder startAt(OffsetDateTime startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Optional<OffsetDateTime> startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }


        public Builder trialBalance(PropertyAccountingReportTrialBalance trialBalance) {
            Utils.checkNotNull(trialBalance, "trialBalance");
            this.trialBalance = Optional.ofNullable(trialBalance);
            return this;
        }

        public Builder trialBalance(Optional<? extends PropertyAccountingReportTrialBalance> trialBalance) {
            Utils.checkNotNull(trialBalance, "trialBalance");
            this.trialBalance = trialBalance;
            return this;
        }


        public Builder type(AccountingReportType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends AccountingReportType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public AccountingReport build() {

            return new AccountingReport(
                balanceSheet, createdAt, currency,
                endAt, id, name,
                profitAndLoss, raw, startAt,
                trialBalance, type, updatedAt);
        }

    }
}

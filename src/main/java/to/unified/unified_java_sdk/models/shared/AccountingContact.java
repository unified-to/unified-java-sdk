/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.LazySingletonValue;
import to.unified.unified_java_sdk.utils.Utils;


public class AccountingContact {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("associated_contacts")
    private Optional<? extends List<AccountingAssociatedContact>> associatedContacts;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("billing_address")
    private Optional<? extends PropertyAccountingContactBillingAddress> billingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_name")
    private Optional<String> companyName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<AccountingEmail>> emails;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private Optional<String> firstName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identification")
    private Optional<String> identification;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    private Optional<Boolean> isActive;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_customer")
    private Optional<Boolean> isCustomer;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_supplier")
    private Optional<Boolean> isSupplier;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private Optional<String> lastName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_methods")
    private Optional<? extends List<AccountingContactPaymentMethod>> paymentMethods;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("portal_url")
    private Optional<String> portalUrl;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("shipping_address")
    private Optional<? extends PropertyAccountingContactShippingAddress> shippingAddress;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_exemption")
    private Optional<? extends TaxExemption> taxExemption;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_number")
    private Optional<String> taxNumber;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telephones")
    private Optional<? extends List<AccountingTelephone>> telephones;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public AccountingContact(
            @JsonProperty("associated_contacts") Optional<? extends List<AccountingAssociatedContact>> associatedContacts,
            @JsonProperty("billing_address") Optional<? extends PropertyAccountingContactBillingAddress> billingAddress,
            @JsonProperty("company_name") Optional<String> companyName,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("emails") Optional<? extends List<AccountingEmail>> emails,
            @JsonProperty("first_name") Optional<String> firstName,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("identification") Optional<String> identification,
            @JsonProperty("is_active") Optional<Boolean> isActive,
            @JsonProperty("is_customer") Optional<Boolean> isCustomer,
            @JsonProperty("is_supplier") Optional<Boolean> isSupplier,
            @JsonProperty("last_name") Optional<String> lastName,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("payment_methods") Optional<? extends List<AccountingContactPaymentMethod>> paymentMethods,
            @JsonProperty("portal_url") Optional<String> portalUrl,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("shipping_address") Optional<? extends PropertyAccountingContactShippingAddress> shippingAddress,
            @JsonProperty("tax_exemption") Optional<? extends TaxExemption> taxExemption,
            @JsonProperty("tax_number") Optional<String> taxNumber,
            @JsonProperty("telephones") Optional<? extends List<AccountingTelephone>> telephones,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(associatedContacts, "associatedContacts");
        Utils.checkNotNull(billingAddress, "billingAddress");
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(identification, "identification");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(isCustomer, "isCustomer");
        Utils.checkNotNull(isSupplier, "isSupplier");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(paymentMethods, "paymentMethods");
        Utils.checkNotNull(portalUrl, "portalUrl");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        Utils.checkNotNull(taxExemption, "taxExemption");
        Utils.checkNotNull(taxNumber, "taxNumber");
        Utils.checkNotNull(telephones, "telephones");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.associatedContacts = associatedContacts;
        this.billingAddress = billingAddress;
        this.companyName = companyName;
        this.createdAt = createdAt;
        this.currency = currency;
        this.emails = emails;
        this.firstName = firstName;
        this.id = id;
        this.identification = identification;
        this.isActive = isActive;
        this.isCustomer = isCustomer;
        this.isSupplier = isSupplier;
        this.lastName = lastName;
        this.name = name;
        this.paymentMethods = paymentMethods;
        this.portalUrl = portalUrl;
        this.raw = raw;
        this.shippingAddress = shippingAddress;
        this.taxExemption = taxExemption;
        this.taxNumber = taxNumber;
        this.telephones = telephones;
        this.updatedAt = updatedAt;
    }
    
    public AccountingContact() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingAssociatedContact>> associatedContacts() {
        return (Optional<List<AccountingAssociatedContact>>) associatedContacts;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyAccountingContactBillingAddress> billingAddress() {
        return (Optional<PropertyAccountingContactBillingAddress>) billingAddress;
    }

    @JsonIgnore
    public Optional<String> companyName() {
        return companyName;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingEmail>> emails() {
        return (Optional<List<AccountingEmail>>) emails;
    }

    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> identification() {
        return identification;
    }

    @JsonIgnore
    public Optional<Boolean> isActive() {
        return isActive;
    }

    @JsonIgnore
    public Optional<Boolean> isCustomer() {
        return isCustomer;
    }

    @JsonIgnore
    public Optional<Boolean> isSupplier() {
        return isSupplier;
    }

    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingContactPaymentMethod>> paymentMethods() {
        return (Optional<List<AccountingContactPaymentMethod>>) paymentMethods;
    }

    @JsonIgnore
    public Optional<String> portalUrl() {
        return portalUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyAccountingContactShippingAddress> shippingAddress() {
        return (Optional<PropertyAccountingContactShippingAddress>) shippingAddress;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxExemption> taxExemption() {
        return (Optional<TaxExemption>) taxExemption;
    }

    @JsonIgnore
    public Optional<String> taxNumber() {
        return taxNumber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingTelephone>> telephones() {
        return (Optional<List<AccountingTelephone>>) telephones;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AccountingContact withAssociatedContacts(List<AccountingAssociatedContact> associatedContacts) {
        Utils.checkNotNull(associatedContacts, "associatedContacts");
        this.associatedContacts = Optional.ofNullable(associatedContacts);
        return this;
    }


    public AccountingContact withAssociatedContacts(Optional<? extends List<AccountingAssociatedContact>> associatedContacts) {
        Utils.checkNotNull(associatedContacts, "associatedContacts");
        this.associatedContacts = associatedContacts;
        return this;
    }

    public AccountingContact withBillingAddress(PropertyAccountingContactBillingAddress billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = Optional.ofNullable(billingAddress);
        return this;
    }


    public AccountingContact withBillingAddress(Optional<? extends PropertyAccountingContactBillingAddress> billingAddress) {
        Utils.checkNotNull(billingAddress, "billingAddress");
        this.billingAddress = billingAddress;
        return this;
    }

    public AccountingContact withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = Optional.ofNullable(companyName);
        return this;
    }


    public AccountingContact withCompanyName(Optional<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    public AccountingContact withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public AccountingContact withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AccountingContact withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public AccountingContact withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AccountingContact withEmails(List<AccountingEmail> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }


    public AccountingContact withEmails(Optional<? extends List<AccountingEmail>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public AccountingContact withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }


    public AccountingContact withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public AccountingContact withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public AccountingContact withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AccountingContact withIdentification(String identification) {
        Utils.checkNotNull(identification, "identification");
        this.identification = Optional.ofNullable(identification);
        return this;
    }


    public AccountingContact withIdentification(Optional<String> identification) {
        Utils.checkNotNull(identification, "identification");
        this.identification = identification;
        return this;
    }

    public AccountingContact withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }


    public AccountingContact withIsActive(Optional<Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    public AccountingContact withIsCustomer(boolean isCustomer) {
        Utils.checkNotNull(isCustomer, "isCustomer");
        this.isCustomer = Optional.ofNullable(isCustomer);
        return this;
    }


    public AccountingContact withIsCustomer(Optional<Boolean> isCustomer) {
        Utils.checkNotNull(isCustomer, "isCustomer");
        this.isCustomer = isCustomer;
        return this;
    }

    public AccountingContact withIsSupplier(boolean isSupplier) {
        Utils.checkNotNull(isSupplier, "isSupplier");
        this.isSupplier = Optional.ofNullable(isSupplier);
        return this;
    }


    public AccountingContact withIsSupplier(Optional<Boolean> isSupplier) {
        Utils.checkNotNull(isSupplier, "isSupplier");
        this.isSupplier = isSupplier;
        return this;
    }

    public AccountingContact withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }


    public AccountingContact withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public AccountingContact withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public AccountingContact withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AccountingContact withPaymentMethods(List<AccountingContactPaymentMethod> paymentMethods) {
        Utils.checkNotNull(paymentMethods, "paymentMethods");
        this.paymentMethods = Optional.ofNullable(paymentMethods);
        return this;
    }


    public AccountingContact withPaymentMethods(Optional<? extends List<AccountingContactPaymentMethod>> paymentMethods) {
        Utils.checkNotNull(paymentMethods, "paymentMethods");
        this.paymentMethods = paymentMethods;
        return this;
    }

    public AccountingContact withPortalUrl(String portalUrl) {
        Utils.checkNotNull(portalUrl, "portalUrl");
        this.portalUrl = Optional.ofNullable(portalUrl);
        return this;
    }


    public AccountingContact withPortalUrl(Optional<String> portalUrl) {
        Utils.checkNotNull(portalUrl, "portalUrl");
        this.portalUrl = portalUrl;
        return this;
    }

    public AccountingContact withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public AccountingContact withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AccountingContact withShippingAddress(PropertyAccountingContactShippingAddress shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = Optional.ofNullable(shippingAddress);
        return this;
    }


    public AccountingContact withShippingAddress(Optional<? extends PropertyAccountingContactShippingAddress> shippingAddress) {
        Utils.checkNotNull(shippingAddress, "shippingAddress");
        this.shippingAddress = shippingAddress;
        return this;
    }

    public AccountingContact withTaxExemption(TaxExemption taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = Optional.ofNullable(taxExemption);
        return this;
    }


    public AccountingContact withTaxExemption(Optional<? extends TaxExemption> taxExemption) {
        Utils.checkNotNull(taxExemption, "taxExemption");
        this.taxExemption = taxExemption;
        return this;
    }

    public AccountingContact withTaxNumber(String taxNumber) {
        Utils.checkNotNull(taxNumber, "taxNumber");
        this.taxNumber = Optional.ofNullable(taxNumber);
        return this;
    }


    public AccountingContact withTaxNumber(Optional<String> taxNumber) {
        Utils.checkNotNull(taxNumber, "taxNumber");
        this.taxNumber = taxNumber;
        return this;
    }

    public AccountingContact withTelephones(List<AccountingTelephone> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = Optional.ofNullable(telephones);
        return this;
    }


    public AccountingContact withTelephones(Optional<? extends List<AccountingTelephone>> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = telephones;
        return this;
    }

    public AccountingContact withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public AccountingContact withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingContact other = (AccountingContact) o;
        return 
            Utils.enhancedDeepEquals(this.associatedContacts, other.associatedContacts) &&
            Utils.enhancedDeepEquals(this.billingAddress, other.billingAddress) &&
            Utils.enhancedDeepEquals(this.companyName, other.companyName) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.emails, other.emails) &&
            Utils.enhancedDeepEquals(this.firstName, other.firstName) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.identification, other.identification) &&
            Utils.enhancedDeepEquals(this.isActive, other.isActive) &&
            Utils.enhancedDeepEquals(this.isCustomer, other.isCustomer) &&
            Utils.enhancedDeepEquals(this.isSupplier, other.isSupplier) &&
            Utils.enhancedDeepEquals(this.lastName, other.lastName) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.paymentMethods, other.paymentMethods) &&
            Utils.enhancedDeepEquals(this.portalUrl, other.portalUrl) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.shippingAddress, other.shippingAddress) &&
            Utils.enhancedDeepEquals(this.taxExemption, other.taxExemption) &&
            Utils.enhancedDeepEquals(this.taxNumber, other.taxNumber) &&
            Utils.enhancedDeepEquals(this.telephones, other.telephones) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            associatedContacts, billingAddress, companyName,
            createdAt, currency, emails,
            firstName, id, identification,
            isActive, isCustomer, isSupplier,
            lastName, name, paymentMethods,
            portalUrl, raw, shippingAddress,
            taxExemption, taxNumber, telephones,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingContact.class,
                "associatedContacts", associatedContacts,
                "billingAddress", billingAddress,
                "companyName", companyName,
                "createdAt", createdAt,
                "currency", currency,
                "emails", emails,
                "firstName", firstName,
                "id", id,
                "identification", identification,
                "isActive", isActive,
                "isCustomer", isCustomer,
                "isSupplier", isSupplier,
                "lastName", lastName,
                "name", name,
                "paymentMethods", paymentMethods,
                "portalUrl", portalUrl,
                "raw", raw,
                "shippingAddress", shippingAddress,
                "taxExemption", taxExemption,
                "taxNumber", taxNumber,
                "telephones", telephones,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<AccountingAssociatedContact>> associatedContacts = Optional.empty();

        private Optional<? extends PropertyAccountingContactBillingAddress> billingAddress = Optional.empty();

        private Optional<String> companyName = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> currency;

        private Optional<? extends List<AccountingEmail>> emails = Optional.empty();

        private Optional<String> firstName = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> identification = Optional.empty();

        private Optional<Boolean> isActive = Optional.empty();

        private Optional<Boolean> isCustomer = Optional.empty();

        private Optional<Boolean> isSupplier = Optional.empty();

        private Optional<String> lastName = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends List<AccountingContactPaymentMethod>> paymentMethods = Optional.empty();

        private Optional<String> portalUrl = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<? extends PropertyAccountingContactShippingAddress> shippingAddress = Optional.empty();

        private Optional<? extends TaxExemption> taxExemption = Optional.empty();

        private Optional<String> taxNumber = Optional.empty();

        private Optional<? extends List<AccountingTelephone>> telephones = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder associatedContacts(List<AccountingAssociatedContact> associatedContacts) {
            Utils.checkNotNull(associatedContacts, "associatedContacts");
            this.associatedContacts = Optional.ofNullable(associatedContacts);
            return this;
        }

        public Builder associatedContacts(Optional<? extends List<AccountingAssociatedContact>> associatedContacts) {
            Utils.checkNotNull(associatedContacts, "associatedContacts");
            this.associatedContacts = associatedContacts;
            return this;
        }


        public Builder billingAddress(PropertyAccountingContactBillingAddress billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = Optional.ofNullable(billingAddress);
            return this;
        }

        public Builder billingAddress(Optional<? extends PropertyAccountingContactBillingAddress> billingAddress) {
            Utils.checkNotNull(billingAddress, "billingAddress");
            this.billingAddress = billingAddress;
            return this;
        }


        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        public Builder companyName(Optional<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder emails(List<AccountingEmail> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<AccountingEmail>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }


        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder identification(String identification) {
            Utils.checkNotNull(identification, "identification");
            this.identification = Optional.ofNullable(identification);
            return this;
        }

        public Builder identification(Optional<String> identification) {
            Utils.checkNotNull(identification, "identification");
            this.identification = identification;
            return this;
        }


        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        public Builder isActive(Optional<Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }


        public Builder isCustomer(boolean isCustomer) {
            Utils.checkNotNull(isCustomer, "isCustomer");
            this.isCustomer = Optional.ofNullable(isCustomer);
            return this;
        }

        public Builder isCustomer(Optional<Boolean> isCustomer) {
            Utils.checkNotNull(isCustomer, "isCustomer");
            this.isCustomer = isCustomer;
            return this;
        }


        public Builder isSupplier(boolean isSupplier) {
            Utils.checkNotNull(isSupplier, "isSupplier");
            this.isSupplier = Optional.ofNullable(isSupplier);
            return this;
        }

        public Builder isSupplier(Optional<Boolean> isSupplier) {
            Utils.checkNotNull(isSupplier, "isSupplier");
            this.isSupplier = isSupplier;
            return this;
        }


        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder paymentMethods(List<AccountingContactPaymentMethod> paymentMethods) {
            Utils.checkNotNull(paymentMethods, "paymentMethods");
            this.paymentMethods = Optional.ofNullable(paymentMethods);
            return this;
        }

        public Builder paymentMethods(Optional<? extends List<AccountingContactPaymentMethod>> paymentMethods) {
            Utils.checkNotNull(paymentMethods, "paymentMethods");
            this.paymentMethods = paymentMethods;
            return this;
        }


        public Builder portalUrl(String portalUrl) {
            Utils.checkNotNull(portalUrl, "portalUrl");
            this.portalUrl = Optional.ofNullable(portalUrl);
            return this;
        }

        public Builder portalUrl(Optional<String> portalUrl) {
            Utils.checkNotNull(portalUrl, "portalUrl");
            this.portalUrl = portalUrl;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder shippingAddress(PropertyAccountingContactShippingAddress shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = Optional.ofNullable(shippingAddress);
            return this;
        }

        public Builder shippingAddress(Optional<? extends PropertyAccountingContactShippingAddress> shippingAddress) {
            Utils.checkNotNull(shippingAddress, "shippingAddress");
            this.shippingAddress = shippingAddress;
            return this;
        }


        public Builder taxExemption(TaxExemption taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = Optional.ofNullable(taxExemption);
            return this;
        }

        public Builder taxExemption(Optional<? extends TaxExemption> taxExemption) {
            Utils.checkNotNull(taxExemption, "taxExemption");
            this.taxExemption = taxExemption;
            return this;
        }


        public Builder taxNumber(String taxNumber) {
            Utils.checkNotNull(taxNumber, "taxNumber");
            this.taxNumber = Optional.ofNullable(taxNumber);
            return this;
        }

        public Builder taxNumber(Optional<String> taxNumber) {
            Utils.checkNotNull(taxNumber, "taxNumber");
            this.taxNumber = taxNumber;
            return this;
        }


        public Builder telephones(List<AccountingTelephone> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = Optional.ofNullable(telephones);
            return this;
        }

        public Builder telephones(Optional<? extends List<AccountingTelephone>> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = telephones;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public AccountingContact build() {
            if (currency == null) {
                currency = _SINGLETON_VALUE_Currency.value();
            }

            return new AccountingContact(
                associatedContacts, billingAddress, companyName,
                createdAt, currency, emails,
                firstName, id, identification,
                isActive, isCustomer, isSupplier,
                lastName, name, paymentMethods,
                portalUrl, raw, shippingAddress,
                taxExemption, taxNumber, telephones,
                updatedAt);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Currency =
                new LazySingletonValue<>(
                        "currency",
                        "\"USD\"",
                        new TypeReference<Optional<String>>() {});
    }
}

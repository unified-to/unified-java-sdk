/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class AccountingCashflowItem {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    private Optional<String> accountId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<Double> amount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_items")
    private Optional<? extends List<PropertyAccountingCashflowItemSubItems>> subItems;

    /**
     * Optional linkage to transactions
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_ids")
    private Optional<? extends List<String>> transactionIds;

    @JsonCreator
    public AccountingCashflowItem(
            @JsonProperty("account_id") Optional<String> accountId,
            @JsonProperty("amount") Optional<Double> amount,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("sub_items") Optional<? extends List<PropertyAccountingCashflowItemSubItems>> subItems,
            @JsonProperty("transaction_ids") Optional<? extends List<String>> transactionIds) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(subItems, "subItems");
        Utils.checkNotNull(transactionIds, "transactionIds");
        this.accountId = accountId;
        this.amount = amount;
        this.name = name;
        this.subItems = subItems;
        this.transactionIds = transactionIds;
    }
    
    public AccountingCashflowItem() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> accountId() {
        return accountId;
    }

    @JsonIgnore
    public Optional<Double> amount() {
        return amount;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyAccountingCashflowItemSubItems>> subItems() {
        return (Optional<List<PropertyAccountingCashflowItemSubItems>>) subItems;
    }

    /**
     * Optional linkage to transactions
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> transactionIds() {
        return (Optional<List<String>>) transactionIds;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AccountingCashflowItem withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = Optional.ofNullable(accountId);
        return this;
    }


    public AccountingCashflowItem withAccountId(Optional<String> accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    public AccountingCashflowItem withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }


    public AccountingCashflowItem withAmount(Optional<Double> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    public AccountingCashflowItem withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public AccountingCashflowItem withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AccountingCashflowItem withSubItems(List<PropertyAccountingCashflowItemSubItems> subItems) {
        Utils.checkNotNull(subItems, "subItems");
        this.subItems = Optional.ofNullable(subItems);
        return this;
    }


    public AccountingCashflowItem withSubItems(Optional<? extends List<PropertyAccountingCashflowItemSubItems>> subItems) {
        Utils.checkNotNull(subItems, "subItems");
        this.subItems = subItems;
        return this;
    }

    /**
     * Optional linkage to transactions
     */
    public AccountingCashflowItem withTransactionIds(List<String> transactionIds) {
        Utils.checkNotNull(transactionIds, "transactionIds");
        this.transactionIds = Optional.ofNullable(transactionIds);
        return this;
    }


    /**
     * Optional linkage to transactions
     */
    public AccountingCashflowItem withTransactionIds(Optional<? extends List<String>> transactionIds) {
        Utils.checkNotNull(transactionIds, "transactionIds");
        this.transactionIds = transactionIds;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingCashflowItem other = (AccountingCashflowItem) o;
        return 
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.amount, other.amount) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.subItems, other.subItems) &&
            Utils.enhancedDeepEquals(this.transactionIds, other.transactionIds);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountId, amount, name,
            subItems, transactionIds);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingCashflowItem.class,
                "accountId", accountId,
                "amount", amount,
                "name", name,
                "subItems", subItems,
                "transactionIds", transactionIds);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> accountId = Optional.empty();

        private Optional<Double> amount = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends List<PropertyAccountingCashflowItemSubItems>> subItems = Optional.empty();

        private Optional<? extends List<String>> transactionIds = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        public Builder accountId(Optional<String> accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        public Builder amount(Optional<Double> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder subItems(List<PropertyAccountingCashflowItemSubItems> subItems) {
            Utils.checkNotNull(subItems, "subItems");
            this.subItems = Optional.ofNullable(subItems);
            return this;
        }

        public Builder subItems(Optional<? extends List<PropertyAccountingCashflowItemSubItems>> subItems) {
            Utils.checkNotNull(subItems, "subItems");
            this.subItems = subItems;
            return this;
        }


        /**
         * Optional linkage to transactions
         */
        public Builder transactionIds(List<String> transactionIds) {
            Utils.checkNotNull(transactionIds, "transactionIds");
            this.transactionIds = Optional.ofNullable(transactionIds);
            return this;
        }

        /**
         * Optional linkage to transactions
         */
        public Builder transactionIds(Optional<? extends List<String>> transactionIds) {
            Utils.checkNotNull(transactionIds, "transactionIds");
            this.transactionIds = transactionIds;
            return this;
        }

        public AccountingCashflowItem build() {

            return new AccountingCashflowItem(
                accountId, amount, name,
                subItems, transactionIds);
        }

    }
}

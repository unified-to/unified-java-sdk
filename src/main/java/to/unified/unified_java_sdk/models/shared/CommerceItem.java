/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class CommerceItem {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_id")
    private Optional<String> accountId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("collection_ids")
    private Optional<? extends List<String>> collectionIds;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("global_code")
    private Optional<String> globalCode;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    private Optional<Boolean> isActive;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_taxable")
    private Optional<Boolean> isTaxable;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("media")
    private Optional<? extends List<CommerceItemMedia>> media;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends List<CommerceMetadata>> metadata;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_description")
    private Optional<String> publicDescription;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_name")
    private Optional<String> publicName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private Optional<String> slug;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends List<String>> tags;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    /**
     * first variant is the default variant
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("variants")
    private Optional<? extends List<CommerceItemVariant>> variants;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("vendor_name")
    private Optional<String> vendorName;

    @JsonCreator
    public CommerceItem(
            @JsonProperty("account_id") Optional<String> accountId,
            @JsonProperty("collection_ids") Optional<? extends List<String>> collectionIds,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("global_code") Optional<String> globalCode,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_active") Optional<Boolean> isActive,
            @JsonProperty("is_taxable") Optional<Boolean> isTaxable,
            @JsonProperty("media") Optional<? extends List<CommerceItemMedia>> media,
            @JsonProperty("metadata") Optional<? extends List<CommerceMetadata>> metadata,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("public_description") Optional<String> publicDescription,
            @JsonProperty("public_name") Optional<String> publicName,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("slug") Optional<String> slug,
            @JsonProperty("tags") Optional<? extends List<String>> tags,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("variants") Optional<? extends List<CommerceItemVariant>> variants,
            @JsonProperty("vendor_name") Optional<String> vendorName) {
        Utils.checkNotNull(accountId, "accountId");
        Utils.checkNotNull(collectionIds, "collectionIds");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(globalCode, "globalCode");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(isTaxable, "isTaxable");
        Utils.checkNotNull(media, "media");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(publicDescription, "publicDescription");
        Utils.checkNotNull(publicName, "publicName");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(variants, "variants");
        Utils.checkNotNull(vendorName, "vendorName");
        this.accountId = accountId;
        this.collectionIds = collectionIds;
        this.createdAt = createdAt;
        this.description = description;
        this.globalCode = globalCode;
        this.id = id;
        this.isActive = isActive;
        this.isTaxable = isTaxable;
        this.media = media;
        this.metadata = metadata;
        this.name = name;
        this.publicDescription = publicDescription;
        this.publicName = publicName;
        this.raw = raw;
        this.slug = slug;
        this.tags = tags;
        this.type = type;
        this.updatedAt = updatedAt;
        this.variants = variants;
        this.vendorName = vendorName;
    }
    
    public CommerceItem() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> accountId() {
        return accountId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> collectionIds() {
        return (Optional<List<String>>) collectionIds;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> globalCode() {
        return globalCode;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isActive() {
        return isActive;
    }

    @JsonIgnore
    public Optional<Boolean> isTaxable() {
        return isTaxable;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceItemMedia>> media() {
        return (Optional<List<CommerceItemMedia>>) media;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceMetadata>> metadata() {
        return (Optional<List<CommerceMetadata>>) metadata;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> publicDescription() {
        return publicDescription;
    }

    @JsonIgnore
    public Optional<String> publicName() {
        return publicName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<String> slug() {
        return slug;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tags() {
        return (Optional<List<String>>) tags;
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    /**
     * first variant is the default variant
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceItemVariant>> variants() {
        return (Optional<List<CommerceItemVariant>>) variants;
    }

    @JsonIgnore
    public Optional<String> vendorName() {
        return vendorName;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CommerceItem withAccountId(String accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = Optional.ofNullable(accountId);
        return this;
    }


    public CommerceItem withAccountId(Optional<String> accountId) {
        Utils.checkNotNull(accountId, "accountId");
        this.accountId = accountId;
        return this;
    }

    public CommerceItem withCollectionIds(List<String> collectionIds) {
        Utils.checkNotNull(collectionIds, "collectionIds");
        this.collectionIds = Optional.ofNullable(collectionIds);
        return this;
    }


    public CommerceItem withCollectionIds(Optional<? extends List<String>> collectionIds) {
        Utils.checkNotNull(collectionIds, "collectionIds");
        this.collectionIds = collectionIds;
        return this;
    }

    public CommerceItem withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public CommerceItem withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public CommerceItem withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    public CommerceItem withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public CommerceItem withGlobalCode(String globalCode) {
        Utils.checkNotNull(globalCode, "globalCode");
        this.globalCode = Optional.ofNullable(globalCode);
        return this;
    }


    public CommerceItem withGlobalCode(Optional<String> globalCode) {
        Utils.checkNotNull(globalCode, "globalCode");
        this.globalCode = globalCode;
        return this;
    }

    public CommerceItem withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public CommerceItem withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CommerceItem withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }


    public CommerceItem withIsActive(Optional<Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    public CommerceItem withIsTaxable(boolean isTaxable) {
        Utils.checkNotNull(isTaxable, "isTaxable");
        this.isTaxable = Optional.ofNullable(isTaxable);
        return this;
    }


    public CommerceItem withIsTaxable(Optional<Boolean> isTaxable) {
        Utils.checkNotNull(isTaxable, "isTaxable");
        this.isTaxable = isTaxable;
        return this;
    }

    public CommerceItem withMedia(List<CommerceItemMedia> media) {
        Utils.checkNotNull(media, "media");
        this.media = Optional.ofNullable(media);
        return this;
    }


    public CommerceItem withMedia(Optional<? extends List<CommerceItemMedia>> media) {
        Utils.checkNotNull(media, "media");
        this.media = media;
        return this;
    }

    public CommerceItem withMetadata(List<CommerceMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }


    public CommerceItem withMetadata(Optional<? extends List<CommerceMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public CommerceItem withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public CommerceItem withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CommerceItem withPublicDescription(String publicDescription) {
        Utils.checkNotNull(publicDescription, "publicDescription");
        this.publicDescription = Optional.ofNullable(publicDescription);
        return this;
    }


    public CommerceItem withPublicDescription(Optional<String> publicDescription) {
        Utils.checkNotNull(publicDescription, "publicDescription");
        this.publicDescription = publicDescription;
        return this;
    }

    public CommerceItem withPublicName(String publicName) {
        Utils.checkNotNull(publicName, "publicName");
        this.publicName = Optional.ofNullable(publicName);
        return this;
    }


    public CommerceItem withPublicName(Optional<String> publicName) {
        Utils.checkNotNull(publicName, "publicName");
        this.publicName = publicName;
        return this;
    }

    public CommerceItem withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public CommerceItem withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public CommerceItem withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = Optional.ofNullable(slug);
        return this;
    }


    public CommerceItem withSlug(Optional<String> slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    public CommerceItem withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }


    public CommerceItem withTags(Optional<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    public CommerceItem withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public CommerceItem withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public CommerceItem withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public CommerceItem withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    /**
     * first variant is the default variant
     */
    public CommerceItem withVariants(List<CommerceItemVariant> variants) {
        Utils.checkNotNull(variants, "variants");
        this.variants = Optional.ofNullable(variants);
        return this;
    }


    /**
     * first variant is the default variant
     */
    public CommerceItem withVariants(Optional<? extends List<CommerceItemVariant>> variants) {
        Utils.checkNotNull(variants, "variants");
        this.variants = variants;
        return this;
    }

    public CommerceItem withVendorName(String vendorName) {
        Utils.checkNotNull(vendorName, "vendorName");
        this.vendorName = Optional.ofNullable(vendorName);
        return this;
    }


    public CommerceItem withVendorName(Optional<String> vendorName) {
        Utils.checkNotNull(vendorName, "vendorName");
        this.vendorName = vendorName;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceItem other = (CommerceItem) o;
        return 
            Utils.enhancedDeepEquals(this.accountId, other.accountId) &&
            Utils.enhancedDeepEquals(this.collectionIds, other.collectionIds) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.globalCode, other.globalCode) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.isActive, other.isActive) &&
            Utils.enhancedDeepEquals(this.isTaxable, other.isTaxable) &&
            Utils.enhancedDeepEquals(this.media, other.media) &&
            Utils.enhancedDeepEquals(this.metadata, other.metadata) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.publicDescription, other.publicDescription) &&
            Utils.enhancedDeepEquals(this.publicName, other.publicName) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.slug, other.slug) &&
            Utils.enhancedDeepEquals(this.tags, other.tags) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.variants, other.variants) &&
            Utils.enhancedDeepEquals(this.vendorName, other.vendorName);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountId, collectionIds, createdAt,
            description, globalCode, id,
            isActive, isTaxable, media,
            metadata, name, publicDescription,
            publicName, raw, slug,
            tags, type, updatedAt,
            variants, vendorName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceItem.class,
                "accountId", accountId,
                "collectionIds", collectionIds,
                "createdAt", createdAt,
                "description", description,
                "globalCode", globalCode,
                "id", id,
                "isActive", isActive,
                "isTaxable", isTaxable,
                "media", media,
                "metadata", metadata,
                "name", name,
                "publicDescription", publicDescription,
                "publicName", publicName,
                "raw", raw,
                "slug", slug,
                "tags", tags,
                "type", type,
                "updatedAt", updatedAt,
                "variants", variants,
                "vendorName", vendorName);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> accountId = Optional.empty();

        private Optional<? extends List<String>> collectionIds = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> globalCode = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<Boolean> isActive = Optional.empty();

        private Optional<Boolean> isTaxable = Optional.empty();

        private Optional<? extends List<CommerceItemMedia>> media = Optional.empty();

        private Optional<? extends List<CommerceMetadata>> metadata = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<String> publicDescription = Optional.empty();

        private Optional<String> publicName = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<String> slug = Optional.empty();

        private Optional<? extends List<String>> tags = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<? extends List<CommerceItemVariant>> variants = Optional.empty();

        private Optional<String> vendorName = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder accountId(String accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = Optional.ofNullable(accountId);
            return this;
        }

        public Builder accountId(Optional<String> accountId) {
            Utils.checkNotNull(accountId, "accountId");
            this.accountId = accountId;
            return this;
        }


        public Builder collectionIds(List<String> collectionIds) {
            Utils.checkNotNull(collectionIds, "collectionIds");
            this.collectionIds = Optional.ofNullable(collectionIds);
            return this;
        }

        public Builder collectionIds(Optional<? extends List<String>> collectionIds) {
            Utils.checkNotNull(collectionIds, "collectionIds");
            this.collectionIds = collectionIds;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder globalCode(String globalCode) {
            Utils.checkNotNull(globalCode, "globalCode");
            this.globalCode = Optional.ofNullable(globalCode);
            return this;
        }

        public Builder globalCode(Optional<String> globalCode) {
            Utils.checkNotNull(globalCode, "globalCode");
            this.globalCode = globalCode;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        public Builder isActive(Optional<Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }


        public Builder isTaxable(boolean isTaxable) {
            Utils.checkNotNull(isTaxable, "isTaxable");
            this.isTaxable = Optional.ofNullable(isTaxable);
            return this;
        }

        public Builder isTaxable(Optional<Boolean> isTaxable) {
            Utils.checkNotNull(isTaxable, "isTaxable");
            this.isTaxable = isTaxable;
            return this;
        }


        public Builder media(List<CommerceItemMedia> media) {
            Utils.checkNotNull(media, "media");
            this.media = Optional.ofNullable(media);
            return this;
        }

        public Builder media(Optional<? extends List<CommerceItemMedia>> media) {
            Utils.checkNotNull(media, "media");
            this.media = media;
            return this;
        }


        public Builder metadata(List<CommerceMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends List<CommerceMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder publicDescription(String publicDescription) {
            Utils.checkNotNull(publicDescription, "publicDescription");
            this.publicDescription = Optional.ofNullable(publicDescription);
            return this;
        }

        public Builder publicDescription(Optional<String> publicDescription) {
            Utils.checkNotNull(publicDescription, "publicDescription");
            this.publicDescription = publicDescription;
            return this;
        }


        public Builder publicName(String publicName) {
            Utils.checkNotNull(publicName, "publicName");
            this.publicName = Optional.ofNullable(publicName);
            return this;
        }

        public Builder publicName(Optional<String> publicName) {
            Utils.checkNotNull(publicName, "publicName");
            this.publicName = publicName;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = Optional.ofNullable(slug);
            return this;
        }

        public Builder slug(Optional<String> slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }


        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Builder tags(Optional<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }


        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        /**
         * first variant is the default variant
         */
        public Builder variants(List<CommerceItemVariant> variants) {
            Utils.checkNotNull(variants, "variants");
            this.variants = Optional.ofNullable(variants);
            return this;
        }

        /**
         * first variant is the default variant
         */
        public Builder variants(Optional<? extends List<CommerceItemVariant>> variants) {
            Utils.checkNotNull(variants, "variants");
            this.variants = variants;
            return this;
        }


        public Builder vendorName(String vendorName) {
            Utils.checkNotNull(vendorName, "vendorName");
            this.vendorName = Optional.ofNullable(vendorName);
            return this;
        }

        public Builder vendorName(Optional<String> vendorName) {
            Utils.checkNotNull(vendorName, "vendorName");
            this.vendorName = vendorName;
            return this;
        }

        public CommerceItem build() {

            return new CommerceItem(
                accountId, collectionIds, createdAt,
                description, globalCode, id,
                isActive, isTaxable, media,
                metadata, name, publicDescription,
                publicName, raw, slug,
                tags, type, updatedAt,
                variants, vendorName);
        }

    }
}

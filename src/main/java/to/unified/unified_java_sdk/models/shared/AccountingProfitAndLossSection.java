/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class AccountingProfitAndLossSection {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accounts")
    private Optional<? extends List<AccountingProfitAndLossAccount>> accounts;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("section_name")
    private Optional<String> sectionName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("section_type")
    private Optional<String> sectionType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<Double> totalAmount;

    @JsonCreator
    public AccountingProfitAndLossSection(
            @JsonProperty("accounts") Optional<? extends List<AccountingProfitAndLossAccount>> accounts,
            @JsonProperty("section_name") Optional<String> sectionName,
            @JsonProperty("section_type") Optional<String> sectionType,
            @JsonProperty("total_amount") Optional<Double> totalAmount) {
        Utils.checkNotNull(accounts, "accounts");
        Utils.checkNotNull(sectionName, "sectionName");
        Utils.checkNotNull(sectionType, "sectionType");
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.accounts = accounts;
        this.sectionName = sectionName;
        this.sectionType = sectionType;
        this.totalAmount = totalAmount;
    }
    
    public AccountingProfitAndLossSection() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingProfitAndLossAccount>> accounts() {
        return (Optional<List<AccountingProfitAndLossAccount>>) accounts;
    }

    @JsonIgnore
    public Optional<String> sectionName() {
        return sectionName;
    }

    @JsonIgnore
    public Optional<String> sectionType() {
        return sectionType;
    }

    @JsonIgnore
    public Optional<Double> totalAmount() {
        return totalAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AccountingProfitAndLossSection withAccounts(List<AccountingProfitAndLossAccount> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = Optional.ofNullable(accounts);
        return this;
    }

    public AccountingProfitAndLossSection withAccounts(Optional<? extends List<AccountingProfitAndLossAccount>> accounts) {
        Utils.checkNotNull(accounts, "accounts");
        this.accounts = accounts;
        return this;
    }

    public AccountingProfitAndLossSection withSectionName(String sectionName) {
        Utils.checkNotNull(sectionName, "sectionName");
        this.sectionName = Optional.ofNullable(sectionName);
        return this;
    }

    public AccountingProfitAndLossSection withSectionName(Optional<String> sectionName) {
        Utils.checkNotNull(sectionName, "sectionName");
        this.sectionName = sectionName;
        return this;
    }

    public AccountingProfitAndLossSection withSectionType(String sectionType) {
        Utils.checkNotNull(sectionType, "sectionType");
        this.sectionType = Optional.ofNullable(sectionType);
        return this;
    }

    public AccountingProfitAndLossSection withSectionType(Optional<String> sectionType) {
        Utils.checkNotNull(sectionType, "sectionType");
        this.sectionType = sectionType;
        return this;
    }

    public AccountingProfitAndLossSection withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }

    public AccountingProfitAndLossSection withTotalAmount(Optional<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingProfitAndLossSection other = (AccountingProfitAndLossSection) o;
        return 
            Utils.enhancedDeepEquals(this.accounts, other.accounts) &&
            Utils.enhancedDeepEquals(this.sectionName, other.sectionName) &&
            Utils.enhancedDeepEquals(this.sectionType, other.sectionType) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accounts,
            sectionName,
            sectionType,
            totalAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingProfitAndLossSection.class,
                "accounts", accounts,
                "sectionName", sectionName,
                "sectionType", sectionType,
                "totalAmount", totalAmount);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AccountingProfitAndLossAccount>> accounts = Optional.empty();
 
        private Optional<String> sectionName = Optional.empty();
 
        private Optional<String> sectionType = Optional.empty();
 
        private Optional<Double> totalAmount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accounts(List<AccountingProfitAndLossAccount> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = Optional.ofNullable(accounts);
            return this;
        }

        public Builder accounts(Optional<? extends List<AccountingProfitAndLossAccount>> accounts) {
            Utils.checkNotNull(accounts, "accounts");
            this.accounts = accounts;
            return this;
        }

        public Builder sectionName(String sectionName) {
            Utils.checkNotNull(sectionName, "sectionName");
            this.sectionName = Optional.ofNullable(sectionName);
            return this;
        }

        public Builder sectionName(Optional<String> sectionName) {
            Utils.checkNotNull(sectionName, "sectionName");
            this.sectionName = sectionName;
            return this;
        }

        public Builder sectionType(String sectionType) {
            Utils.checkNotNull(sectionType, "sectionType");
            this.sectionType = Optional.ofNullable(sectionType);
            return this;
        }

        public Builder sectionType(Optional<String> sectionType) {
            Utils.checkNotNull(sectionType, "sectionType");
            this.sectionType = sectionType;
            return this;
        }

        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        public Builder totalAmount(Optional<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }
        
        public AccountingProfitAndLossSection build() {
            return new AccountingProfitAndLossSection(
                accounts,
                sectionName,
                sectionType,
                totalAmount);
        }
    }
}

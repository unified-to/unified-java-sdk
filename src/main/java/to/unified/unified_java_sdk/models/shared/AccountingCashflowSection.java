/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class AccountingCashflowSection {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("items")
    private Optional<? extends List<AccountingCashflowItem>> items;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("section_name")
    private Optional<String> sectionName;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<Double> totalAmount;

    @JsonCreator
    public AccountingCashflowSection(
            @JsonProperty("items") Optional<? extends List<AccountingCashflowItem>> items,
            @JsonProperty("section_name") Optional<String> sectionName,
            @JsonProperty("total_amount") Optional<Double> totalAmount) {
        Utils.checkNotNull(items, "items");
        Utils.checkNotNull(sectionName, "sectionName");
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.items = items;
        this.sectionName = sectionName;
        this.totalAmount = totalAmount;
    }
    
    public AccountingCashflowSection() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingCashflowItem>> items() {
        return (Optional<List<AccountingCashflowItem>>) items;
    }

    @JsonIgnore
    public Optional<String> sectionName() {
        return sectionName;
    }

    @JsonIgnore
    public Optional<Double> totalAmount() {
        return totalAmount;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AccountingCashflowSection withItems(List<AccountingCashflowItem> items) {
        Utils.checkNotNull(items, "items");
        this.items = Optional.ofNullable(items);
        return this;
    }


    public AccountingCashflowSection withItems(Optional<? extends List<AccountingCashflowItem>> items) {
        Utils.checkNotNull(items, "items");
        this.items = items;
        return this;
    }

    public AccountingCashflowSection withSectionName(String sectionName) {
        Utils.checkNotNull(sectionName, "sectionName");
        this.sectionName = Optional.ofNullable(sectionName);
        return this;
    }


    public AccountingCashflowSection withSectionName(Optional<String> sectionName) {
        Utils.checkNotNull(sectionName, "sectionName");
        this.sectionName = sectionName;
        return this;
    }

    public AccountingCashflowSection withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    public AccountingCashflowSection withTotalAmount(Optional<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingCashflowSection other = (AccountingCashflowSection) o;
        return 
            Utils.enhancedDeepEquals(this.items, other.items) &&
            Utils.enhancedDeepEquals(this.sectionName, other.sectionName) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            items, sectionName, totalAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingCashflowSection.class,
                "items", items,
                "sectionName", sectionName,
                "totalAmount", totalAmount);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<AccountingCashflowItem>> items = Optional.empty();

        private Optional<String> sectionName = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder items(List<AccountingCashflowItem> items) {
            Utils.checkNotNull(items, "items");
            this.items = Optional.ofNullable(items);
            return this;
        }

        public Builder items(Optional<? extends List<AccountingCashflowItem>> items) {
            Utils.checkNotNull(items, "items");
            this.items = items;
            return this;
        }


        public Builder sectionName(String sectionName) {
            Utils.checkNotNull(sectionName, "sectionName");
            this.sectionName = Optional.ofNullable(sectionName);
            return this;
        }

        public Builder sectionName(Optional<String> sectionName) {
            Utils.checkNotNull(sectionName, "sectionName");
            this.sectionName = sectionName;
            return this;
        }


        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        public Builder totalAmount(Optional<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        public AccountingCashflowSection build() {

            return new AccountingCashflowSection(
                items, sectionName, totalAmount);
        }

    }
}

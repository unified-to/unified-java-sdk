/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class AtsJobOpening {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_id")
    private Optional<String> applicationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("close_reason")
    private Optional<String> closeReason;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("closed_at")
    private Optional<OffsetDateTime> closedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("opened_at")
    private Optional<OffsetDateTime> openedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends AtsJobOpeningStatus> status;

    @JsonCreator
    public AtsJobOpening(
            @JsonProperty("application_id") Optional<String> applicationId,
            @JsonProperty("close_reason") Optional<String> closeReason,
            @JsonProperty("closed_at") Optional<OffsetDateTime> closedAt,
            @JsonProperty("opened_at") Optional<OffsetDateTime> openedAt,
            @JsonProperty("status") Optional<? extends AtsJobOpeningStatus> status) {
        Utils.checkNotNull(applicationId, "applicationId");
        Utils.checkNotNull(closeReason, "closeReason");
        Utils.checkNotNull(closedAt, "closedAt");
        Utils.checkNotNull(openedAt, "openedAt");
        Utils.checkNotNull(status, "status");
        this.applicationId = applicationId;
        this.closeReason = closeReason;
        this.closedAt = closedAt;
        this.openedAt = openedAt;
        this.status = status;
    }
    
    public AtsJobOpening() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> applicationId() {
        return applicationId;
    }

    @JsonIgnore
    public Optional<String> closeReason() {
        return closeReason;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> closedAt() {
        return closedAt;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> openedAt() {
        return openedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AtsJobOpeningStatus> status() {
        return (Optional<AtsJobOpeningStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AtsJobOpening withApplicationId(String applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = Optional.ofNullable(applicationId);
        return this;
    }

    public AtsJobOpening withApplicationId(Optional<String> applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = applicationId;
        return this;
    }

    public AtsJobOpening withCloseReason(String closeReason) {
        Utils.checkNotNull(closeReason, "closeReason");
        this.closeReason = Optional.ofNullable(closeReason);
        return this;
    }

    public AtsJobOpening withCloseReason(Optional<String> closeReason) {
        Utils.checkNotNull(closeReason, "closeReason");
        this.closeReason = closeReason;
        return this;
    }

    public AtsJobOpening withClosedAt(OffsetDateTime closedAt) {
        Utils.checkNotNull(closedAt, "closedAt");
        this.closedAt = Optional.ofNullable(closedAt);
        return this;
    }

    public AtsJobOpening withClosedAt(Optional<OffsetDateTime> closedAt) {
        Utils.checkNotNull(closedAt, "closedAt");
        this.closedAt = closedAt;
        return this;
    }

    public AtsJobOpening withOpenedAt(OffsetDateTime openedAt) {
        Utils.checkNotNull(openedAt, "openedAt");
        this.openedAt = Optional.ofNullable(openedAt);
        return this;
    }

    public AtsJobOpening withOpenedAt(Optional<OffsetDateTime> openedAt) {
        Utils.checkNotNull(openedAt, "openedAt");
        this.openedAt = openedAt;
        return this;
    }

    public AtsJobOpening withStatus(AtsJobOpeningStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public AtsJobOpening withStatus(Optional<? extends AtsJobOpeningStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AtsJobOpening other = (AtsJobOpening) o;
        return 
            Utils.enhancedDeepEquals(this.applicationId, other.applicationId) &&
            Utils.enhancedDeepEquals(this.closeReason, other.closeReason) &&
            Utils.enhancedDeepEquals(this.closedAt, other.closedAt) &&
            Utils.enhancedDeepEquals(this.openedAt, other.openedAt) &&
            Utils.enhancedDeepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            applicationId,
            closeReason,
            closedAt,
            openedAt,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AtsJobOpening.class,
                "applicationId", applicationId,
                "closeReason", closeReason,
                "closedAt", closedAt,
                "openedAt", openedAt,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<String> applicationId = Optional.empty();
 
        private Optional<String> closeReason = Optional.empty();
 
        private Optional<OffsetDateTime> closedAt = Optional.empty();
 
        private Optional<OffsetDateTime> openedAt = Optional.empty();
 
        private Optional<? extends AtsJobOpeningStatus> status = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder applicationId(String applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        public Builder applicationId(Optional<String> applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = applicationId;
            return this;
        }

        public Builder closeReason(String closeReason) {
            Utils.checkNotNull(closeReason, "closeReason");
            this.closeReason = Optional.ofNullable(closeReason);
            return this;
        }

        public Builder closeReason(Optional<String> closeReason) {
            Utils.checkNotNull(closeReason, "closeReason");
            this.closeReason = closeReason;
            return this;
        }

        public Builder closedAt(OffsetDateTime closedAt) {
            Utils.checkNotNull(closedAt, "closedAt");
            this.closedAt = Optional.ofNullable(closedAt);
            return this;
        }

        public Builder closedAt(Optional<OffsetDateTime> closedAt) {
            Utils.checkNotNull(closedAt, "closedAt");
            this.closedAt = closedAt;
            return this;
        }

        public Builder openedAt(OffsetDateTime openedAt) {
            Utils.checkNotNull(openedAt, "openedAt");
            this.openedAt = Optional.ofNullable(openedAt);
            return this;
        }

        public Builder openedAt(Optional<OffsetDateTime> openedAt) {
            Utils.checkNotNull(openedAt, "openedAt");
            this.openedAt = openedAt;
            return this;
        }

        public Builder status(AtsJobOpeningStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends AtsJobOpeningStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public AtsJobOpening build() {
            return new AtsJobOpening(
                applicationId,
                closeReason,
                closedAt,
                openedAt,
                status);
        }
    }
}

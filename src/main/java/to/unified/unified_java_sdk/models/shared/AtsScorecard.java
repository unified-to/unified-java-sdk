/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class AtsScorecard {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("application_id")
    private Optional<String> applicationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("candidate_id")
    private Optional<String> candidateId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comment")
    private Optional<String> comment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interview_id")
    private Optional<String> interviewId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("interviewer_id")
    private Optional<String> interviewerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_id")
    private Optional<String> jobId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("questions")
    private Optional<? extends List<AtsScorecardQuestion>> questions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recommendation")
    private Optional<? extends Recommendation> recommendation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public AtsScorecard(
            @JsonProperty("application_id") Optional<String> applicationId,
            @JsonProperty("candidate_id") Optional<String> candidateId,
            @JsonProperty("comment") Optional<String> comment,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("interview_id") Optional<String> interviewId,
            @JsonProperty("interviewer_id") Optional<String> interviewerId,
            @JsonProperty("job_id") Optional<String> jobId,
            @JsonProperty("questions") Optional<? extends List<AtsScorecardQuestion>> questions,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("recommendation") Optional<? extends Recommendation> recommendation,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(applicationId, "applicationId");
        Utils.checkNotNull(candidateId, "candidateId");
        Utils.checkNotNull(comment, "comment");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(interviewId, "interviewId");
        Utils.checkNotNull(interviewerId, "interviewerId");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(questions, "questions");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(recommendation, "recommendation");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.applicationId = applicationId;
        this.candidateId = candidateId;
        this.comment = comment;
        this.createdAt = createdAt;
        this.id = id;
        this.interviewId = interviewId;
        this.interviewerId = interviewerId;
        this.jobId = jobId;
        this.questions = questions;
        this.raw = raw;
        this.recommendation = recommendation;
        this.updatedAt = updatedAt;
    }
    
    public AtsScorecard() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> applicationId() {
        return applicationId;
    }

    @JsonIgnore
    public Optional<String> candidateId() {
        return candidateId;
    }

    @JsonIgnore
    public Optional<String> comment() {
        return comment;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> interviewId() {
        return interviewId;
    }

    @JsonIgnore
    public Optional<String> interviewerId() {
        return interviewerId;
    }

    @JsonIgnore
    public Optional<String> jobId() {
        return jobId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AtsScorecardQuestion>> questions() {
        return (Optional<List<AtsScorecardQuestion>>) questions;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Recommendation> recommendation() {
        return (Optional<Recommendation>) recommendation;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AtsScorecard withApplicationId(String applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = Optional.ofNullable(applicationId);
        return this;
    }

    public AtsScorecard withApplicationId(Optional<String> applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = applicationId;
        return this;
    }

    public AtsScorecard withCandidateId(String candidateId) {
        Utils.checkNotNull(candidateId, "candidateId");
        this.candidateId = Optional.ofNullable(candidateId);
        return this;
    }

    public AtsScorecard withCandidateId(Optional<String> candidateId) {
        Utils.checkNotNull(candidateId, "candidateId");
        this.candidateId = candidateId;
        return this;
    }

    public AtsScorecard withComment(String comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = Optional.ofNullable(comment);
        return this;
    }

    public AtsScorecard withComment(Optional<String> comment) {
        Utils.checkNotNull(comment, "comment");
        this.comment = comment;
        return this;
    }

    public AtsScorecard withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public AtsScorecard withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AtsScorecard withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public AtsScorecard withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AtsScorecard withInterviewId(String interviewId) {
        Utils.checkNotNull(interviewId, "interviewId");
        this.interviewId = Optional.ofNullable(interviewId);
        return this;
    }

    public AtsScorecard withInterviewId(Optional<String> interviewId) {
        Utils.checkNotNull(interviewId, "interviewId");
        this.interviewId = interviewId;
        return this;
    }

    public AtsScorecard withInterviewerId(String interviewerId) {
        Utils.checkNotNull(interviewerId, "interviewerId");
        this.interviewerId = Optional.ofNullable(interviewerId);
        return this;
    }

    public AtsScorecard withInterviewerId(Optional<String> interviewerId) {
        Utils.checkNotNull(interviewerId, "interviewerId");
        this.interviewerId = interviewerId;
        return this;
    }

    public AtsScorecard withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = Optional.ofNullable(jobId);
        return this;
    }

    public AtsScorecard withJobId(Optional<String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    public AtsScorecard withQuestions(List<AtsScorecardQuestion> questions) {
        Utils.checkNotNull(questions, "questions");
        this.questions = Optional.ofNullable(questions);
        return this;
    }

    public AtsScorecard withQuestions(Optional<? extends List<AtsScorecardQuestion>> questions) {
        Utils.checkNotNull(questions, "questions");
        this.questions = questions;
        return this;
    }

    public AtsScorecard withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public AtsScorecard withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AtsScorecard withRecommendation(Recommendation recommendation) {
        Utils.checkNotNull(recommendation, "recommendation");
        this.recommendation = Optional.ofNullable(recommendation);
        return this;
    }

    public AtsScorecard withRecommendation(Optional<? extends Recommendation> recommendation) {
        Utils.checkNotNull(recommendation, "recommendation");
        this.recommendation = recommendation;
        return this;
    }

    public AtsScorecard withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public AtsScorecard withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AtsScorecard other = (AtsScorecard) o;
        return 
            Objects.deepEquals(this.applicationId, other.applicationId) &&
            Objects.deepEquals(this.candidateId, other.candidateId) &&
            Objects.deepEquals(this.comment, other.comment) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.interviewId, other.interviewId) &&
            Objects.deepEquals(this.interviewerId, other.interviewerId) &&
            Objects.deepEquals(this.jobId, other.jobId) &&
            Objects.deepEquals(this.questions, other.questions) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.recommendation, other.recommendation) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            applicationId,
            candidateId,
            comment,
            createdAt,
            id,
            interviewId,
            interviewerId,
            jobId,
            questions,
            raw,
            recommendation,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AtsScorecard.class,
                "applicationId", applicationId,
                "candidateId", candidateId,
                "comment", comment,
                "createdAt", createdAt,
                "id", id,
                "interviewId", interviewId,
                "interviewerId", interviewerId,
                "jobId", jobId,
                "questions", questions,
                "raw", raw,
                "recommendation", recommendation,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Optional<String> applicationId = Optional.empty();
 
        private Optional<String> candidateId = Optional.empty();
 
        private Optional<String> comment = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> interviewId = Optional.empty();
 
        private Optional<String> interviewerId = Optional.empty();
 
        private Optional<String> jobId = Optional.empty();
 
        private Optional<? extends List<AtsScorecardQuestion>> questions = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<? extends Recommendation> recommendation = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder applicationId(String applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        public Builder applicationId(Optional<String> applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = applicationId;
            return this;
        }

        public Builder candidateId(String candidateId) {
            Utils.checkNotNull(candidateId, "candidateId");
            this.candidateId = Optional.ofNullable(candidateId);
            return this;
        }

        public Builder candidateId(Optional<String> candidateId) {
            Utils.checkNotNull(candidateId, "candidateId");
            this.candidateId = candidateId;
            return this;
        }

        public Builder comment(String comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = Optional.ofNullable(comment);
            return this;
        }

        public Builder comment(Optional<String> comment) {
            Utils.checkNotNull(comment, "comment");
            this.comment = comment;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder interviewId(String interviewId) {
            Utils.checkNotNull(interviewId, "interviewId");
            this.interviewId = Optional.ofNullable(interviewId);
            return this;
        }

        public Builder interviewId(Optional<String> interviewId) {
            Utils.checkNotNull(interviewId, "interviewId");
            this.interviewId = interviewId;
            return this;
        }

        public Builder interviewerId(String interviewerId) {
            Utils.checkNotNull(interviewerId, "interviewerId");
            this.interviewerId = Optional.ofNullable(interviewerId);
            return this;
        }

        public Builder interviewerId(Optional<String> interviewerId) {
            Utils.checkNotNull(interviewerId, "interviewerId");
            this.interviewerId = interviewerId;
            return this;
        }

        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        public Builder jobId(Optional<String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }

        public Builder questions(List<AtsScorecardQuestion> questions) {
            Utils.checkNotNull(questions, "questions");
            this.questions = Optional.ofNullable(questions);
            return this;
        }

        public Builder questions(Optional<? extends List<AtsScorecardQuestion>> questions) {
            Utils.checkNotNull(questions, "questions");
            this.questions = questions;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder recommendation(Recommendation recommendation) {
            Utils.checkNotNull(recommendation, "recommendation");
            this.recommendation = Optional.ofNullable(recommendation);
            return this;
        }

        public Builder recommendation(Optional<? extends Recommendation> recommendation) {
            Utils.checkNotNull(recommendation, "recommendation");
            this.recommendation = recommendation;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public AtsScorecard build() {
            return new AtsScorecard(
                applicationId,
                candidateId,
                comment,
                createdAt,
                id,
                interviewId,
                interviewerId,
                jobId,
                questions,
                raw,
                recommendation,
                updatedAt);
        }
    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class AccountingExpense {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approved_at")
    private Optional<OffsetDateTime> approvedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approver_user_id")
    private Optional<String> approverUserId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineitems")
    private Optional<? extends List<AccountingLineitem>> lineitems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursed_amount")
    private Optional<Double> reimbursedAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursed_at")
    private Optional<OffsetDateTime> reimbursedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private Optional<Double> taxAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<Double> totalAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    @JsonCreator
    public AccountingExpense(
            @JsonProperty("approved_at") Optional<OffsetDateTime> approvedAt,
            @JsonProperty("approver_user_id") Optional<String> approverUserId,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("lineitems") Optional<? extends List<AccountingLineitem>> lineitems,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("reimbursed_amount") Optional<Double> reimbursedAmount,
            @JsonProperty("reimbursed_at") Optional<OffsetDateTime> reimbursedAt,
            @JsonProperty("tax_amount") Optional<Double> taxAmount,
            @JsonProperty("total_amount") Optional<Double> totalAmount,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("user_id") Optional<String> userId) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        Utils.checkNotNull(approverUserId, "approverUserId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(lineitems, "lineitems");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(reimbursedAmount, "reimbursedAmount");
        Utils.checkNotNull(reimbursedAt, "reimbursedAt");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userId, "userId");
        this.approvedAt = approvedAt;
        this.approverUserId = approverUserId;
        this.createdAt = createdAt;
        this.currency = currency;
        this.id = id;
        this.lineitems = lineitems;
        this.name = name;
        this.raw = raw;
        this.reimbursedAmount = reimbursedAmount;
        this.reimbursedAt = reimbursedAt;
        this.taxAmount = taxAmount;
        this.totalAmount = totalAmount;
        this.updatedAt = updatedAt;
        this.userId = userId;
    }
    
    public AccountingExpense() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> approvedAt() {
        return approvedAt;
    }

    @JsonIgnore
    public Optional<String> approverUserId() {
        return approverUserId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingLineitem>> lineitems() {
        return (Optional<List<AccountingLineitem>>) lineitems;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<Double> reimbursedAmount() {
        return reimbursedAmount;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> reimbursedAt() {
        return reimbursedAt;
    }

    @JsonIgnore
    public Optional<Double> taxAmount() {
        return taxAmount;
    }

    @JsonIgnore
    public Optional<Double> totalAmount() {
        return totalAmount;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AccountingExpense withApprovedAt(OffsetDateTime approvedAt) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        this.approvedAt = Optional.ofNullable(approvedAt);
        return this;
    }


    public AccountingExpense withApprovedAt(Optional<OffsetDateTime> approvedAt) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        this.approvedAt = approvedAt;
        return this;
    }

    public AccountingExpense withApproverUserId(String approverUserId) {
        Utils.checkNotNull(approverUserId, "approverUserId");
        this.approverUserId = Optional.ofNullable(approverUserId);
        return this;
    }


    public AccountingExpense withApproverUserId(Optional<String> approverUserId) {
        Utils.checkNotNull(approverUserId, "approverUserId");
        this.approverUserId = approverUserId;
        return this;
    }

    public AccountingExpense withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public AccountingExpense withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AccountingExpense withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public AccountingExpense withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AccountingExpense withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public AccountingExpense withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AccountingExpense withLineitems(List<AccountingLineitem> lineitems) {
        Utils.checkNotNull(lineitems, "lineitems");
        this.lineitems = Optional.ofNullable(lineitems);
        return this;
    }


    public AccountingExpense withLineitems(Optional<? extends List<AccountingLineitem>> lineitems) {
        Utils.checkNotNull(lineitems, "lineitems");
        this.lineitems = lineitems;
        return this;
    }

    public AccountingExpense withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public AccountingExpense withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AccountingExpense withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public AccountingExpense withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AccountingExpense withReimbursedAmount(double reimbursedAmount) {
        Utils.checkNotNull(reimbursedAmount, "reimbursedAmount");
        this.reimbursedAmount = Optional.ofNullable(reimbursedAmount);
        return this;
    }


    public AccountingExpense withReimbursedAmount(Optional<Double> reimbursedAmount) {
        Utils.checkNotNull(reimbursedAmount, "reimbursedAmount");
        this.reimbursedAmount = reimbursedAmount;
        return this;
    }

    public AccountingExpense withReimbursedAt(OffsetDateTime reimbursedAt) {
        Utils.checkNotNull(reimbursedAt, "reimbursedAt");
        this.reimbursedAt = Optional.ofNullable(reimbursedAt);
        return this;
    }


    public AccountingExpense withReimbursedAt(Optional<OffsetDateTime> reimbursedAt) {
        Utils.checkNotNull(reimbursedAt, "reimbursedAt");
        this.reimbursedAt = reimbursedAt;
        return this;
    }

    public AccountingExpense withTaxAmount(double taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = Optional.ofNullable(taxAmount);
        return this;
    }


    public AccountingExpense withTaxAmount(Optional<Double> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    public AccountingExpense withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }


    public AccountingExpense withTotalAmount(Optional<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public AccountingExpense withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public AccountingExpense withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public AccountingExpense withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }


    public AccountingExpense withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingExpense other = (AccountingExpense) o;
        return 
            Utils.enhancedDeepEquals(this.approvedAt, other.approvedAt) &&
            Utils.enhancedDeepEquals(this.approverUserId, other.approverUserId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.lineitems, other.lineitems) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.reimbursedAmount, other.reimbursedAmount) &&
            Utils.enhancedDeepEquals(this.reimbursedAt, other.reimbursedAt) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            approvedAt, approverUserId, createdAt,
            currency, id, lineitems,
            name, raw, reimbursedAmount,
            reimbursedAt, taxAmount, totalAmount,
            updatedAt, userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingExpense.class,
                "approvedAt", approvedAt,
                "approverUserId", approverUserId,
                "createdAt", createdAt,
                "currency", currency,
                "id", id,
                "lineitems", lineitems,
                "name", name,
                "raw", raw,
                "reimbursedAmount", reimbursedAmount,
                "reimbursedAt", reimbursedAt,
                "taxAmount", taxAmount,
                "totalAmount", totalAmount,
                "updatedAt", updatedAt,
                "userId", userId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<OffsetDateTime> approvedAt = Optional.empty();

        private Optional<String> approverUserId = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> currency = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<? extends List<AccountingLineitem>> lineitems = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<Double> reimbursedAmount = Optional.empty();

        private Optional<OffsetDateTime> reimbursedAt = Optional.empty();

        private Optional<Double> taxAmount = Optional.empty();

        private Optional<Double> totalAmount = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder approvedAt(OffsetDateTime approvedAt) {
            Utils.checkNotNull(approvedAt, "approvedAt");
            this.approvedAt = Optional.ofNullable(approvedAt);
            return this;
        }

        public Builder approvedAt(Optional<OffsetDateTime> approvedAt) {
            Utils.checkNotNull(approvedAt, "approvedAt");
            this.approvedAt = approvedAt;
            return this;
        }


        public Builder approverUserId(String approverUserId) {
            Utils.checkNotNull(approverUserId, "approverUserId");
            this.approverUserId = Optional.ofNullable(approverUserId);
            return this;
        }

        public Builder approverUserId(Optional<String> approverUserId) {
            Utils.checkNotNull(approverUserId, "approverUserId");
            this.approverUserId = approverUserId;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder lineitems(List<AccountingLineitem> lineitems) {
            Utils.checkNotNull(lineitems, "lineitems");
            this.lineitems = Optional.ofNullable(lineitems);
            return this;
        }

        public Builder lineitems(Optional<? extends List<AccountingLineitem>> lineitems) {
            Utils.checkNotNull(lineitems, "lineitems");
            this.lineitems = lineitems;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder reimbursedAmount(double reimbursedAmount) {
            Utils.checkNotNull(reimbursedAmount, "reimbursedAmount");
            this.reimbursedAmount = Optional.ofNullable(reimbursedAmount);
            return this;
        }

        public Builder reimbursedAmount(Optional<Double> reimbursedAmount) {
            Utils.checkNotNull(reimbursedAmount, "reimbursedAmount");
            this.reimbursedAmount = reimbursedAmount;
            return this;
        }


        public Builder reimbursedAt(OffsetDateTime reimbursedAt) {
            Utils.checkNotNull(reimbursedAt, "reimbursedAt");
            this.reimbursedAt = Optional.ofNullable(reimbursedAt);
            return this;
        }

        public Builder reimbursedAt(Optional<OffsetDateTime> reimbursedAt) {
            Utils.checkNotNull(reimbursedAt, "reimbursedAt");
            this.reimbursedAt = reimbursedAt;
            return this;
        }


        public Builder taxAmount(double taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }

        public Builder taxAmount(Optional<Double> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }


        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        public Builder totalAmount(Optional<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public AccountingExpense build() {

            return new AccountingExpense(
                approvedAt, approverUserId, createdAt,
                currency, id, lineitems,
                name, raw, reimbursedAmount,
                reimbursedAt, taxAmount, totalAmount,
                updatedAt, userId);
        }

    }
}

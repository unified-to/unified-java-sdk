/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * AccountingCashflow
 * 
 * <p>Sections
 */
public class AccountingCashflow {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_beginning_amount")
    private Optional<Double> cashBeginningAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cash_ending_amount")
    private Optional<Double> cashEndingAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category_ids")
    private Optional<? extends List<String>> categoryIds;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_id")
    private Optional<String> contactId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    private Optional<OffsetDateTime> endAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("financing_sections")
    private Optional<? extends List<AccountingCashflowSection>> financingSections;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("investing_sections")
    private Optional<? extends List<AccountingCashflowSection>> investingSections;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_change_in_cash_amount")
    private Optional<Double> netChangeInCashAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operating_sections")
    private Optional<? extends List<AccountingCashflowSection>> operatingSections;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_at")
    private Optional<OffsetDateTime> startAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public AccountingCashflow(
            @JsonProperty("cash_beginning_amount") Optional<Double> cashBeginningAmount,
            @JsonProperty("cash_ending_amount") Optional<Double> cashEndingAmount,
            @JsonProperty("category_ids") Optional<? extends List<String>> categoryIds,
            @JsonProperty("contact_id") Optional<String> contactId,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("end_at") Optional<OffsetDateTime> endAt,
            @JsonProperty("financing_sections") Optional<? extends List<AccountingCashflowSection>> financingSections,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("investing_sections") Optional<? extends List<AccountingCashflowSection>> investingSections,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("net_change_in_cash_amount") Optional<Double> netChangeInCashAmount,
            @JsonProperty("operating_sections") Optional<? extends List<AccountingCashflowSection>> operatingSections,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("start_at") Optional<OffsetDateTime> startAt,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(cashBeginningAmount, "cashBeginningAmount");
        Utils.checkNotNull(cashEndingAmount, "cashEndingAmount");
        Utils.checkNotNull(categoryIds, "categoryIds");
        Utils.checkNotNull(contactId, "contactId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(financingSections, "financingSections");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(investingSections, "investingSections");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(netChangeInCashAmount, "netChangeInCashAmount");
        Utils.checkNotNull(operatingSections, "operatingSections");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(startAt, "startAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.cashBeginningAmount = cashBeginningAmount;
        this.cashEndingAmount = cashEndingAmount;
        this.categoryIds = categoryIds;
        this.contactId = contactId;
        this.createdAt = createdAt;
        this.currency = currency;
        this.endAt = endAt;
        this.financingSections = financingSections;
        this.id = id;
        this.investingSections = investingSections;
        this.name = name;
        this.netChangeInCashAmount = netChangeInCashAmount;
        this.operatingSections = operatingSections;
        this.raw = raw;
        this.startAt = startAt;
        this.updatedAt = updatedAt;
    }
    
    public AccountingCashflow() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> cashBeginningAmount() {
        return cashBeginningAmount;
    }

    @JsonIgnore
    public Optional<Double> cashEndingAmount() {
        return cashEndingAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> categoryIds() {
        return (Optional<List<String>>) categoryIds;
    }

    @JsonIgnore
    public Optional<String> contactId() {
        return contactId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endAt() {
        return endAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingCashflowSection>> financingSections() {
        return (Optional<List<AccountingCashflowSection>>) financingSections;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingCashflowSection>> investingSections() {
        return (Optional<List<AccountingCashflowSection>>) investingSections;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<Double> netChangeInCashAmount() {
        return netChangeInCashAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingCashflowSection>> operatingSections() {
        return (Optional<List<AccountingCashflowSection>>) operatingSections;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startAt() {
        return startAt;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AccountingCashflow withCashBeginningAmount(double cashBeginningAmount) {
        Utils.checkNotNull(cashBeginningAmount, "cashBeginningAmount");
        this.cashBeginningAmount = Optional.ofNullable(cashBeginningAmount);
        return this;
    }


    public AccountingCashflow withCashBeginningAmount(Optional<Double> cashBeginningAmount) {
        Utils.checkNotNull(cashBeginningAmount, "cashBeginningAmount");
        this.cashBeginningAmount = cashBeginningAmount;
        return this;
    }

    public AccountingCashflow withCashEndingAmount(double cashEndingAmount) {
        Utils.checkNotNull(cashEndingAmount, "cashEndingAmount");
        this.cashEndingAmount = Optional.ofNullable(cashEndingAmount);
        return this;
    }


    public AccountingCashflow withCashEndingAmount(Optional<Double> cashEndingAmount) {
        Utils.checkNotNull(cashEndingAmount, "cashEndingAmount");
        this.cashEndingAmount = cashEndingAmount;
        return this;
    }

    public AccountingCashflow withCategoryIds(List<String> categoryIds) {
        Utils.checkNotNull(categoryIds, "categoryIds");
        this.categoryIds = Optional.ofNullable(categoryIds);
        return this;
    }


    public AccountingCashflow withCategoryIds(Optional<? extends List<String>> categoryIds) {
        Utils.checkNotNull(categoryIds, "categoryIds");
        this.categoryIds = categoryIds;
        return this;
    }

    public AccountingCashflow withContactId(String contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = Optional.ofNullable(contactId);
        return this;
    }


    public AccountingCashflow withContactId(Optional<String> contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = contactId;
        return this;
    }

    public AccountingCashflow withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public AccountingCashflow withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AccountingCashflow withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public AccountingCashflow withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AccountingCashflow withEndAt(OffsetDateTime endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = Optional.ofNullable(endAt);
        return this;
    }


    public AccountingCashflow withEndAt(Optional<OffsetDateTime> endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    public AccountingCashflow withFinancingSections(List<AccountingCashflowSection> financingSections) {
        Utils.checkNotNull(financingSections, "financingSections");
        this.financingSections = Optional.ofNullable(financingSections);
        return this;
    }


    public AccountingCashflow withFinancingSections(Optional<? extends List<AccountingCashflowSection>> financingSections) {
        Utils.checkNotNull(financingSections, "financingSections");
        this.financingSections = financingSections;
        return this;
    }

    public AccountingCashflow withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public AccountingCashflow withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AccountingCashflow withInvestingSections(List<AccountingCashflowSection> investingSections) {
        Utils.checkNotNull(investingSections, "investingSections");
        this.investingSections = Optional.ofNullable(investingSections);
        return this;
    }


    public AccountingCashflow withInvestingSections(Optional<? extends List<AccountingCashflowSection>> investingSections) {
        Utils.checkNotNull(investingSections, "investingSections");
        this.investingSections = investingSections;
        return this;
    }

    public AccountingCashflow withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public AccountingCashflow withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AccountingCashflow withNetChangeInCashAmount(double netChangeInCashAmount) {
        Utils.checkNotNull(netChangeInCashAmount, "netChangeInCashAmount");
        this.netChangeInCashAmount = Optional.ofNullable(netChangeInCashAmount);
        return this;
    }


    public AccountingCashflow withNetChangeInCashAmount(Optional<Double> netChangeInCashAmount) {
        Utils.checkNotNull(netChangeInCashAmount, "netChangeInCashAmount");
        this.netChangeInCashAmount = netChangeInCashAmount;
        return this;
    }

    public AccountingCashflow withOperatingSections(List<AccountingCashflowSection> operatingSections) {
        Utils.checkNotNull(operatingSections, "operatingSections");
        this.operatingSections = Optional.ofNullable(operatingSections);
        return this;
    }


    public AccountingCashflow withOperatingSections(Optional<? extends List<AccountingCashflowSection>> operatingSections) {
        Utils.checkNotNull(operatingSections, "operatingSections");
        this.operatingSections = operatingSections;
        return this;
    }

    public AccountingCashflow withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public AccountingCashflow withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AccountingCashflow withStartAt(OffsetDateTime startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = Optional.ofNullable(startAt);
        return this;
    }


    public AccountingCashflow withStartAt(Optional<OffsetDateTime> startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }

    public AccountingCashflow withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public AccountingCashflow withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingCashflow other = (AccountingCashflow) o;
        return 
            Utils.enhancedDeepEquals(this.cashBeginningAmount, other.cashBeginningAmount) &&
            Utils.enhancedDeepEquals(this.cashEndingAmount, other.cashEndingAmount) &&
            Utils.enhancedDeepEquals(this.categoryIds, other.categoryIds) &&
            Utils.enhancedDeepEquals(this.contactId, other.contactId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.endAt, other.endAt) &&
            Utils.enhancedDeepEquals(this.financingSections, other.financingSections) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.investingSections, other.investingSections) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.netChangeInCashAmount, other.netChangeInCashAmount) &&
            Utils.enhancedDeepEquals(this.operatingSections, other.operatingSections) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.startAt, other.startAt) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            cashBeginningAmount, cashEndingAmount, categoryIds,
            contactId, createdAt, currency,
            endAt, financingSections, id,
            investingSections, name, netChangeInCashAmount,
            operatingSections, raw, startAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingCashflow.class,
                "cashBeginningAmount", cashBeginningAmount,
                "cashEndingAmount", cashEndingAmount,
                "categoryIds", categoryIds,
                "contactId", contactId,
                "createdAt", createdAt,
                "currency", currency,
                "endAt", endAt,
                "financingSections", financingSections,
                "id", id,
                "investingSections", investingSections,
                "name", name,
                "netChangeInCashAmount", netChangeInCashAmount,
                "operatingSections", operatingSections,
                "raw", raw,
                "startAt", startAt,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Double> cashBeginningAmount = Optional.empty();

        private Optional<Double> cashEndingAmount = Optional.empty();

        private Optional<? extends List<String>> categoryIds = Optional.empty();

        private Optional<String> contactId = Optional.empty();

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> currency = Optional.empty();

        private Optional<OffsetDateTime> endAt = Optional.empty();

        private Optional<? extends List<AccountingCashflowSection>> financingSections = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<? extends List<AccountingCashflowSection>> investingSections = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Optional<Double> netChangeInCashAmount = Optional.empty();

        private Optional<? extends List<AccountingCashflowSection>> operatingSections = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<OffsetDateTime> startAt = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder cashBeginningAmount(double cashBeginningAmount) {
            Utils.checkNotNull(cashBeginningAmount, "cashBeginningAmount");
            this.cashBeginningAmount = Optional.ofNullable(cashBeginningAmount);
            return this;
        }

        public Builder cashBeginningAmount(Optional<Double> cashBeginningAmount) {
            Utils.checkNotNull(cashBeginningAmount, "cashBeginningAmount");
            this.cashBeginningAmount = cashBeginningAmount;
            return this;
        }


        public Builder cashEndingAmount(double cashEndingAmount) {
            Utils.checkNotNull(cashEndingAmount, "cashEndingAmount");
            this.cashEndingAmount = Optional.ofNullable(cashEndingAmount);
            return this;
        }

        public Builder cashEndingAmount(Optional<Double> cashEndingAmount) {
            Utils.checkNotNull(cashEndingAmount, "cashEndingAmount");
            this.cashEndingAmount = cashEndingAmount;
            return this;
        }


        public Builder categoryIds(List<String> categoryIds) {
            Utils.checkNotNull(categoryIds, "categoryIds");
            this.categoryIds = Optional.ofNullable(categoryIds);
            return this;
        }

        public Builder categoryIds(Optional<? extends List<String>> categoryIds) {
            Utils.checkNotNull(categoryIds, "categoryIds");
            this.categoryIds = categoryIds;
            return this;
        }


        public Builder contactId(String contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = Optional.ofNullable(contactId);
            return this;
        }

        public Builder contactId(Optional<String> contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = contactId;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder endAt(OffsetDateTime endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Optional<OffsetDateTime> endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }


        public Builder financingSections(List<AccountingCashflowSection> financingSections) {
            Utils.checkNotNull(financingSections, "financingSections");
            this.financingSections = Optional.ofNullable(financingSections);
            return this;
        }

        public Builder financingSections(Optional<? extends List<AccountingCashflowSection>> financingSections) {
            Utils.checkNotNull(financingSections, "financingSections");
            this.financingSections = financingSections;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder investingSections(List<AccountingCashflowSection> investingSections) {
            Utils.checkNotNull(investingSections, "investingSections");
            this.investingSections = Optional.ofNullable(investingSections);
            return this;
        }

        public Builder investingSections(Optional<? extends List<AccountingCashflowSection>> investingSections) {
            Utils.checkNotNull(investingSections, "investingSections");
            this.investingSections = investingSections;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        public Builder netChangeInCashAmount(double netChangeInCashAmount) {
            Utils.checkNotNull(netChangeInCashAmount, "netChangeInCashAmount");
            this.netChangeInCashAmount = Optional.ofNullable(netChangeInCashAmount);
            return this;
        }

        public Builder netChangeInCashAmount(Optional<Double> netChangeInCashAmount) {
            Utils.checkNotNull(netChangeInCashAmount, "netChangeInCashAmount");
            this.netChangeInCashAmount = netChangeInCashAmount;
            return this;
        }


        public Builder operatingSections(List<AccountingCashflowSection> operatingSections) {
            Utils.checkNotNull(operatingSections, "operatingSections");
            this.operatingSections = Optional.ofNullable(operatingSections);
            return this;
        }

        public Builder operatingSections(Optional<? extends List<AccountingCashflowSection>> operatingSections) {
            Utils.checkNotNull(operatingSections, "operatingSections");
            this.operatingSections = operatingSections;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder startAt(OffsetDateTime startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Optional<OffsetDateTime> startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public AccountingCashflow build() {

            return new AccountingCashflow(
                cashBeginningAmount, cashEndingAmount, categoryIds,
                contactId, createdAt, currency,
                endAt, financingSections, id,
                investingSections, name, netChangeInCashAmount,
                operatingSections, raw, startAt,
                updatedAt);
        }

    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class TaskChangeItem {

    @JsonProperty("field")
    private String field;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from")
    private Optional<String> from;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("to")
    private Optional<String> to;

    @JsonCreator
    public TaskChangeItem(
            @JsonProperty("field") String field,
            @JsonProperty("from") Optional<String> from,
            @JsonProperty("to") Optional<String> to) {
        Utils.checkNotNull(field, "field");
        Utils.checkNotNull(from, "from");
        Utils.checkNotNull(to, "to");
        this.field = field;
        this.from = from;
        this.to = to;
    }
    
    public TaskChangeItem(
            String field) {
        this(field, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String field() {
        return field;
    }

    @JsonIgnore
    public Optional<String> from() {
        return from;
    }

    @JsonIgnore
    public Optional<String> to() {
        return to;
    }

    public static Builder builder() {
        return new Builder();
    }


    public TaskChangeItem withField(String field) {
        Utils.checkNotNull(field, "field");
        this.field = field;
        return this;
    }

    public TaskChangeItem withFrom(String from) {
        Utils.checkNotNull(from, "from");
        this.from = Optional.ofNullable(from);
        return this;
    }


    public TaskChangeItem withFrom(Optional<String> from) {
        Utils.checkNotNull(from, "from");
        this.from = from;
        return this;
    }

    public TaskChangeItem withTo(String to) {
        Utils.checkNotNull(to, "to");
        this.to = Optional.ofNullable(to);
        return this;
    }


    public TaskChangeItem withTo(Optional<String> to) {
        Utils.checkNotNull(to, "to");
        this.to = to;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaskChangeItem other = (TaskChangeItem) o;
        return 
            Utils.enhancedDeepEquals(this.field, other.field) &&
            Utils.enhancedDeepEquals(this.from, other.from) &&
            Utils.enhancedDeepEquals(this.to, other.to);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            field, from, to);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaskChangeItem.class,
                "field", field,
                "from", from,
                "to", to);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private String field;

        private Optional<String> from = Optional.empty();

        private Optional<String> to = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder field(String field) {
            Utils.checkNotNull(field, "field");
            this.field = field;
            return this;
        }


        public Builder from(String from) {
            Utils.checkNotNull(from, "from");
            this.from = Optional.ofNullable(from);
            return this;
        }

        public Builder from(Optional<String> from) {
            Utils.checkNotNull(from, "from");
            this.from = from;
            return this;
        }


        public Builder to(String to) {
            Utils.checkNotNull(to, "to");
            this.to = Optional.ofNullable(to);
            return this;
        }

        public Builder to(Optional<String> to) {
            Utils.checkNotNull(to, "to");
            this.to = to;
            return this;
        }

        public TaskChangeItem build() {

            return new TaskChangeItem(
                field, from, to);
        }

    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class VerificationParameterInput {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inputs")
    private Optional<? extends List<String>> inputs;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonCreator
    public VerificationParameterInput(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("inputs") Optional<? extends List<String>> inputs,
            @JsonProperty("name") Optional<String> name) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(inputs, "inputs");
        Utils.checkNotNull(name, "name");
        this.id = id;
        this.inputs = inputs;
        this.name = name;
    }
    
    public VerificationParameterInput() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> inputs() {
        return (Optional<List<String>>) inputs;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    public static Builder builder() {
        return new Builder();
    }


    public VerificationParameterInput withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public VerificationParameterInput withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public VerificationParameterInput withInputs(List<String> inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = Optional.ofNullable(inputs);
        return this;
    }


    public VerificationParameterInput withInputs(Optional<? extends List<String>> inputs) {
        Utils.checkNotNull(inputs, "inputs");
        this.inputs = inputs;
        return this;
    }

    public VerificationParameterInput withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }


    public VerificationParameterInput withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerificationParameterInput other = (VerificationParameterInput) o;
        return 
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.inputs, other.inputs) &&
            Utils.enhancedDeepEquals(this.name, other.name);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            id, inputs, name);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerificationParameterInput.class,
                "id", id,
                "inputs", inputs,
                "name", name);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> id = Optional.empty();

        private Optional<? extends List<String>> inputs = Optional.empty();

        private Optional<String> name = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder inputs(List<String> inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = Optional.ofNullable(inputs);
            return this;
        }

        public Builder inputs(Optional<? extends List<String>> inputs) {
            Utils.checkNotNull(inputs, "inputs");
            this.inputs = inputs;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public VerificationParameterInput build() {

            return new VerificationParameterInput(
                id, inputs, name);
        }

    }
}

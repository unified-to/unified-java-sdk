/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class VerificationParameter {
    /**
     * valid file mime types
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_types")
    private Optional<? extends List<String>> fileTypes;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_required")
    private Optional<Boolean> isRequired;


    @JsonProperty("name")
    private String name;

    /**
     * options for MULTIPLE_CHOICE and MULTIPLE_SELECT
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends List<String>> options;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("public_question")
    private Optional<String> publicQuestion;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends VerificationParameterType> type;

    /**
     * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_regions")
    private Optional<? extends List<String>> validRegions;

    @JsonCreator
    public VerificationParameter(
            @JsonProperty("file_types") Optional<? extends List<String>> fileTypes,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_required") Optional<Boolean> isRequired,
            @JsonProperty("name") String name,
            @JsonProperty("options") Optional<? extends List<String>> options,
            @JsonProperty("public_question") Optional<String> publicQuestion,
            @JsonProperty("type") Optional<? extends VerificationParameterType> type,
            @JsonProperty("valid_regions") Optional<? extends List<String>> validRegions) {
        Utils.checkNotNull(fileTypes, "fileTypes");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isRequired, "isRequired");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(options, "options");
        Utils.checkNotNull(publicQuestion, "publicQuestion");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(validRegions, "validRegions");
        this.fileTypes = fileTypes;
        this.id = id;
        this.isRequired = isRequired;
        this.name = name;
        this.options = options;
        this.publicQuestion = publicQuestion;
        this.type = type;
        this.validRegions = validRegions;
    }
    
    public VerificationParameter(
            String name) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            name, Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * valid file mime types
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> fileTypes() {
        return (Optional<List<String>>) fileTypes;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isRequired() {
        return isRequired;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * options for MULTIPLE_CHOICE and MULTIPLE_SELECT
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> options() {
        return (Optional<List<String>>) options;
    }

    @JsonIgnore
    public Optional<String> publicQuestion() {
        return publicQuestion;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VerificationParameterType> type() {
        return (Optional<VerificationParameterType>) type;
    }

    /**
     * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> validRegions() {
        return (Optional<List<String>>) validRegions;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * valid file mime types
     */
    public VerificationParameter withFileTypes(List<String> fileTypes) {
        Utils.checkNotNull(fileTypes, "fileTypes");
        this.fileTypes = Optional.ofNullable(fileTypes);
        return this;
    }


    /**
     * valid file mime types
     */
    public VerificationParameter withFileTypes(Optional<? extends List<String>> fileTypes) {
        Utils.checkNotNull(fileTypes, "fileTypes");
        this.fileTypes = fileTypes;
        return this;
    }

    public VerificationParameter withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public VerificationParameter withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public VerificationParameter withIsRequired(boolean isRequired) {
        Utils.checkNotNull(isRequired, "isRequired");
        this.isRequired = Optional.ofNullable(isRequired);
        return this;
    }


    public VerificationParameter withIsRequired(Optional<Boolean> isRequired) {
        Utils.checkNotNull(isRequired, "isRequired");
        this.isRequired = isRequired;
        return this;
    }

    public VerificationParameter withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * options for MULTIPLE_CHOICE and MULTIPLE_SELECT
     */
    public VerificationParameter withOptions(List<String> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }


    /**
     * options for MULTIPLE_CHOICE and MULTIPLE_SELECT
     */
    public VerificationParameter withOptions(Optional<? extends List<String>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }

    public VerificationParameter withPublicQuestion(String publicQuestion) {
        Utils.checkNotNull(publicQuestion, "publicQuestion");
        this.publicQuestion = Optional.ofNullable(publicQuestion);
        return this;
    }


    public VerificationParameter withPublicQuestion(Optional<String> publicQuestion) {
        Utils.checkNotNull(publicQuestion, "publicQuestion");
        this.publicQuestion = publicQuestion;
        return this;
    }

    public VerificationParameter withType(VerificationParameterType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    public VerificationParameter withType(Optional<? extends VerificationParameterType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
     */
    public VerificationParameter withValidRegions(List<String> validRegions) {
        Utils.checkNotNull(validRegions, "validRegions");
        this.validRegions = Optional.ofNullable(validRegions);
        return this;
    }


    /**
     * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
     */
    public VerificationParameter withValidRegions(Optional<? extends List<String>> validRegions) {
        Utils.checkNotNull(validRegions, "validRegions");
        this.validRegions = validRegions;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerificationParameter other = (VerificationParameter) o;
        return 
            Utils.enhancedDeepEquals(this.fileTypes, other.fileTypes) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.isRequired, other.isRequired) &&
            Utils.enhancedDeepEquals(this.name, other.name) &&
            Utils.enhancedDeepEquals(this.options, other.options) &&
            Utils.enhancedDeepEquals(this.publicQuestion, other.publicQuestion) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.validRegions, other.validRegions);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            fileTypes, id, isRequired,
            name, options, publicQuestion,
            type, validRegions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerificationParameter.class,
                "fileTypes", fileTypes,
                "id", id,
                "isRequired", isRequired,
                "name", name,
                "options", options,
                "publicQuestion", publicQuestion,
                "type", type,
                "validRegions", validRegions);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<String>> fileTypes = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<Boolean> isRequired = Optional.empty();

        private String name;

        private Optional<? extends List<String>> options = Optional.empty();

        private Optional<String> publicQuestion = Optional.empty();

        private Optional<? extends VerificationParameterType> type = Optional.empty();

        private Optional<? extends List<String>> validRegions = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * valid file mime types
         */
        public Builder fileTypes(List<String> fileTypes) {
            Utils.checkNotNull(fileTypes, "fileTypes");
            this.fileTypes = Optional.ofNullable(fileTypes);
            return this;
        }

        /**
         * valid file mime types
         */
        public Builder fileTypes(Optional<? extends List<String>> fileTypes) {
            Utils.checkNotNull(fileTypes, "fileTypes");
            this.fileTypes = fileTypes;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder isRequired(boolean isRequired) {
            Utils.checkNotNull(isRequired, "isRequired");
            this.isRequired = Optional.ofNullable(isRequired);
            return this;
        }

        public Builder isRequired(Optional<Boolean> isRequired) {
            Utils.checkNotNull(isRequired, "isRequired");
            this.isRequired = isRequired;
            return this;
        }


        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }


        /**
         * options for MULTIPLE_CHOICE and MULTIPLE_SELECT
         */
        public Builder options(List<String> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * options for MULTIPLE_CHOICE and MULTIPLE_SELECT
         */
        public Builder options(Optional<? extends List<String>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }


        public Builder publicQuestion(String publicQuestion) {
            Utils.checkNotNull(publicQuestion, "publicQuestion");
            this.publicQuestion = Optional.ofNullable(publicQuestion);
            return this;
        }

        public Builder publicQuestion(Optional<String> publicQuestion) {
            Utils.checkNotNull(publicQuestion, "publicQuestion");
            this.publicQuestion = publicQuestion;
            return this;
        }


        public Builder type(VerificationParameterType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends VerificationParameterType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
         */
        public Builder validRegions(List<String> validRegions) {
            Utils.checkNotNull(validRegions, "validRegions");
            this.validRegions = Optional.ofNullable(validRegions);
            return this;
        }

        /**
         * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
         */
        public Builder validRegions(Optional<? extends List<String>> validRegions) {
            Utils.checkNotNull(validRegions, "validRegions");
            this.validRegions = validRegions;
            return this;
        }

        public VerificationParameter build() {

            return new VerificationParameter(
                fileTypes, id, isRequired,
                name, options, publicQuestion,
                type, validRegions);
        }

    }
}

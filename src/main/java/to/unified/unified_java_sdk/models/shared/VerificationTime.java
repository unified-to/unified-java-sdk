/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class VerificationTime {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("milliseconds")
    private Optional<Double> milliseconds;

    /**
     * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_regions")
    private Optional<? extends List<String>> validRegions;

    @JsonCreator
    public VerificationTime(
            @JsonProperty("milliseconds") Optional<Double> milliseconds,
            @JsonProperty("valid_regions") Optional<? extends List<String>> validRegions) {
        Utils.checkNotNull(milliseconds, "milliseconds");
        Utils.checkNotNull(validRegions, "validRegions");
        this.milliseconds = milliseconds;
        this.validRegions = validRegions;
    }
    
    public VerificationTime() {
        this(Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> milliseconds() {
        return milliseconds;
    }

    /**
     * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> validRegions() {
        return (Optional<List<String>>) validRegions;
    }

    public static Builder builder() {
        return new Builder();
    }


    public VerificationTime withMilliseconds(double milliseconds) {
        Utils.checkNotNull(milliseconds, "milliseconds");
        this.milliseconds = Optional.ofNullable(milliseconds);
        return this;
    }


    public VerificationTime withMilliseconds(Optional<Double> milliseconds) {
        Utils.checkNotNull(milliseconds, "milliseconds");
        this.milliseconds = milliseconds;
        return this;
    }

    /**
     * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
     */
    public VerificationTime withValidRegions(List<String> validRegions) {
        Utils.checkNotNull(validRegions, "validRegions");
        this.validRegions = Optional.ofNullable(validRegions);
        return this;
    }


    /**
     * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
     */
    public VerificationTime withValidRegions(Optional<? extends List<String>> validRegions) {
        Utils.checkNotNull(validRegions, "validRegions");
        this.validRegions = validRegions;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        VerificationTime other = (VerificationTime) o;
        return 
            Utils.enhancedDeepEquals(this.milliseconds, other.milliseconds) &&
            Utils.enhancedDeepEquals(this.validRegions, other.validRegions);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            milliseconds, validRegions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(VerificationTime.class,
                "milliseconds", milliseconds,
                "validRegions", validRegions);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Double> milliseconds = Optional.empty();

        private Optional<? extends List<String>> validRegions = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder milliseconds(double milliseconds) {
            Utils.checkNotNull(milliseconds, "milliseconds");
            this.milliseconds = Optional.ofNullable(milliseconds);
            return this;
        }

        public Builder milliseconds(Optional<Double> milliseconds) {
            Utils.checkNotNull(milliseconds, "milliseconds");
            this.milliseconds = milliseconds;
            return this;
        }


        /**
         * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
         */
        public Builder validRegions(List<String> validRegions) {
            Utils.checkNotNull(validRegions, "validRegions");
            this.validRegions = Optional.ofNullable(validRegions);
            return this;
        }

        /**
         * {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
         */
        public Builder validRegions(Optional<? extends List<String>> validRegions) {
            Utils.checkNotNull(validRegions, "validRegions");
            this.validRegions = validRegions;
            return this;
        }

        public VerificationTime build() {

            return new VerificationTime(
                milliseconds, validRegions);
        }

    }
}

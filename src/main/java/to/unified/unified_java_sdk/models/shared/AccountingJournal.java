/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class AccountingJournal {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * new field name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineitems")
    private Optional<? extends List<AccountingJournalLineitem>> lineitems;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("posted_at")
    private Optional<OffsetDateTime> postedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reference")
    private Optional<String> reference;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private Optional<Double> taxAmount;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxrate_id")
    private Optional<String> taxrateId;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public AccountingJournal(
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("lineitems") Optional<? extends List<AccountingJournalLineitem>> lineitems,
            @JsonProperty("posted_at") Optional<OffsetDateTime> postedAt,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("reference") Optional<String> reference,
            @JsonProperty("tax_amount") Optional<Double> taxAmount,
            @JsonProperty("taxrate_id") Optional<String> taxrateId,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(lineitems, "lineitems");
        Utils.checkNotNull(postedAt, "postedAt");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(reference, "reference");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(taxrateId, "taxrateId");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.createdAt = createdAt;
        this.currency = currency;
        this.description = description;
        this.id = id;
        this.lineitems = lineitems;
        this.postedAt = postedAt;
        this.raw = raw;
        this.reference = reference;
        this.taxAmount = taxAmount;
        this.taxrateId = taxrateId;
        this.updatedAt = updatedAt;
    }
    
    public AccountingJournal() {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * new field name
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingJournalLineitem>> lineitems() {
        return (Optional<List<AccountingJournalLineitem>>) lineitems;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> postedAt() {
        return postedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<String> reference() {
        return reference;
    }

    @JsonIgnore
    public Optional<Double> taxAmount() {
        return taxAmount;
    }

    @JsonIgnore
    public Optional<String> taxrateId() {
        return taxrateId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public static Builder builder() {
        return new Builder();
    }


    public AccountingJournal withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public AccountingJournal withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AccountingJournal withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }


    public AccountingJournal withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AccountingJournal withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }


    public AccountingJournal withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public AccountingJournal withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public AccountingJournal withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * new field name
     */
    public AccountingJournal withLineitems(List<AccountingJournalLineitem> lineitems) {
        Utils.checkNotNull(lineitems, "lineitems");
        this.lineitems = Optional.ofNullable(lineitems);
        return this;
    }


    /**
     * new field name
     */
    public AccountingJournal withLineitems(Optional<? extends List<AccountingJournalLineitem>> lineitems) {
        Utils.checkNotNull(lineitems, "lineitems");
        this.lineitems = lineitems;
        return this;
    }

    public AccountingJournal withPostedAt(OffsetDateTime postedAt) {
        Utils.checkNotNull(postedAt, "postedAt");
        this.postedAt = Optional.ofNullable(postedAt);
        return this;
    }


    public AccountingJournal withPostedAt(Optional<OffsetDateTime> postedAt) {
        Utils.checkNotNull(postedAt, "postedAt");
        this.postedAt = postedAt;
        return this;
    }

    public AccountingJournal withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    public AccountingJournal withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AccountingJournal withReference(String reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = Optional.ofNullable(reference);
        return this;
    }


    public AccountingJournal withReference(Optional<String> reference) {
        Utils.checkNotNull(reference, "reference");
        this.reference = reference;
        return this;
    }

    public AccountingJournal withTaxAmount(double taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = Optional.ofNullable(taxAmount);
        return this;
    }


    public AccountingJournal withTaxAmount(Optional<Double> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    public AccountingJournal withTaxrateId(String taxrateId) {
        Utils.checkNotNull(taxrateId, "taxrateId");
        this.taxrateId = Optional.ofNullable(taxrateId);
        return this;
    }


    public AccountingJournal withTaxrateId(Optional<String> taxrateId) {
        Utils.checkNotNull(taxrateId, "taxrateId");
        this.taxrateId = taxrateId;
        return this;
    }

    public AccountingJournal withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public AccountingJournal withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingJournal other = (AccountingJournal) o;
        return 
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.description, other.description) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.lineitems, other.lineitems) &&
            Utils.enhancedDeepEquals(this.postedAt, other.postedAt) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.reference, other.reference) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.taxrateId, other.taxrateId) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            createdAt, currency, description,
            id, lineitems, postedAt,
            raw, reference, taxAmount,
            taxrateId, updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingJournal.class,
                "createdAt", createdAt,
                "currency", currency,
                "description", description,
                "id", id,
                "lineitems", lineitems,
                "postedAt", postedAt,
                "raw", raw,
                "reference", reference,
                "taxAmount", taxAmount,
                "taxrateId", taxrateId,
                "updatedAt", updatedAt);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> currency = Optional.empty();

        private Optional<String> description = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<? extends List<AccountingJournalLineitem>> lineitems = Optional.empty();

        private Optional<OffsetDateTime> postedAt = Optional.empty();

        private Optional<? extends Map<String, Object>> raw = Optional.empty();

        private Optional<String> reference = Optional.empty();

        private Optional<Double> taxAmount = Optional.empty();

        private Optional<String> taxrateId = Optional.empty();

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }


        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        /**
         * new field name
         */
        public Builder lineitems(List<AccountingJournalLineitem> lineitems) {
            Utils.checkNotNull(lineitems, "lineitems");
            this.lineitems = Optional.ofNullable(lineitems);
            return this;
        }

        /**
         * new field name
         */
        public Builder lineitems(Optional<? extends List<AccountingJournalLineitem>> lineitems) {
            Utils.checkNotNull(lineitems, "lineitems");
            this.lineitems = lineitems;
            return this;
        }


        public Builder postedAt(OffsetDateTime postedAt) {
            Utils.checkNotNull(postedAt, "postedAt");
            this.postedAt = Optional.ofNullable(postedAt);
            return this;
        }

        public Builder postedAt(Optional<OffsetDateTime> postedAt) {
            Utils.checkNotNull(postedAt, "postedAt");
            this.postedAt = postedAt;
            return this;
        }


        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder reference(String reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = Optional.ofNullable(reference);
            return this;
        }

        public Builder reference(Optional<String> reference) {
            Utils.checkNotNull(reference, "reference");
            this.reference = reference;
            return this;
        }


        public Builder taxAmount(double taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }

        public Builder taxAmount(Optional<Double> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }


        public Builder taxrateId(String taxrateId) {
            Utils.checkNotNull(taxrateId, "taxrateId");
            this.taxrateId = Optional.ofNullable(taxrateId);
            return this;
        }

        public Builder taxrateId(Optional<String> taxrateId) {
            Utils.checkNotNull(taxrateId, "taxrateId");
            this.taxrateId = taxrateId;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public AccountingJournal build() {

            return new AccountingJournal(
                createdAt, currency, description,
                id, lineitems, postedAt,
                raw, reference, taxAmount,
                taxrateId, updatedAt);
        }

    }
}

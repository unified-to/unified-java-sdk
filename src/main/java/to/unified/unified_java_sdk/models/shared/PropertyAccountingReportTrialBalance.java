/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class PropertyAccountingReportTrialBalance {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sub_items")
    private Optional<? extends List<AccountingTrialBalanceSubItem>> subItems;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_credit_amount")
    private Optional<Double> totalCreditAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_debit_amount")
    private Optional<Double> totalDebitAmount;

    @JsonCreator
    public PropertyAccountingReportTrialBalance(
            @JsonProperty("sub_items") Optional<? extends List<AccountingTrialBalanceSubItem>> subItems,
            @JsonProperty("total_credit_amount") Optional<Double> totalCreditAmount,
            @JsonProperty("total_debit_amount") Optional<Double> totalDebitAmount) {
        Utils.checkNotNull(subItems, "subItems");
        Utils.checkNotNull(totalCreditAmount, "totalCreditAmount");
        Utils.checkNotNull(totalDebitAmount, "totalDebitAmount");
        this.subItems = subItems;
        this.totalCreditAmount = totalCreditAmount;
        this.totalDebitAmount = totalDebitAmount;
    }
    
    public PropertyAccountingReportTrialBalance() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingTrialBalanceSubItem>> subItems() {
        return (Optional<List<AccountingTrialBalanceSubItem>>) subItems;
    }

    @JsonIgnore
    public Optional<Double> totalCreditAmount() {
        return totalCreditAmount;
    }

    @JsonIgnore
    public Optional<Double> totalDebitAmount() {
        return totalDebitAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PropertyAccountingReportTrialBalance withSubItems(List<AccountingTrialBalanceSubItem> subItems) {
        Utils.checkNotNull(subItems, "subItems");
        this.subItems = Optional.ofNullable(subItems);
        return this;
    }

    public PropertyAccountingReportTrialBalance withSubItems(Optional<? extends List<AccountingTrialBalanceSubItem>> subItems) {
        Utils.checkNotNull(subItems, "subItems");
        this.subItems = subItems;
        return this;
    }

    public PropertyAccountingReportTrialBalance withTotalCreditAmount(double totalCreditAmount) {
        Utils.checkNotNull(totalCreditAmount, "totalCreditAmount");
        this.totalCreditAmount = Optional.ofNullable(totalCreditAmount);
        return this;
    }

    public PropertyAccountingReportTrialBalance withTotalCreditAmount(Optional<Double> totalCreditAmount) {
        Utils.checkNotNull(totalCreditAmount, "totalCreditAmount");
        this.totalCreditAmount = totalCreditAmount;
        return this;
    }

    public PropertyAccountingReportTrialBalance withTotalDebitAmount(double totalDebitAmount) {
        Utils.checkNotNull(totalDebitAmount, "totalDebitAmount");
        this.totalDebitAmount = Optional.ofNullable(totalDebitAmount);
        return this;
    }

    public PropertyAccountingReportTrialBalance withTotalDebitAmount(Optional<Double> totalDebitAmount) {
        Utils.checkNotNull(totalDebitAmount, "totalDebitAmount");
        this.totalDebitAmount = totalDebitAmount;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyAccountingReportTrialBalance other = (PropertyAccountingReportTrialBalance) o;
        return 
            Utils.enhancedDeepEquals(this.subItems, other.subItems) &&
            Utils.enhancedDeepEquals(this.totalCreditAmount, other.totalCreditAmount) &&
            Utils.enhancedDeepEquals(this.totalDebitAmount, other.totalDebitAmount);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            subItems,
            totalCreditAmount,
            totalDebitAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyAccountingReportTrialBalance.class,
                "subItems", subItems,
                "totalCreditAmount", totalCreditAmount,
                "totalDebitAmount", totalDebitAmount);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AccountingTrialBalanceSubItem>> subItems = Optional.empty();
 
        private Optional<Double> totalCreditAmount = Optional.empty();
 
        private Optional<Double> totalDebitAmount = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder subItems(List<AccountingTrialBalanceSubItem> subItems) {
            Utils.checkNotNull(subItems, "subItems");
            this.subItems = Optional.ofNullable(subItems);
            return this;
        }

        public Builder subItems(Optional<? extends List<AccountingTrialBalanceSubItem>> subItems) {
            Utils.checkNotNull(subItems, "subItems");
            this.subItems = subItems;
            return this;
        }

        public Builder totalCreditAmount(double totalCreditAmount) {
            Utils.checkNotNull(totalCreditAmount, "totalCreditAmount");
            this.totalCreditAmount = Optional.ofNullable(totalCreditAmount);
            return this;
        }

        public Builder totalCreditAmount(Optional<Double> totalCreditAmount) {
            Utils.checkNotNull(totalCreditAmount, "totalCreditAmount");
            this.totalCreditAmount = totalCreditAmount;
            return this;
        }

        public Builder totalDebitAmount(double totalDebitAmount) {
            Utils.checkNotNull(totalDebitAmount, "totalDebitAmount");
            this.totalDebitAmount = Optional.ofNullable(totalDebitAmount);
            return this;
        }

        public Builder totalDebitAmount(Optional<Double> totalDebitAmount) {
            Utils.checkNotNull(totalDebitAmount, "totalDebitAmount");
            this.totalDebitAmount = totalDebitAmount;
            return this;
        }
        
        public PropertyAccountingReportTrialBalance build() {
            return new PropertyAccountingReportTrialBalance(
                subItems,
                totalCreditAmount,
                totalDebitAmount);
        }
    }
}

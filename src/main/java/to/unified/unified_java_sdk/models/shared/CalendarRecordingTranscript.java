/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;


public class CalendarRecordingTranscript {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attendee")
    private Optional<? extends PropertyCalendarRecordingTranscriptAttendee> attendee;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    private Optional<OffsetDateTime> endAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("language")
    private Optional<String> language;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_at")
    private Optional<OffsetDateTime> startAt;


    @JsonProperty("text")
    private String text;

    @JsonCreator
    public CalendarRecordingTranscript(
            @JsonProperty("attendee") Optional<? extends PropertyCalendarRecordingTranscriptAttendee> attendee,
            @JsonProperty("end_at") Optional<OffsetDateTime> endAt,
            @JsonProperty("language") Optional<String> language,
            @JsonProperty("start_at") Optional<OffsetDateTime> startAt,
            @JsonProperty("text") String text) {
        Utils.checkNotNull(attendee, "attendee");
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(language, "language");
        Utils.checkNotNull(startAt, "startAt");
        Utils.checkNotNull(text, "text");
        this.attendee = attendee;
        this.endAt = endAt;
        this.language = language;
        this.startAt = startAt;
        this.text = text;
    }
    
    public CalendarRecordingTranscript(
            String text) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), text);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCalendarRecordingTranscriptAttendee> attendee() {
        return (Optional<PropertyCalendarRecordingTranscriptAttendee>) attendee;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endAt() {
        return endAt;
    }

    @JsonIgnore
    public Optional<String> language() {
        return language;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startAt() {
        return startAt;
    }

    @JsonIgnore
    public String text() {
        return text;
    }

    public static Builder builder() {
        return new Builder();
    }


    public CalendarRecordingTranscript withAttendee(PropertyCalendarRecordingTranscriptAttendee attendee) {
        Utils.checkNotNull(attendee, "attendee");
        this.attendee = Optional.ofNullable(attendee);
        return this;
    }


    public CalendarRecordingTranscript withAttendee(Optional<? extends PropertyCalendarRecordingTranscriptAttendee> attendee) {
        Utils.checkNotNull(attendee, "attendee");
        this.attendee = attendee;
        return this;
    }

    public CalendarRecordingTranscript withEndAt(OffsetDateTime endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = Optional.ofNullable(endAt);
        return this;
    }


    public CalendarRecordingTranscript withEndAt(Optional<OffsetDateTime> endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    public CalendarRecordingTranscript withLanguage(String language) {
        Utils.checkNotNull(language, "language");
        this.language = Optional.ofNullable(language);
        return this;
    }


    public CalendarRecordingTranscript withLanguage(Optional<String> language) {
        Utils.checkNotNull(language, "language");
        this.language = language;
        return this;
    }

    public CalendarRecordingTranscript withStartAt(OffsetDateTime startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = Optional.ofNullable(startAt);
        return this;
    }


    public CalendarRecordingTranscript withStartAt(Optional<OffsetDateTime> startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }

    public CalendarRecordingTranscript withText(String text) {
        Utils.checkNotNull(text, "text");
        this.text = text;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalendarRecordingTranscript other = (CalendarRecordingTranscript) o;
        return 
            Utils.enhancedDeepEquals(this.attendee, other.attendee) &&
            Utils.enhancedDeepEquals(this.endAt, other.endAt) &&
            Utils.enhancedDeepEquals(this.language, other.language) &&
            Utils.enhancedDeepEquals(this.startAt, other.startAt) &&
            Utils.enhancedDeepEquals(this.text, other.text);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            attendee, endAt, language,
            startAt, text);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CalendarRecordingTranscript.class,
                "attendee", attendee,
                "endAt", endAt,
                "language", language,
                "startAt", startAt,
                "text", text);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends PropertyCalendarRecordingTranscriptAttendee> attendee = Optional.empty();

        private Optional<OffsetDateTime> endAt = Optional.empty();

        private Optional<String> language = Optional.empty();

        private Optional<OffsetDateTime> startAt = Optional.empty();

        private String text;

        private Builder() {
          // force use of static builder() method
        }


        public Builder attendee(PropertyCalendarRecordingTranscriptAttendee attendee) {
            Utils.checkNotNull(attendee, "attendee");
            this.attendee = Optional.ofNullable(attendee);
            return this;
        }

        public Builder attendee(Optional<? extends PropertyCalendarRecordingTranscriptAttendee> attendee) {
            Utils.checkNotNull(attendee, "attendee");
            this.attendee = attendee;
            return this;
        }


        public Builder endAt(OffsetDateTime endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Optional<OffsetDateTime> endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }


        public Builder language(String language) {
            Utils.checkNotNull(language, "language");
            this.language = Optional.ofNullable(language);
            return this;
        }

        public Builder language(Optional<String> language) {
            Utils.checkNotNull(language, "language");
            this.language = language;
            return this;
        }


        public Builder startAt(OffsetDateTime startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Optional<OffsetDateTime> startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }


        public Builder text(String text) {
            Utils.checkNotNull(text, "text");
            this.text = text;
            return this;
        }

        public CalendarRecordingTranscript build() {

            return new CalendarRecordingTranscript(
                attendee, endAt, language,
                startAt, text);
        }

    }
}

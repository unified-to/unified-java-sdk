/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class CalendarConference {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("conference_identifier")
    private Optional<String> conferenceIdentifier;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country_code")
    private Optional<String> countryCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("host_access_code")
    private Optional<String> hostAccessCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private Optional<String> label;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private Optional<String> notes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("participant_access_code")
    private Optional<String> participantAccessCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("region_code")
    private Optional<String> regionCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telephone")
    private Optional<String> telephone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public CalendarConference(
            @JsonProperty("conference_identifier") Optional<String> conferenceIdentifier,
            @JsonProperty("country_code") Optional<String> countryCode,
            @JsonProperty("host_access_code") Optional<String> hostAccessCode,
            @JsonProperty("label") Optional<String> label,
            @JsonProperty("notes") Optional<String> notes,
            @JsonProperty("participant_access_code") Optional<String> participantAccessCode,
            @JsonProperty("region_code") Optional<String> regionCode,
            @JsonProperty("telephone") Optional<String> telephone,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(conferenceIdentifier, "conferenceIdentifier");
        Utils.checkNotNull(countryCode, "countryCode");
        Utils.checkNotNull(hostAccessCode, "hostAccessCode");
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(participantAccessCode, "participantAccessCode");
        Utils.checkNotNull(regionCode, "regionCode");
        Utils.checkNotNull(telephone, "telephone");
        Utils.checkNotNull(url, "url");
        this.conferenceIdentifier = conferenceIdentifier;
        this.countryCode = countryCode;
        this.hostAccessCode = hostAccessCode;
        this.label = label;
        this.notes = notes;
        this.participantAccessCode = participantAccessCode;
        this.regionCode = regionCode;
        this.telephone = telephone;
        this.url = url;
    }
    
    public CalendarConference() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> conferenceIdentifier() {
        return conferenceIdentifier;
    }

    @JsonIgnore
    public Optional<String> countryCode() {
        return countryCode;
    }

    @JsonIgnore
    public Optional<String> hostAccessCode() {
        return hostAccessCode;
    }

    @JsonIgnore
    public Optional<String> label() {
        return label;
    }

    @JsonIgnore
    public Optional<String> notes() {
        return notes;
    }

    @JsonIgnore
    public Optional<String> participantAccessCode() {
        return participantAccessCode;
    }

    @JsonIgnore
    public Optional<String> regionCode() {
        return regionCode;
    }

    @JsonIgnore
    public Optional<String> telephone() {
        return telephone;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CalendarConference withConferenceIdentifier(String conferenceIdentifier) {
        Utils.checkNotNull(conferenceIdentifier, "conferenceIdentifier");
        this.conferenceIdentifier = Optional.ofNullable(conferenceIdentifier);
        return this;
    }

    public CalendarConference withConferenceIdentifier(Optional<String> conferenceIdentifier) {
        Utils.checkNotNull(conferenceIdentifier, "conferenceIdentifier");
        this.conferenceIdentifier = conferenceIdentifier;
        return this;
    }

    public CalendarConference withCountryCode(String countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = Optional.ofNullable(countryCode);
        return this;
    }

    public CalendarConference withCountryCode(Optional<String> countryCode) {
        Utils.checkNotNull(countryCode, "countryCode");
        this.countryCode = countryCode;
        return this;
    }

    public CalendarConference withHostAccessCode(String hostAccessCode) {
        Utils.checkNotNull(hostAccessCode, "hostAccessCode");
        this.hostAccessCode = Optional.ofNullable(hostAccessCode);
        return this;
    }

    public CalendarConference withHostAccessCode(Optional<String> hostAccessCode) {
        Utils.checkNotNull(hostAccessCode, "hostAccessCode");
        this.hostAccessCode = hostAccessCode;
        return this;
    }

    public CalendarConference withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = Optional.ofNullable(label);
        return this;
    }

    public CalendarConference withLabel(Optional<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    public CalendarConference withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = Optional.ofNullable(notes);
        return this;
    }

    public CalendarConference withNotes(Optional<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    public CalendarConference withParticipantAccessCode(String participantAccessCode) {
        Utils.checkNotNull(participantAccessCode, "participantAccessCode");
        this.participantAccessCode = Optional.ofNullable(participantAccessCode);
        return this;
    }

    public CalendarConference withParticipantAccessCode(Optional<String> participantAccessCode) {
        Utils.checkNotNull(participantAccessCode, "participantAccessCode");
        this.participantAccessCode = participantAccessCode;
        return this;
    }

    public CalendarConference withRegionCode(String regionCode) {
        Utils.checkNotNull(regionCode, "regionCode");
        this.regionCode = Optional.ofNullable(regionCode);
        return this;
    }

    public CalendarConference withRegionCode(Optional<String> regionCode) {
        Utils.checkNotNull(regionCode, "regionCode");
        this.regionCode = regionCode;
        return this;
    }

    public CalendarConference withTelephone(String telephone) {
        Utils.checkNotNull(telephone, "telephone");
        this.telephone = Optional.ofNullable(telephone);
        return this;
    }

    public CalendarConference withTelephone(Optional<String> telephone) {
        Utils.checkNotNull(telephone, "telephone");
        this.telephone = telephone;
        return this;
    }

    public CalendarConference withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public CalendarConference withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CalendarConference other = (CalendarConference) o;
        return 
            Utils.enhancedDeepEquals(this.conferenceIdentifier, other.conferenceIdentifier) &&
            Utils.enhancedDeepEquals(this.countryCode, other.countryCode) &&
            Utils.enhancedDeepEquals(this.hostAccessCode, other.hostAccessCode) &&
            Utils.enhancedDeepEquals(this.label, other.label) &&
            Utils.enhancedDeepEquals(this.notes, other.notes) &&
            Utils.enhancedDeepEquals(this.participantAccessCode, other.participantAccessCode) &&
            Utils.enhancedDeepEquals(this.regionCode, other.regionCode) &&
            Utils.enhancedDeepEquals(this.telephone, other.telephone) &&
            Utils.enhancedDeepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            conferenceIdentifier,
            countryCode,
            hostAccessCode,
            label,
            notes,
            participantAccessCode,
            regionCode,
            telephone,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CalendarConference.class,
                "conferenceIdentifier", conferenceIdentifier,
                "countryCode", countryCode,
                "hostAccessCode", hostAccessCode,
                "label", label,
                "notes", notes,
                "participantAccessCode", participantAccessCode,
                "regionCode", regionCode,
                "telephone", telephone,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<String> conferenceIdentifier = Optional.empty();
 
        private Optional<String> countryCode = Optional.empty();
 
        private Optional<String> hostAccessCode = Optional.empty();
 
        private Optional<String> label = Optional.empty();
 
        private Optional<String> notes = Optional.empty();
 
        private Optional<String> participantAccessCode = Optional.empty();
 
        private Optional<String> regionCode = Optional.empty();
 
        private Optional<String> telephone = Optional.empty();
 
        private Optional<String> url = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder conferenceIdentifier(String conferenceIdentifier) {
            Utils.checkNotNull(conferenceIdentifier, "conferenceIdentifier");
            this.conferenceIdentifier = Optional.ofNullable(conferenceIdentifier);
            return this;
        }

        public Builder conferenceIdentifier(Optional<String> conferenceIdentifier) {
            Utils.checkNotNull(conferenceIdentifier, "conferenceIdentifier");
            this.conferenceIdentifier = conferenceIdentifier;
            return this;
        }

        public Builder countryCode(String countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = Optional.ofNullable(countryCode);
            return this;
        }

        public Builder countryCode(Optional<String> countryCode) {
            Utils.checkNotNull(countryCode, "countryCode");
            this.countryCode = countryCode;
            return this;
        }

        public Builder hostAccessCode(String hostAccessCode) {
            Utils.checkNotNull(hostAccessCode, "hostAccessCode");
            this.hostAccessCode = Optional.ofNullable(hostAccessCode);
            return this;
        }

        public Builder hostAccessCode(Optional<String> hostAccessCode) {
            Utils.checkNotNull(hostAccessCode, "hostAccessCode");
            this.hostAccessCode = hostAccessCode;
            return this;
        }

        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = Optional.ofNullable(label);
            return this;
        }

        public Builder label(Optional<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        public Builder notes(Optional<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }

        public Builder participantAccessCode(String participantAccessCode) {
            Utils.checkNotNull(participantAccessCode, "participantAccessCode");
            this.participantAccessCode = Optional.ofNullable(participantAccessCode);
            return this;
        }

        public Builder participantAccessCode(Optional<String> participantAccessCode) {
            Utils.checkNotNull(participantAccessCode, "participantAccessCode");
            this.participantAccessCode = participantAccessCode;
            return this;
        }

        public Builder regionCode(String regionCode) {
            Utils.checkNotNull(regionCode, "regionCode");
            this.regionCode = Optional.ofNullable(regionCode);
            return this;
        }

        public Builder regionCode(Optional<String> regionCode) {
            Utils.checkNotNull(regionCode, "regionCode");
            this.regionCode = regionCode;
            return this;
        }

        public Builder telephone(String telephone) {
            Utils.checkNotNull(telephone, "telephone");
            this.telephone = Optional.ofNullable(telephone);
            return this;
        }

        public Builder telephone(Optional<String> telephone) {
            Utils.checkNotNull(telephone, "telephone");
            this.telephone = telephone;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public CalendarConference build() {
            return new CalendarConference(
                conferenceIdentifier,
                countryCode,
                hostAccessCode,
                label,
                notes,
                participantAccessCode,
                regionCode,
                telephone,
                url);
        }
    }
}

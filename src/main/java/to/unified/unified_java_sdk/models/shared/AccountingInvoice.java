/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.Utils;

public class AccountingInvoice {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachments")
    private Optional<? extends List<AccountingAttachment>> attachments;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("balance_amount")
    private Optional<Double> balanceAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancelled_at")
    private Optional<OffsetDateTime> cancelledAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_id")
    private Optional<String> contactId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("discount_amount")
    private Optional<Double> discountAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_at")
    private Optional<OffsetDateTime> dueAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_at")
    private Optional<OffsetDateTime> invoiceAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("invoice_number")
    private Optional<String> invoiceNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lineitems")
    private Optional<? extends List<AccountingLineitem>> lineitems;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private Optional<String> notes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paid_amount")
    private Optional<Double> paidAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paid_at")
    private Optional<OffsetDateTime> paidAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_collection_method")
    private Optional<? extends AccountingInvoicePaymentCollectionMethod> paymentCollectionMethod;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("posted_at")
    private Optional<OffsetDateTime> postedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_amount")
    private Optional<Double> refundAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refund_reason")
    private Optional<String> refundReason;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refunded_at")
    private Optional<OffsetDateTime> refundedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("send")
    private Optional<Boolean> send;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends AccountingInvoiceStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_amount")
    private Optional<Double> taxAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<Double> totalAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends AccountingInvoiceType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public AccountingInvoice(
            @JsonProperty("attachments") Optional<? extends List<AccountingAttachment>> attachments,
            @JsonProperty("balance_amount") Optional<Double> balanceAmount,
            @JsonProperty("cancelled_at") Optional<OffsetDateTime> cancelledAt,
            @JsonProperty("contact_id") Optional<String> contactId,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("discount_amount") Optional<Double> discountAmount,
            @JsonProperty("due_at") Optional<OffsetDateTime> dueAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("invoice_at") Optional<OffsetDateTime> invoiceAt,
            @JsonProperty("invoice_number") Optional<String> invoiceNumber,
            @JsonProperty("lineitems") Optional<? extends List<AccountingLineitem>> lineitems,
            @JsonProperty("notes") Optional<String> notes,
            @JsonProperty("paid_amount") Optional<Double> paidAmount,
            @JsonProperty("paid_at") Optional<OffsetDateTime> paidAt,
            @JsonProperty("payment_collection_method") Optional<? extends AccountingInvoicePaymentCollectionMethod> paymentCollectionMethod,
            @JsonProperty("posted_at") Optional<OffsetDateTime> postedAt,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("refund_amount") Optional<Double> refundAmount,
            @JsonProperty("refund_reason") Optional<String> refundReason,
            @JsonProperty("refunded_at") Optional<OffsetDateTime> refundedAt,
            @JsonProperty("send") Optional<Boolean> send,
            @JsonProperty("status") Optional<? extends AccountingInvoiceStatus> status,
            @JsonProperty("tax_amount") Optional<Double> taxAmount,
            @JsonProperty("total_amount") Optional<Double> totalAmount,
            @JsonProperty("type") Optional<? extends AccountingInvoiceType> type,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(attachments, "attachments");
        Utils.checkNotNull(balanceAmount, "balanceAmount");
        Utils.checkNotNull(cancelledAt, "cancelledAt");
        Utils.checkNotNull(contactId, "contactId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(discountAmount, "discountAmount");
        Utils.checkNotNull(dueAt, "dueAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(invoiceAt, "invoiceAt");
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        Utils.checkNotNull(lineitems, "lineitems");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(paidAmount, "paidAmount");
        Utils.checkNotNull(paidAt, "paidAt");
        Utils.checkNotNull(paymentCollectionMethod, "paymentCollectionMethod");
        Utils.checkNotNull(postedAt, "postedAt");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(refundAmount, "refundAmount");
        Utils.checkNotNull(refundReason, "refundReason");
        Utils.checkNotNull(refundedAt, "refundedAt");
        Utils.checkNotNull(send, "send");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(taxAmount, "taxAmount");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(url, "url");
        this.attachments = attachments;
        this.balanceAmount = balanceAmount;
        this.cancelledAt = cancelledAt;
        this.contactId = contactId;
        this.createdAt = createdAt;
        this.currency = currency;
        this.discountAmount = discountAmount;
        this.dueAt = dueAt;
        this.id = id;
        this.invoiceAt = invoiceAt;
        this.invoiceNumber = invoiceNumber;
        this.lineitems = lineitems;
        this.notes = notes;
        this.paidAmount = paidAmount;
        this.paidAt = paidAt;
        this.paymentCollectionMethod = paymentCollectionMethod;
        this.postedAt = postedAt;
        this.raw = raw;
        this.refundAmount = refundAmount;
        this.refundReason = refundReason;
        this.refundedAt = refundedAt;
        this.send = send;
        this.status = status;
        this.taxAmount = taxAmount;
        this.totalAmount = totalAmount;
        this.type = type;
        this.updatedAt = updatedAt;
        this.url = url;
    }
    
    public AccountingInvoice() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingAttachment>> attachments() {
        return (Optional<List<AccountingAttachment>>) attachments;
    }

    @JsonIgnore
    public Optional<Double> balanceAmount() {
        return balanceAmount;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> cancelledAt() {
        return cancelledAt;
    }

    @JsonIgnore
    public Optional<String> contactId() {
        return contactId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<Double> discountAmount() {
        return discountAmount;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> dueAt() {
        return dueAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> invoiceAt() {
        return invoiceAt;
    }

    @JsonIgnore
    public Optional<String> invoiceNumber() {
        return invoiceNumber;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AccountingLineitem>> lineitems() {
        return (Optional<List<AccountingLineitem>>) lineitems;
    }

    @JsonIgnore
    public Optional<String> notes() {
        return notes;
    }

    @JsonIgnore
    public Optional<Double> paidAmount() {
        return paidAmount;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> paidAt() {
        return paidAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AccountingInvoicePaymentCollectionMethod> paymentCollectionMethod() {
        return (Optional<AccountingInvoicePaymentCollectionMethod>) paymentCollectionMethod;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> postedAt() {
        return postedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public Optional<Double> refundAmount() {
        return refundAmount;
    }

    @JsonIgnore
    public Optional<String> refundReason() {
        return refundReason;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> refundedAt() {
        return refundedAt;
    }

    @JsonIgnore
    public Optional<Boolean> send() {
        return send;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AccountingInvoiceStatus> status() {
        return (Optional<AccountingInvoiceStatus>) status;
    }

    @JsonIgnore
    public Optional<Double> taxAmount() {
        return taxAmount;
    }

    @JsonIgnore
    public Optional<Double> totalAmount() {
        return totalAmount;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AccountingInvoiceType> type() {
        return (Optional<AccountingInvoiceType>) type;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public AccountingInvoice withAttachments(List<AccountingAttachment> attachments) {
        Utils.checkNotNull(attachments, "attachments");
        this.attachments = Optional.ofNullable(attachments);
        return this;
    }

    public AccountingInvoice withAttachments(Optional<? extends List<AccountingAttachment>> attachments) {
        Utils.checkNotNull(attachments, "attachments");
        this.attachments = attachments;
        return this;
    }

    public AccountingInvoice withBalanceAmount(double balanceAmount) {
        Utils.checkNotNull(balanceAmount, "balanceAmount");
        this.balanceAmount = Optional.ofNullable(balanceAmount);
        return this;
    }

    public AccountingInvoice withBalanceAmount(Optional<Double> balanceAmount) {
        Utils.checkNotNull(balanceAmount, "balanceAmount");
        this.balanceAmount = balanceAmount;
        return this;
    }

    public AccountingInvoice withCancelledAt(OffsetDateTime cancelledAt) {
        Utils.checkNotNull(cancelledAt, "cancelledAt");
        this.cancelledAt = Optional.ofNullable(cancelledAt);
        return this;
    }

    public AccountingInvoice withCancelledAt(Optional<OffsetDateTime> cancelledAt) {
        Utils.checkNotNull(cancelledAt, "cancelledAt");
        this.cancelledAt = cancelledAt;
        return this;
    }

    public AccountingInvoice withContactId(String contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = Optional.ofNullable(contactId);
        return this;
    }

    public AccountingInvoice withContactId(Optional<String> contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = contactId;
        return this;
    }

    public AccountingInvoice withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public AccountingInvoice withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AccountingInvoice withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    public AccountingInvoice withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AccountingInvoice withDiscountAmount(double discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = Optional.ofNullable(discountAmount);
        return this;
    }

    public AccountingInvoice withDiscountAmount(Optional<Double> discountAmount) {
        Utils.checkNotNull(discountAmount, "discountAmount");
        this.discountAmount = discountAmount;
        return this;
    }

    public AccountingInvoice withDueAt(OffsetDateTime dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = Optional.ofNullable(dueAt);
        return this;
    }

    public AccountingInvoice withDueAt(Optional<OffsetDateTime> dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = dueAt;
        return this;
    }

    public AccountingInvoice withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public AccountingInvoice withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AccountingInvoice withInvoiceAt(OffsetDateTime invoiceAt) {
        Utils.checkNotNull(invoiceAt, "invoiceAt");
        this.invoiceAt = Optional.ofNullable(invoiceAt);
        return this;
    }

    public AccountingInvoice withInvoiceAt(Optional<OffsetDateTime> invoiceAt) {
        Utils.checkNotNull(invoiceAt, "invoiceAt");
        this.invoiceAt = invoiceAt;
        return this;
    }

    public AccountingInvoice withInvoiceNumber(String invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = Optional.ofNullable(invoiceNumber);
        return this;
    }

    public AccountingInvoice withInvoiceNumber(Optional<String> invoiceNumber) {
        Utils.checkNotNull(invoiceNumber, "invoiceNumber");
        this.invoiceNumber = invoiceNumber;
        return this;
    }

    public AccountingInvoice withLineitems(List<AccountingLineitem> lineitems) {
        Utils.checkNotNull(lineitems, "lineitems");
        this.lineitems = Optional.ofNullable(lineitems);
        return this;
    }

    public AccountingInvoice withLineitems(Optional<? extends List<AccountingLineitem>> lineitems) {
        Utils.checkNotNull(lineitems, "lineitems");
        this.lineitems = lineitems;
        return this;
    }

    public AccountingInvoice withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = Optional.ofNullable(notes);
        return this;
    }

    public AccountingInvoice withNotes(Optional<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    public AccountingInvoice withPaidAmount(double paidAmount) {
        Utils.checkNotNull(paidAmount, "paidAmount");
        this.paidAmount = Optional.ofNullable(paidAmount);
        return this;
    }

    public AccountingInvoice withPaidAmount(Optional<Double> paidAmount) {
        Utils.checkNotNull(paidAmount, "paidAmount");
        this.paidAmount = paidAmount;
        return this;
    }

    public AccountingInvoice withPaidAt(OffsetDateTime paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = Optional.ofNullable(paidAt);
        return this;
    }

    public AccountingInvoice withPaidAt(Optional<OffsetDateTime> paidAt) {
        Utils.checkNotNull(paidAt, "paidAt");
        this.paidAt = paidAt;
        return this;
    }

    public AccountingInvoice withPaymentCollectionMethod(AccountingInvoicePaymentCollectionMethod paymentCollectionMethod) {
        Utils.checkNotNull(paymentCollectionMethod, "paymentCollectionMethod");
        this.paymentCollectionMethod = Optional.ofNullable(paymentCollectionMethod);
        return this;
    }

    public AccountingInvoice withPaymentCollectionMethod(Optional<? extends AccountingInvoicePaymentCollectionMethod> paymentCollectionMethod) {
        Utils.checkNotNull(paymentCollectionMethod, "paymentCollectionMethod");
        this.paymentCollectionMethod = paymentCollectionMethod;
        return this;
    }

    public AccountingInvoice withPostedAt(OffsetDateTime postedAt) {
        Utils.checkNotNull(postedAt, "postedAt");
        this.postedAt = Optional.ofNullable(postedAt);
        return this;
    }

    public AccountingInvoice withPostedAt(Optional<OffsetDateTime> postedAt) {
        Utils.checkNotNull(postedAt, "postedAt");
        this.postedAt = postedAt;
        return this;
    }

    public AccountingInvoice withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public AccountingInvoice withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AccountingInvoice withRefundAmount(double refundAmount) {
        Utils.checkNotNull(refundAmount, "refundAmount");
        this.refundAmount = Optional.ofNullable(refundAmount);
        return this;
    }

    public AccountingInvoice withRefundAmount(Optional<Double> refundAmount) {
        Utils.checkNotNull(refundAmount, "refundAmount");
        this.refundAmount = refundAmount;
        return this;
    }

    public AccountingInvoice withRefundReason(String refundReason) {
        Utils.checkNotNull(refundReason, "refundReason");
        this.refundReason = Optional.ofNullable(refundReason);
        return this;
    }

    public AccountingInvoice withRefundReason(Optional<String> refundReason) {
        Utils.checkNotNull(refundReason, "refundReason");
        this.refundReason = refundReason;
        return this;
    }

    public AccountingInvoice withRefundedAt(OffsetDateTime refundedAt) {
        Utils.checkNotNull(refundedAt, "refundedAt");
        this.refundedAt = Optional.ofNullable(refundedAt);
        return this;
    }

    public AccountingInvoice withRefundedAt(Optional<OffsetDateTime> refundedAt) {
        Utils.checkNotNull(refundedAt, "refundedAt");
        this.refundedAt = refundedAt;
        return this;
    }

    public AccountingInvoice withSend(boolean send) {
        Utils.checkNotNull(send, "send");
        this.send = Optional.ofNullable(send);
        return this;
    }

    public AccountingInvoice withSend(Optional<Boolean> send) {
        Utils.checkNotNull(send, "send");
        this.send = send;
        return this;
    }

    public AccountingInvoice withStatus(AccountingInvoiceStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public AccountingInvoice withStatus(Optional<? extends AccountingInvoiceStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public AccountingInvoice withTaxAmount(double taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = Optional.ofNullable(taxAmount);
        return this;
    }

    public AccountingInvoice withTaxAmount(Optional<Double> taxAmount) {
        Utils.checkNotNull(taxAmount, "taxAmount");
        this.taxAmount = taxAmount;
        return this;
    }

    public AccountingInvoice withTotalAmount(double totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }

    public AccountingInvoice withTotalAmount(Optional<Double> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    public AccountingInvoice withType(AccountingInvoiceType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public AccountingInvoice withType(Optional<? extends AccountingInvoiceType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public AccountingInvoice withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public AccountingInvoice withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public AccountingInvoice withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public AccountingInvoice withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingInvoice other = (AccountingInvoice) o;
        return 
            Utils.enhancedDeepEquals(this.attachments, other.attachments) &&
            Utils.enhancedDeepEquals(this.balanceAmount, other.balanceAmount) &&
            Utils.enhancedDeepEquals(this.cancelledAt, other.cancelledAt) &&
            Utils.enhancedDeepEquals(this.contactId, other.contactId) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.currency, other.currency) &&
            Utils.enhancedDeepEquals(this.discountAmount, other.discountAmount) &&
            Utils.enhancedDeepEquals(this.dueAt, other.dueAt) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.invoiceAt, other.invoiceAt) &&
            Utils.enhancedDeepEquals(this.invoiceNumber, other.invoiceNumber) &&
            Utils.enhancedDeepEquals(this.lineitems, other.lineitems) &&
            Utils.enhancedDeepEquals(this.notes, other.notes) &&
            Utils.enhancedDeepEquals(this.paidAmount, other.paidAmount) &&
            Utils.enhancedDeepEquals(this.paidAt, other.paidAt) &&
            Utils.enhancedDeepEquals(this.paymentCollectionMethod, other.paymentCollectionMethod) &&
            Utils.enhancedDeepEquals(this.postedAt, other.postedAt) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.refundAmount, other.refundAmount) &&
            Utils.enhancedDeepEquals(this.refundReason, other.refundReason) &&
            Utils.enhancedDeepEquals(this.refundedAt, other.refundedAt) &&
            Utils.enhancedDeepEquals(this.send, other.send) &&
            Utils.enhancedDeepEquals(this.status, other.status) &&
            Utils.enhancedDeepEquals(this.taxAmount, other.taxAmount) &&
            Utils.enhancedDeepEquals(this.totalAmount, other.totalAmount) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            attachments,
            balanceAmount,
            cancelledAt,
            contactId,
            createdAt,
            currency,
            discountAmount,
            dueAt,
            id,
            invoiceAt,
            invoiceNumber,
            lineitems,
            notes,
            paidAmount,
            paidAt,
            paymentCollectionMethod,
            postedAt,
            raw,
            refundAmount,
            refundReason,
            refundedAt,
            send,
            status,
            taxAmount,
            totalAmount,
            type,
            updatedAt,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingInvoice.class,
                "attachments", attachments,
                "balanceAmount", balanceAmount,
                "cancelledAt", cancelledAt,
                "contactId", contactId,
                "createdAt", createdAt,
                "currency", currency,
                "discountAmount", discountAmount,
                "dueAt", dueAt,
                "id", id,
                "invoiceAt", invoiceAt,
                "invoiceNumber", invoiceNumber,
                "lineitems", lineitems,
                "notes", notes,
                "paidAmount", paidAmount,
                "paidAt", paidAt,
                "paymentCollectionMethod", paymentCollectionMethod,
                "postedAt", postedAt,
                "raw", raw,
                "refundAmount", refundAmount,
                "refundReason", refundReason,
                "refundedAt", refundedAt,
                "send", send,
                "status", status,
                "taxAmount", taxAmount,
                "totalAmount", totalAmount,
                "type", type,
                "updatedAt", updatedAt,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<AccountingAttachment>> attachments = Optional.empty();
 
        private Optional<Double> balanceAmount = Optional.empty();
 
        private Optional<OffsetDateTime> cancelledAt = Optional.empty();
 
        private Optional<String> contactId = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<Double> discountAmount = Optional.empty();
 
        private Optional<OffsetDateTime> dueAt = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<OffsetDateTime> invoiceAt = Optional.empty();
 
        private Optional<String> invoiceNumber = Optional.empty();
 
        private Optional<? extends List<AccountingLineitem>> lineitems = Optional.empty();
 
        private Optional<String> notes = Optional.empty();
 
        private Optional<Double> paidAmount = Optional.empty();
 
        private Optional<OffsetDateTime> paidAt = Optional.empty();
 
        private Optional<? extends AccountingInvoicePaymentCollectionMethod> paymentCollectionMethod = Optional.empty();
 
        private Optional<OffsetDateTime> postedAt = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<Double> refundAmount = Optional.empty();
 
        private Optional<String> refundReason = Optional.empty();
 
        private Optional<OffsetDateTime> refundedAt = Optional.empty();
 
        private Optional<Boolean> send = Optional.empty();
 
        private Optional<? extends AccountingInvoiceStatus> status = Optional.empty();
 
        private Optional<Double> taxAmount = Optional.empty();
 
        private Optional<Double> totalAmount = Optional.empty();
 
        private Optional<? extends AccountingInvoiceType> type = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<String> url = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder attachments(List<AccountingAttachment> attachments) {
            Utils.checkNotNull(attachments, "attachments");
            this.attachments = Optional.ofNullable(attachments);
            return this;
        }

        public Builder attachments(Optional<? extends List<AccountingAttachment>> attachments) {
            Utils.checkNotNull(attachments, "attachments");
            this.attachments = attachments;
            return this;
        }

        public Builder balanceAmount(double balanceAmount) {
            Utils.checkNotNull(balanceAmount, "balanceAmount");
            this.balanceAmount = Optional.ofNullable(balanceAmount);
            return this;
        }

        public Builder balanceAmount(Optional<Double> balanceAmount) {
            Utils.checkNotNull(balanceAmount, "balanceAmount");
            this.balanceAmount = balanceAmount;
            return this;
        }

        public Builder cancelledAt(OffsetDateTime cancelledAt) {
            Utils.checkNotNull(cancelledAt, "cancelledAt");
            this.cancelledAt = Optional.ofNullable(cancelledAt);
            return this;
        }

        public Builder cancelledAt(Optional<OffsetDateTime> cancelledAt) {
            Utils.checkNotNull(cancelledAt, "cancelledAt");
            this.cancelledAt = cancelledAt;
            return this;
        }

        public Builder contactId(String contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = Optional.ofNullable(contactId);
            return this;
        }

        public Builder contactId(Optional<String> contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = contactId;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder discountAmount(double discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = Optional.ofNullable(discountAmount);
            return this;
        }

        public Builder discountAmount(Optional<Double> discountAmount) {
            Utils.checkNotNull(discountAmount, "discountAmount");
            this.discountAmount = discountAmount;
            return this;
        }

        public Builder dueAt(OffsetDateTime dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = Optional.ofNullable(dueAt);
            return this;
        }

        public Builder dueAt(Optional<OffsetDateTime> dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = dueAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder invoiceAt(OffsetDateTime invoiceAt) {
            Utils.checkNotNull(invoiceAt, "invoiceAt");
            this.invoiceAt = Optional.ofNullable(invoiceAt);
            return this;
        }

        public Builder invoiceAt(Optional<OffsetDateTime> invoiceAt) {
            Utils.checkNotNull(invoiceAt, "invoiceAt");
            this.invoiceAt = invoiceAt;
            return this;
        }

        public Builder invoiceNumber(String invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = Optional.ofNullable(invoiceNumber);
            return this;
        }

        public Builder invoiceNumber(Optional<String> invoiceNumber) {
            Utils.checkNotNull(invoiceNumber, "invoiceNumber");
            this.invoiceNumber = invoiceNumber;
            return this;
        }

        public Builder lineitems(List<AccountingLineitem> lineitems) {
            Utils.checkNotNull(lineitems, "lineitems");
            this.lineitems = Optional.ofNullable(lineitems);
            return this;
        }

        public Builder lineitems(Optional<? extends List<AccountingLineitem>> lineitems) {
            Utils.checkNotNull(lineitems, "lineitems");
            this.lineitems = lineitems;
            return this;
        }

        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        public Builder notes(Optional<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }

        public Builder paidAmount(double paidAmount) {
            Utils.checkNotNull(paidAmount, "paidAmount");
            this.paidAmount = Optional.ofNullable(paidAmount);
            return this;
        }

        public Builder paidAmount(Optional<Double> paidAmount) {
            Utils.checkNotNull(paidAmount, "paidAmount");
            this.paidAmount = paidAmount;
            return this;
        }

        public Builder paidAt(OffsetDateTime paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = Optional.ofNullable(paidAt);
            return this;
        }

        public Builder paidAt(Optional<OffsetDateTime> paidAt) {
            Utils.checkNotNull(paidAt, "paidAt");
            this.paidAt = paidAt;
            return this;
        }

        public Builder paymentCollectionMethod(AccountingInvoicePaymentCollectionMethod paymentCollectionMethod) {
            Utils.checkNotNull(paymentCollectionMethod, "paymentCollectionMethod");
            this.paymentCollectionMethod = Optional.ofNullable(paymentCollectionMethod);
            return this;
        }

        public Builder paymentCollectionMethod(Optional<? extends AccountingInvoicePaymentCollectionMethod> paymentCollectionMethod) {
            Utils.checkNotNull(paymentCollectionMethod, "paymentCollectionMethod");
            this.paymentCollectionMethod = paymentCollectionMethod;
            return this;
        }

        public Builder postedAt(OffsetDateTime postedAt) {
            Utils.checkNotNull(postedAt, "postedAt");
            this.postedAt = Optional.ofNullable(postedAt);
            return this;
        }

        public Builder postedAt(Optional<OffsetDateTime> postedAt) {
            Utils.checkNotNull(postedAt, "postedAt");
            this.postedAt = postedAt;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder refundAmount(double refundAmount) {
            Utils.checkNotNull(refundAmount, "refundAmount");
            this.refundAmount = Optional.ofNullable(refundAmount);
            return this;
        }

        public Builder refundAmount(Optional<Double> refundAmount) {
            Utils.checkNotNull(refundAmount, "refundAmount");
            this.refundAmount = refundAmount;
            return this;
        }

        public Builder refundReason(String refundReason) {
            Utils.checkNotNull(refundReason, "refundReason");
            this.refundReason = Optional.ofNullable(refundReason);
            return this;
        }

        public Builder refundReason(Optional<String> refundReason) {
            Utils.checkNotNull(refundReason, "refundReason");
            this.refundReason = refundReason;
            return this;
        }

        public Builder refundedAt(OffsetDateTime refundedAt) {
            Utils.checkNotNull(refundedAt, "refundedAt");
            this.refundedAt = Optional.ofNullable(refundedAt);
            return this;
        }

        public Builder refundedAt(Optional<OffsetDateTime> refundedAt) {
            Utils.checkNotNull(refundedAt, "refundedAt");
            this.refundedAt = refundedAt;
            return this;
        }

        public Builder send(boolean send) {
            Utils.checkNotNull(send, "send");
            this.send = Optional.ofNullable(send);
            return this;
        }

        public Builder send(Optional<Boolean> send) {
            Utils.checkNotNull(send, "send");
            this.send = send;
            return this;
        }

        public Builder status(AccountingInvoiceStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends AccountingInvoiceStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder taxAmount(double taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = Optional.ofNullable(taxAmount);
            return this;
        }

        public Builder taxAmount(Optional<Double> taxAmount) {
            Utils.checkNotNull(taxAmount, "taxAmount");
            this.taxAmount = taxAmount;
            return this;
        }

        public Builder totalAmount(double totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        public Builder totalAmount(Optional<Double> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        public Builder type(AccountingInvoiceType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends AccountingInvoiceType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public AccountingInvoice build() {
            return new AccountingInvoice(
                attachments,
                balanceAmount,
                cancelledAt,
                contactId,
                createdAt,
                currency,
                discountAmount,
                dueAt,
                id,
                invoiceAt,
                invoiceNumber,
                lineitems,
                notes,
                paidAmount,
                paidAt,
                paymentCollectionMethod,
                postedAt,
                raw,
                refundAmount,
                refundReason,
                refundedAt,
                send,
                status,
                taxAmount,
                totalAmount,
                type,
                updatedAt,
                url);
        }
    }
}

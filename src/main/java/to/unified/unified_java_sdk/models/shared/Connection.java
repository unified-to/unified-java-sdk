/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.shared;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.LazySingletonValue;
import to.unified.unified_java_sdk.utils.Utils;

/**
 * Connection
 * 
 * <p>A connection represents a specific authentication of an integration.
 */
public class Connection {
    /**
     * An authentication object that represents a specific authorized user's connection to an integration.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth")
    private Optional<? extends PropertyConnectionAuth> auth;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auth_aws_arn")
    private Optional<String> authAwsArn;

    /**
     * The Integration categories that this connection supports
     */
    @JsonProperty("categories")
    private List<PropertyConnectionCategories> categories;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    private Optional<String> environment;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_xref")
    private Optional<String> externalXref;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("integration_name")
    private Optional<String> integrationName;


    @JsonProperty("integration_type")
    private String integrationType;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_paused")
    private Optional<Boolean> isPaused;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_healthy_at")
    private Optional<OffsetDateTime> lastHealthyAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_unhealthy_at")
    private Optional<OffsetDateTime> lastUnhealthyAt;


    @JsonProperty("permissions")
    private List<PropertyConnectionPermissions> permissions;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;


    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace_id")
    private Optional<String> workspaceId;

    @JsonCreator
    public Connection(
            @JsonProperty("auth") Optional<? extends PropertyConnectionAuth> auth,
            @JsonProperty("auth_aws_arn") Optional<String> authAwsArn,
            @JsonProperty("categories") List<PropertyConnectionCategories> categories,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("environment") Optional<String> environment,
            @JsonProperty("external_xref") Optional<String> externalXref,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("integration_name") Optional<String> integrationName,
            @JsonProperty("integration_type") String integrationType,
            @JsonProperty("is_paused") Optional<Boolean> isPaused,
            @JsonProperty("last_healthy_at") Optional<OffsetDateTime> lastHealthyAt,
            @JsonProperty("last_unhealthy_at") Optional<OffsetDateTime> lastUnhealthyAt,
            @JsonProperty("permissions") List<PropertyConnectionPermissions> permissions,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("workspace_id") Optional<String> workspaceId) {
        Utils.checkNotNull(auth, "auth");
        Utils.checkNotNull(authAwsArn, "authAwsArn");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(environment, "environment");
        Utils.checkNotNull(externalXref, "externalXref");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(integrationName, "integrationName");
        Utils.checkNotNull(integrationType, "integrationType");
        Utils.checkNotNull(isPaused, "isPaused");
        Utils.checkNotNull(lastHealthyAt, "lastHealthyAt");
        Utils.checkNotNull(lastUnhealthyAt, "lastUnhealthyAt");
        Utils.checkNotNull(permissions, "permissions");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.auth = auth;
        this.authAwsArn = authAwsArn;
        this.categories = categories;
        this.createdAt = createdAt;
        this.environment = environment;
        this.externalXref = externalXref;
        this.id = id;
        this.integrationName = integrationName;
        this.integrationType = integrationType;
        this.isPaused = isPaused;
        this.lastHealthyAt = lastHealthyAt;
        this.lastUnhealthyAt = lastUnhealthyAt;
        this.permissions = permissions;
        this.updatedAt = updatedAt;
        this.workspaceId = workspaceId;
    }
    
    public Connection(
            List<PropertyConnectionCategories> categories,
            String integrationType,
            List<PropertyConnectionPermissions> permissions) {
        this(Optional.empty(), Optional.empty(), categories,
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), integrationType,
            Optional.empty(), Optional.empty(), Optional.empty(),
            permissions, Optional.empty(), Optional.empty());
    }

    /**
     * An authentication object that represents a specific authorized user's connection to an integration.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyConnectionAuth> auth() {
        return (Optional<PropertyConnectionAuth>) auth;
    }

    @JsonIgnore
    public Optional<String> authAwsArn() {
        return authAwsArn;
    }

    /**
     * The Integration categories that this connection supports
     */
    @JsonIgnore
    public List<PropertyConnectionCategories> categories() {
        return categories;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> environment() {
        return environment;
    }

    @JsonIgnore
    public Optional<String> externalXref() {
        return externalXref;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> integrationName() {
        return integrationName;
    }

    @JsonIgnore
    public String integrationType() {
        return integrationType;
    }

    @JsonIgnore
    public Optional<Boolean> isPaused() {
        return isPaused;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> lastHealthyAt() {
        return lastHealthyAt;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> lastUnhealthyAt() {
        return lastUnhealthyAt;
    }

    @JsonIgnore
    public List<PropertyConnectionPermissions> permissions() {
        return permissions;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> workspaceId() {
        return workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * An authentication object that represents a specific authorized user's connection to an integration.
     */
    public Connection withAuth(PropertyConnectionAuth auth) {
        Utils.checkNotNull(auth, "auth");
        this.auth = Optional.ofNullable(auth);
        return this;
    }


    /**
     * An authentication object that represents a specific authorized user's connection to an integration.
     */
    public Connection withAuth(Optional<? extends PropertyConnectionAuth> auth) {
        Utils.checkNotNull(auth, "auth");
        this.auth = auth;
        return this;
    }

    public Connection withAuthAwsArn(String authAwsArn) {
        Utils.checkNotNull(authAwsArn, "authAwsArn");
        this.authAwsArn = Optional.ofNullable(authAwsArn);
        return this;
    }


    public Connection withAuthAwsArn(Optional<String> authAwsArn) {
        Utils.checkNotNull(authAwsArn, "authAwsArn");
        this.authAwsArn = authAwsArn;
        return this;
    }

    /**
     * The Integration categories that this connection supports
     */
    public Connection withCategories(List<PropertyConnectionCategories> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    public Connection withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }


    public Connection withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public Connection withEnvironment(String environment) {
        Utils.checkNotNull(environment, "environment");
        this.environment = Optional.ofNullable(environment);
        return this;
    }


    public Connection withEnvironment(Optional<String> environment) {
        Utils.checkNotNull(environment, "environment");
        this.environment = environment;
        return this;
    }

    public Connection withExternalXref(String externalXref) {
        Utils.checkNotNull(externalXref, "externalXref");
        this.externalXref = Optional.ofNullable(externalXref);
        return this;
    }


    public Connection withExternalXref(Optional<String> externalXref) {
        Utils.checkNotNull(externalXref, "externalXref");
        this.externalXref = externalXref;
        return this;
    }

    public Connection withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }


    public Connection withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Connection withIntegrationName(String integrationName) {
        Utils.checkNotNull(integrationName, "integrationName");
        this.integrationName = Optional.ofNullable(integrationName);
        return this;
    }


    public Connection withIntegrationName(Optional<String> integrationName) {
        Utils.checkNotNull(integrationName, "integrationName");
        this.integrationName = integrationName;
        return this;
    }

    public Connection withIntegrationType(String integrationType) {
        Utils.checkNotNull(integrationType, "integrationType");
        this.integrationType = integrationType;
        return this;
    }

    public Connection withIsPaused(boolean isPaused) {
        Utils.checkNotNull(isPaused, "isPaused");
        this.isPaused = Optional.ofNullable(isPaused);
        return this;
    }


    public Connection withIsPaused(Optional<Boolean> isPaused) {
        Utils.checkNotNull(isPaused, "isPaused");
        this.isPaused = isPaused;
        return this;
    }

    public Connection withLastHealthyAt(OffsetDateTime lastHealthyAt) {
        Utils.checkNotNull(lastHealthyAt, "lastHealthyAt");
        this.lastHealthyAt = Optional.ofNullable(lastHealthyAt);
        return this;
    }


    public Connection withLastHealthyAt(Optional<OffsetDateTime> lastHealthyAt) {
        Utils.checkNotNull(lastHealthyAt, "lastHealthyAt");
        this.lastHealthyAt = lastHealthyAt;
        return this;
    }

    public Connection withLastUnhealthyAt(OffsetDateTime lastUnhealthyAt) {
        Utils.checkNotNull(lastUnhealthyAt, "lastUnhealthyAt");
        this.lastUnhealthyAt = Optional.ofNullable(lastUnhealthyAt);
        return this;
    }


    public Connection withLastUnhealthyAt(Optional<OffsetDateTime> lastUnhealthyAt) {
        Utils.checkNotNull(lastUnhealthyAt, "lastUnhealthyAt");
        this.lastUnhealthyAt = lastUnhealthyAt;
        return this;
    }

    public Connection withPermissions(List<PropertyConnectionPermissions> permissions) {
        Utils.checkNotNull(permissions, "permissions");
        this.permissions = permissions;
        return this;
    }

    public Connection withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }


    public Connection withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public Connection withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = Optional.ofNullable(workspaceId);
        return this;
    }


    public Connection withWorkspaceId(Optional<String> workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Connection other = (Connection) o;
        return 
            Utils.enhancedDeepEquals(this.auth, other.auth) &&
            Utils.enhancedDeepEquals(this.authAwsArn, other.authAwsArn) &&
            Utils.enhancedDeepEquals(this.categories, other.categories) &&
            Utils.enhancedDeepEquals(this.createdAt, other.createdAt) &&
            Utils.enhancedDeepEquals(this.environment, other.environment) &&
            Utils.enhancedDeepEquals(this.externalXref, other.externalXref) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.integrationName, other.integrationName) &&
            Utils.enhancedDeepEquals(this.integrationType, other.integrationType) &&
            Utils.enhancedDeepEquals(this.isPaused, other.isPaused) &&
            Utils.enhancedDeepEquals(this.lastHealthyAt, other.lastHealthyAt) &&
            Utils.enhancedDeepEquals(this.lastUnhealthyAt, other.lastUnhealthyAt) &&
            Utils.enhancedDeepEquals(this.permissions, other.permissions) &&
            Utils.enhancedDeepEquals(this.updatedAt, other.updatedAt) &&
            Utils.enhancedDeepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            auth, authAwsArn, categories,
            createdAt, environment, externalXref,
            id, integrationName, integrationType,
            isPaused, lastHealthyAt, lastUnhealthyAt,
            permissions, updatedAt, workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Connection.class,
                "auth", auth,
                "authAwsArn", authAwsArn,
                "categories", categories,
                "createdAt", createdAt,
                "environment", environment,
                "externalXref", externalXref,
                "id", id,
                "integrationName", integrationName,
                "integrationType", integrationType,
                "isPaused", isPaused,
                "lastHealthyAt", lastHealthyAt,
                "lastUnhealthyAt", lastUnhealthyAt,
                "permissions", permissions,
                "updatedAt", updatedAt,
                "workspaceId", workspaceId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends PropertyConnectionAuth> auth = Optional.empty();

        private Optional<String> authAwsArn = Optional.empty();

        private List<PropertyConnectionCategories> categories;

        private Optional<OffsetDateTime> createdAt = Optional.empty();

        private Optional<String> environment;

        private Optional<String> externalXref = Optional.empty();

        private Optional<String> id = Optional.empty();

        private Optional<String> integrationName = Optional.empty();

        private String integrationType;

        private Optional<Boolean> isPaused = Optional.empty();

        private Optional<OffsetDateTime> lastHealthyAt = Optional.empty();

        private Optional<OffsetDateTime> lastUnhealthyAt = Optional.empty();

        private List<PropertyConnectionPermissions> permissions;

        private Optional<OffsetDateTime> updatedAt = Optional.empty();

        private Optional<String> workspaceId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * An authentication object that represents a specific authorized user's connection to an integration.
         */
        public Builder auth(PropertyConnectionAuth auth) {
            Utils.checkNotNull(auth, "auth");
            this.auth = Optional.ofNullable(auth);
            return this;
        }

        /**
         * An authentication object that represents a specific authorized user's connection to an integration.
         */
        public Builder auth(Optional<? extends PropertyConnectionAuth> auth) {
            Utils.checkNotNull(auth, "auth");
            this.auth = auth;
            return this;
        }


        public Builder authAwsArn(String authAwsArn) {
            Utils.checkNotNull(authAwsArn, "authAwsArn");
            this.authAwsArn = Optional.ofNullable(authAwsArn);
            return this;
        }

        public Builder authAwsArn(Optional<String> authAwsArn) {
            Utils.checkNotNull(authAwsArn, "authAwsArn");
            this.authAwsArn = authAwsArn;
            return this;
        }


        /**
         * The Integration categories that this connection supports
         */
        public Builder categories(List<PropertyConnectionCategories> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }


        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }


        public Builder environment(String environment) {
            Utils.checkNotNull(environment, "environment");
            this.environment = Optional.ofNullable(environment);
            return this;
        }

        public Builder environment(Optional<String> environment) {
            Utils.checkNotNull(environment, "environment");
            this.environment = environment;
            return this;
        }


        public Builder externalXref(String externalXref) {
            Utils.checkNotNull(externalXref, "externalXref");
            this.externalXref = Optional.ofNullable(externalXref);
            return this;
        }

        public Builder externalXref(Optional<String> externalXref) {
            Utils.checkNotNull(externalXref, "externalXref");
            this.externalXref = externalXref;
            return this;
        }


        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }


        public Builder integrationName(String integrationName) {
            Utils.checkNotNull(integrationName, "integrationName");
            this.integrationName = Optional.ofNullable(integrationName);
            return this;
        }

        public Builder integrationName(Optional<String> integrationName) {
            Utils.checkNotNull(integrationName, "integrationName");
            this.integrationName = integrationName;
            return this;
        }


        public Builder integrationType(String integrationType) {
            Utils.checkNotNull(integrationType, "integrationType");
            this.integrationType = integrationType;
            return this;
        }


        public Builder isPaused(boolean isPaused) {
            Utils.checkNotNull(isPaused, "isPaused");
            this.isPaused = Optional.ofNullable(isPaused);
            return this;
        }

        public Builder isPaused(Optional<Boolean> isPaused) {
            Utils.checkNotNull(isPaused, "isPaused");
            this.isPaused = isPaused;
            return this;
        }


        public Builder lastHealthyAt(OffsetDateTime lastHealthyAt) {
            Utils.checkNotNull(lastHealthyAt, "lastHealthyAt");
            this.lastHealthyAt = Optional.ofNullable(lastHealthyAt);
            return this;
        }

        public Builder lastHealthyAt(Optional<OffsetDateTime> lastHealthyAt) {
            Utils.checkNotNull(lastHealthyAt, "lastHealthyAt");
            this.lastHealthyAt = lastHealthyAt;
            return this;
        }


        public Builder lastUnhealthyAt(OffsetDateTime lastUnhealthyAt) {
            Utils.checkNotNull(lastUnhealthyAt, "lastUnhealthyAt");
            this.lastUnhealthyAt = Optional.ofNullable(lastUnhealthyAt);
            return this;
        }

        public Builder lastUnhealthyAt(Optional<OffsetDateTime> lastUnhealthyAt) {
            Utils.checkNotNull(lastUnhealthyAt, "lastUnhealthyAt");
            this.lastUnhealthyAt = lastUnhealthyAt;
            return this;
        }


        public Builder permissions(List<PropertyConnectionPermissions> permissions) {
            Utils.checkNotNull(permissions, "permissions");
            this.permissions = permissions;
            return this;
        }


        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }


        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = Optional.ofNullable(workspaceId);
            return this;
        }

        public Builder workspaceId(Optional<String> workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }

        public Connection build() {
            if (environment == null) {
                environment = _SINGLETON_VALUE_Environment.value();
            }

            return new Connection(
                auth, authAwsArn, categories,
                createdAt, environment, externalXref,
                id, integrationName, integrationType,
                isPaused, lastHealthyAt, lastUnhealthyAt,
                permissions, updatedAt, workspaceId);
        }


        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Environment =
                new LazySingletonValue<>(
                        "environment",
                        "\"Production\"",
                        new TypeReference<Optional<String>>() {});
    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.SpeakeasyMetadata;
import to.unified.unified_java_sdk.utils.Utils;


public class ListAtsActivitiesRequest {
    /**
     * The application ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=application_id")
    private Optional<String> applicationId;

    /**
     * The candidate ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=candidate_id")
    private Optional<String> candidateId;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    /**
     * The document ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=document_id")
    private Optional<String> documentId;

    /**
     * Comma-delimited fields to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private Optional<? extends List<String>> fields;

    /**
     * The interview ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=interview_id")
    private Optional<String> interviewId;

    /**
     * The job ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=job_id")
    private Optional<String> jobId;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Double> limit;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Double> offset;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order")
    private Optional<String> order;

    /**
     * Query string to search. eg. email address or name
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private Optional<String> query;

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=raw")
    private Optional<String> raw;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private Optional<String> sort;

    /**
     * The type to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    private Optional<String> type;

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_gte")
    private Optional<String> updatedGte;

    /**
     * The user/employee ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")
    private Optional<String> userId;

    @JsonCreator
    public ListAtsActivitiesRequest(
            Optional<String> applicationId,
            Optional<String> candidateId,
            String connectionId,
            Optional<String> documentId,
            Optional<? extends List<String>> fields,
            Optional<String> interviewId,
            Optional<String> jobId,
            Optional<Double> limit,
            Optional<Double> offset,
            Optional<String> order,
            Optional<String> query,
            Optional<String> raw,
            Optional<String> sort,
            Optional<String> type,
            Optional<String> updatedGte,
            Optional<String> userId) {
        Utils.checkNotNull(applicationId, "applicationId");
        Utils.checkNotNull(candidateId, "candidateId");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(documentId, "documentId");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(interviewId, "interviewId");
        Utils.checkNotNull(jobId, "jobId");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedGte, "updatedGte");
        Utils.checkNotNull(userId, "userId");
        this.applicationId = applicationId;
        this.candidateId = candidateId;
        this.connectionId = connectionId;
        this.documentId = documentId;
        this.fields = fields;
        this.interviewId = interviewId;
        this.jobId = jobId;
        this.limit = limit;
        this.offset = offset;
        this.order = order;
        this.query = query;
        this.raw = raw;
        this.sort = sort;
        this.type = type;
        this.updatedGte = updatedGte;
        this.userId = userId;
    }
    
    public ListAtsActivitiesRequest(
            String connectionId) {
        this(Optional.empty(), Optional.empty(), connectionId,
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty());
    }

    /**
     * The application ID to filter by
     */
    @JsonIgnore
    public Optional<String> applicationId() {
        return applicationId;
    }

    /**
     * The candidate ID to filter by
     */
    @JsonIgnore
    public Optional<String> candidateId() {
        return candidateId;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * The document ID to filter by
     */
    @JsonIgnore
    public Optional<String> documentId() {
        return documentId;
    }

    /**
     * Comma-delimited fields to return
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> fields() {
        return (Optional<List<String>>) fields;
    }

    /**
     * The interview ID to filter by
     */
    @JsonIgnore
    public Optional<String> interviewId() {
        return interviewId;
    }

    /**
     * The job ID to filter by
     */
    @JsonIgnore
    public Optional<String> jobId() {
        return jobId;
    }

    @JsonIgnore
    public Optional<Double> limit() {
        return limit;
    }

    @JsonIgnore
    public Optional<Double> offset() {
        return offset;
    }

    @JsonIgnore
    public Optional<String> order() {
        return order;
    }

    /**
     * Query string to search. eg. email address or name
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    @JsonIgnore
    public Optional<String> raw() {
        return raw;
    }

    @JsonIgnore
    public Optional<String> sort() {
        return sort;
    }

    /**
     * The type to filter by
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    @JsonIgnore
    public Optional<String> updatedGte() {
        return updatedGte;
    }

    /**
     * The user/employee ID to filter by
     */
    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The application ID to filter by
     */
    public ListAtsActivitiesRequest withApplicationId(String applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = Optional.ofNullable(applicationId);
        return this;
    }


    /**
     * The application ID to filter by
     */
    public ListAtsActivitiesRequest withApplicationId(Optional<String> applicationId) {
        Utils.checkNotNull(applicationId, "applicationId");
        this.applicationId = applicationId;
        return this;
    }

    /**
     * The candidate ID to filter by
     */
    public ListAtsActivitiesRequest withCandidateId(String candidateId) {
        Utils.checkNotNull(candidateId, "candidateId");
        this.candidateId = Optional.ofNullable(candidateId);
        return this;
    }


    /**
     * The candidate ID to filter by
     */
    public ListAtsActivitiesRequest withCandidateId(Optional<String> candidateId) {
        Utils.checkNotNull(candidateId, "candidateId");
        this.candidateId = candidateId;
        return this;
    }

    /**
     * ID of the connection
     */
    public ListAtsActivitiesRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * The document ID to filter by
     */
    public ListAtsActivitiesRequest withDocumentId(String documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = Optional.ofNullable(documentId);
        return this;
    }


    /**
     * The document ID to filter by
     */
    public ListAtsActivitiesRequest withDocumentId(Optional<String> documentId) {
        Utils.checkNotNull(documentId, "documentId");
        this.documentId = documentId;
        return this;
    }

    /**
     * Comma-delimited fields to return
     */
    public ListAtsActivitiesRequest withFields(List<String> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }


    /**
     * Comma-delimited fields to return
     */
    public ListAtsActivitiesRequest withFields(Optional<? extends List<String>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * The interview ID to filter by
     */
    public ListAtsActivitiesRequest withInterviewId(String interviewId) {
        Utils.checkNotNull(interviewId, "interviewId");
        this.interviewId = Optional.ofNullable(interviewId);
        return this;
    }


    /**
     * The interview ID to filter by
     */
    public ListAtsActivitiesRequest withInterviewId(Optional<String> interviewId) {
        Utils.checkNotNull(interviewId, "interviewId");
        this.interviewId = interviewId;
        return this;
    }

    /**
     * The job ID to filter by
     */
    public ListAtsActivitiesRequest withJobId(String jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = Optional.ofNullable(jobId);
        return this;
    }


    /**
     * The job ID to filter by
     */
    public ListAtsActivitiesRequest withJobId(Optional<String> jobId) {
        Utils.checkNotNull(jobId, "jobId");
        this.jobId = jobId;
        return this;
    }

    public ListAtsActivitiesRequest withLimit(double limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    public ListAtsActivitiesRequest withLimit(Optional<Double> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public ListAtsActivitiesRequest withOffset(double offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }


    public ListAtsActivitiesRequest withOffset(Optional<Double> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    public ListAtsActivitiesRequest withOrder(String order) {
        Utils.checkNotNull(order, "order");
        this.order = Optional.ofNullable(order);
        return this;
    }


    public ListAtsActivitiesRequest withOrder(Optional<String> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    /**
     * Query string to search. eg. email address or name
     */
    public ListAtsActivitiesRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }


    /**
     * Query string to search. eg. email address or name
     */
    public ListAtsActivitiesRequest withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    public ListAtsActivitiesRequest withRaw(String raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    public ListAtsActivitiesRequest withRaw(Optional<String> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public ListAtsActivitiesRequest withSort(String sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }


    public ListAtsActivitiesRequest withSort(Optional<String> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    /**
     * The type to filter by
     */
    public ListAtsActivitiesRequest withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }


    /**
     * The type to filter by
     */
    public ListAtsActivitiesRequest withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    public ListAtsActivitiesRequest withUpdatedGte(String updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = Optional.ofNullable(updatedGte);
        return this;
    }


    /**
     * Return only results whose updated date is equal or greater to this value
     */
    public ListAtsActivitiesRequest withUpdatedGte(Optional<String> updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = updatedGte;
        return this;
    }

    /**
     * The user/employee ID to filter by
     */
    public ListAtsActivitiesRequest withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }


    /**
     * The user/employee ID to filter by
     */
    public ListAtsActivitiesRequest withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAtsActivitiesRequest other = (ListAtsActivitiesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.applicationId, other.applicationId) &&
            Utils.enhancedDeepEquals(this.candidateId, other.candidateId) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId) &&
            Utils.enhancedDeepEquals(this.documentId, other.documentId) &&
            Utils.enhancedDeepEquals(this.fields, other.fields) &&
            Utils.enhancedDeepEquals(this.interviewId, other.interviewId) &&
            Utils.enhancedDeepEquals(this.jobId, other.jobId) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.offset, other.offset) &&
            Utils.enhancedDeepEquals(this.order, other.order) &&
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.sort, other.sort) &&
            Utils.enhancedDeepEquals(this.type, other.type) &&
            Utils.enhancedDeepEquals(this.updatedGte, other.updatedGte) &&
            Utils.enhancedDeepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            applicationId, candidateId, connectionId,
            documentId, fields, interviewId,
            jobId, limit, offset,
            order, query, raw,
            sort, type, updatedGte,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAtsActivitiesRequest.class,
                "applicationId", applicationId,
                "candidateId", candidateId,
                "connectionId", connectionId,
                "documentId", documentId,
                "fields", fields,
                "interviewId", interviewId,
                "jobId", jobId,
                "limit", limit,
                "offset", offset,
                "order", order,
                "query", query,
                "raw", raw,
                "sort", sort,
                "type", type,
                "updatedGte", updatedGte,
                "userId", userId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> applicationId = Optional.empty();

        private Optional<String> candidateId = Optional.empty();

        private String connectionId;

        private Optional<String> documentId = Optional.empty();

        private Optional<? extends List<String>> fields = Optional.empty();

        private Optional<String> interviewId = Optional.empty();

        private Optional<String> jobId = Optional.empty();

        private Optional<Double> limit = Optional.empty();

        private Optional<Double> offset = Optional.empty();

        private Optional<String> order = Optional.empty();

        private Optional<String> query = Optional.empty();

        private Optional<String> raw = Optional.empty();

        private Optional<String> sort = Optional.empty();

        private Optional<String> type = Optional.empty();

        private Optional<String> updatedGte = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The application ID to filter by
         */
        public Builder applicationId(String applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = Optional.ofNullable(applicationId);
            return this;
        }

        /**
         * The application ID to filter by
         */
        public Builder applicationId(Optional<String> applicationId) {
            Utils.checkNotNull(applicationId, "applicationId");
            this.applicationId = applicationId;
            return this;
        }


        /**
         * The candidate ID to filter by
         */
        public Builder candidateId(String candidateId) {
            Utils.checkNotNull(candidateId, "candidateId");
            this.candidateId = Optional.ofNullable(candidateId);
            return this;
        }

        /**
         * The candidate ID to filter by
         */
        public Builder candidateId(Optional<String> candidateId) {
            Utils.checkNotNull(candidateId, "candidateId");
            this.candidateId = candidateId;
            return this;
        }


        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }


        /**
         * The document ID to filter by
         */
        public Builder documentId(String documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = Optional.ofNullable(documentId);
            return this;
        }

        /**
         * The document ID to filter by
         */
        public Builder documentId(Optional<String> documentId) {
            Utils.checkNotNull(documentId, "documentId");
            this.documentId = documentId;
            return this;
        }


        /**
         * Comma-delimited fields to return
         */
        public Builder fields(List<String> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * Comma-delimited fields to return
         */
        public Builder fields(Optional<? extends List<String>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }


        /**
         * The interview ID to filter by
         */
        public Builder interviewId(String interviewId) {
            Utils.checkNotNull(interviewId, "interviewId");
            this.interviewId = Optional.ofNullable(interviewId);
            return this;
        }

        /**
         * The interview ID to filter by
         */
        public Builder interviewId(Optional<String> interviewId) {
            Utils.checkNotNull(interviewId, "interviewId");
            this.interviewId = interviewId;
            return this;
        }


        /**
         * The job ID to filter by
         */
        public Builder jobId(String jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = Optional.ofNullable(jobId);
            return this;
        }

        /**
         * The job ID to filter by
         */
        public Builder jobId(Optional<String> jobId) {
            Utils.checkNotNull(jobId, "jobId");
            this.jobId = jobId;
            return this;
        }


        public Builder limit(double limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<Double> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        public Builder offset(double offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public Builder offset(Optional<Double> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }


        public Builder order(String order) {
            Utils.checkNotNull(order, "order");
            this.order = Optional.ofNullable(order);
            return this;
        }

        public Builder order(Optional<String> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }


        /**
         * Query string to search. eg. email address or name
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Query string to search. eg. email address or name
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }


        /**
         * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
         */
        public Builder raw(String raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        /**
         * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
         */
        public Builder raw(Optional<String> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder sort(String sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        public Builder sort(Optional<String> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }


        /**
         * The type to filter by
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type to filter by
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }


        /**
         * Return only results whose updated date is equal or greater to this value
         */
        public Builder updatedGte(String updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = Optional.ofNullable(updatedGte);
            return this;
        }

        /**
         * Return only results whose updated date is equal or greater to this value
         */
        public Builder updatedGte(Optional<String> updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = updatedGte;
            return this;
        }


        /**
         * The user/employee ID to filter by
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * The user/employee ID to filter by
         */
        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public ListAtsActivitiesRequest build() {

            return new ListAtsActivitiesRequest(
                applicationId, candidateId, connectionId,
                documentId, fields, interviewId,
                jobId, limit, offset,
                order, query, raw,
                sort, type, updatedGte,
                userId);
        }

    }
}

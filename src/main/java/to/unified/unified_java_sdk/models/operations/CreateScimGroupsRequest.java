/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import to.unified.unified_java_sdk.models.shared.ScimGroup;
import to.unified.unified_java_sdk.utils.SpeakeasyMetadata;
import to.unified.unified_java_sdk.utils.Utils;

public class CreateScimGroupsRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private ScimGroup scimGroup;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    @JsonCreator
    public CreateScimGroupsRequest(
            ScimGroup scimGroup,
            String connectionId) {
        Utils.checkNotNull(scimGroup, "scimGroup");
        Utils.checkNotNull(connectionId, "connectionId");
        this.scimGroup = scimGroup;
        this.connectionId = connectionId;
    }

    @JsonIgnore
    public ScimGroup scimGroup() {
        return scimGroup;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public CreateScimGroupsRequest withScimGroup(ScimGroup scimGroup) {
        Utils.checkNotNull(scimGroup, "scimGroup");
        this.scimGroup = scimGroup;
        return this;
    }

    /**
     * ID of the connection
     */
    public CreateScimGroupsRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateScimGroupsRequest other = (CreateScimGroupsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.scimGroup, other.scimGroup) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            scimGroup,
            connectionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateScimGroupsRequest.class,
                "scimGroup", scimGroup,
                "connectionId", connectionId);
    }
    
    public final static class Builder {
 
        private ScimGroup scimGroup;
 
        private String connectionId;
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder scimGroup(ScimGroup scimGroup) {
            Utils.checkNotNull(scimGroup, "scimGroup");
            this.scimGroup = scimGroup;
            return this;
        }

        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }
        
        public CreateScimGroupsRequest build() {
            return new CreateScimGroupsRequest(
                scimGroup,
                connectionId);
        }
    }
}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.operations.async;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Integer;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.models.shared.AtsInterview;
import to.unified.unified_java_sdk.utils.AsyncResponse;
import to.unified.unified_java_sdk.utils.Blob;
import to.unified.unified_java_sdk.utils.Utils;


public class ListAtsInterviewsResponse implements AsyncResponse {
    /**
     * Successful
     */
    private Optional<? extends List<AtsInterview>> atsInterviews;

    /**
     * HTTP response content type for this operation
     */
    private String contentType;

    /**
     * HTTP response status code for this operation
     */
    private int statusCode;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    private HttpResponse<Blob> rawResponse;

    @JsonCreator
    public ListAtsInterviewsResponse(
            Optional<? extends List<AtsInterview>> atsInterviews,
            String contentType,
            int statusCode,
            HttpResponse<Blob> rawResponse) {
        Utils.checkNotNull(atsInterviews, "atsInterviews");
        Utils.checkNotNull(contentType, "contentType");
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.atsInterviews = atsInterviews;
        this.contentType = contentType;
        this.statusCode = statusCode;
        this.rawResponse = rawResponse;
    }
    
    public ListAtsInterviewsResponse(
            String contentType,
            int statusCode,
            HttpResponse<Blob> rawResponse) {
        this(Optional.empty(), contentType, statusCode,
            rawResponse);
    }

    /**
     * Successful
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<AtsInterview>> atsInterviews() {
        return (Optional<List<AtsInterview>>) atsInterviews;
    }

    /**
     * HTTP response content type for this operation
     */
    @JsonIgnore
    public String contentType() {
        return contentType;
    }

    /**
     * HTTP response status code for this operation
     */
    @JsonIgnore
    public int statusCode() {
        return statusCode;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonIgnore
    public HttpResponse<Blob> rawResponse() {
        return rawResponse;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Successful
     */
    public ListAtsInterviewsResponse withAtsInterviews(List<AtsInterview> atsInterviews) {
        Utils.checkNotNull(atsInterviews, "atsInterviews");
        this.atsInterviews = Optional.ofNullable(atsInterviews);
        return this;
    }


    /**
     * Successful
     */
    public ListAtsInterviewsResponse withAtsInterviews(Optional<? extends List<AtsInterview>> atsInterviews) {
        Utils.checkNotNull(atsInterviews, "atsInterviews");
        this.atsInterviews = atsInterviews;
        return this;
    }

    /**
     * HTTP response content type for this operation
     */
    public ListAtsInterviewsResponse withContentType(String contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    /**
     * HTTP response status code for this operation
     */
    public ListAtsInterviewsResponse withStatusCode(int statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public ListAtsInterviewsResponse withRawResponse(HttpResponse<Blob> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListAtsInterviewsResponse other = (ListAtsInterviewsResponse) o;
        return 
            Utils.enhancedDeepEquals(this.atsInterviews, other.atsInterviews) &&
            Utils.enhancedDeepEquals(this.contentType, other.contentType) &&
            Utils.enhancedDeepEquals(this.statusCode, other.statusCode) &&
            Utils.enhancedDeepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            atsInterviews, contentType, statusCode,
            rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListAtsInterviewsResponse.class,
                "atsInterviews", atsInterviews,
                "contentType", contentType,
                "statusCode", statusCode,
                "rawResponse", rawResponse);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<? extends List<AtsInterview>> atsInterviews = Optional.empty();

        private String contentType;

        private Integer statusCode;

        private HttpResponse<Blob> rawResponse;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Successful
         */
        public Builder atsInterviews(List<AtsInterview> atsInterviews) {
            Utils.checkNotNull(atsInterviews, "atsInterviews");
            this.atsInterviews = Optional.ofNullable(atsInterviews);
            return this;
        }

        /**
         * Successful
         */
        public Builder atsInterviews(Optional<? extends List<AtsInterview>> atsInterviews) {
            Utils.checkNotNull(atsInterviews, "atsInterviews");
            this.atsInterviews = atsInterviews;
            return this;
        }


        /**
         * HTTP response content type for this operation
         */
        public Builder contentType(String contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }


        /**
         * HTTP response status code for this operation
         */
        public Builder statusCode(int statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }


        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<Blob> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }

        public ListAtsInterviewsResponse build() {

            return new ListAtsInterviewsResponse(
                atsInterviews, contentType, statusCode,
                rawResponse);
        }

    }
}

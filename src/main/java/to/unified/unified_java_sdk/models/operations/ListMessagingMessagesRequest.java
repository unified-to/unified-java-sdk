/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.SpeakeasyMetadata;
import to.unified.unified_java_sdk.utils.Utils;


public class ListMessagingMessagesRequest {
    /**
     * The channel ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=channel_id")
    private Optional<String> channelId;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    /**
     * The end date to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end_le")
    private Optional<String> endLe;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=expand")
    private Optional<String> expand;

    /**
     * Comma-delimited fields to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private Optional<? extends List<String>> fields;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Double> limit;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Double> offset;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order")
    private Optional<String> order;

    /**
     * The parent ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=parent_id")
    private Optional<String> parentId;

    /**
     * Query string to search. eg. email address or name
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private Optional<String> query;

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=raw")
    private Optional<String> raw;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private Optional<String> sort;

    /**
     * The start date to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start_gte")
    private Optional<String> startGte;

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_gte")
    private Optional<String> updatedGte;

    @JsonCreator
    public ListMessagingMessagesRequest(
            Optional<String> channelId,
            String connectionId,
            Optional<String> endLe,
            Optional<String> expand,
            Optional<? extends List<String>> fields,
            Optional<Double> limit,
            Optional<Double> offset,
            Optional<String> order,
            Optional<String> parentId,
            Optional<String> query,
            Optional<String> raw,
            Optional<String> sort,
            Optional<String> startGte,
            Optional<String> updatedGte) {
        Utils.checkNotNull(channelId, "channelId");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(endLe, "endLe");
        Utils.checkNotNull(expand, "expand");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(startGte, "startGte");
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.channelId = channelId;
        this.connectionId = connectionId;
        this.endLe = endLe;
        this.expand = expand;
        this.fields = fields;
        this.limit = limit;
        this.offset = offset;
        this.order = order;
        this.parentId = parentId;
        this.query = query;
        this.raw = raw;
        this.sort = sort;
        this.startGte = startGte;
        this.updatedGte = updatedGte;
    }
    
    public ListMessagingMessagesRequest(
            String connectionId) {
        this(Optional.empty(), connectionId, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * The channel ID to filter by
     */
    @JsonIgnore
    public Optional<String> channelId() {
        return channelId;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * The end date to filter by
     */
    @JsonIgnore
    public Optional<String> endLe() {
        return endLe;
    }

    @JsonIgnore
    public Optional<String> expand() {
        return expand;
    }

    /**
     * Comma-delimited fields to return
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> fields() {
        return (Optional<List<String>>) fields;
    }

    @JsonIgnore
    public Optional<Double> limit() {
        return limit;
    }

    @JsonIgnore
    public Optional<Double> offset() {
        return offset;
    }

    @JsonIgnore
    public Optional<String> order() {
        return order;
    }

    /**
     * The parent ID to filter by
     */
    @JsonIgnore
    public Optional<String> parentId() {
        return parentId;
    }

    /**
     * Query string to search. eg. email address or name
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    @JsonIgnore
    public Optional<String> raw() {
        return raw;
    }

    @JsonIgnore
    public Optional<String> sort() {
        return sort;
    }

    /**
     * The start date to filter by
     */
    @JsonIgnore
    public Optional<String> startGte() {
        return startGte;
    }

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    @JsonIgnore
    public Optional<String> updatedGte() {
        return updatedGte;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The channel ID to filter by
     */
    public ListMessagingMessagesRequest withChannelId(String channelId) {
        Utils.checkNotNull(channelId, "channelId");
        this.channelId = Optional.ofNullable(channelId);
        return this;
    }


    /**
     * The channel ID to filter by
     */
    public ListMessagingMessagesRequest withChannelId(Optional<String> channelId) {
        Utils.checkNotNull(channelId, "channelId");
        this.channelId = channelId;
        return this;
    }

    /**
     * ID of the connection
     */
    public ListMessagingMessagesRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * The end date to filter by
     */
    public ListMessagingMessagesRequest withEndLe(String endLe) {
        Utils.checkNotNull(endLe, "endLe");
        this.endLe = Optional.ofNullable(endLe);
        return this;
    }


    /**
     * The end date to filter by
     */
    public ListMessagingMessagesRequest withEndLe(Optional<String> endLe) {
        Utils.checkNotNull(endLe, "endLe");
        this.endLe = endLe;
        return this;
    }

    public ListMessagingMessagesRequest withExpand(String expand) {
        Utils.checkNotNull(expand, "expand");
        this.expand = Optional.ofNullable(expand);
        return this;
    }


    public ListMessagingMessagesRequest withExpand(Optional<String> expand) {
        Utils.checkNotNull(expand, "expand");
        this.expand = expand;
        return this;
    }

    /**
     * Comma-delimited fields to return
     */
    public ListMessagingMessagesRequest withFields(List<String> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }


    /**
     * Comma-delimited fields to return
     */
    public ListMessagingMessagesRequest withFields(Optional<? extends List<String>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    public ListMessagingMessagesRequest withLimit(double limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    public ListMessagingMessagesRequest withLimit(Optional<Double> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public ListMessagingMessagesRequest withOffset(double offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }


    public ListMessagingMessagesRequest withOffset(Optional<Double> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    public ListMessagingMessagesRequest withOrder(String order) {
        Utils.checkNotNull(order, "order");
        this.order = Optional.ofNullable(order);
        return this;
    }


    public ListMessagingMessagesRequest withOrder(Optional<String> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    /**
     * The parent ID to filter by
     */
    public ListMessagingMessagesRequest withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = Optional.ofNullable(parentId);
        return this;
    }


    /**
     * The parent ID to filter by
     */
    public ListMessagingMessagesRequest withParentId(Optional<String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    /**
     * Query string to search. eg. email address or name
     */
    public ListMessagingMessagesRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }


    /**
     * Query string to search. eg. email address or name
     */
    public ListMessagingMessagesRequest withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    public ListMessagingMessagesRequest withRaw(String raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    public ListMessagingMessagesRequest withRaw(Optional<String> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public ListMessagingMessagesRequest withSort(String sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }


    public ListMessagingMessagesRequest withSort(Optional<String> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    /**
     * The start date to filter by
     */
    public ListMessagingMessagesRequest withStartGte(String startGte) {
        Utils.checkNotNull(startGte, "startGte");
        this.startGte = Optional.ofNullable(startGte);
        return this;
    }


    /**
     * The start date to filter by
     */
    public ListMessagingMessagesRequest withStartGte(Optional<String> startGte) {
        Utils.checkNotNull(startGte, "startGte");
        this.startGte = startGte;
        return this;
    }

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    public ListMessagingMessagesRequest withUpdatedGte(String updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = Optional.ofNullable(updatedGte);
        return this;
    }


    /**
     * Return only results whose updated date is equal or greater to this value
     */
    public ListMessagingMessagesRequest withUpdatedGte(Optional<String> updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = updatedGte;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListMessagingMessagesRequest other = (ListMessagingMessagesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.channelId, other.channelId) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId) &&
            Utils.enhancedDeepEquals(this.endLe, other.endLe) &&
            Utils.enhancedDeepEquals(this.expand, other.expand) &&
            Utils.enhancedDeepEquals(this.fields, other.fields) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.offset, other.offset) &&
            Utils.enhancedDeepEquals(this.order, other.order) &&
            Utils.enhancedDeepEquals(this.parentId, other.parentId) &&
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.sort, other.sort) &&
            Utils.enhancedDeepEquals(this.startGte, other.startGte) &&
            Utils.enhancedDeepEquals(this.updatedGte, other.updatedGte);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            channelId, connectionId, endLe,
            expand, fields, limit,
            offset, order, parentId,
            query, raw, sort,
            startGte, updatedGte);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListMessagingMessagesRequest.class,
                "channelId", channelId,
                "connectionId", connectionId,
                "endLe", endLe,
                "expand", expand,
                "fields", fields,
                "limit", limit,
                "offset", offset,
                "order", order,
                "parentId", parentId,
                "query", query,
                "raw", raw,
                "sort", sort,
                "startGte", startGte,
                "updatedGte", updatedGte);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> channelId = Optional.empty();

        private String connectionId;

        private Optional<String> endLe = Optional.empty();

        private Optional<String> expand = Optional.empty();

        private Optional<? extends List<String>> fields = Optional.empty();

        private Optional<Double> limit = Optional.empty();

        private Optional<Double> offset = Optional.empty();

        private Optional<String> order = Optional.empty();

        private Optional<String> parentId = Optional.empty();

        private Optional<String> query = Optional.empty();

        private Optional<String> raw = Optional.empty();

        private Optional<String> sort = Optional.empty();

        private Optional<String> startGte = Optional.empty();

        private Optional<String> updatedGte = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The channel ID to filter by
         */
        public Builder channelId(String channelId) {
            Utils.checkNotNull(channelId, "channelId");
            this.channelId = Optional.ofNullable(channelId);
            return this;
        }

        /**
         * The channel ID to filter by
         */
        public Builder channelId(Optional<String> channelId) {
            Utils.checkNotNull(channelId, "channelId");
            this.channelId = channelId;
            return this;
        }


        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }


        /**
         * The end date to filter by
         */
        public Builder endLe(String endLe) {
            Utils.checkNotNull(endLe, "endLe");
            this.endLe = Optional.ofNullable(endLe);
            return this;
        }

        /**
         * The end date to filter by
         */
        public Builder endLe(Optional<String> endLe) {
            Utils.checkNotNull(endLe, "endLe");
            this.endLe = endLe;
            return this;
        }


        public Builder expand(String expand) {
            Utils.checkNotNull(expand, "expand");
            this.expand = Optional.ofNullable(expand);
            return this;
        }

        public Builder expand(Optional<String> expand) {
            Utils.checkNotNull(expand, "expand");
            this.expand = expand;
            return this;
        }


        /**
         * Comma-delimited fields to return
         */
        public Builder fields(List<String> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * Comma-delimited fields to return
         */
        public Builder fields(Optional<? extends List<String>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }


        public Builder limit(double limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<Double> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        public Builder offset(double offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public Builder offset(Optional<Double> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }


        public Builder order(String order) {
            Utils.checkNotNull(order, "order");
            this.order = Optional.ofNullable(order);
            return this;
        }

        public Builder order(Optional<String> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }


        /**
         * The parent ID to filter by
         */
        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = Optional.ofNullable(parentId);
            return this;
        }

        /**
         * The parent ID to filter by
         */
        public Builder parentId(Optional<String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }


        /**
         * Query string to search. eg. email address or name
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Query string to search. eg. email address or name
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }


        /**
         * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
         */
        public Builder raw(String raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        /**
         * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
         */
        public Builder raw(Optional<String> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder sort(String sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        public Builder sort(Optional<String> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }


        /**
         * The start date to filter by
         */
        public Builder startGte(String startGte) {
            Utils.checkNotNull(startGte, "startGte");
            this.startGte = Optional.ofNullable(startGte);
            return this;
        }

        /**
         * The start date to filter by
         */
        public Builder startGte(Optional<String> startGte) {
            Utils.checkNotNull(startGte, "startGte");
            this.startGte = startGte;
            return this;
        }


        /**
         * Return only results whose updated date is equal or greater to this value
         */
        public Builder updatedGte(String updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = Optional.ofNullable(updatedGte);
            return this;
        }

        /**
         * Return only results whose updated date is equal or greater to this value
         */
        public Builder updatedGte(Optional<String> updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = updatedGte;
            return this;
        }

        public ListMessagingMessagesRequest build() {

            return new ListMessagingMessagesRequest(
                channelId, connectionId, endLe,
                expand, fields, limit,
                offset, order, parentId,
                query, raw, sort,
                startGte, updatedGte);
        }

    }
}

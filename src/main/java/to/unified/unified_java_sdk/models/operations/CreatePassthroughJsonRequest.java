/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.SpeakeasyMetadata;
import to.unified.unified_java_sdk.utils.Utils;

public class CreatePassthroughJsonRequest {

    /**
     * integration-specific payload
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends Object> requestBody;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=path")
    private String path;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private Optional<? extends Map<String, Object>> query;

    @JsonCreator
    public CreatePassthroughJsonRequest(
            Optional<? extends Object> requestBody,
            String connectionId,
            String path,
            Optional<? extends Map<String, Object>> query) {
        Utils.checkNotNull(requestBody, "requestBody");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(query, "query");
        this.requestBody = requestBody;
        this.connectionId = connectionId;
        this.path = path;
        this.query = query;
    }
    
    public CreatePassthroughJsonRequest(
            String connectionId,
            String path) {
        this(Optional.empty(), connectionId, path, Optional.empty());
    }

    /**
     * integration-specific payload
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> requestBody() {
        return (Optional<Object>) requestBody;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    @JsonIgnore
    public String path() {
        return path;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> query() {
        return (Optional<Map<String, Object>>) query;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * integration-specific payload
     */
    public CreatePassthroughJsonRequest withRequestBody(Object requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = Optional.ofNullable(requestBody);
        return this;
    }

    /**
     * integration-specific payload
     */
    public CreatePassthroughJsonRequest withRequestBody(Optional<? extends Object> requestBody) {
        Utils.checkNotNull(requestBody, "requestBody");
        this.requestBody = requestBody;
        return this;
    }

    /**
     * ID of the connection
     */
    public CreatePassthroughJsonRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    public CreatePassthroughJsonRequest withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    public CreatePassthroughJsonRequest withQuery(Map<String, Object> query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }

    public CreatePassthroughJsonRequest withQuery(Optional<? extends Map<String, Object>> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreatePassthroughJsonRequest other = (CreatePassthroughJsonRequest) o;
        return 
            Objects.deepEquals(this.requestBody, other.requestBody) &&
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.path, other.path) &&
            Objects.deepEquals(this.query, other.query);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestBody,
            connectionId,
            path,
            query);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreatePassthroughJsonRequest.class,
                "requestBody", requestBody,
                "connectionId", connectionId,
                "path", path,
                "query", query);
    }
    
    public final static class Builder {
 
        private Optional<? extends Object> requestBody = Optional.empty();
 
        private String connectionId;
 
        private String path;
 
        private Optional<? extends Map<String, Object>> query = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * integration-specific payload
         */
        public Builder requestBody(Object requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = Optional.ofNullable(requestBody);
            return this;
        }

        /**
         * integration-specific payload
         */
        public Builder requestBody(Optional<? extends Object> requestBody) {
            Utils.checkNotNull(requestBody, "requestBody");
            this.requestBody = requestBody;
            return this;
        }

        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        public Builder query(Map<String, Object> query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        public Builder query(Optional<? extends Map<String, Object>> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }
        
        public CreatePassthroughJsonRequest build() {
            return new CreatePassthroughJsonRequest(
                requestBody,
                connectionId,
                path,
                query);
        }
    }
}

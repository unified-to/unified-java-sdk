/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.SpeakeasyMetadata;
import to.unified.unified_java_sdk.utils.Utils;

public class ListEnrichPeopleRequest {

    /**
     * The name of the company the person is associated with.  Not valid by itself.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=company_name")
    private Optional<String> companyName;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    /**
     * The email of the person to search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=email")
    private Optional<String> email;

    /**
     * The LinkedIn URL of the person to search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=linkedin_url")
    private Optional<String> linkedinUrl;

    /**
     * The name of the person to search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=name")
    private Optional<String> name;

    /**
     * The twitter handle of the person to search
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=twitter")
    private Optional<String> twitter;

    @JsonCreator
    public ListEnrichPeopleRequest(
            Optional<String> companyName,
            String connectionId,
            Optional<String> email,
            Optional<String> linkedinUrl,
            Optional<String> name,
            Optional<String> twitter) {
        Utils.checkNotNull(companyName, "companyName");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(linkedinUrl, "linkedinUrl");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(twitter, "twitter");
        this.companyName = companyName;
        this.connectionId = connectionId;
        this.email = email;
        this.linkedinUrl = linkedinUrl;
        this.name = name;
        this.twitter = twitter;
    }
    
    public ListEnrichPeopleRequest(
            String connectionId) {
        this(Optional.empty(), connectionId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the company the person is associated with.  Not valid by itself.
     */
    @JsonIgnore
    public Optional<String> companyName() {
        return companyName;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * The email of the person to search
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * The LinkedIn URL of the person to search
     */
    @JsonIgnore
    public Optional<String> linkedinUrl() {
        return linkedinUrl;
    }

    /**
     * The name of the person to search
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The twitter handle of the person to search
     */
    @JsonIgnore
    public Optional<String> twitter() {
        return twitter;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    /**
     * The name of the company the person is associated with.  Not valid by itself.
     */
    public ListEnrichPeopleRequest withCompanyName(String companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = Optional.ofNullable(companyName);
        return this;
    }

    /**
     * The name of the company the person is associated with.  Not valid by itself.
     */
    public ListEnrichPeopleRequest withCompanyName(Optional<String> companyName) {
        Utils.checkNotNull(companyName, "companyName");
        this.companyName = companyName;
        return this;
    }

    /**
     * ID of the connection
     */
    public ListEnrichPeopleRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * The email of the person to search
     */
    public ListEnrichPeopleRequest withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * The email of the person to search
     */
    public ListEnrichPeopleRequest withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The LinkedIn URL of the person to search
     */
    public ListEnrichPeopleRequest withLinkedinUrl(String linkedinUrl) {
        Utils.checkNotNull(linkedinUrl, "linkedinUrl");
        this.linkedinUrl = Optional.ofNullable(linkedinUrl);
        return this;
    }

    /**
     * The LinkedIn URL of the person to search
     */
    public ListEnrichPeopleRequest withLinkedinUrl(Optional<String> linkedinUrl) {
        Utils.checkNotNull(linkedinUrl, "linkedinUrl");
        this.linkedinUrl = linkedinUrl;
        return this;
    }

    /**
     * The name of the person to search
     */
    public ListEnrichPeopleRequest withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the person to search
     */
    public ListEnrichPeopleRequest withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The twitter handle of the person to search
     */
    public ListEnrichPeopleRequest withTwitter(String twitter) {
        Utils.checkNotNull(twitter, "twitter");
        this.twitter = Optional.ofNullable(twitter);
        return this;
    }

    /**
     * The twitter handle of the person to search
     */
    public ListEnrichPeopleRequest withTwitter(Optional<String> twitter) {
        Utils.checkNotNull(twitter, "twitter");
        this.twitter = twitter;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListEnrichPeopleRequest other = (ListEnrichPeopleRequest) o;
        return 
            Objects.deepEquals(this.companyName, other.companyName) &&
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.linkedinUrl, other.linkedinUrl) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.twitter, other.twitter);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyName,
            connectionId,
            email,
            linkedinUrl,
            name,
            twitter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListEnrichPeopleRequest.class,
                "companyName", companyName,
                "connectionId", connectionId,
                "email", email,
                "linkedinUrl", linkedinUrl,
                "name", name,
                "twitter", twitter);
    }
    
    public final static class Builder {
 
        private Optional<String> companyName = Optional.empty();
 
        private String connectionId;
 
        private Optional<String> email = Optional.empty();
 
        private Optional<String> linkedinUrl = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> twitter = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the company the person is associated with.  Not valid by itself.
         */
        public Builder companyName(String companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = Optional.ofNullable(companyName);
            return this;
        }

        /**
         * The name of the company the person is associated with.  Not valid by itself.
         */
        public Builder companyName(Optional<String> companyName) {
            Utils.checkNotNull(companyName, "companyName");
            this.companyName = companyName;
            return this;
        }

        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * The email of the person to search
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The email of the person to search
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The LinkedIn URL of the person to search
         */
        public Builder linkedinUrl(String linkedinUrl) {
            Utils.checkNotNull(linkedinUrl, "linkedinUrl");
            this.linkedinUrl = Optional.ofNullable(linkedinUrl);
            return this;
        }

        /**
         * The LinkedIn URL of the person to search
         */
        public Builder linkedinUrl(Optional<String> linkedinUrl) {
            Utils.checkNotNull(linkedinUrl, "linkedinUrl");
            this.linkedinUrl = linkedinUrl;
            return this;
        }

        /**
         * The name of the person to search
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the person to search
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The twitter handle of the person to search
         */
        public Builder twitter(String twitter) {
            Utils.checkNotNull(twitter, "twitter");
            this.twitter = Optional.ofNullable(twitter);
            return this;
        }

        /**
         * The twitter handle of the person to search
         */
        public Builder twitter(Optional<String> twitter) {
            Utils.checkNotNull(twitter, "twitter");
            this.twitter = twitter;
            return this;
        }
        
        public ListEnrichPeopleRequest build() {
            return new ListEnrichPeopleRequest(
                companyName,
                connectionId,
                email,
                linkedinUrl,
                name,
                twitter);
        }
    }
}

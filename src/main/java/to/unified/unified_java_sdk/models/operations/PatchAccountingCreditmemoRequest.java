/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.models.shared.AccountingCreditmemo;
import to.unified.unified_java_sdk.utils.SpeakeasyMetadata;
import to.unified.unified_java_sdk.utils.Utils;

public class PatchAccountingCreditmemoRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private AccountingCreditmemo accountingCreditmemo;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    /**
     * Comma-delimited fields to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private Optional<? extends List<String>> fields;

    /**
     * ID of the Creditmemo
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=raw")
    private Optional<String> raw;

    @JsonCreator
    public PatchAccountingCreditmemoRequest(
            AccountingCreditmemo accountingCreditmemo,
            String connectionId,
            Optional<? extends List<String>> fields,
            String id,
            Optional<String> raw) {
        Utils.checkNotNull(accountingCreditmemo, "accountingCreditmemo");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(raw, "raw");
        this.accountingCreditmemo = accountingCreditmemo;
        this.connectionId = connectionId;
        this.fields = fields;
        this.id = id;
        this.raw = raw;
    }
    
    public PatchAccountingCreditmemoRequest(
            AccountingCreditmemo accountingCreditmemo,
            String connectionId,
            String id) {
        this(accountingCreditmemo, connectionId, Optional.empty(), id, Optional.empty());
    }

    @JsonIgnore
    public AccountingCreditmemo accountingCreditmemo() {
        return accountingCreditmemo;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * Comma-delimited fields to return
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> fields() {
        return (Optional<List<String>>) fields;
    }

    /**
     * ID of the Creditmemo
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    @JsonIgnore
    public Optional<String> raw() {
        return raw;
    }

    public final static Builder builder() {
        return new Builder();
    }    

    public PatchAccountingCreditmemoRequest withAccountingCreditmemo(AccountingCreditmemo accountingCreditmemo) {
        Utils.checkNotNull(accountingCreditmemo, "accountingCreditmemo");
        this.accountingCreditmemo = accountingCreditmemo;
        return this;
    }

    /**
     * ID of the connection
     */
    public PatchAccountingCreditmemoRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * Comma-delimited fields to return
     */
    public PatchAccountingCreditmemoRequest withFields(List<String> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }

    /**
     * Comma-delimited fields to return
     */
    public PatchAccountingCreditmemoRequest withFields(Optional<? extends List<String>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    /**
     * ID of the Creditmemo
     */
    public PatchAccountingCreditmemoRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    public PatchAccountingCreditmemoRequest withRaw(String raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    public PatchAccountingCreditmemoRequest withRaw(Optional<String> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PatchAccountingCreditmemoRequest other = (PatchAccountingCreditmemoRequest) o;
        return 
            Utils.enhancedDeepEquals(this.accountingCreditmemo, other.accountingCreditmemo) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId) &&
            Utils.enhancedDeepEquals(this.fields, other.fields) &&
            Utils.enhancedDeepEquals(this.id, other.id) &&
            Utils.enhancedDeepEquals(this.raw, other.raw);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            accountingCreditmemo,
            connectionId,
            fields,
            id,
            raw);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PatchAccountingCreditmemoRequest.class,
                "accountingCreditmemo", accountingCreditmemo,
                "connectionId", connectionId,
                "fields", fields,
                "id", id,
                "raw", raw);
    }
    
    public final static class Builder {
 
        private AccountingCreditmemo accountingCreditmemo;
 
        private String connectionId;
 
        private Optional<? extends List<String>> fields = Optional.empty();
 
        private String id;
 
        private Optional<String> raw = Optional.empty();
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountingCreditmemo(AccountingCreditmemo accountingCreditmemo) {
            Utils.checkNotNull(accountingCreditmemo, "accountingCreditmemo");
            this.accountingCreditmemo = accountingCreditmemo;
            return this;
        }

        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * Comma-delimited fields to return
         */
        public Builder fields(List<String> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * Comma-delimited fields to return
         */
        public Builder fields(Optional<? extends List<String>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }

        /**
         * ID of the Creditmemo
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
         */
        public Builder raw(String raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        /**
         * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
         */
        public Builder raw(Optional<String> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }
        
        public PatchAccountingCreditmemoRequest build() {
            return new PatchAccountingCreditmemoRequest(
                accountingCreditmemo,
                connectionId,
                fields,
                id,
                raw);
        }
    }
}

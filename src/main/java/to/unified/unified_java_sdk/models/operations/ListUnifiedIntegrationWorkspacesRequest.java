/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.SpeakeasyMetadata;
import to.unified.unified_java_sdk.utils.Utils;


public class ListUnifiedIntegrationWorkspacesRequest {
    /**
     * Filter the results for only the workspace's active integrations
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=active")
    private Optional<Boolean> active;

    /**
     * Filter the results on these categories
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=categories")
    private Optional<? extends List<QueryParamCategories>> categories;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=env")
    private Optional<String> env;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Double> limit;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Double> offset;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=summary")
    private Optional<Boolean> summary;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_gte")
    private Optional<String> updatedGte;

    /**
     * The ID of the workspace
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workspace_id")
    private String workspaceId;

    @JsonCreator
    public ListUnifiedIntegrationWorkspacesRequest(
            Optional<Boolean> active,
            Optional<? extends List<QueryParamCategories>> categories,
            Optional<String> env,
            Optional<Double> limit,
            Optional<Double> offset,
            Optional<Boolean> summary,
            Optional<String> updatedGte,
            String workspaceId) {
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(env, "env");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(updatedGte, "updatedGte");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.active = active;
        this.categories = categories;
        this.env = env;
        this.limit = limit;
        this.offset = offset;
        this.summary = summary;
        this.updatedGte = updatedGte;
        this.workspaceId = workspaceId;
    }
    
    public ListUnifiedIntegrationWorkspacesRequest(
            String workspaceId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), workspaceId);
    }

    /**
     * Filter the results for only the workspace's active integrations
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * Filter the results on these categories
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<QueryParamCategories>> categories() {
        return (Optional<List<QueryParamCategories>>) categories;
    }

    @JsonIgnore
    public Optional<String> env() {
        return env;
    }

    @JsonIgnore
    public Optional<Double> limit() {
        return limit;
    }

    @JsonIgnore
    public Optional<Double> offset() {
        return offset;
    }

    @JsonIgnore
    public Optional<Boolean> summary() {
        return summary;
    }

    @JsonIgnore
    public Optional<String> updatedGte() {
        return updatedGte;
    }

    /**
     * The ID of the workspace
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * Filter the results for only the workspace's active integrations
     */
    public ListUnifiedIntegrationWorkspacesRequest withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }


    /**
     * Filter the results for only the workspace's active integrations
     */
    public ListUnifiedIntegrationWorkspacesRequest withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * Filter the results on these categories
     */
    public ListUnifiedIntegrationWorkspacesRequest withCategories(List<QueryParamCategories> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = Optional.ofNullable(categories);
        return this;
    }


    /**
     * Filter the results on these categories
     */
    public ListUnifiedIntegrationWorkspacesRequest withCategories(Optional<? extends List<QueryParamCategories>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    public ListUnifiedIntegrationWorkspacesRequest withEnv(String env) {
        Utils.checkNotNull(env, "env");
        this.env = Optional.ofNullable(env);
        return this;
    }


    public ListUnifiedIntegrationWorkspacesRequest withEnv(Optional<String> env) {
        Utils.checkNotNull(env, "env");
        this.env = env;
        return this;
    }

    public ListUnifiedIntegrationWorkspacesRequest withLimit(double limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    public ListUnifiedIntegrationWorkspacesRequest withLimit(Optional<Double> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public ListUnifiedIntegrationWorkspacesRequest withOffset(double offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }


    public ListUnifiedIntegrationWorkspacesRequest withOffset(Optional<Double> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    public ListUnifiedIntegrationWorkspacesRequest withSummary(boolean summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }


    public ListUnifiedIntegrationWorkspacesRequest withSummary(Optional<Boolean> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    public ListUnifiedIntegrationWorkspacesRequest withUpdatedGte(String updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = Optional.ofNullable(updatedGte);
        return this;
    }


    public ListUnifiedIntegrationWorkspacesRequest withUpdatedGte(Optional<String> updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = updatedGte;
        return this;
    }

    /**
     * The ID of the workspace
     */
    public ListUnifiedIntegrationWorkspacesRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListUnifiedIntegrationWorkspacesRequest other = (ListUnifiedIntegrationWorkspacesRequest) o;
        return 
            Utils.enhancedDeepEquals(this.active, other.active) &&
            Utils.enhancedDeepEquals(this.categories, other.categories) &&
            Utils.enhancedDeepEquals(this.env, other.env) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.offset, other.offset) &&
            Utils.enhancedDeepEquals(this.summary, other.summary) &&
            Utils.enhancedDeepEquals(this.updatedGte, other.updatedGte) &&
            Utils.enhancedDeepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            active, categories, env,
            limit, offset, summary,
            updatedGte, workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListUnifiedIntegrationWorkspacesRequest.class,
                "active", active,
                "categories", categories,
                "env", env,
                "limit", limit,
                "offset", offset,
                "summary", summary,
                "updatedGte", updatedGte,
                "workspaceId", workspaceId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<Boolean> active = Optional.empty();

        private Optional<? extends List<QueryParamCategories>> categories = Optional.empty();

        private Optional<String> env = Optional.empty();

        private Optional<Double> limit = Optional.empty();

        private Optional<Double> offset = Optional.empty();

        private Optional<Boolean> summary = Optional.empty();

        private Optional<String> updatedGte = Optional.empty();

        private String workspaceId;

        private Builder() {
          // force use of static builder() method
        }


        /**
         * Filter the results for only the workspace's active integrations
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Filter the results for only the workspace's active integrations
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }


        /**
         * Filter the results on these categories
         */
        public Builder categories(List<QueryParamCategories> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        /**
         * Filter the results on these categories
         */
        public Builder categories(Optional<? extends List<QueryParamCategories>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }


        public Builder env(String env) {
            Utils.checkNotNull(env, "env");
            this.env = Optional.ofNullable(env);
            return this;
        }

        public Builder env(Optional<String> env) {
            Utils.checkNotNull(env, "env");
            this.env = env;
            return this;
        }


        public Builder limit(double limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<Double> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        public Builder offset(double offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public Builder offset(Optional<Double> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }


        public Builder summary(boolean summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public Builder summary(Optional<Boolean> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }


        public Builder updatedGte(String updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = Optional.ofNullable(updatedGte);
            return this;
        }

        public Builder updatedGte(Optional<String> updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = updatedGte;
            return this;
        }


        /**
         * The ID of the workspace
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }

        public ListUnifiedIntegrationWorkspacesRequest build() {

            return new ListUnifiedIntegrationWorkspacesRequest(
                active, categories, env,
                limit, offset, summary,
                updatedGte, workspaceId);
        }

    }
}

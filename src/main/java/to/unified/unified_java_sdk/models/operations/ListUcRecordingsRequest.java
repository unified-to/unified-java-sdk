/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk.models.operations;

import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.utils.SpeakeasyMetadata;
import to.unified.unified_java_sdk.utils.Utils;


public class ListUcRecordingsRequest {
    /**
     * The call ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=call_id")
    private Optional<String> callId;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    /**
     * The contact ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=contact_id")
    private Optional<String> contactId;

    /**
     * The end date to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end_le")
    private Optional<String> endLe;

    /**
     * Comma-delimited fields to return
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=fields")
    private Optional<? extends List<String>> fields;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Double> limit;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Double> offset;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order")
    private Optional<String> order;

    /**
     * Query string to search. eg. email address or name
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=query")
    private Optional<String> query;

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=raw")
    private Optional<String> raw;


    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private Optional<String> sort;

    /**
     * The start date to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start_gte")
    private Optional<String> startGte;

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_gte")
    private Optional<String> updatedGte;

    /**
     * The user/employee ID to filter by
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=user_id")
    private Optional<String> userId;

    @JsonCreator
    public ListUcRecordingsRequest(
            Optional<String> callId,
            String connectionId,
            Optional<String> contactId,
            Optional<String> endLe,
            Optional<? extends List<String>> fields,
            Optional<Double> limit,
            Optional<Double> offset,
            Optional<String> order,
            Optional<String> query,
            Optional<String> raw,
            Optional<String> sort,
            Optional<String> startGte,
            Optional<String> updatedGte,
            Optional<String> userId) {
        Utils.checkNotNull(callId, "callId");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(contactId, "contactId");
        Utils.checkNotNull(endLe, "endLe");
        Utils.checkNotNull(fields, "fields");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(query, "query");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(startGte, "startGte");
        Utils.checkNotNull(updatedGte, "updatedGte");
        Utils.checkNotNull(userId, "userId");
        this.callId = callId;
        this.connectionId = connectionId;
        this.contactId = contactId;
        this.endLe = endLe;
        this.fields = fields;
        this.limit = limit;
        this.offset = offset;
        this.order = order;
        this.query = query;
        this.raw = raw;
        this.sort = sort;
        this.startGte = startGte;
        this.updatedGte = updatedGte;
        this.userId = userId;
    }
    
    public ListUcRecordingsRequest(
            String connectionId) {
        this(Optional.empty(), connectionId, Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty(), Optional.empty(),
            Optional.empty(), Optional.empty());
    }

    /**
     * The call ID to filter by
     */
    @JsonIgnore
    public Optional<String> callId() {
        return callId;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * The contact ID to filter by
     */
    @JsonIgnore
    public Optional<String> contactId() {
        return contactId;
    }

    /**
     * The end date to filter by
     */
    @JsonIgnore
    public Optional<String> endLe() {
        return endLe;
    }

    /**
     * Comma-delimited fields to return
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> fields() {
        return (Optional<List<String>>) fields;
    }

    @JsonIgnore
    public Optional<Double> limit() {
        return limit;
    }

    @JsonIgnore
    public Optional<Double> offset() {
        return offset;
    }

    @JsonIgnore
    public Optional<String> order() {
        return order;
    }

    /**
     * Query string to search. eg. email address or name
     */
    @JsonIgnore
    public Optional<String> query() {
        return query;
    }

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    @JsonIgnore
    public Optional<String> raw() {
        return raw;
    }

    @JsonIgnore
    public Optional<String> sort() {
        return sort;
    }

    /**
     * The start date to filter by
     */
    @JsonIgnore
    public Optional<String> startGte() {
        return startGte;
    }

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    @JsonIgnore
    public Optional<String> updatedGte() {
        return updatedGte;
    }

    /**
     * The user/employee ID to filter by
     */
    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public static Builder builder() {
        return new Builder();
    }


    /**
     * The call ID to filter by
     */
    public ListUcRecordingsRequest withCallId(String callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = Optional.ofNullable(callId);
        return this;
    }


    /**
     * The call ID to filter by
     */
    public ListUcRecordingsRequest withCallId(Optional<String> callId) {
        Utils.checkNotNull(callId, "callId");
        this.callId = callId;
        return this;
    }

    /**
     * ID of the connection
     */
    public ListUcRecordingsRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * The contact ID to filter by
     */
    public ListUcRecordingsRequest withContactId(String contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = Optional.ofNullable(contactId);
        return this;
    }


    /**
     * The contact ID to filter by
     */
    public ListUcRecordingsRequest withContactId(Optional<String> contactId) {
        Utils.checkNotNull(contactId, "contactId");
        this.contactId = contactId;
        return this;
    }

    /**
     * The end date to filter by
     */
    public ListUcRecordingsRequest withEndLe(String endLe) {
        Utils.checkNotNull(endLe, "endLe");
        this.endLe = Optional.ofNullable(endLe);
        return this;
    }


    /**
     * The end date to filter by
     */
    public ListUcRecordingsRequest withEndLe(Optional<String> endLe) {
        Utils.checkNotNull(endLe, "endLe");
        this.endLe = endLe;
        return this;
    }

    /**
     * Comma-delimited fields to return
     */
    public ListUcRecordingsRequest withFields(List<String> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = Optional.ofNullable(fields);
        return this;
    }


    /**
     * Comma-delimited fields to return
     */
    public ListUcRecordingsRequest withFields(Optional<? extends List<String>> fields) {
        Utils.checkNotNull(fields, "fields");
        this.fields = fields;
        return this;
    }

    public ListUcRecordingsRequest withLimit(double limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }


    public ListUcRecordingsRequest withLimit(Optional<Double> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public ListUcRecordingsRequest withOffset(double offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }


    public ListUcRecordingsRequest withOffset(Optional<Double> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    public ListUcRecordingsRequest withOrder(String order) {
        Utils.checkNotNull(order, "order");
        this.order = Optional.ofNullable(order);
        return this;
    }


    public ListUcRecordingsRequest withOrder(Optional<String> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    /**
     * Query string to search. eg. email address or name
     */
    public ListUcRecordingsRequest withQuery(String query) {
        Utils.checkNotNull(query, "query");
        this.query = Optional.ofNullable(query);
        return this;
    }


    /**
     * Query string to search. eg. email address or name
     */
    public ListUcRecordingsRequest withQuery(Optional<String> query) {
        Utils.checkNotNull(query, "query");
        this.query = query;
        return this;
    }

    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    public ListUcRecordingsRequest withRaw(String raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }


    /**
     * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
     */
    public ListUcRecordingsRequest withRaw(Optional<String> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public ListUcRecordingsRequest withSort(String sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }


    public ListUcRecordingsRequest withSort(Optional<String> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    /**
     * The start date to filter by
     */
    public ListUcRecordingsRequest withStartGte(String startGte) {
        Utils.checkNotNull(startGte, "startGte");
        this.startGte = Optional.ofNullable(startGte);
        return this;
    }


    /**
     * The start date to filter by
     */
    public ListUcRecordingsRequest withStartGte(Optional<String> startGte) {
        Utils.checkNotNull(startGte, "startGte");
        this.startGte = startGte;
        return this;
    }

    /**
     * Return only results whose updated date is equal or greater to this value
     */
    public ListUcRecordingsRequest withUpdatedGte(String updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = Optional.ofNullable(updatedGte);
        return this;
    }


    /**
     * Return only results whose updated date is equal or greater to this value
     */
    public ListUcRecordingsRequest withUpdatedGte(Optional<String> updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = updatedGte;
        return this;
    }

    /**
     * The user/employee ID to filter by
     */
    public ListUcRecordingsRequest withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }


    /**
     * The user/employee ID to filter by
     */
    public ListUcRecordingsRequest withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListUcRecordingsRequest other = (ListUcRecordingsRequest) o;
        return 
            Utils.enhancedDeepEquals(this.callId, other.callId) &&
            Utils.enhancedDeepEquals(this.connectionId, other.connectionId) &&
            Utils.enhancedDeepEquals(this.contactId, other.contactId) &&
            Utils.enhancedDeepEquals(this.endLe, other.endLe) &&
            Utils.enhancedDeepEquals(this.fields, other.fields) &&
            Utils.enhancedDeepEquals(this.limit, other.limit) &&
            Utils.enhancedDeepEquals(this.offset, other.offset) &&
            Utils.enhancedDeepEquals(this.order, other.order) &&
            Utils.enhancedDeepEquals(this.query, other.query) &&
            Utils.enhancedDeepEquals(this.raw, other.raw) &&
            Utils.enhancedDeepEquals(this.sort, other.sort) &&
            Utils.enhancedDeepEquals(this.startGte, other.startGte) &&
            Utils.enhancedDeepEquals(this.updatedGte, other.updatedGte) &&
            Utils.enhancedDeepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Utils.enhancedHash(
            callId, connectionId, contactId,
            endLe, fields, limit,
            offset, order, query,
            raw, sort, startGte,
            updatedGte, userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListUcRecordingsRequest.class,
                "callId", callId,
                "connectionId", connectionId,
                "contactId", contactId,
                "endLe", endLe,
                "fields", fields,
                "limit", limit,
                "offset", offset,
                "order", order,
                "query", query,
                "raw", raw,
                "sort", sort,
                "startGte", startGte,
                "updatedGte", updatedGte,
                "userId", userId);
    }

    @SuppressWarnings("UnusedReturnValue")
    public final static class Builder {

        private Optional<String> callId = Optional.empty();

        private String connectionId;

        private Optional<String> contactId = Optional.empty();

        private Optional<String> endLe = Optional.empty();

        private Optional<? extends List<String>> fields = Optional.empty();

        private Optional<Double> limit = Optional.empty();

        private Optional<Double> offset = Optional.empty();

        private Optional<String> order = Optional.empty();

        private Optional<String> query = Optional.empty();

        private Optional<String> raw = Optional.empty();

        private Optional<String> sort = Optional.empty();

        private Optional<String> startGte = Optional.empty();

        private Optional<String> updatedGte = Optional.empty();

        private Optional<String> userId = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }


        /**
         * The call ID to filter by
         */
        public Builder callId(String callId) {
            Utils.checkNotNull(callId, "callId");
            this.callId = Optional.ofNullable(callId);
            return this;
        }

        /**
         * The call ID to filter by
         */
        public Builder callId(Optional<String> callId) {
            Utils.checkNotNull(callId, "callId");
            this.callId = callId;
            return this;
        }


        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }


        /**
         * The contact ID to filter by
         */
        public Builder contactId(String contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = Optional.ofNullable(contactId);
            return this;
        }

        /**
         * The contact ID to filter by
         */
        public Builder contactId(Optional<String> contactId) {
            Utils.checkNotNull(contactId, "contactId");
            this.contactId = contactId;
            return this;
        }


        /**
         * The end date to filter by
         */
        public Builder endLe(String endLe) {
            Utils.checkNotNull(endLe, "endLe");
            this.endLe = Optional.ofNullable(endLe);
            return this;
        }

        /**
         * The end date to filter by
         */
        public Builder endLe(Optional<String> endLe) {
            Utils.checkNotNull(endLe, "endLe");
            this.endLe = endLe;
            return this;
        }


        /**
         * Comma-delimited fields to return
         */
        public Builder fields(List<String> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = Optional.ofNullable(fields);
            return this;
        }

        /**
         * Comma-delimited fields to return
         */
        public Builder fields(Optional<? extends List<String>> fields) {
            Utils.checkNotNull(fields, "fields");
            this.fields = fields;
            return this;
        }


        public Builder limit(double limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<Double> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }


        public Builder offset(double offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public Builder offset(Optional<Double> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }


        public Builder order(String order) {
            Utils.checkNotNull(order, "order");
            this.order = Optional.ofNullable(order);
            return this;
        }

        public Builder order(Optional<String> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }


        /**
         * Query string to search. eg. email address or name
         */
        public Builder query(String query) {
            Utils.checkNotNull(query, "query");
            this.query = Optional.ofNullable(query);
            return this;
        }

        /**
         * Query string to search. eg. email address or name
         */
        public Builder query(Optional<String> query) {
            Utils.checkNotNull(query, "query");
            this.query = query;
            return this;
        }


        /**
         * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
         */
        public Builder raw(String raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        /**
         * Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&amp;zoo=bar -&gt; raw=foo%3Dbar%26zoo%3Dbar
         */
        public Builder raw(Optional<String> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }


        public Builder sort(String sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        public Builder sort(Optional<String> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }


        /**
         * The start date to filter by
         */
        public Builder startGte(String startGte) {
            Utils.checkNotNull(startGte, "startGte");
            this.startGte = Optional.ofNullable(startGte);
            return this;
        }

        /**
         * The start date to filter by
         */
        public Builder startGte(Optional<String> startGte) {
            Utils.checkNotNull(startGte, "startGte");
            this.startGte = startGte;
            return this;
        }


        /**
         * Return only results whose updated date is equal or greater to this value
         */
        public Builder updatedGte(String updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = Optional.ofNullable(updatedGte);
            return this;
        }

        /**
         * Return only results whose updated date is equal or greater to this value
         */
        public Builder updatedGte(Optional<String> updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = updatedGte;
            return this;
        }


        /**
         * The user/employee ID to filter by
         */
        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        /**
         * The user/employee ID to filter by
         */
        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }

        public ListUcRecordingsRequest build() {

            return new ListUcRecordingsRequest(
                callId, connectionId, contactId,
                endLe, fields, limit,
                offset, order, query,
                raw, sort, startGte,
                updatedGte, userId);
        }

    }
}

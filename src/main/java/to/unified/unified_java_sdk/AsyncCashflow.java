/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.GetAccountingCashflowRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingCashflowsRequest;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingCashflowRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingCashflowResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingCashflowsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingCashflowsResponse;
import to.unified.unified_java_sdk.operations.GetAccountingCashflow;
import to.unified.unified_java_sdk.operations.ListAccountingCashflows;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncCashflow {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Cashflow syncSDK;

    AsyncCashflow(Cashflow syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Cashflow sync() {
        return syncSDK;
    }


    /**
     * Retrieve a cashflow
     * 
     * @return The async call builder
     */
    public GetAccountingCashflowRequestBuilder getAccountingCashflow() {
        return new GetAccountingCashflowRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a cashflow
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetAccountingCashflowResponse>} - The async response
     */
    public CompletableFuture<GetAccountingCashflowResponse> getAccountingCashflow(GetAccountingCashflowRequest request) {
        AsyncRequestOperation<GetAccountingCashflowRequest, GetAccountingCashflowResponse> operation
              = new GetAccountingCashflow.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all cashflows
     * 
     * @return The async call builder
     */
    public ListAccountingCashflowsRequestBuilder listAccountingCashflows() {
        return new ListAccountingCashflowsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all cashflows
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListAccountingCashflowsResponse>} - The async response
     */
    public CompletableFuture<ListAccountingCashflowsResponse> listAccountingCashflows(ListAccountingCashflowsRequest request) {
        AsyncRequestOperation<ListAccountingCashflowsRequest, ListAccountingCashflowsResponse> operation
              = new ListAccountingCashflows.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import java.lang.Exception;
import java.util.List;
import java.util.Optional;
import to.unified.unified_java_sdk.models.operations.CreateAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.GetAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.ListAccountingSalesordersRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingSalesordersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListAccountingSalesordersResponse;
import to.unified.unified_java_sdk.models.operations.PatchAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingSalesorderResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingSalesorderOperation;
import to.unified.unified_java_sdk.operations.GetAccountingSalesorderOperation;
import to.unified.unified_java_sdk.operations.ListAccountingSalesordersOperation;
import to.unified.unified_java_sdk.operations.PatchAccountingSalesorderOperation;
import to.unified.unified_java_sdk.operations.RemoveAccountingSalesorderOperation;
import to.unified.unified_java_sdk.operations.UpdateAccountingSalesorderOperation;


public class Salesorder {
    private final SDKConfiguration sdkConfiguration;

    Salesorder(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }

    /**
     * Create a salesorder
     * 
     * @return The call builder
     */
    public CreateAccountingSalesorderRequestBuilder createAccountingSalesorder() {
        return new CreateAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public CreateAccountingSalesorderResponse createAccountingSalesorder(
            CreateAccountingSalesorderRequest request) throws Exception {
        RequestOperation<CreateAccountingSalesorderRequest, CreateAccountingSalesorderResponse> operation
              = new CreateAccountingSalesorderOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Retrieve a salesorder
     * 
     * @return The call builder
     */
    public GetAccountingSalesorderRequestBuilder getAccountingSalesorder() {
        return new GetAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetAccountingSalesorderResponse getAccountingSalesorder(
            GetAccountingSalesorderRequest request) throws Exception {
        RequestOperation<GetAccountingSalesorderRequest, GetAccountingSalesorderResponse> operation
              = new GetAccountingSalesorderOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * List all salesorders
     * 
     * @return The call builder
     */
    public ListAccountingSalesordersRequestBuilder listAccountingSalesorders() {
        return new ListAccountingSalesordersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all salesorders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public ListAccountingSalesordersResponse listAccountingSalesorders(
            ListAccountingSalesordersRequest request) throws Exception {
        RequestOperation<ListAccountingSalesordersRequest, ListAccountingSalesordersResponse> operation
              = new ListAccountingSalesordersOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a salesorder
     * 
     * @return The call builder
     */
    public PatchAccountingSalesorderRequestBuilder patchAccountingSalesorder() {
        return new PatchAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PatchAccountingSalesorderResponse patchAccountingSalesorder(
            PatchAccountingSalesorderRequest request) throws Exception {
        RequestOperation<PatchAccountingSalesorderRequest, PatchAccountingSalesorderResponse> operation
              = new PatchAccountingSalesorderOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Remove a salesorder
     * 
     * @return The call builder
     */
    public RemoveAccountingSalesorderRequestBuilder removeAccountingSalesorder() {
        return new RemoveAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public RemoveAccountingSalesorderResponse removeAccountingSalesorder(
            RemoveAccountingSalesorderRequest request) throws Exception {
        RequestOperation<RemoveAccountingSalesorderRequest, RemoveAccountingSalesorderResponse> operation
              = new RemoveAccountingSalesorderOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }


    /**
     * Update a salesorder
     * 
     * @return The call builder
     */
    public UpdateAccountingSalesorderRequestBuilder updateAccountingSalesorder() {
        return new UpdateAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public UpdateAccountingSalesorderResponse updateAccountingSalesorder(
            UpdateAccountingSalesorderRequest request) throws Exception {
        RequestOperation<UpdateAccountingSalesorderRequest, UpdateAccountingSalesorderResponse> operation
              = new UpdateAccountingSalesorderOperation( sdkConfiguration);
        return operation.handleResponse(operation.doRequest(request));
    }

}

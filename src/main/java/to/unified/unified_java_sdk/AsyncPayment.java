/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreatePaymentLinkRequest;
import to.unified.unified_java_sdk.models.operations.CreatePaymentPaymentRequest;
import to.unified.unified_java_sdk.models.operations.CreatePaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.GetPaymentLinkRequest;
import to.unified.unified_java_sdk.models.operations.GetPaymentPaymentRequest;
import to.unified.unified_java_sdk.models.operations.GetPaymentPayoutRequest;
import to.unified.unified_java_sdk.models.operations.GetPaymentRefundRequest;
import to.unified.unified_java_sdk.models.operations.GetPaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.ListPaymentLinksRequest;
import to.unified.unified_java_sdk.models.operations.ListPaymentPaymentsRequest;
import to.unified.unified_java_sdk.models.operations.ListPaymentPayoutsRequest;
import to.unified.unified_java_sdk.models.operations.ListPaymentRefundsRequest;
import to.unified.unified_java_sdk.models.operations.ListPaymentSubscriptionsRequest;
import to.unified.unified_java_sdk.models.operations.PatchPaymentLinkRequest;
import to.unified.unified_java_sdk.models.operations.PatchPaymentPaymentRequest;
import to.unified.unified_java_sdk.models.operations.PatchPaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.RemovePaymentLinkRequest;
import to.unified.unified_java_sdk.models.operations.RemovePaymentPaymentRequest;
import to.unified.unified_java_sdk.models.operations.RemovePaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.UpdatePaymentLinkRequest;
import to.unified.unified_java_sdk.models.operations.UpdatePaymentPaymentRequest;
import to.unified.unified_java_sdk.models.operations.UpdatePaymentSubscriptionRequest;
import to.unified.unified_java_sdk.models.operations.async.CreatePaymentLinkRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreatePaymentLinkResponse;
import to.unified.unified_java_sdk.models.operations.async.CreatePaymentPaymentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreatePaymentPaymentResponse;
import to.unified.unified_java_sdk.models.operations.async.CreatePaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreatePaymentSubscriptionResponse;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentLinkRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentLinkResponse;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentPaymentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentPaymentResponse;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentPayoutRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentPayoutResponse;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentRefundRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentRefundResponse;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetPaymentSubscriptionResponse;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentLinksRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentLinksResponse;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentPaymentsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentPaymentsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentPayoutsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentPayoutsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentRefundsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentRefundsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentSubscriptionsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListPaymentSubscriptionsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchPaymentLinkRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchPaymentLinkResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchPaymentPaymentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchPaymentPaymentResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchPaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchPaymentSubscriptionResponse;
import to.unified.unified_java_sdk.models.operations.async.RemovePaymentLinkRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemovePaymentLinkResponse;
import to.unified.unified_java_sdk.models.operations.async.RemovePaymentPaymentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemovePaymentPaymentResponse;
import to.unified.unified_java_sdk.models.operations.async.RemovePaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemovePaymentSubscriptionResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdatePaymentLinkRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdatePaymentLinkResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdatePaymentPaymentRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdatePaymentPaymentResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdatePaymentSubscriptionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdatePaymentSubscriptionResponse;
import to.unified.unified_java_sdk.operations.CreatePaymentLink;
import to.unified.unified_java_sdk.operations.CreatePaymentPayment;
import to.unified.unified_java_sdk.operations.CreatePaymentSubscription;
import to.unified.unified_java_sdk.operations.GetPaymentLink;
import to.unified.unified_java_sdk.operations.GetPaymentPayment;
import to.unified.unified_java_sdk.operations.GetPaymentPayout;
import to.unified.unified_java_sdk.operations.GetPaymentRefund;
import to.unified.unified_java_sdk.operations.GetPaymentSubscription;
import to.unified.unified_java_sdk.operations.ListPaymentLinks;
import to.unified.unified_java_sdk.operations.ListPaymentPayments;
import to.unified.unified_java_sdk.operations.ListPaymentPayouts;
import to.unified.unified_java_sdk.operations.ListPaymentRefunds;
import to.unified.unified_java_sdk.operations.ListPaymentSubscriptions;
import to.unified.unified_java_sdk.operations.PatchPaymentLink;
import to.unified.unified_java_sdk.operations.PatchPaymentPayment;
import to.unified.unified_java_sdk.operations.PatchPaymentSubscription;
import to.unified.unified_java_sdk.operations.RemovePaymentLink;
import to.unified.unified_java_sdk.operations.RemovePaymentPayment;
import to.unified.unified_java_sdk.operations.RemovePaymentSubscription;
import to.unified.unified_java_sdk.operations.UpdatePaymentLink;
import to.unified.unified_java_sdk.operations.UpdatePaymentPayment;
import to.unified.unified_java_sdk.operations.UpdatePaymentSubscription;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncPayment {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Payment syncSDK;

    AsyncPayment(Payment syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Payment sync() {
        return syncSDK;
    }


    /**
     * Create a link
     * 
     * @return The async call builder
     */
    public CreatePaymentLinkRequestBuilder createPaymentLink() {
        return new CreatePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreatePaymentLinkResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentLinkResponse> createPaymentLink(CreatePaymentLinkRequest request) {
        AsyncRequestOperation<CreatePaymentLinkRequest, CreatePaymentLinkResponse> operation
              = new CreatePaymentLink.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a payment
     * 
     * @return The async call builder
     */
    public CreatePaymentPaymentRequestBuilder createPaymentPayment() {
        return new CreatePaymentPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreatePaymentPaymentResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentPaymentResponse> createPaymentPayment(CreatePaymentPaymentRequest request) {
        AsyncRequestOperation<CreatePaymentPaymentRequest, CreatePaymentPaymentResponse> operation
              = new CreatePaymentPayment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a subscription
     * 
     * @return The async call builder
     */
    public CreatePaymentSubscriptionRequestBuilder createPaymentSubscription() {
        return new CreatePaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreatePaymentSubscriptionResponse>} - The async response
     */
    public CompletableFuture<CreatePaymentSubscriptionResponse> createPaymentSubscription(CreatePaymentSubscriptionRequest request) {
        AsyncRequestOperation<CreatePaymentSubscriptionRequest, CreatePaymentSubscriptionResponse> operation
              = new CreatePaymentSubscription.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a link
     * 
     * @return The async call builder
     */
    public GetPaymentLinkRequestBuilder getPaymentLink() {
        return new GetPaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetPaymentLinkResponse>} - The async response
     */
    public CompletableFuture<GetPaymentLinkResponse> getPaymentLink(GetPaymentLinkRequest request) {
        AsyncRequestOperation<GetPaymentLinkRequest, GetPaymentLinkResponse> operation
              = new GetPaymentLink.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a payment
     * 
     * @return The async call builder
     */
    public GetPaymentPaymentRequestBuilder getPaymentPayment() {
        return new GetPaymentPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetPaymentPaymentResponse>} - The async response
     */
    public CompletableFuture<GetPaymentPaymentResponse> getPaymentPayment(GetPaymentPaymentRequest request) {
        AsyncRequestOperation<GetPaymentPaymentRequest, GetPaymentPaymentResponse> operation
              = new GetPaymentPayment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a payout
     * 
     * @return The async call builder
     */
    public GetPaymentPayoutRequestBuilder getPaymentPayout() {
        return new GetPaymentPayoutRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a payout
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetPaymentPayoutResponse>} - The async response
     */
    public CompletableFuture<GetPaymentPayoutResponse> getPaymentPayout(GetPaymentPayoutRequest request) {
        AsyncRequestOperation<GetPaymentPayoutRequest, GetPaymentPayoutResponse> operation
              = new GetPaymentPayout.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a refund
     * 
     * @return The async call builder
     */
    public GetPaymentRefundRequestBuilder getPaymentRefund() {
        return new GetPaymentRefundRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a refund
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetPaymentRefundResponse>} - The async response
     */
    public CompletableFuture<GetPaymentRefundResponse> getPaymentRefund(GetPaymentRefundRequest request) {
        AsyncRequestOperation<GetPaymentRefundRequest, GetPaymentRefundResponse> operation
              = new GetPaymentRefund.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a subscription
     * 
     * @return The async call builder
     */
    public GetPaymentSubscriptionRequestBuilder getPaymentSubscription() {
        return new GetPaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetPaymentSubscriptionResponse>} - The async response
     */
    public CompletableFuture<GetPaymentSubscriptionResponse> getPaymentSubscription(GetPaymentSubscriptionRequest request) {
        AsyncRequestOperation<GetPaymentSubscriptionRequest, GetPaymentSubscriptionResponse> operation
              = new GetPaymentSubscription.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all links
     * 
     * @return The async call builder
     */
    public ListPaymentLinksRequestBuilder listPaymentLinks() {
        return new ListPaymentLinksRequestBuilder(sdkConfiguration);
    }

    /**
     * List all links
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListPaymentLinksResponse>} - The async response
     */
    public CompletableFuture<ListPaymentLinksResponse> listPaymentLinks(ListPaymentLinksRequest request) {
        AsyncRequestOperation<ListPaymentLinksRequest, ListPaymentLinksResponse> operation
              = new ListPaymentLinks.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all payments
     * 
     * @return The async call builder
     */
    public ListPaymentPaymentsRequestBuilder listPaymentPayments() {
        return new ListPaymentPaymentsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payments
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListPaymentPaymentsResponse>} - The async response
     */
    public CompletableFuture<ListPaymentPaymentsResponse> listPaymentPayments(ListPaymentPaymentsRequest request) {
        AsyncRequestOperation<ListPaymentPaymentsRequest, ListPaymentPaymentsResponse> operation
              = new ListPaymentPayments.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all payouts
     * 
     * @return The async call builder
     */
    public ListPaymentPayoutsRequestBuilder listPaymentPayouts() {
        return new ListPaymentPayoutsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all payouts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListPaymentPayoutsResponse>} - The async response
     */
    public CompletableFuture<ListPaymentPayoutsResponse> listPaymentPayouts(ListPaymentPayoutsRequest request) {
        AsyncRequestOperation<ListPaymentPayoutsRequest, ListPaymentPayoutsResponse> operation
              = new ListPaymentPayouts.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all refunds
     * 
     * @return The async call builder
     */
    public ListPaymentRefundsRequestBuilder listPaymentRefunds() {
        return new ListPaymentRefundsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all refunds
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListPaymentRefundsResponse>} - The async response
     */
    public CompletableFuture<ListPaymentRefundsResponse> listPaymentRefunds(ListPaymentRefundsRequest request) {
        AsyncRequestOperation<ListPaymentRefundsRequest, ListPaymentRefundsResponse> operation
              = new ListPaymentRefunds.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all subscriptions
     * 
     * @return The async call builder
     */
    public ListPaymentSubscriptionsRequestBuilder listPaymentSubscriptions() {
        return new ListPaymentSubscriptionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all subscriptions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListPaymentSubscriptionsResponse>} - The async response
     */
    public CompletableFuture<ListPaymentSubscriptionsResponse> listPaymentSubscriptions(ListPaymentSubscriptionsRequest request) {
        AsyncRequestOperation<ListPaymentSubscriptionsRequest, ListPaymentSubscriptionsResponse> operation
              = new ListPaymentSubscriptions.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a link
     * 
     * @return The async call builder
     */
    public PatchPaymentLinkRequestBuilder patchPaymentLink() {
        return new PatchPaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchPaymentLinkResponse>} - The async response
     */
    public CompletableFuture<PatchPaymentLinkResponse> patchPaymentLink(PatchPaymentLinkRequest request) {
        AsyncRequestOperation<PatchPaymentLinkRequest, PatchPaymentLinkResponse> operation
              = new PatchPaymentLink.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a payment
     * 
     * @return The async call builder
     */
    public PatchPaymentPaymentRequestBuilder patchPaymentPayment() {
        return new PatchPaymentPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchPaymentPaymentResponse>} - The async response
     */
    public CompletableFuture<PatchPaymentPaymentResponse> patchPaymentPayment(PatchPaymentPaymentRequest request) {
        AsyncRequestOperation<PatchPaymentPaymentRequest, PatchPaymentPaymentResponse> operation
              = new PatchPaymentPayment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a subscription
     * 
     * @return The async call builder
     */
    public PatchPaymentSubscriptionRequestBuilder patchPaymentSubscription() {
        return new PatchPaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchPaymentSubscriptionResponse>} - The async response
     */
    public CompletableFuture<PatchPaymentSubscriptionResponse> patchPaymentSubscription(PatchPaymentSubscriptionRequest request) {
        AsyncRequestOperation<PatchPaymentSubscriptionRequest, PatchPaymentSubscriptionResponse> operation
              = new PatchPaymentSubscription.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a link
     * 
     * @return The async call builder
     */
    public RemovePaymentLinkRequestBuilder removePaymentLink() {
        return new RemovePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemovePaymentLinkResponse>} - The async response
     */
    public CompletableFuture<RemovePaymentLinkResponse> removePaymentLink(RemovePaymentLinkRequest request) {
        AsyncRequestOperation<RemovePaymentLinkRequest, RemovePaymentLinkResponse> operation
              = new RemovePaymentLink.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a payment
     * 
     * @return The async call builder
     */
    public RemovePaymentPaymentRequestBuilder removePaymentPayment() {
        return new RemovePaymentPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemovePaymentPaymentResponse>} - The async response
     */
    public CompletableFuture<RemovePaymentPaymentResponse> removePaymentPayment(RemovePaymentPaymentRequest request) {
        AsyncRequestOperation<RemovePaymentPaymentRequest, RemovePaymentPaymentResponse> operation
              = new RemovePaymentPayment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a subscription
     * 
     * @return The async call builder
     */
    public RemovePaymentSubscriptionRequestBuilder removePaymentSubscription() {
        return new RemovePaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemovePaymentSubscriptionResponse>} - The async response
     */
    public CompletableFuture<RemovePaymentSubscriptionResponse> removePaymentSubscription(RemovePaymentSubscriptionRequest request) {
        AsyncRequestOperation<RemovePaymentSubscriptionRequest, RemovePaymentSubscriptionResponse> operation
              = new RemovePaymentSubscription.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a link
     * 
     * @return The async call builder
     */
    public UpdatePaymentLinkRequestBuilder updatePaymentLink() {
        return new UpdatePaymentLinkRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a link
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdatePaymentLinkResponse>} - The async response
     */
    public CompletableFuture<UpdatePaymentLinkResponse> updatePaymentLink(UpdatePaymentLinkRequest request) {
        AsyncRequestOperation<UpdatePaymentLinkRequest, UpdatePaymentLinkResponse> operation
              = new UpdatePaymentLink.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a payment
     * 
     * @return The async call builder
     */
    public UpdatePaymentPaymentRequestBuilder updatePaymentPayment() {
        return new UpdatePaymentPaymentRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a payment
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdatePaymentPaymentResponse>} - The async response
     */
    public CompletableFuture<UpdatePaymentPaymentResponse> updatePaymentPayment(UpdatePaymentPaymentRequest request) {
        AsyncRequestOperation<UpdatePaymentPaymentRequest, UpdatePaymentPaymentResponse> operation
              = new UpdatePaymentPayment.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a subscription
     * 
     * @return The async call builder
     */
    public UpdatePaymentSubscriptionRequestBuilder updatePaymentSubscription() {
        return new UpdatePaymentSubscriptionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a subscription
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdatePaymentSubscriptionResponse>} - The async response
     */
    public CompletableFuture<UpdatePaymentSubscriptionResponse> updatePaymentSubscription(UpdatePaymentSubscriptionRequest request) {
        AsyncRequestOperation<UpdatePaymentSubscriptionRequest, UpdatePaymentSubscriptionResponse> operation
              = new UpdatePaymentSubscription.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

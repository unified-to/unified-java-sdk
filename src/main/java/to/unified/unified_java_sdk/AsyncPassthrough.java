/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreatePassthroughJsonRequest;
import to.unified.unified_java_sdk.models.operations.CreatePassthroughRawRequest;
import to.unified.unified_java_sdk.models.operations.ListPassthroughsRequest;
import to.unified.unified_java_sdk.models.operations.PatchPassthroughJsonRequest;
import to.unified.unified_java_sdk.models.operations.PatchPassthroughRawRequest;
import to.unified.unified_java_sdk.models.operations.RemovePassthroughRequest;
import to.unified.unified_java_sdk.models.operations.UpdatePassthroughJsonRequest;
import to.unified.unified_java_sdk.models.operations.UpdatePassthroughRawRequest;
import to.unified.unified_java_sdk.models.operations.async.CreatePassthroughJsonRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreatePassthroughJsonResponse;
import to.unified.unified_java_sdk.models.operations.async.CreatePassthroughRawRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreatePassthroughRawResponse;
import to.unified.unified_java_sdk.models.operations.async.ListPassthroughsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListPassthroughsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchPassthroughJsonRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchPassthroughJsonResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchPassthroughRawRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchPassthroughRawResponse;
import to.unified.unified_java_sdk.models.operations.async.RemovePassthroughRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemovePassthroughResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdatePassthroughJsonRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdatePassthroughJsonResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdatePassthroughRawRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdatePassthroughRawResponse;
import to.unified.unified_java_sdk.operations.CreatePassthroughJson;
import to.unified.unified_java_sdk.operations.CreatePassthroughRaw;
import to.unified.unified_java_sdk.operations.ListPassthroughs;
import to.unified.unified_java_sdk.operations.PatchPassthroughJson;
import to.unified.unified_java_sdk.operations.PatchPassthroughRaw;
import to.unified.unified_java_sdk.operations.RemovePassthrough;
import to.unified.unified_java_sdk.operations.UpdatePassthroughJson;
import to.unified.unified_java_sdk.operations.UpdatePassthroughRaw;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncPassthrough {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Passthrough syncSDK;

    AsyncPassthrough(Passthrough syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Passthrough sync() {
        return syncSDK;
    }


    /**
     * Passthrough POST
     * 
     * @return The async call builder
     */
    public CreatePassthroughJsonRequestBuilder createPassthroughJson() {
        return new CreatePassthroughJsonRequestBuilder(sdkConfiguration);
    }

    /**
     * Passthrough POST
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreatePassthroughJsonResponse&gt; - The async response
     */
    public CompletableFuture<CreatePassthroughJsonResponse> createPassthroughJson(CreatePassthroughJsonRequest request) {
        AsyncRequestOperation<CreatePassthroughJsonRequest, CreatePassthroughJsonResponse> operation
              = new CreatePassthroughJson.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Passthrough POST
     * 
     * @return The async call builder
     */
    public CreatePassthroughRawRequestBuilder createPassthroughRaw() {
        return new CreatePassthroughRawRequestBuilder(sdkConfiguration);
    }

    /**
     * Passthrough POST
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreatePassthroughRawResponse&gt; - The async response
     */
    public CompletableFuture<CreatePassthroughRawResponse> createPassthroughRaw(CreatePassthroughRawRequest request) {
        AsyncRequestOperation<CreatePassthroughRawRequest, CreatePassthroughRawResponse> operation
              = new CreatePassthroughRaw.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Passthrough GET
     * 
     * @return The async call builder
     */
    public ListPassthroughsRequestBuilder listPassthroughs() {
        return new ListPassthroughsRequestBuilder(sdkConfiguration);
    }

    /**
     * Passthrough GET
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListPassthroughsResponse&gt; - The async response
     */
    public CompletableFuture<ListPassthroughsResponse> listPassthroughs(ListPassthroughsRequest request) {
        AsyncRequestOperation<ListPassthroughsRequest, ListPassthroughsResponse> operation
              = new ListPassthroughs.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Passthrough PUT
     * 
     * @return The async call builder
     */
    public PatchPassthroughJsonRequestBuilder patchPassthroughJson() {
        return new PatchPassthroughJsonRequestBuilder(sdkConfiguration);
    }

    /**
     * Passthrough PUT
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchPassthroughJsonResponse&gt; - The async response
     */
    public CompletableFuture<PatchPassthroughJsonResponse> patchPassthroughJson(PatchPassthroughJsonRequest request) {
        AsyncRequestOperation<PatchPassthroughJsonRequest, PatchPassthroughJsonResponse> operation
              = new PatchPassthroughJson.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Passthrough PUT
     * 
     * @return The async call builder
     */
    public PatchPassthroughRawRequestBuilder patchPassthroughRaw() {
        return new PatchPassthroughRawRequestBuilder(sdkConfiguration);
    }

    /**
     * Passthrough PUT
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchPassthroughRawResponse&gt; - The async response
     */
    public CompletableFuture<PatchPassthroughRawResponse> patchPassthroughRaw(PatchPassthroughRawRequest request) {
        AsyncRequestOperation<PatchPassthroughRawRequest, PatchPassthroughRawResponse> operation
              = new PatchPassthroughRaw.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Passthrough DELETE
     * 
     * @return The async call builder
     */
    public RemovePassthroughRequestBuilder removePassthrough() {
        return new RemovePassthroughRequestBuilder(sdkConfiguration);
    }

    /**
     * Passthrough DELETE
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemovePassthroughResponse&gt; - The async response
     */
    public CompletableFuture<RemovePassthroughResponse> removePassthrough(RemovePassthroughRequest request) {
        AsyncRequestOperation<RemovePassthroughRequest, RemovePassthroughResponse> operation
              = new RemovePassthrough.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Passthrough PUT
     * 
     * @return The async call builder
     */
    public UpdatePassthroughJsonRequestBuilder updatePassthroughJson() {
        return new UpdatePassthroughJsonRequestBuilder(sdkConfiguration);
    }

    /**
     * Passthrough PUT
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdatePassthroughJsonResponse&gt; - The async response
     */
    public CompletableFuture<UpdatePassthroughJsonResponse> updatePassthroughJson(UpdatePassthroughJsonRequest request) {
        AsyncRequestOperation<UpdatePassthroughJsonRequest, UpdatePassthroughJsonResponse> operation
              = new UpdatePassthroughJson.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Passthrough PUT
     * 
     * @return The async call builder
     */
    public UpdatePassthroughRawRequestBuilder updatePassthroughRaw() {
        return new UpdatePassthroughRawRequestBuilder(sdkConfiguration);
    }

    /**
     * Passthrough PUT
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdatePassthroughRawResponse&gt; - The async response
     */
    public CompletableFuture<UpdatePassthroughRawResponse> updatePassthroughRaw(UpdatePassthroughRawRequest request) {
        AsyncRequestOperation<UpdatePassthroughRawRequest, UpdatePassthroughRawResponse> operation
              = new UpdatePassthroughRaw.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

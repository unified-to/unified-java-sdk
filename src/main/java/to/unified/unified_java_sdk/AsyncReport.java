/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.GetAccountingReportRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingReportsRequest;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingReportRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingReportResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingReportsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingReportsResponse;
import to.unified.unified_java_sdk.operations.GetAccountingReport;
import to.unified.unified_java_sdk.operations.ListAccountingReports;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncReport {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Report syncSDK;

    AsyncReport(Report syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Report sync() {
        return syncSDK;
    }


    /**
     * Retrieve a report
     * 
     * @return The async call builder
     */
    public GetAccountingReportRequestBuilder getAccountingReport() {
        return new GetAccountingReportRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a report
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetAccountingReportResponse>} - The async response
     */
    public CompletableFuture<GetAccountingReportResponse> getAccountingReport(GetAccountingReportRequest request) {
        AsyncRequestOperation<GetAccountingReportRequest, GetAccountingReportResponse> operation
              = new GetAccountingReport.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all reports
     * 
     * @return The async call builder
     */
    public ListAccountingReportsRequestBuilder listAccountingReports() {
        return new ListAccountingReportsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all reports
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListAccountingReportsResponse>} - The async response
     */
    public CompletableFuture<ListAccountingReportsResponse> listAccountingReports(ListAccountingReportsRequest request) {
        AsyncRequestOperation<ListAccountingReportsRequest, ListAccountingReportsResponse> operation
              = new ListAccountingReports.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

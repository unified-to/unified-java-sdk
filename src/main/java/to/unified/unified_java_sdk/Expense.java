/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.RequestOperation;

import to.unified.unified_java_sdk.models.operations.CreateAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.CreateAccountingExpenseResponse;
import to.unified.unified_java_sdk.models.operations.GetAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.GetAccountingExpenseResponse;
import to.unified.unified_java_sdk.models.operations.ListAccountingExpensesRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingExpensesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.ListAccountingExpensesResponse;
import to.unified.unified_java_sdk.models.operations.PatchAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.PatchAccountingExpenseResponse;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingExpenseResponse;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingExpenseRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingExpenseRequestBuilder;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingExpenseResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingExpense;
import to.unified.unified_java_sdk.operations.GetAccountingExpense;
import to.unified.unified_java_sdk.operations.ListAccountingExpenses;
import to.unified.unified_java_sdk.operations.PatchAccountingExpense;
import to.unified.unified_java_sdk.operations.RemoveAccountingExpense;
import to.unified.unified_java_sdk.operations.UpdateAccountingExpense;
import to.unified.unified_java_sdk.utils.Headers;


public class Expense {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final AsyncExpense asyncSDK;

    Expense(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.asyncSDK = new AsyncExpense(this, sdkConfiguration);
    }

    /**
     * Switches to the async SDK.
     * 
     * @return The async SDK
     */
    public AsyncExpense async() {
        return asyncSDK;
    }

    /**
     * Create an expense
     * 
     * @return The call builder
     */
    public CreateAccountingExpenseRequestBuilder createAccountingExpense() {
        return new CreateAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public CreateAccountingExpenseResponse createAccountingExpense(CreateAccountingExpenseRequest request) {
        RequestOperation<CreateAccountingExpenseRequest, CreateAccountingExpenseResponse> operation
              = new CreateAccountingExpense.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Retrieve an expense
     * 
     * @return The call builder
     */
    public GetAccountingExpenseRequestBuilder getAccountingExpense() {
        return new GetAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public GetAccountingExpenseResponse getAccountingExpense(GetAccountingExpenseRequest request) {
        RequestOperation<GetAccountingExpenseRequest, GetAccountingExpenseResponse> operation
              = new GetAccountingExpense.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * List all expenses
     * 
     * @return The call builder
     */
    public ListAccountingExpensesRequestBuilder listAccountingExpenses() {
        return new ListAccountingExpensesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all expenses
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public ListAccountingExpensesResponse listAccountingExpenses(ListAccountingExpensesRequest request) {
        RequestOperation<ListAccountingExpensesRequest, ListAccountingExpensesResponse> operation
              = new ListAccountingExpenses.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an expense
     * 
     * @return The call builder
     */
    public PatchAccountingExpenseRequestBuilder patchAccountingExpense() {
        return new PatchAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public PatchAccountingExpenseResponse patchAccountingExpense(PatchAccountingExpenseRequest request) {
        RequestOperation<PatchAccountingExpenseRequest, PatchAccountingExpenseResponse> operation
              = new PatchAccountingExpense.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Remove an expense
     * 
     * @return The call builder
     */
    public RemoveAccountingExpenseRequestBuilder removeAccountingExpense() {
        return new RemoveAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public RemoveAccountingExpenseResponse removeAccountingExpense(RemoveAccountingExpenseRequest request) {
        RequestOperation<RemoveAccountingExpenseRequest, RemoveAccountingExpenseResponse> operation
              = new RemoveAccountingExpense.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

    /**
     * Update an expense
     * 
     * @return The call builder
     */
    public UpdateAccountingExpenseRequestBuilder updateAccountingExpense() {
        return new UpdateAccountingExpenseRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an expense
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return The response from the API call
     * @throws RuntimeException subclass if the API call fails
     */
    public UpdateAccountingExpenseResponse updateAccountingExpense(UpdateAccountingExpenseRequest request) {
        RequestOperation<UpdateAccountingExpenseRequest, UpdateAccountingExpenseResponse> operation
              = new UpdateAccountingExpense.Sync(sdkConfiguration, _headers);
        return operation.handleResponse(operation.doRequest(request));
    }

}

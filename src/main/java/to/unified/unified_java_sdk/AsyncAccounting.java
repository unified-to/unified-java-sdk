/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateAccountingAccountRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingBillRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingCreditmemoRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingTaxrateRequest;
import to.unified.unified_java_sdk.models.operations.CreateAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingAccountRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingBalancesheetRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingBillRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingCreditmemoRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingOrganizationRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingProfitlossRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingReportRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingTaxrateRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.GetAccountingTrialbalanceRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingAccountsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingBalancesheetsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingBillsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingCategoriesRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingContactsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingCreditmemoesRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingInvoicesRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingJournalsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingOrdersRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingOrganizationsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingProfitlossesRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingPurchaseordersRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingReportsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingSalesordersRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingTaxratesRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingTransactionsRequest;
import to.unified.unified_java_sdk.models.operations.ListAccountingTrialbalancesRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingAccountRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingBillRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingCreditmemoRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingTaxrateRequest;
import to.unified.unified_java_sdk.models.operations.PatchAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingAccountRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingBillRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingCreditmemoRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingTaxrateRequest;
import to.unified.unified_java_sdk.models.operations.RemoveAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingAccountRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingBillRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingCategoryRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingContactRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingCreditmemoRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingInvoiceRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingJournalRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingOrderRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingPurchaseorderRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingSalesorderRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingTaxrateRequest;
import to.unified.unified_java_sdk.models.operations.UpdateAccountingTransactionRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingAccountRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingAccountResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingBillRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingBillResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingCreditmemoRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingCreditmemoResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingInvoiceResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingJournalResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingTaxrateRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingTaxrateResponse;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateAccountingTransactionResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingAccountRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingAccountResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingBalancesheetRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingBalancesheetResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingBillRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingBillResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingCreditmemoRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingCreditmemoResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingInvoiceResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingJournalResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingOrganizationRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingOrganizationResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingProfitlossRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingProfitlossResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingReportRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingReportResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTaxrateRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTaxrateResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTransactionResponse;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTrialbalanceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetAccountingTrialbalanceResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingAccountsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingAccountsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingBalancesheetsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingBalancesheetsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingBillsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingBillsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingCategoriesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingCategoriesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingContactsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingContactsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingCreditmemoesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingCreditmemoesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingInvoicesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingInvoicesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingJournalsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingJournalsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingOrdersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingOrdersResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingOrganizationsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingOrganizationsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingProfitlossesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingProfitlossesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingPurchaseordersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingPurchaseordersResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingReportsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingReportsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingSalesordersRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingSalesordersResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTaxratesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTaxratesResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTransactionsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTransactionsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTrialbalancesRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListAccountingTrialbalancesResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingAccountRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingAccountResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingBillRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingBillResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingCreditmemoRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingCreditmemoResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingInvoiceResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingJournalResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingTaxrateRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingTaxrateResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchAccountingTransactionResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingAccountRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingAccountResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingBillRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingBillResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingCreditmemoRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingCreditmemoResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingInvoiceResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingJournalResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingTaxrateRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingTaxrateResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveAccountingTransactionResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingAccountRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingAccountResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingBillRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingBillResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingCategoryRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingCategoryResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingContactRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingContactResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingCreditmemoRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingCreditmemoResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingInvoiceRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingInvoiceResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingJournalRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingJournalResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingOrderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingOrderResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingPurchaseorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingPurchaseorderResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingSalesorderRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingSalesorderResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingTaxrateRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingTaxrateResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingTransactionRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateAccountingTransactionResponse;
import to.unified.unified_java_sdk.operations.CreateAccountingAccount;
import to.unified.unified_java_sdk.operations.CreateAccountingBill;
import to.unified.unified_java_sdk.operations.CreateAccountingCategory;
import to.unified.unified_java_sdk.operations.CreateAccountingContact;
import to.unified.unified_java_sdk.operations.CreateAccountingCreditmemo;
import to.unified.unified_java_sdk.operations.CreateAccountingInvoice;
import to.unified.unified_java_sdk.operations.CreateAccountingJournal;
import to.unified.unified_java_sdk.operations.CreateAccountingOrder;
import to.unified.unified_java_sdk.operations.CreateAccountingPurchaseorder;
import to.unified.unified_java_sdk.operations.CreateAccountingSalesorder;
import to.unified.unified_java_sdk.operations.CreateAccountingTaxrate;
import to.unified.unified_java_sdk.operations.CreateAccountingTransaction;
import to.unified.unified_java_sdk.operations.GetAccountingAccount;
import to.unified.unified_java_sdk.operations.GetAccountingBalancesheet;
import to.unified.unified_java_sdk.operations.GetAccountingBill;
import to.unified.unified_java_sdk.operations.GetAccountingCategory;
import to.unified.unified_java_sdk.operations.GetAccountingContact;
import to.unified.unified_java_sdk.operations.GetAccountingCreditmemo;
import to.unified.unified_java_sdk.operations.GetAccountingInvoice;
import to.unified.unified_java_sdk.operations.GetAccountingJournal;
import to.unified.unified_java_sdk.operations.GetAccountingOrder;
import to.unified.unified_java_sdk.operations.GetAccountingOrganization;
import to.unified.unified_java_sdk.operations.GetAccountingProfitloss;
import to.unified.unified_java_sdk.operations.GetAccountingPurchaseorder;
import to.unified.unified_java_sdk.operations.GetAccountingReport;
import to.unified.unified_java_sdk.operations.GetAccountingSalesorder;
import to.unified.unified_java_sdk.operations.GetAccountingTaxrate;
import to.unified.unified_java_sdk.operations.GetAccountingTransaction;
import to.unified.unified_java_sdk.operations.GetAccountingTrialbalance;
import to.unified.unified_java_sdk.operations.ListAccountingAccounts;
import to.unified.unified_java_sdk.operations.ListAccountingBalancesheets;
import to.unified.unified_java_sdk.operations.ListAccountingBills;
import to.unified.unified_java_sdk.operations.ListAccountingCategories;
import to.unified.unified_java_sdk.operations.ListAccountingContacts;
import to.unified.unified_java_sdk.operations.ListAccountingCreditmemoes;
import to.unified.unified_java_sdk.operations.ListAccountingInvoices;
import to.unified.unified_java_sdk.operations.ListAccountingJournals;
import to.unified.unified_java_sdk.operations.ListAccountingOrders;
import to.unified.unified_java_sdk.operations.ListAccountingOrganizations;
import to.unified.unified_java_sdk.operations.ListAccountingProfitlosses;
import to.unified.unified_java_sdk.operations.ListAccountingPurchaseorders;
import to.unified.unified_java_sdk.operations.ListAccountingReports;
import to.unified.unified_java_sdk.operations.ListAccountingSalesorders;
import to.unified.unified_java_sdk.operations.ListAccountingTaxrates;
import to.unified.unified_java_sdk.operations.ListAccountingTransactions;
import to.unified.unified_java_sdk.operations.ListAccountingTrialbalances;
import to.unified.unified_java_sdk.operations.PatchAccountingAccount;
import to.unified.unified_java_sdk.operations.PatchAccountingBill;
import to.unified.unified_java_sdk.operations.PatchAccountingCategory;
import to.unified.unified_java_sdk.operations.PatchAccountingContact;
import to.unified.unified_java_sdk.operations.PatchAccountingCreditmemo;
import to.unified.unified_java_sdk.operations.PatchAccountingInvoice;
import to.unified.unified_java_sdk.operations.PatchAccountingJournal;
import to.unified.unified_java_sdk.operations.PatchAccountingOrder;
import to.unified.unified_java_sdk.operations.PatchAccountingPurchaseorder;
import to.unified.unified_java_sdk.operations.PatchAccountingSalesorder;
import to.unified.unified_java_sdk.operations.PatchAccountingTaxrate;
import to.unified.unified_java_sdk.operations.PatchAccountingTransaction;
import to.unified.unified_java_sdk.operations.RemoveAccountingAccount;
import to.unified.unified_java_sdk.operations.RemoveAccountingBill;
import to.unified.unified_java_sdk.operations.RemoveAccountingCategory;
import to.unified.unified_java_sdk.operations.RemoveAccountingContact;
import to.unified.unified_java_sdk.operations.RemoveAccountingCreditmemo;
import to.unified.unified_java_sdk.operations.RemoveAccountingInvoice;
import to.unified.unified_java_sdk.operations.RemoveAccountingJournal;
import to.unified.unified_java_sdk.operations.RemoveAccountingOrder;
import to.unified.unified_java_sdk.operations.RemoveAccountingPurchaseorder;
import to.unified.unified_java_sdk.operations.RemoveAccountingSalesorder;
import to.unified.unified_java_sdk.operations.RemoveAccountingTaxrate;
import to.unified.unified_java_sdk.operations.RemoveAccountingTransaction;
import to.unified.unified_java_sdk.operations.UpdateAccountingAccount;
import to.unified.unified_java_sdk.operations.UpdateAccountingBill;
import to.unified.unified_java_sdk.operations.UpdateAccountingCategory;
import to.unified.unified_java_sdk.operations.UpdateAccountingContact;
import to.unified.unified_java_sdk.operations.UpdateAccountingCreditmemo;
import to.unified.unified_java_sdk.operations.UpdateAccountingInvoice;
import to.unified.unified_java_sdk.operations.UpdateAccountingJournal;
import to.unified.unified_java_sdk.operations.UpdateAccountingOrder;
import to.unified.unified_java_sdk.operations.UpdateAccountingPurchaseorder;
import to.unified.unified_java_sdk.operations.UpdateAccountingSalesorder;
import to.unified.unified_java_sdk.operations.UpdateAccountingTaxrate;
import to.unified.unified_java_sdk.operations.UpdateAccountingTransaction;


public class AsyncAccounting {
    private final SDKConfiguration sdkConfiguration;
    private final Accounting syncSDK;

    AsyncAccounting(Accounting syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Accounting sync() {
        return syncSDK;
    }


    /**
     * Create an account
     * 
     * @return The async call builder
     */
    public CreateAccountingAccountRequestBuilder createAccountingAccount() {
        return new CreateAccountingAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingAccountResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingAccountResponse> createAccountingAccount(CreateAccountingAccountRequest request) {
        AsyncRequestOperation<CreateAccountingAccountRequest, CreateAccountingAccountResponse> operation
              = new CreateAccountingAccount.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a bill
     * 
     * @return The async call builder
     */
    public CreateAccountingBillRequestBuilder createAccountingBill() {
        return new CreateAccountingBillRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingBillResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingBillResponse> createAccountingBill(CreateAccountingBillRequest request) {
        AsyncRequestOperation<CreateAccountingBillRequest, CreateAccountingBillResponse> operation
              = new CreateAccountingBill.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a category
     * 
     * @return The async call builder
     */
    public CreateAccountingCategoryRequestBuilder createAccountingCategory() {
        return new CreateAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingCategoryResponse> createAccountingCategory(CreateAccountingCategoryRequest request) {
        AsyncRequestOperation<CreateAccountingCategoryRequest, CreateAccountingCategoryResponse> operation
              = new CreateAccountingCategory.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a contact
     * 
     * @return The async call builder
     */
    public CreateAccountingContactRequestBuilder createAccountingContact() {
        return new CreateAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingContactResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingContactResponse> createAccountingContact(CreateAccountingContactRequest request) {
        AsyncRequestOperation<CreateAccountingContactRequest, CreateAccountingContactResponse> operation
              = new CreateAccountingContact.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a creditmemo
     * 
     * @return The async call builder
     */
    public CreateAccountingCreditmemoRequestBuilder createAccountingCreditmemo() {
        return new CreateAccountingCreditmemoRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a creditmemo
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingCreditmemoResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingCreditmemoResponse> createAccountingCreditmemo(CreateAccountingCreditmemoRequest request) {
        AsyncRequestOperation<CreateAccountingCreditmemoRequest, CreateAccountingCreditmemoResponse> operation
              = new CreateAccountingCreditmemo.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create an invoice
     * 
     * @return The async call builder
     */
    public CreateAccountingInvoiceRequestBuilder createAccountingInvoice() {
        return new CreateAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingInvoiceResponse> createAccountingInvoice(CreateAccountingInvoiceRequest request) {
        AsyncRequestOperation<CreateAccountingInvoiceRequest, CreateAccountingInvoiceResponse> operation
              = new CreateAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a journal
     * 
     * @return The async call builder
     */
    public CreateAccountingJournalRequestBuilder createAccountingJournal() {
        return new CreateAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingJournalResponse> createAccountingJournal(CreateAccountingJournalRequest request) {
        AsyncRequestOperation<CreateAccountingJournalRequest, CreateAccountingJournalResponse> operation
              = new CreateAccountingJournal.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create an order
     * 
     * @return The async call builder
     */
    public CreateAccountingOrderRequestBuilder createAccountingOrder() {
        return new CreateAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Create an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingOrderResponse> createAccountingOrder(CreateAccountingOrderRequest request) {
        AsyncRequestOperation<CreateAccountingOrderRequest, CreateAccountingOrderResponse> operation
              = new CreateAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a purchaseorder
     * 
     * @return The async call builder
     */
    public CreateAccountingPurchaseorderRequestBuilder createAccountingPurchaseorder() {
        return new CreateAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingPurchaseorderResponse> createAccountingPurchaseorder(CreateAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<CreateAccountingPurchaseorderRequest, CreateAccountingPurchaseorderResponse> operation
              = new CreateAccountingPurchaseorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a salesorder
     * 
     * @return The async call builder
     */
    public CreateAccountingSalesorderRequestBuilder createAccountingSalesorder() {
        return new CreateAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingSalesorderResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingSalesorderResponse> createAccountingSalesorder(CreateAccountingSalesorderRequest request) {
        AsyncRequestOperation<CreateAccountingSalesorderRequest, CreateAccountingSalesorderResponse> operation
              = new CreateAccountingSalesorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a taxrate
     * 
     * @return The async call builder
     */
    public CreateAccountingTaxrateRequestBuilder createAccountingTaxrate() {
        return new CreateAccountingTaxrateRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a taxrate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingTaxrateResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingTaxrateResponse> createAccountingTaxrate(CreateAccountingTaxrateRequest request) {
        AsyncRequestOperation<CreateAccountingTaxrateRequest, CreateAccountingTaxrateResponse> operation
              = new CreateAccountingTaxrate.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Create a transaction
     * 
     * @return The async call builder
     */
    public CreateAccountingTransactionRequestBuilder createAccountingTransaction() {
        return new CreateAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;CreateAccountingTransactionResponse&gt; - The async response
     */
    public CompletableFuture<CreateAccountingTransactionResponse> createAccountingTransaction(CreateAccountingTransactionRequest request) {
        AsyncRequestOperation<CreateAccountingTransactionRequest, CreateAccountingTransactionResponse> operation
              = new CreateAccountingTransaction.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an account
     * 
     * @return The async call builder
     */
    public GetAccountingAccountRequestBuilder getAccountingAccount() {
        return new GetAccountingAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingAccountResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingAccountResponse> getAccountingAccount(GetAccountingAccountRequest request) {
        AsyncRequestOperation<GetAccountingAccountRequest, GetAccountingAccountResponse> operation
              = new GetAccountingAccount.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a balancesheet
     * 
     * @return The async call builder
     */
    public GetAccountingBalancesheetRequestBuilder getAccountingBalancesheet() {
        return new GetAccountingBalancesheetRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a balancesheet
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingBalancesheetResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingBalancesheetResponse> getAccountingBalancesheet(GetAccountingBalancesheetRequest request) {
        AsyncRequestOperation<GetAccountingBalancesheetRequest, GetAccountingBalancesheetResponse> operation
              = new GetAccountingBalancesheet.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a bill
     * 
     * @return The async call builder
     */
    public GetAccountingBillRequestBuilder getAccountingBill() {
        return new GetAccountingBillRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingBillResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingBillResponse> getAccountingBill(GetAccountingBillRequest request) {
        AsyncRequestOperation<GetAccountingBillRequest, GetAccountingBillResponse> operation
              = new GetAccountingBill.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a category
     * 
     * @return The async call builder
     */
    public GetAccountingCategoryRequestBuilder getAccountingCategory() {
        return new GetAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingCategoryResponse> getAccountingCategory(GetAccountingCategoryRequest request) {
        AsyncRequestOperation<GetAccountingCategoryRequest, GetAccountingCategoryResponse> operation
              = new GetAccountingCategory.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a contact
     * 
     * @return The async call builder
     */
    public GetAccountingContactRequestBuilder getAccountingContact() {
        return new GetAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingContactResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingContactResponse> getAccountingContact(GetAccountingContactRequest request) {
        AsyncRequestOperation<GetAccountingContactRequest, GetAccountingContactResponse> operation
              = new GetAccountingContact.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a creditmemo
     * 
     * @return The async call builder
     */
    public GetAccountingCreditmemoRequestBuilder getAccountingCreditmemo() {
        return new GetAccountingCreditmemoRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a creditmemo
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingCreditmemoResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingCreditmemoResponse> getAccountingCreditmemo(GetAccountingCreditmemoRequest request) {
        AsyncRequestOperation<GetAccountingCreditmemoRequest, GetAccountingCreditmemoResponse> operation
              = new GetAccountingCreditmemo.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an invoice
     * 
     * @return The async call builder
     */
    public GetAccountingInvoiceRequestBuilder getAccountingInvoice() {
        return new GetAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingInvoiceResponse> getAccountingInvoice(GetAccountingInvoiceRequest request) {
        AsyncRequestOperation<GetAccountingInvoiceRequest, GetAccountingInvoiceResponse> operation
              = new GetAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a journal
     * 
     * @return The async call builder
     */
    public GetAccountingJournalRequestBuilder getAccountingJournal() {
        return new GetAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingJournalResponse> getAccountingJournal(GetAccountingJournalRequest request) {
        AsyncRequestOperation<GetAccountingJournalRequest, GetAccountingJournalResponse> operation
              = new GetAccountingJournal.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an order
     * 
     * @return The async call builder
     */
    public GetAccountingOrderRequestBuilder getAccountingOrder() {
        return new GetAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingOrderResponse> getAccountingOrder(GetAccountingOrderRequest request) {
        AsyncRequestOperation<GetAccountingOrderRequest, GetAccountingOrderResponse> operation
              = new GetAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve an organization
     * 
     * @return The async call builder
     */
    public GetAccountingOrganizationRequestBuilder getAccountingOrganization() {
        return new GetAccountingOrganizationRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve an organization
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingOrganizationResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingOrganizationResponse> getAccountingOrganization(GetAccountingOrganizationRequest request) {
        AsyncRequestOperation<GetAccountingOrganizationRequest, GetAccountingOrganizationResponse> operation
              = new GetAccountingOrganization.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a profitloss
     * 
     * @return The async call builder
     */
    public GetAccountingProfitlossRequestBuilder getAccountingProfitloss() {
        return new GetAccountingProfitlossRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a profitloss
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingProfitlossResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingProfitlossResponse> getAccountingProfitloss(GetAccountingProfitlossRequest request) {
        AsyncRequestOperation<GetAccountingProfitlossRequest, GetAccountingProfitlossResponse> operation
              = new GetAccountingProfitloss.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a purchaseorder
     * 
     * @return The async call builder
     */
    public GetAccountingPurchaseorderRequestBuilder getAccountingPurchaseorder() {
        return new GetAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingPurchaseorderResponse> getAccountingPurchaseorder(GetAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<GetAccountingPurchaseorderRequest, GetAccountingPurchaseorderResponse> operation
              = new GetAccountingPurchaseorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a report
     * 
     * @return The async call builder
     */
    public GetAccountingReportRequestBuilder getAccountingReport() {
        return new GetAccountingReportRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a report
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingReportResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingReportResponse> getAccountingReport(GetAccountingReportRequest request) {
        AsyncRequestOperation<GetAccountingReportRequest, GetAccountingReportResponse> operation
              = new GetAccountingReport.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a salesorder
     * 
     * @return The async call builder
     */
    public GetAccountingSalesorderRequestBuilder getAccountingSalesorder() {
        return new GetAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingSalesorderResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingSalesorderResponse> getAccountingSalesorder(GetAccountingSalesorderRequest request) {
        AsyncRequestOperation<GetAccountingSalesorderRequest, GetAccountingSalesorderResponse> operation
              = new GetAccountingSalesorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a taxrate
     * 
     * @return The async call builder
     */
    public GetAccountingTaxrateRequestBuilder getAccountingTaxrate() {
        return new GetAccountingTaxrateRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a taxrate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingTaxrateResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingTaxrateResponse> getAccountingTaxrate(GetAccountingTaxrateRequest request) {
        AsyncRequestOperation<GetAccountingTaxrateRequest, GetAccountingTaxrateResponse> operation
              = new GetAccountingTaxrate.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a transaction
     * 
     * @return The async call builder
     */
    public GetAccountingTransactionRequestBuilder getAccountingTransaction() {
        return new GetAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingTransactionResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingTransactionResponse> getAccountingTransaction(GetAccountingTransactionRequest request) {
        AsyncRequestOperation<GetAccountingTransactionRequest, GetAccountingTransactionResponse> operation
              = new GetAccountingTransaction.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a trialbalance
     * 
     * @return The async call builder
     */
    public GetAccountingTrialbalanceRequestBuilder getAccountingTrialbalance() {
        return new GetAccountingTrialbalanceRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a trialbalance
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;GetAccountingTrialbalanceResponse&gt; - The async response
     */
    public CompletableFuture<GetAccountingTrialbalanceResponse> getAccountingTrialbalance(GetAccountingTrialbalanceRequest request) {
        AsyncRequestOperation<GetAccountingTrialbalanceRequest, GetAccountingTrialbalanceResponse> operation
              = new GetAccountingTrialbalance.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all accounts
     * 
     * @return The async call builder
     */
    public ListAccountingAccountsRequestBuilder listAccountingAccounts() {
        return new ListAccountingAccountsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all accounts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingAccountsResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingAccountsResponse> listAccountingAccounts(ListAccountingAccountsRequest request) {
        AsyncRequestOperation<ListAccountingAccountsRequest, ListAccountingAccountsResponse> operation
              = new ListAccountingAccounts.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all balancesheets
     * 
     * @return The async call builder
     */
    public ListAccountingBalancesheetsRequestBuilder listAccountingBalancesheets() {
        return new ListAccountingBalancesheetsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all balancesheets
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingBalancesheetsResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingBalancesheetsResponse> listAccountingBalancesheets(ListAccountingBalancesheetsRequest request) {
        AsyncRequestOperation<ListAccountingBalancesheetsRequest, ListAccountingBalancesheetsResponse> operation
              = new ListAccountingBalancesheets.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all bills
     * 
     * @return The async call builder
     */
    public ListAccountingBillsRequestBuilder listAccountingBills() {
        return new ListAccountingBillsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all bills
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingBillsResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingBillsResponse> listAccountingBills(ListAccountingBillsRequest request) {
        AsyncRequestOperation<ListAccountingBillsRequest, ListAccountingBillsResponse> operation
              = new ListAccountingBills.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all categories
     * 
     * @return The async call builder
     */
    public ListAccountingCategoriesRequestBuilder listAccountingCategories() {
        return new ListAccountingCategoriesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all categories
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingCategoriesResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingCategoriesResponse> listAccountingCategories(ListAccountingCategoriesRequest request) {
        AsyncRequestOperation<ListAccountingCategoriesRequest, ListAccountingCategoriesResponse> operation
              = new ListAccountingCategories.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all contacts
     * 
     * @return The async call builder
     */
    public ListAccountingContactsRequestBuilder listAccountingContacts() {
        return new ListAccountingContactsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all contacts
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingContactsResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingContactsResponse> listAccountingContacts(ListAccountingContactsRequest request) {
        AsyncRequestOperation<ListAccountingContactsRequest, ListAccountingContactsResponse> operation
              = new ListAccountingContacts.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all creditmemoes
     * 
     * @return The async call builder
     */
    public ListAccountingCreditmemoesRequestBuilder listAccountingCreditmemoes() {
        return new ListAccountingCreditmemoesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all creditmemoes
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingCreditmemoesResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingCreditmemoesResponse> listAccountingCreditmemoes(ListAccountingCreditmemoesRequest request) {
        AsyncRequestOperation<ListAccountingCreditmemoesRequest, ListAccountingCreditmemoesResponse> operation
              = new ListAccountingCreditmemoes.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all invoices
     * 
     * @return The async call builder
     */
    public ListAccountingInvoicesRequestBuilder listAccountingInvoices() {
        return new ListAccountingInvoicesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all invoices
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingInvoicesResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingInvoicesResponse> listAccountingInvoices(ListAccountingInvoicesRequest request) {
        AsyncRequestOperation<ListAccountingInvoicesRequest, ListAccountingInvoicesResponse> operation
              = new ListAccountingInvoices.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all journals
     * 
     * @return The async call builder
     */
    public ListAccountingJournalsRequestBuilder listAccountingJournals() {
        return new ListAccountingJournalsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all journals
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingJournalsResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingJournalsResponse> listAccountingJournals(ListAccountingJournalsRequest request) {
        AsyncRequestOperation<ListAccountingJournalsRequest, ListAccountingJournalsResponse> operation
              = new ListAccountingJournals.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all orders
     * 
     * @return The async call builder
     */
    public ListAccountingOrdersRequestBuilder listAccountingOrders() {
        return new ListAccountingOrdersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all orders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingOrdersResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingOrdersResponse> listAccountingOrders(ListAccountingOrdersRequest request) {
        AsyncRequestOperation<ListAccountingOrdersRequest, ListAccountingOrdersResponse> operation
              = new ListAccountingOrders.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all organizations
     * 
     * @return The async call builder
     */
    public ListAccountingOrganizationsRequestBuilder listAccountingOrganizations() {
        return new ListAccountingOrganizationsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all organizations
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingOrganizationsResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingOrganizationsResponse> listAccountingOrganizations(ListAccountingOrganizationsRequest request) {
        AsyncRequestOperation<ListAccountingOrganizationsRequest, ListAccountingOrganizationsResponse> operation
              = new ListAccountingOrganizations.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all profitlosses
     * 
     * @return The async call builder
     */
    public ListAccountingProfitlossesRequestBuilder listAccountingProfitlosses() {
        return new ListAccountingProfitlossesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all profitlosses
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingProfitlossesResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingProfitlossesResponse> listAccountingProfitlosses(ListAccountingProfitlossesRequest request) {
        AsyncRequestOperation<ListAccountingProfitlossesRequest, ListAccountingProfitlossesResponse> operation
              = new ListAccountingProfitlosses.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all purchaseorders
     * 
     * @return The async call builder
     */
    public ListAccountingPurchaseordersRequestBuilder listAccountingPurchaseorders() {
        return new ListAccountingPurchaseordersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all purchaseorders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingPurchaseordersResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingPurchaseordersResponse> listAccountingPurchaseorders(ListAccountingPurchaseordersRequest request) {
        AsyncRequestOperation<ListAccountingPurchaseordersRequest, ListAccountingPurchaseordersResponse> operation
              = new ListAccountingPurchaseorders.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all reports
     * 
     * @return The async call builder
     */
    public ListAccountingReportsRequestBuilder listAccountingReports() {
        return new ListAccountingReportsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all reports
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingReportsResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingReportsResponse> listAccountingReports(ListAccountingReportsRequest request) {
        AsyncRequestOperation<ListAccountingReportsRequest, ListAccountingReportsResponse> operation
              = new ListAccountingReports.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all salesorders
     * 
     * @return The async call builder
     */
    public ListAccountingSalesordersRequestBuilder listAccountingSalesorders() {
        return new ListAccountingSalesordersRequestBuilder(sdkConfiguration);
    }

    /**
     * List all salesorders
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingSalesordersResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingSalesordersResponse> listAccountingSalesorders(ListAccountingSalesordersRequest request) {
        AsyncRequestOperation<ListAccountingSalesordersRequest, ListAccountingSalesordersResponse> operation
              = new ListAccountingSalesorders.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all taxrates
     * 
     * @return The async call builder
     */
    public ListAccountingTaxratesRequestBuilder listAccountingTaxrates() {
        return new ListAccountingTaxratesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all taxrates
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingTaxratesResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingTaxratesResponse> listAccountingTaxrates(ListAccountingTaxratesRequest request) {
        AsyncRequestOperation<ListAccountingTaxratesRequest, ListAccountingTaxratesResponse> operation
              = new ListAccountingTaxrates.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all transactions
     * 
     * @return The async call builder
     */
    public ListAccountingTransactionsRequestBuilder listAccountingTransactions() {
        return new ListAccountingTransactionsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all transactions
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingTransactionsResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingTransactionsResponse> listAccountingTransactions(ListAccountingTransactionsRequest request) {
        AsyncRequestOperation<ListAccountingTransactionsRequest, ListAccountingTransactionsResponse> operation
              = new ListAccountingTransactions.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all trialbalances
     * 
     * @return The async call builder
     */
    public ListAccountingTrialbalancesRequestBuilder listAccountingTrialbalances() {
        return new ListAccountingTrialbalancesRequestBuilder(sdkConfiguration);
    }

    /**
     * List all trialbalances
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;ListAccountingTrialbalancesResponse&gt; - The async response
     */
    public CompletableFuture<ListAccountingTrialbalancesResponse> listAccountingTrialbalances(ListAccountingTrialbalancesRequest request) {
        AsyncRequestOperation<ListAccountingTrialbalancesRequest, ListAccountingTrialbalancesResponse> operation
              = new ListAccountingTrialbalances.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an account
     * 
     * @return The async call builder
     */
    public PatchAccountingAccountRequestBuilder patchAccountingAccount() {
        return new PatchAccountingAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingAccountResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingAccountResponse> patchAccountingAccount(PatchAccountingAccountRequest request) {
        AsyncRequestOperation<PatchAccountingAccountRequest, PatchAccountingAccountResponse> operation
              = new PatchAccountingAccount.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a bill
     * 
     * @return The async call builder
     */
    public PatchAccountingBillRequestBuilder patchAccountingBill() {
        return new PatchAccountingBillRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingBillResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingBillResponse> patchAccountingBill(PatchAccountingBillRequest request) {
        AsyncRequestOperation<PatchAccountingBillRequest, PatchAccountingBillResponse> operation
              = new PatchAccountingBill.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a category
     * 
     * @return The async call builder
     */
    public PatchAccountingCategoryRequestBuilder patchAccountingCategory() {
        return new PatchAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingCategoryResponse> patchAccountingCategory(PatchAccountingCategoryRequest request) {
        AsyncRequestOperation<PatchAccountingCategoryRequest, PatchAccountingCategoryResponse> operation
              = new PatchAccountingCategory.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a contact
     * 
     * @return The async call builder
     */
    public PatchAccountingContactRequestBuilder patchAccountingContact() {
        return new PatchAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingContactResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingContactResponse> patchAccountingContact(PatchAccountingContactRequest request) {
        AsyncRequestOperation<PatchAccountingContactRequest, PatchAccountingContactResponse> operation
              = new PatchAccountingContact.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a creditmemo
     * 
     * @return The async call builder
     */
    public PatchAccountingCreditmemoRequestBuilder patchAccountingCreditmemo() {
        return new PatchAccountingCreditmemoRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a creditmemo
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingCreditmemoResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingCreditmemoResponse> patchAccountingCreditmemo(PatchAccountingCreditmemoRequest request) {
        AsyncRequestOperation<PatchAccountingCreditmemoRequest, PatchAccountingCreditmemoResponse> operation
              = new PatchAccountingCreditmemo.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an invoice
     * 
     * @return The async call builder
     */
    public PatchAccountingInvoiceRequestBuilder patchAccountingInvoice() {
        return new PatchAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingInvoiceResponse> patchAccountingInvoice(PatchAccountingInvoiceRequest request) {
        AsyncRequestOperation<PatchAccountingInvoiceRequest, PatchAccountingInvoiceResponse> operation
              = new PatchAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a journal
     * 
     * @return The async call builder
     */
    public PatchAccountingJournalRequestBuilder patchAccountingJournal() {
        return new PatchAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingJournalResponse> patchAccountingJournal(PatchAccountingJournalRequest request) {
        AsyncRequestOperation<PatchAccountingJournalRequest, PatchAccountingJournalResponse> operation
              = new PatchAccountingJournal.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an order
     * 
     * @return The async call builder
     */
    public PatchAccountingOrderRequestBuilder patchAccountingOrder() {
        return new PatchAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingOrderResponse> patchAccountingOrder(PatchAccountingOrderRequest request) {
        AsyncRequestOperation<PatchAccountingOrderRequest, PatchAccountingOrderResponse> operation
              = new PatchAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a purchaseorder
     * 
     * @return The async call builder
     */
    public PatchAccountingPurchaseorderRequestBuilder patchAccountingPurchaseorder() {
        return new PatchAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingPurchaseorderResponse> patchAccountingPurchaseorder(PatchAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<PatchAccountingPurchaseorderRequest, PatchAccountingPurchaseorderResponse> operation
              = new PatchAccountingPurchaseorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a salesorder
     * 
     * @return The async call builder
     */
    public PatchAccountingSalesorderRequestBuilder patchAccountingSalesorder() {
        return new PatchAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingSalesorderResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingSalesorderResponse> patchAccountingSalesorder(PatchAccountingSalesorderRequest request) {
        AsyncRequestOperation<PatchAccountingSalesorderRequest, PatchAccountingSalesorderResponse> operation
              = new PatchAccountingSalesorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a taxrate
     * 
     * @return The async call builder
     */
    public PatchAccountingTaxrateRequestBuilder patchAccountingTaxrate() {
        return new PatchAccountingTaxrateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a taxrate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingTaxrateResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingTaxrateResponse> patchAccountingTaxrate(PatchAccountingTaxrateRequest request) {
        AsyncRequestOperation<PatchAccountingTaxrateRequest, PatchAccountingTaxrateResponse> operation
              = new PatchAccountingTaxrate.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a transaction
     * 
     * @return The async call builder
     */
    public PatchAccountingTransactionRequestBuilder patchAccountingTransaction() {
        return new PatchAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;PatchAccountingTransactionResponse&gt; - The async response
     */
    public CompletableFuture<PatchAccountingTransactionResponse> patchAccountingTransaction(PatchAccountingTransactionRequest request) {
        AsyncRequestOperation<PatchAccountingTransactionRequest, PatchAccountingTransactionResponse> operation
              = new PatchAccountingTransaction.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an account
     * 
     * @return The async call builder
     */
    public RemoveAccountingAccountRequestBuilder removeAccountingAccount() {
        return new RemoveAccountingAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingAccountResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingAccountResponse> removeAccountingAccount(RemoveAccountingAccountRequest request) {
        AsyncRequestOperation<RemoveAccountingAccountRequest, RemoveAccountingAccountResponse> operation
              = new RemoveAccountingAccount.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a bill
     * 
     * @return The async call builder
     */
    public RemoveAccountingBillRequestBuilder removeAccountingBill() {
        return new RemoveAccountingBillRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingBillResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingBillResponse> removeAccountingBill(RemoveAccountingBillRequest request) {
        AsyncRequestOperation<RemoveAccountingBillRequest, RemoveAccountingBillResponse> operation
              = new RemoveAccountingBill.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a category
     * 
     * @return The async call builder
     */
    public RemoveAccountingCategoryRequestBuilder removeAccountingCategory() {
        return new RemoveAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingCategoryResponse> removeAccountingCategory(RemoveAccountingCategoryRequest request) {
        AsyncRequestOperation<RemoveAccountingCategoryRequest, RemoveAccountingCategoryResponse> operation
              = new RemoveAccountingCategory.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a contact
     * 
     * @return The async call builder
     */
    public RemoveAccountingContactRequestBuilder removeAccountingContact() {
        return new RemoveAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingContactResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingContactResponse> removeAccountingContact(RemoveAccountingContactRequest request) {
        AsyncRequestOperation<RemoveAccountingContactRequest, RemoveAccountingContactResponse> operation
              = new RemoveAccountingContact.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a creditmemo
     * 
     * @return The async call builder
     */
    public RemoveAccountingCreditmemoRequestBuilder removeAccountingCreditmemo() {
        return new RemoveAccountingCreditmemoRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a creditmemo
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingCreditmemoResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingCreditmemoResponse> removeAccountingCreditmemo(RemoveAccountingCreditmemoRequest request) {
        AsyncRequestOperation<RemoveAccountingCreditmemoRequest, RemoveAccountingCreditmemoResponse> operation
              = new RemoveAccountingCreditmemo.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an invoice
     * 
     * @return The async call builder
     */
    public RemoveAccountingInvoiceRequestBuilder removeAccountingInvoice() {
        return new RemoveAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingInvoiceResponse> removeAccountingInvoice(RemoveAccountingInvoiceRequest request) {
        AsyncRequestOperation<RemoveAccountingInvoiceRequest, RemoveAccountingInvoiceResponse> operation
              = new RemoveAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a journal
     * 
     * @return The async call builder
     */
    public RemoveAccountingJournalRequestBuilder removeAccountingJournal() {
        return new RemoveAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingJournalResponse> removeAccountingJournal(RemoveAccountingJournalRequest request) {
        AsyncRequestOperation<RemoveAccountingJournalRequest, RemoveAccountingJournalResponse> operation
              = new RemoveAccountingJournal.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove an order
     * 
     * @return The async call builder
     */
    public RemoveAccountingOrderRequestBuilder removeAccountingOrder() {
        return new RemoveAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingOrderResponse> removeAccountingOrder(RemoveAccountingOrderRequest request) {
        AsyncRequestOperation<RemoveAccountingOrderRequest, RemoveAccountingOrderResponse> operation
              = new RemoveAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a purchaseorder
     * 
     * @return The async call builder
     */
    public RemoveAccountingPurchaseorderRequestBuilder removeAccountingPurchaseorder() {
        return new RemoveAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingPurchaseorderResponse> removeAccountingPurchaseorder(RemoveAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<RemoveAccountingPurchaseorderRequest, RemoveAccountingPurchaseorderResponse> operation
              = new RemoveAccountingPurchaseorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a salesorder
     * 
     * @return The async call builder
     */
    public RemoveAccountingSalesorderRequestBuilder removeAccountingSalesorder() {
        return new RemoveAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingSalesorderResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingSalesorderResponse> removeAccountingSalesorder(RemoveAccountingSalesorderRequest request) {
        AsyncRequestOperation<RemoveAccountingSalesorderRequest, RemoveAccountingSalesorderResponse> operation
              = new RemoveAccountingSalesorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a taxrate
     * 
     * @return The async call builder
     */
    public RemoveAccountingTaxrateRequestBuilder removeAccountingTaxrate() {
        return new RemoveAccountingTaxrateRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a taxrate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingTaxrateResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingTaxrateResponse> removeAccountingTaxrate(RemoveAccountingTaxrateRequest request) {
        AsyncRequestOperation<RemoveAccountingTaxrateRequest, RemoveAccountingTaxrateResponse> operation
              = new RemoveAccountingTaxrate.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a transaction
     * 
     * @return The async call builder
     */
    public RemoveAccountingTransactionRequestBuilder removeAccountingTransaction() {
        return new RemoveAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;RemoveAccountingTransactionResponse&gt; - The async response
     */
    public CompletableFuture<RemoveAccountingTransactionResponse> removeAccountingTransaction(RemoveAccountingTransactionRequest request) {
        AsyncRequestOperation<RemoveAccountingTransactionRequest, RemoveAccountingTransactionResponse> operation
              = new RemoveAccountingTransaction.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an account
     * 
     * @return The async call builder
     */
    public UpdateAccountingAccountRequestBuilder updateAccountingAccount() {
        return new UpdateAccountingAccountRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an account
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingAccountResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingAccountResponse> updateAccountingAccount(UpdateAccountingAccountRequest request) {
        AsyncRequestOperation<UpdateAccountingAccountRequest, UpdateAccountingAccountResponse> operation
              = new UpdateAccountingAccount.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a bill
     * 
     * @return The async call builder
     */
    public UpdateAccountingBillRequestBuilder updateAccountingBill() {
        return new UpdateAccountingBillRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a bill
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingBillResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingBillResponse> updateAccountingBill(UpdateAccountingBillRequest request) {
        AsyncRequestOperation<UpdateAccountingBillRequest, UpdateAccountingBillResponse> operation
              = new UpdateAccountingBill.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a category
     * 
     * @return The async call builder
     */
    public UpdateAccountingCategoryRequestBuilder updateAccountingCategory() {
        return new UpdateAccountingCategoryRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a category
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingCategoryResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingCategoryResponse> updateAccountingCategory(UpdateAccountingCategoryRequest request) {
        AsyncRequestOperation<UpdateAccountingCategoryRequest, UpdateAccountingCategoryResponse> operation
              = new UpdateAccountingCategory.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a contact
     * 
     * @return The async call builder
     */
    public UpdateAccountingContactRequestBuilder updateAccountingContact() {
        return new UpdateAccountingContactRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a contact
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingContactResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingContactResponse> updateAccountingContact(UpdateAccountingContactRequest request) {
        AsyncRequestOperation<UpdateAccountingContactRequest, UpdateAccountingContactResponse> operation
              = new UpdateAccountingContact.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a creditmemo
     * 
     * @return The async call builder
     */
    public UpdateAccountingCreditmemoRequestBuilder updateAccountingCreditmemo() {
        return new UpdateAccountingCreditmemoRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a creditmemo
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingCreditmemoResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingCreditmemoResponse> updateAccountingCreditmemo(UpdateAccountingCreditmemoRequest request) {
        AsyncRequestOperation<UpdateAccountingCreditmemoRequest, UpdateAccountingCreditmemoResponse> operation
              = new UpdateAccountingCreditmemo.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an invoice
     * 
     * @return The async call builder
     */
    public UpdateAccountingInvoiceRequestBuilder updateAccountingInvoice() {
        return new UpdateAccountingInvoiceRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an invoice
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingInvoiceResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingInvoiceResponse> updateAccountingInvoice(UpdateAccountingInvoiceRequest request) {
        AsyncRequestOperation<UpdateAccountingInvoiceRequest, UpdateAccountingInvoiceResponse> operation
              = new UpdateAccountingInvoice.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a journal
     * 
     * @return The async call builder
     */
    public UpdateAccountingJournalRequestBuilder updateAccountingJournal() {
        return new UpdateAccountingJournalRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a journal
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingJournalResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingJournalResponse> updateAccountingJournal(UpdateAccountingJournalRequest request) {
        AsyncRequestOperation<UpdateAccountingJournalRequest, UpdateAccountingJournalResponse> operation
              = new UpdateAccountingJournal.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update an order
     * 
     * @return The async call builder
     */
    public UpdateAccountingOrderRequestBuilder updateAccountingOrder() {
        return new UpdateAccountingOrderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update an order
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingOrderResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingOrderResponse> updateAccountingOrder(UpdateAccountingOrderRequest request) {
        AsyncRequestOperation<UpdateAccountingOrderRequest, UpdateAccountingOrderResponse> operation
              = new UpdateAccountingOrder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a purchaseorder
     * 
     * @return The async call builder
     */
    public UpdateAccountingPurchaseorderRequestBuilder updateAccountingPurchaseorder() {
        return new UpdateAccountingPurchaseorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a purchaseorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingPurchaseorderResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingPurchaseorderResponse> updateAccountingPurchaseorder(UpdateAccountingPurchaseorderRequest request) {
        AsyncRequestOperation<UpdateAccountingPurchaseorderRequest, UpdateAccountingPurchaseorderResponse> operation
              = new UpdateAccountingPurchaseorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a salesorder
     * 
     * @return The async call builder
     */
    public UpdateAccountingSalesorderRequestBuilder updateAccountingSalesorder() {
        return new UpdateAccountingSalesorderRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a salesorder
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingSalesorderResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingSalesorderResponse> updateAccountingSalesorder(UpdateAccountingSalesorderRequest request) {
        AsyncRequestOperation<UpdateAccountingSalesorderRequest, UpdateAccountingSalesorderResponse> operation
              = new UpdateAccountingSalesorder.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a taxrate
     * 
     * @return The async call builder
     */
    public UpdateAccountingTaxrateRequestBuilder updateAccountingTaxrate() {
        return new UpdateAccountingTaxrateRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a taxrate
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingTaxrateResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingTaxrateResponse> updateAccountingTaxrate(UpdateAccountingTaxrateRequest request) {
        AsyncRequestOperation<UpdateAccountingTaxrateRequest, UpdateAccountingTaxrateResponse> operation
              = new UpdateAccountingTaxrate.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a transaction
     * 
     * @return The async call builder
     */
    public UpdateAccountingTransactionRequestBuilder updateAccountingTransaction() {
        return new UpdateAccountingTransactionRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a transaction
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return CompletableFuture&lt;UpdateAccountingTransactionResponse&gt; - The async response
     */
    public CompletableFuture<UpdateAccountingTransactionResponse> updateAccountingTransaction(UpdateAccountingTransactionRequest request) {
        AsyncRequestOperation<UpdateAccountingTransactionRequest, UpdateAccountingTransactionResponse> operation
              = new UpdateAccountingTransaction.Async(sdkConfiguration);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */
package to.unified.unified_java_sdk;

import static to.unified.unified_java_sdk.operations.Operations.AsyncRequestOperation;

import java.util.concurrent.CompletableFuture;
import to.unified.unified_java_sdk.models.operations.CreateUcRecordingRequest;
import to.unified.unified_java_sdk.models.operations.GetCalendarRecordingRequest;
import to.unified.unified_java_sdk.models.operations.GetUcRecordingRequest;
import to.unified.unified_java_sdk.models.operations.ListCalendarRecordingsRequest;
import to.unified.unified_java_sdk.models.operations.ListUcRecordingsRequest;
import to.unified.unified_java_sdk.models.operations.PatchUcRecordingRequest;
import to.unified.unified_java_sdk.models.operations.RemoveUcRecordingRequest;
import to.unified.unified_java_sdk.models.operations.UpdateUcRecordingRequest;
import to.unified.unified_java_sdk.models.operations.async.CreateUcRecordingRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.CreateUcRecordingResponse;
import to.unified.unified_java_sdk.models.operations.async.GetCalendarRecordingRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetCalendarRecordingResponse;
import to.unified.unified_java_sdk.models.operations.async.GetUcRecordingRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.GetUcRecordingResponse;
import to.unified.unified_java_sdk.models.operations.async.ListCalendarRecordingsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListCalendarRecordingsResponse;
import to.unified.unified_java_sdk.models.operations.async.ListUcRecordingsRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.ListUcRecordingsResponse;
import to.unified.unified_java_sdk.models.operations.async.PatchUcRecordingRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.PatchUcRecordingResponse;
import to.unified.unified_java_sdk.models.operations.async.RemoveUcRecordingRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.RemoveUcRecordingResponse;
import to.unified.unified_java_sdk.models.operations.async.UpdateUcRecordingRequestBuilder;
import to.unified.unified_java_sdk.models.operations.async.UpdateUcRecordingResponse;
import to.unified.unified_java_sdk.operations.CreateUcRecording;
import to.unified.unified_java_sdk.operations.GetCalendarRecording;
import to.unified.unified_java_sdk.operations.GetUcRecording;
import to.unified.unified_java_sdk.operations.ListCalendarRecordings;
import to.unified.unified_java_sdk.operations.ListUcRecordings;
import to.unified.unified_java_sdk.operations.PatchUcRecording;
import to.unified.unified_java_sdk.operations.RemoveUcRecording;
import to.unified.unified_java_sdk.operations.UpdateUcRecording;
import to.unified.unified_java_sdk.utils.Headers;


public class AsyncRecording {
    private static final Headers _headers = Headers.EMPTY;
    private final SDKConfiguration sdkConfiguration;
    private final Recording syncSDK;

    AsyncRecording(Recording syncSDK, SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.syncSDK = syncSDK;
    }

    /**
     * Switches to the sync SDK.
     * 
     * @return The sync SDK
     */
    public Recording sync() {
        return syncSDK;
    }


    /**
     * Create a recording
     * 
     * @return The async call builder
     */
    public CreateUcRecordingRequestBuilder createUcRecording() {
        return new CreateUcRecordingRequestBuilder(sdkConfiguration);
    }

    /**
     * Create a recording
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<CreateUcRecordingResponse>} - The async response
     */
    public CompletableFuture<CreateUcRecordingResponse> createUcRecording(CreateUcRecordingRequest request) {
        AsyncRequestOperation<CreateUcRecordingRequest, CreateUcRecordingResponse> operation
              = new CreateUcRecording.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a recording
     * 
     * @return The async call builder
     */
    public GetCalendarRecordingRequestBuilder getCalendarRecording() {
        return new GetCalendarRecordingRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a recording
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetCalendarRecordingResponse>} - The async response
     */
    public CompletableFuture<GetCalendarRecordingResponse> getCalendarRecording(GetCalendarRecordingRequest request) {
        AsyncRequestOperation<GetCalendarRecordingRequest, GetCalendarRecordingResponse> operation
              = new GetCalendarRecording.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Retrieve a recording
     * 
     * @return The async call builder
     */
    public GetUcRecordingRequestBuilder getUcRecording() {
        return new GetUcRecordingRequestBuilder(sdkConfiguration);
    }

    /**
     * Retrieve a recording
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<GetUcRecordingResponse>} - The async response
     */
    public CompletableFuture<GetUcRecordingResponse> getUcRecording(GetUcRecordingRequest request) {
        AsyncRequestOperation<GetUcRecordingRequest, GetUcRecordingResponse> operation
              = new GetUcRecording.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all recordings
     * 
     * @return The async call builder
     */
    public ListCalendarRecordingsRequestBuilder listCalendarRecordings() {
        return new ListCalendarRecordingsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all recordings
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListCalendarRecordingsResponse>} - The async response
     */
    public CompletableFuture<ListCalendarRecordingsResponse> listCalendarRecordings(ListCalendarRecordingsRequest request) {
        AsyncRequestOperation<ListCalendarRecordingsRequest, ListCalendarRecordingsResponse> operation
              = new ListCalendarRecordings.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * List all recordings
     * 
     * @return The async call builder
     */
    public ListUcRecordingsRequestBuilder listUcRecordings() {
        return new ListUcRecordingsRequestBuilder(sdkConfiguration);
    }

    /**
     * List all recordings
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<ListUcRecordingsResponse>} - The async response
     */
    public CompletableFuture<ListUcRecordingsResponse> listUcRecordings(ListUcRecordingsRequest request) {
        AsyncRequestOperation<ListUcRecordingsRequest, ListUcRecordingsResponse> operation
              = new ListUcRecordings.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a recording
     * 
     * @return The async call builder
     */
    public PatchUcRecordingRequestBuilder patchUcRecording() {
        return new PatchUcRecordingRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a recording
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<PatchUcRecordingResponse>} - The async response
     */
    public CompletableFuture<PatchUcRecordingResponse> patchUcRecording(PatchUcRecordingRequest request) {
        AsyncRequestOperation<PatchUcRecordingRequest, PatchUcRecordingResponse> operation
              = new PatchUcRecording.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Remove a recording
     * 
     * @return The async call builder
     */
    public RemoveUcRecordingRequestBuilder removeUcRecording() {
        return new RemoveUcRecordingRequestBuilder(sdkConfiguration);
    }

    /**
     * Remove a recording
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<RemoveUcRecordingResponse>} - The async response
     */
    public CompletableFuture<RemoveUcRecordingResponse> removeUcRecording(RemoveUcRecordingRequest request) {
        AsyncRequestOperation<RemoveUcRecordingRequest, RemoveUcRecordingResponse> operation
              = new RemoveUcRecording.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }


    /**
     * Update a recording
     * 
     * @return The async call builder
     */
    public UpdateUcRecordingRequestBuilder updateUcRecording() {
        return new UpdateUcRecordingRequestBuilder(sdkConfiguration);
    }

    /**
     * Update a recording
     * 
     * @param request The request object containing all the parameters for the API call.
     * @return {@code CompletableFuture<UpdateUcRecordingResponse>} - The async response
     */
    public CompletableFuture<UpdateUcRecordingResponse> updateUcRecording(UpdateUcRecordingRequest request) {
        AsyncRequestOperation<UpdateUcRecordingRequest, UpdateUcRecordingResponse> operation
              = new UpdateUcRecording.Async(sdkConfiguration, _headers);
        return operation.doRequest(request)
            .thenCompose(operation::handleResponse);
    }

}

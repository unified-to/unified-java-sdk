/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.unifiedapi.unifiedto.models.shared.AccountingTransaction;
import com.unifiedapi.unifiedto.utils.SpeakeasyMetadata;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class UpdateAccountingTransactionRequest {

    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends AccountingTransaction> accountingTransaction;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    /**
     * ID of the Transaction
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    @JsonCreator
    public UpdateAccountingTransactionRequest(
            Optional<? extends AccountingTransaction> accountingTransaction,
            String connectionId,
            String id) {
        Utils.checkNotNull(accountingTransaction, "accountingTransaction");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(id, "id");
        this.accountingTransaction = accountingTransaction;
        this.connectionId = connectionId;
        this.id = id;
    }
    
    public UpdateAccountingTransactionRequest(
            String connectionId,
            String id) {
        this(Optional.empty(), connectionId, id);
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AccountingTransaction> accountingTransaction() {
        return (Optional<AccountingTransaction>) accountingTransaction;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * ID of the Transaction
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public UpdateAccountingTransactionRequest withAccountingTransaction(AccountingTransaction accountingTransaction) {
        Utils.checkNotNull(accountingTransaction, "accountingTransaction");
        this.accountingTransaction = Optional.ofNullable(accountingTransaction);
        return this;
    }

    public UpdateAccountingTransactionRequest withAccountingTransaction(Optional<? extends AccountingTransaction> accountingTransaction) {
        Utils.checkNotNull(accountingTransaction, "accountingTransaction");
        this.accountingTransaction = accountingTransaction;
        return this;
    }

    /**
     * ID of the connection
     */
    public UpdateAccountingTransactionRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * ID of the Transaction
     */
    public UpdateAccountingTransactionRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateAccountingTransactionRequest other = (UpdateAccountingTransactionRequest) o;
        return 
            Objects.deepEquals(this.accountingTransaction, other.accountingTransaction) &&
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accountingTransaction,
            connectionId,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateAccountingTransactionRequest.class,
                "accountingTransaction", accountingTransaction,
                "connectionId", connectionId,
                "id", id);
    }
    
    public final static class Builder {
 
        private Optional<? extends AccountingTransaction> accountingTransaction = Optional.empty();
 
        private String connectionId;
 
        private String id;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder accountingTransaction(AccountingTransaction accountingTransaction) {
            Utils.checkNotNull(accountingTransaction, "accountingTransaction");
            this.accountingTransaction = Optional.ofNullable(accountingTransaction);
            return this;
        }

        public Builder accountingTransaction(Optional<? extends AccountingTransaction> accountingTransaction) {
            Utils.checkNotNull(accountingTransaction, "accountingTransaction");
            this.accountingTransaction = accountingTransaction;
            return this;
        }

        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * ID of the Transaction
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public UpdateAccountingTransactionRequest build() {
            return new UpdateAccountingTransactionRequest(
                accountingTransaction,
                connectionId,
                id);
        }
    }
}


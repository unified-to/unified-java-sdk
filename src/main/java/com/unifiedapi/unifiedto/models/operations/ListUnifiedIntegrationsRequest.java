/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.unifiedapi.unifiedto.utils.SpeakeasyMetadata;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class ListUnifiedIntegrationsRequest {

    /**
     * Filter the results for only the workspace's active integrations
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=active")
    private Optional<Boolean> active;

    /**
     * Filter the results on these categories
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=categories")
    private Optional<? extends List<ListUnifiedIntegrationsQueryParamCategories>> categories;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=env")
    private Optional<String> env;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<Double> limit;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=offset")
    private Optional<Double> offset;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=order")
    private Optional<String> order;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort")
    private Optional<String> sort;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=summary")
    private Optional<Boolean> summary;

    /**
     * Filter the results for only this integration type
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=type")
    private Optional<String> type;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=updated_gte")
    private Optional<String> updatedGte;

    @JsonCreator
    public ListUnifiedIntegrationsRequest(
            Optional<Boolean> active,
            Optional<? extends List<ListUnifiedIntegrationsQueryParamCategories>> categories,
            Optional<String> env,
            Optional<Double> limit,
            Optional<Double> offset,
            Optional<String> order,
            Optional<String> sort,
            Optional<Boolean> summary,
            Optional<String> type,
            Optional<String> updatedGte) {
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(env, "env");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(offset, "offset");
        Utils.checkNotNull(order, "order");
        Utils.checkNotNull(sort, "sort");
        Utils.checkNotNull(summary, "summary");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.active = active;
        this.categories = categories;
        this.env = env;
        this.limit = limit;
        this.offset = offset;
        this.order = order;
        this.sort = sort;
        this.summary = summary;
        this.type = type;
        this.updatedGte = updatedGte;
    }
    
    public ListUnifiedIntegrationsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Filter the results for only the workspace's active integrations
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * Filter the results on these categories
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ListUnifiedIntegrationsQueryParamCategories>> categories() {
        return (Optional<List<ListUnifiedIntegrationsQueryParamCategories>>) categories;
    }

    @JsonIgnore
    public Optional<String> env() {
        return env;
    }

    @JsonIgnore
    public Optional<Double> limit() {
        return limit;
    }

    @JsonIgnore
    public Optional<Double> offset() {
        return offset;
    }

    @JsonIgnore
    public Optional<String> order() {
        return order;
    }

    @JsonIgnore
    public Optional<String> sort() {
        return sort;
    }

    @JsonIgnore
    public Optional<Boolean> summary() {
        return summary;
    }

    /**
     * Filter the results for only this integration type
     */
    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @JsonIgnore
    public Optional<String> updatedGte() {
        return updatedGte;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Filter the results for only the workspace's active integrations
     */
    public ListUnifiedIntegrationsRequest withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Filter the results for only the workspace's active integrations
     */
    public ListUnifiedIntegrationsRequest withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * Filter the results on these categories
     */
    public ListUnifiedIntegrationsRequest withCategories(List<ListUnifiedIntegrationsQueryParamCategories> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = Optional.ofNullable(categories);
        return this;
    }

    /**
     * Filter the results on these categories
     */
    public ListUnifiedIntegrationsRequest withCategories(Optional<? extends List<ListUnifiedIntegrationsQueryParamCategories>> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    public ListUnifiedIntegrationsRequest withEnv(String env) {
        Utils.checkNotNull(env, "env");
        this.env = Optional.ofNullable(env);
        return this;
    }

    public ListUnifiedIntegrationsRequest withEnv(Optional<String> env) {
        Utils.checkNotNull(env, "env");
        this.env = env;
        return this;
    }

    public ListUnifiedIntegrationsRequest withLimit(double limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    public ListUnifiedIntegrationsRequest withLimit(Optional<Double> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    public ListUnifiedIntegrationsRequest withOffset(double offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = Optional.ofNullable(offset);
        return this;
    }

    public ListUnifiedIntegrationsRequest withOffset(Optional<Double> offset) {
        Utils.checkNotNull(offset, "offset");
        this.offset = offset;
        return this;
    }

    public ListUnifiedIntegrationsRequest withOrder(String order) {
        Utils.checkNotNull(order, "order");
        this.order = Optional.ofNullable(order);
        return this;
    }

    public ListUnifiedIntegrationsRequest withOrder(Optional<String> order) {
        Utils.checkNotNull(order, "order");
        this.order = order;
        return this;
    }

    public ListUnifiedIntegrationsRequest withSort(String sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = Optional.ofNullable(sort);
        return this;
    }

    public ListUnifiedIntegrationsRequest withSort(Optional<String> sort) {
        Utils.checkNotNull(sort, "sort");
        this.sort = sort;
        return this;
    }

    public ListUnifiedIntegrationsRequest withSummary(boolean summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = Optional.ofNullable(summary);
        return this;
    }

    public ListUnifiedIntegrationsRequest withSummary(Optional<Boolean> summary) {
        Utils.checkNotNull(summary, "summary");
        this.summary = summary;
        return this;
    }

    /**
     * Filter the results for only this integration type
     */
    public ListUnifiedIntegrationsRequest withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * Filter the results for only this integration type
     */
    public ListUnifiedIntegrationsRequest withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public ListUnifiedIntegrationsRequest withUpdatedGte(String updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = Optional.ofNullable(updatedGte);
        return this;
    }

    public ListUnifiedIntegrationsRequest withUpdatedGte(Optional<String> updatedGte) {
        Utils.checkNotNull(updatedGte, "updatedGte");
        this.updatedGte = updatedGte;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ListUnifiedIntegrationsRequest other = (ListUnifiedIntegrationsRequest) o;
        return 
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.env, other.env) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.offset, other.offset) &&
            Objects.deepEquals(this.order, other.order) &&
            Objects.deepEquals(this.sort, other.sort) &&
            Objects.deepEquals(this.summary, other.summary) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.updatedGte, other.updatedGte);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            active,
            categories,
            env,
            limit,
            offset,
            order,
            sort,
            summary,
            type,
            updatedGte);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ListUnifiedIntegrationsRequest.class,
                "active", active,
                "categories", categories,
                "env", env,
                "limit", limit,
                "offset", offset,
                "order", order,
                "sort", sort,
                "summary", summary,
                "type", type,
                "updatedGte", updatedGte);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> active = Optional.empty();
 
        private Optional<? extends List<ListUnifiedIntegrationsQueryParamCategories>> categories = Optional.empty();
 
        private Optional<String> env = Optional.empty();
 
        private Optional<Double> limit = Optional.empty();
 
        private Optional<Double> offset = Optional.empty();
 
        private Optional<String> order = Optional.empty();
 
        private Optional<String> sort = Optional.empty();
 
        private Optional<Boolean> summary = Optional.empty();
 
        private Optional<String> type = Optional.empty();
 
        private Optional<String> updatedGte = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Filter the results for only the workspace's active integrations
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Filter the results for only the workspace's active integrations
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * Filter the results on these categories
         */
        public Builder categories(List<ListUnifiedIntegrationsQueryParamCategories> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = Optional.ofNullable(categories);
            return this;
        }

        /**
         * Filter the results on these categories
         */
        public Builder categories(Optional<? extends List<ListUnifiedIntegrationsQueryParamCategories>> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        public Builder env(String env) {
            Utils.checkNotNull(env, "env");
            this.env = Optional.ofNullable(env);
            return this;
        }

        public Builder env(Optional<String> env) {
            Utils.checkNotNull(env, "env");
            this.env = env;
            return this;
        }

        public Builder limit(double limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        public Builder limit(Optional<Double> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        public Builder offset(double offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = Optional.ofNullable(offset);
            return this;
        }

        public Builder offset(Optional<Double> offset) {
            Utils.checkNotNull(offset, "offset");
            this.offset = offset;
            return this;
        }

        public Builder order(String order) {
            Utils.checkNotNull(order, "order");
            this.order = Optional.ofNullable(order);
            return this;
        }

        public Builder order(Optional<String> order) {
            Utils.checkNotNull(order, "order");
            this.order = order;
            return this;
        }

        public Builder sort(String sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = Optional.ofNullable(sort);
            return this;
        }

        public Builder sort(Optional<String> sort) {
            Utils.checkNotNull(sort, "sort");
            this.sort = sort;
            return this;
        }

        public Builder summary(boolean summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = Optional.ofNullable(summary);
            return this;
        }

        public Builder summary(Optional<Boolean> summary) {
            Utils.checkNotNull(summary, "summary");
            this.summary = summary;
            return this;
        }

        /**
         * Filter the results for only this integration type
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * Filter the results for only this integration type
         */
        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedGte(String updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = Optional.ofNullable(updatedGte);
            return this;
        }

        public Builder updatedGte(Optional<String> updatedGte) {
            Utils.checkNotNull(updatedGte, "updatedGte");
            this.updatedGte = updatedGte;
            return this;
        }
        
        public ListUnifiedIntegrationsRequest build() {
            return new ListUnifiedIntegrationsRequest(
                active,
                categories,
                env,
                limit,
                offset,
                order,
                sort,
                summary,
                type,
                updatedGte);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.unifiedapi.unifiedto.utils.Response;
import com.unifiedapi.unifiedto.utils.Utils;
import java.io.InputStream;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class RemovePassthroughResponse implements Response {

    /**
     * Successful
     */
    private Optional<? extends Object> twoXXApplicationJsonAny;

    /**
     * Successful
     */
    private Optional<String> twoXXTextPlainRes;

    private Optional<? extends byte[]> body;

    /**
     * HTTP response content type for this operation
     */
    private String contentType;

    private Map<String, List<String>> headers;

    /**
     * HTTP response status code for this operation
     */
    private int statusCode;

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    private HttpResponse<InputStream> rawResponse;

    @JsonCreator
    public RemovePassthroughResponse(
            Optional<? extends Object> twoXXApplicationJsonAny,
            Optional<String> twoXXTextPlainRes,
            Optional<? extends byte[]> body,
            String contentType,
            Map<String, List<String>> headers,
            int statusCode,
            HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(twoXXApplicationJsonAny, "twoXXApplicationJsonAny");
        Utils.checkNotNull(twoXXTextPlainRes, "twoXXTextPlainRes");
        Utils.checkNotNull(body, "body");
        Utils.checkNotNull(contentType, "contentType");
        headers = Utils.emptyMapIfNull(headers);
        Utils.checkNotNull(statusCode, "statusCode");
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.twoXXApplicationJsonAny = twoXXApplicationJsonAny;
        this.twoXXTextPlainRes = twoXXTextPlainRes;
        this.body = body;
        this.contentType = contentType;
        this.headers = headers;
        this.statusCode = statusCode;
        this.rawResponse = rawResponse;
    }
    
    public RemovePassthroughResponse(
            String contentType,
            Map<String, List<String>> headers,
            int statusCode,
            HttpResponse<InputStream> rawResponse) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), contentType, headers, statusCode, rawResponse);
    }

    /**
     * Successful
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Object> twoXXApplicationJsonAny() {
        return (Optional<Object>) twoXXApplicationJsonAny;
    }

    /**
     * Successful
     */
    @JsonIgnore
    public Optional<String> twoXXTextPlainRes() {
        return twoXXTextPlainRes;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<byte[]> body() {
        return (Optional<byte[]>) body;
    }

    /**
     * HTTP response content type for this operation
     */
    @JsonIgnore
    public String contentType() {
        return contentType;
    }

    @JsonIgnore
    public Map<String, List<String>> headers() {
        return headers;
    }

    /**
     * HTTP response status code for this operation
     */
    @JsonIgnore
    public int statusCode() {
        return statusCode;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    @JsonIgnore
    public HttpResponse<InputStream> rawResponse() {
        return rawResponse;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Successful
     */
    public RemovePassthroughResponse withTwoXXApplicationJsonAny(Object twoXXApplicationJsonAny) {
        Utils.checkNotNull(twoXXApplicationJsonAny, "twoXXApplicationJsonAny");
        this.twoXXApplicationJsonAny = Optional.ofNullable(twoXXApplicationJsonAny);
        return this;
    }

    /**
     * Successful
     */
    public RemovePassthroughResponse withTwoXXApplicationJsonAny(Optional<? extends Object> twoXXApplicationJsonAny) {
        Utils.checkNotNull(twoXXApplicationJsonAny, "twoXXApplicationJsonAny");
        this.twoXXApplicationJsonAny = twoXXApplicationJsonAny;
        return this;
    }

    /**
     * Successful
     */
    public RemovePassthroughResponse withTwoXXTextPlainRes(String twoXXTextPlainRes) {
        Utils.checkNotNull(twoXXTextPlainRes, "twoXXTextPlainRes");
        this.twoXXTextPlainRes = Optional.ofNullable(twoXXTextPlainRes);
        return this;
    }

    /**
     * Successful
     */
    public RemovePassthroughResponse withTwoXXTextPlainRes(Optional<String> twoXXTextPlainRes) {
        Utils.checkNotNull(twoXXTextPlainRes, "twoXXTextPlainRes");
        this.twoXXTextPlainRes = twoXXTextPlainRes;
        return this;
    }

    public RemovePassthroughResponse withBody(byte[] body) {
        Utils.checkNotNull(body, "body");
        this.body = Optional.ofNullable(body);
        return this;
    }

    public RemovePassthroughResponse withBody(Optional<? extends byte[]> body) {
        Utils.checkNotNull(body, "body");
        this.body = body;
        return this;
    }

    /**
     * HTTP response content type for this operation
     */
    public RemovePassthroughResponse withContentType(String contentType) {
        Utils.checkNotNull(contentType, "contentType");
        this.contentType = contentType;
        return this;
    }

    public RemovePassthroughResponse withHeaders(Map<String, List<String>> headers) {
        Utils.checkNotNull(headers, "headers");
        this.headers = headers;
        return this;
    }

    /**
     * HTTP response status code for this operation
     */
    public RemovePassthroughResponse withStatusCode(int statusCode) {
        Utils.checkNotNull(statusCode, "statusCode");
        this.statusCode = statusCode;
        return this;
    }

    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    public RemovePassthroughResponse withRawResponse(HttpResponse<InputStream> rawResponse) {
        Utils.checkNotNull(rawResponse, "rawResponse");
        this.rawResponse = rawResponse;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RemovePassthroughResponse other = (RemovePassthroughResponse) o;
        return 
            Objects.deepEquals(this.twoXXApplicationJsonAny, other.twoXXApplicationJsonAny) &&
            Objects.deepEquals(this.twoXXTextPlainRes, other.twoXXTextPlainRes) &&
            Objects.deepEquals(this.body, other.body) &&
            Objects.deepEquals(this.contentType, other.contentType) &&
            Objects.deepEquals(this.headers, other.headers) &&
            Objects.deepEquals(this.statusCode, other.statusCode) &&
            Objects.deepEquals(this.rawResponse, other.rawResponse);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            twoXXApplicationJsonAny,
            twoXXTextPlainRes,
            body,
            contentType,
            headers,
            statusCode,
            rawResponse);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RemovePassthroughResponse.class,
                "twoXXApplicationJsonAny", twoXXApplicationJsonAny,
                "twoXXTextPlainRes", twoXXTextPlainRes,
                "body", body,
                "contentType", contentType,
                "headers", headers,
                "statusCode", statusCode,
                "rawResponse", rawResponse);
    }
    
    public final static class Builder {
 
        private Optional<? extends Object> twoXXApplicationJsonAny = Optional.empty();
 
        private Optional<String> twoXXTextPlainRes = Optional.empty();
 
        private Optional<? extends byte[]> body = Optional.empty();
 
        private String contentType;
 
        private Map<String, List<String>> headers;
 
        private Integer statusCode;
 
        private HttpResponse<InputStream> rawResponse;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Successful
         */
        public Builder twoXXApplicationJsonAny(Object twoXXApplicationJsonAny) {
            Utils.checkNotNull(twoXXApplicationJsonAny, "twoXXApplicationJsonAny");
            this.twoXXApplicationJsonAny = Optional.ofNullable(twoXXApplicationJsonAny);
            return this;
        }

        /**
         * Successful
         */
        public Builder twoXXApplicationJsonAny(Optional<? extends Object> twoXXApplicationJsonAny) {
            Utils.checkNotNull(twoXXApplicationJsonAny, "twoXXApplicationJsonAny");
            this.twoXXApplicationJsonAny = twoXXApplicationJsonAny;
            return this;
        }

        /**
         * Successful
         */
        public Builder twoXXTextPlainRes(String twoXXTextPlainRes) {
            Utils.checkNotNull(twoXXTextPlainRes, "twoXXTextPlainRes");
            this.twoXXTextPlainRes = Optional.ofNullable(twoXXTextPlainRes);
            return this;
        }

        /**
         * Successful
         */
        public Builder twoXXTextPlainRes(Optional<String> twoXXTextPlainRes) {
            Utils.checkNotNull(twoXXTextPlainRes, "twoXXTextPlainRes");
            this.twoXXTextPlainRes = twoXXTextPlainRes;
            return this;
        }

        public Builder body(byte[] body) {
            Utils.checkNotNull(body, "body");
            this.body = Optional.ofNullable(body);
            return this;
        }

        public Builder body(Optional<? extends byte[]> body) {
            Utils.checkNotNull(body, "body");
            this.body = body;
            return this;
        }

        /**
         * HTTP response content type for this operation
         */
        public Builder contentType(String contentType) {
            Utils.checkNotNull(contentType, "contentType");
            this.contentType = contentType;
            return this;
        }

        public Builder headers(Map<String, List<String>> headers) {
            Utils.checkNotNull(headers, "headers");
            this.headers = headers;
            return this;
        }

        /**
         * HTTP response status code for this operation
         */
        public Builder statusCode(int statusCode) {
            Utils.checkNotNull(statusCode, "statusCode");
            this.statusCode = statusCode;
            return this;
        }

        /**
         * Raw HTTP response; suitable for custom response parsing
         */
        public Builder rawResponse(HttpResponse<InputStream> rawResponse) {
            Utils.checkNotNull(rawResponse, "rawResponse");
            this.rawResponse = rawResponse;
            return this;
        }
        
        public RemovePassthroughResponse build() {
            return new RemovePassthroughResponse(
                twoXXApplicationJsonAny,
                twoXXTextPlainRes,
                body,
                contentType,
                headers,
                statusCode,
                rawResponse);
        }
    }
}


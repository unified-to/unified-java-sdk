/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.unifiedapi.unifiedto.models.shared.CrmContact;
import com.unifiedapi.unifiedto.utils.SpeakeasyMetadata;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class CreateCrmContactRequest {

    /**
     * A contact represents a person that optionally is associated with a deal and/or a company
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends CrmContact> crmContact;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    @JsonCreator
    public CreateCrmContactRequest(
            Optional<? extends CrmContact> crmContact,
            String connectionId) {
        Utils.checkNotNull(crmContact, "crmContact");
        Utils.checkNotNull(connectionId, "connectionId");
        this.crmContact = crmContact;
        this.connectionId = connectionId;
    }
    
    public CreateCrmContactRequest(
            String connectionId) {
        this(Optional.empty(), connectionId);
    }

    /**
     * A contact represents a person that optionally is associated with a deal and/or a company
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CrmContact> crmContact() {
        return (Optional<CrmContact>) crmContact;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A contact represents a person that optionally is associated with a deal and/or a company
     */
    public CreateCrmContactRequest withCrmContact(CrmContact crmContact) {
        Utils.checkNotNull(crmContact, "crmContact");
        this.crmContact = Optional.ofNullable(crmContact);
        return this;
    }

    /**
     * A contact represents a person that optionally is associated with a deal and/or a company
     */
    public CreateCrmContactRequest withCrmContact(Optional<? extends CrmContact> crmContact) {
        Utils.checkNotNull(crmContact, "crmContact");
        this.crmContact = crmContact;
        return this;
    }

    /**
     * ID of the connection
     */
    public CreateCrmContactRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CreateCrmContactRequest other = (CreateCrmContactRequest) o;
        return 
            Objects.deepEquals(this.crmContact, other.crmContact) &&
            Objects.deepEquals(this.connectionId, other.connectionId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            crmContact,
            connectionId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CreateCrmContactRequest.class,
                "crmContact", crmContact,
                "connectionId", connectionId);
    }
    
    public final static class Builder {
 
        private Optional<? extends CrmContact> crmContact = Optional.empty();
 
        private String connectionId;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A contact represents a person that optionally is associated with a deal and/or a company
         */
        public Builder crmContact(CrmContact crmContact) {
            Utils.checkNotNull(crmContact, "crmContact");
            this.crmContact = Optional.ofNullable(crmContact);
            return this;
        }

        /**
         * A contact represents a person that optionally is associated with a deal and/or a company
         */
        public Builder crmContact(Optional<? extends CrmContact> crmContact) {
            Utils.checkNotNull(crmContact, "crmContact");
            this.crmContact = crmContact;
            return this;
        }

        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }
        
        public CreateCrmContactRequest build() {
            return new CreateCrmContactRequest(
                crmContact,
                connectionId);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.unifiedapi.unifiedto.models.shared.UcContact;
import com.unifiedapi.unifiedto.utils.SpeakeasyMetadata;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class UpdateUcContactRequest {

    /**
     * A contact represents a person that optionally is associated with a call
     */
    @SpeakeasyMetadata("request:mediaType=application/json")
    private Optional<? extends UcContact> ucContact;

    /**
     * ID of the connection
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=connection_id")
    private String connectionId;

    /**
     * ID of the Contact
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=id")
    private String id;

    @JsonCreator
    public UpdateUcContactRequest(
            Optional<? extends UcContact> ucContact,
            String connectionId,
            String id) {
        Utils.checkNotNull(ucContact, "ucContact");
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(id, "id");
        this.ucContact = ucContact;
        this.connectionId = connectionId;
        this.id = id;
    }
    
    public UpdateUcContactRequest(
            String connectionId,
            String id) {
        this(Optional.empty(), connectionId, id);
    }

    /**
     * A contact represents a person that optionally is associated with a call
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UcContact> ucContact() {
        return (Optional<UcContact>) ucContact;
    }

    /**
     * ID of the connection
     */
    @JsonIgnore
    public String connectionId() {
        return connectionId;
    }

    /**
     * ID of the Contact
     */
    @JsonIgnore
    public String id() {
        return id;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A contact represents a person that optionally is associated with a call
     */
    public UpdateUcContactRequest withUcContact(UcContact ucContact) {
        Utils.checkNotNull(ucContact, "ucContact");
        this.ucContact = Optional.ofNullable(ucContact);
        return this;
    }

    /**
     * A contact represents a person that optionally is associated with a call
     */
    public UpdateUcContactRequest withUcContact(Optional<? extends UcContact> ucContact) {
        Utils.checkNotNull(ucContact, "ucContact");
        this.ucContact = ucContact;
        return this;
    }

    /**
     * ID of the connection
     */
    public UpdateUcContactRequest withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    /**
     * ID of the Contact
     */
    public UpdateUcContactRequest withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UpdateUcContactRequest other = (UpdateUcContactRequest) o;
        return 
            Objects.deepEquals(this.ucContact, other.ucContact) &&
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.id, other.id);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ucContact,
            connectionId,
            id);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UpdateUcContactRequest.class,
                "ucContact", ucContact,
                "connectionId", connectionId,
                "id", id);
    }
    
    public final static class Builder {
 
        private Optional<? extends UcContact> ucContact = Optional.empty();
 
        private String connectionId;
 
        private String id;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A contact represents a person that optionally is associated with a call
         */
        public Builder ucContact(UcContact ucContact) {
            Utils.checkNotNull(ucContact, "ucContact");
            this.ucContact = Optional.ofNullable(ucContact);
            return this;
        }

        /**
         * A contact represents a person that optionally is associated with a call
         */
        public Builder ucContact(Optional<? extends UcContact> ucContact) {
            Utils.checkNotNull(ucContact, "ucContact");
            this.ucContact = ucContact;
            return this;
        }

        /**
         * ID of the connection
         */
        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        /**
         * ID of the Contact
         */
        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }
        
        public UpdateUcContactRequest build() {
            return new UpdateUcContactRequest(
                ucContact,
                connectionId,
                id);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.unifiedapi.unifiedto.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.unifiedapi.unifiedto.utils.SpeakeasyMetadata;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class GetUnifiedIntegrationAuthRequest {

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=env")
    private Optional<String> env;

    /**
     * Your user identifier to associate with the new Integration
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=external_xref")
    private Optional<String> externalXref;

    /**
     * The URL where you want the user to be redirect to after an unsuccessful authentication. An "error" variable will be appended.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=failure_redirect")
    private Optional<String> failureRedirect;

    /**
     * Type of the supported integration
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=integration_type")
    private String integrationType;

    /**
     * Language: en, fr, es, it, pt, zh, hi
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=lang")
    private Optional<String> lang;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=redirect")
    private Optional<Boolean> redirect;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=scopes")
    private Optional<? extends List<Scopes>> scopes;

    /**
     * Extra state to send back to your success URL
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=state")
    private Optional<String> state;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=subdomain")
    private Optional<String> subdomain;

    /**
     * The URL where you want the user to be redirect to after a successful authorization.  The connection ID will be appended with (id=&lt;connectionId&gt;) to this URL, as will the state that was provided.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=success_redirect")
    private Optional<String> successRedirect;

    /**
     * The ID of the workspace
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=workspace_id")
    private String workspaceId;

    @JsonCreator
    public GetUnifiedIntegrationAuthRequest(
            Optional<String> env,
            Optional<String> externalXref,
            Optional<String> failureRedirect,
            String integrationType,
            Optional<String> lang,
            Optional<Boolean> redirect,
            Optional<? extends List<Scopes>> scopes,
            Optional<String> state,
            Optional<String> subdomain,
            Optional<String> successRedirect,
            String workspaceId) {
        Utils.checkNotNull(env, "env");
        Utils.checkNotNull(externalXref, "externalXref");
        Utils.checkNotNull(failureRedirect, "failureRedirect");
        Utils.checkNotNull(integrationType, "integrationType");
        Utils.checkNotNull(lang, "lang");
        Utils.checkNotNull(redirect, "redirect");
        Utils.checkNotNull(scopes, "scopes");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(subdomain, "subdomain");
        Utils.checkNotNull(successRedirect, "successRedirect");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.env = env;
        this.externalXref = externalXref;
        this.failureRedirect = failureRedirect;
        this.integrationType = integrationType;
        this.lang = lang;
        this.redirect = redirect;
        this.scopes = scopes;
        this.state = state;
        this.subdomain = subdomain;
        this.successRedirect = successRedirect;
        this.workspaceId = workspaceId;
    }
    
    public GetUnifiedIntegrationAuthRequest(
            String integrationType,
            String workspaceId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), integrationType, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), workspaceId);
    }

    @JsonIgnore
    public Optional<String> env() {
        return env;
    }

    /**
     * Your user identifier to associate with the new Integration
     */
    @JsonIgnore
    public Optional<String> externalXref() {
        return externalXref;
    }

    /**
     * The URL where you want the user to be redirect to after an unsuccessful authentication. An "error" variable will be appended.
     */
    @JsonIgnore
    public Optional<String> failureRedirect() {
        return failureRedirect;
    }

    /**
     * Type of the supported integration
     */
    @JsonIgnore
    public String integrationType() {
        return integrationType;
    }

    /**
     * Language: en, fr, es, it, pt, zh, hi
     */
    @JsonIgnore
    public Optional<String> lang() {
        return lang;
    }

    @JsonIgnore
    public Optional<Boolean> redirect() {
        return redirect;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Scopes>> scopes() {
        return (Optional<List<Scopes>>) scopes;
    }

    /**
     * Extra state to send back to your success URL
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    @JsonIgnore
    public Optional<String> subdomain() {
        return subdomain;
    }

    /**
     * The URL where you want the user to be redirect to after a successful authorization.  The connection ID will be appended with (id=&lt;connectionId&gt;) to this URL, as will the state that was provided.
     */
    @JsonIgnore
    public Optional<String> successRedirect() {
        return successRedirect;
    }

    /**
     * The ID of the workspace
     */
    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetUnifiedIntegrationAuthRequest withEnv(String env) {
        Utils.checkNotNull(env, "env");
        this.env = Optional.ofNullable(env);
        return this;
    }

    public GetUnifiedIntegrationAuthRequest withEnv(Optional<String> env) {
        Utils.checkNotNull(env, "env");
        this.env = env;
        return this;
    }

    /**
     * Your user identifier to associate with the new Integration
     */
    public GetUnifiedIntegrationAuthRequest withExternalXref(String externalXref) {
        Utils.checkNotNull(externalXref, "externalXref");
        this.externalXref = Optional.ofNullable(externalXref);
        return this;
    }

    /**
     * Your user identifier to associate with the new Integration
     */
    public GetUnifiedIntegrationAuthRequest withExternalXref(Optional<String> externalXref) {
        Utils.checkNotNull(externalXref, "externalXref");
        this.externalXref = externalXref;
        return this;
    }

    /**
     * The URL where you want the user to be redirect to after an unsuccessful authentication. An "error" variable will be appended.
     */
    public GetUnifiedIntegrationAuthRequest withFailureRedirect(String failureRedirect) {
        Utils.checkNotNull(failureRedirect, "failureRedirect");
        this.failureRedirect = Optional.ofNullable(failureRedirect);
        return this;
    }

    /**
     * The URL where you want the user to be redirect to after an unsuccessful authentication. An "error" variable will be appended.
     */
    public GetUnifiedIntegrationAuthRequest withFailureRedirect(Optional<String> failureRedirect) {
        Utils.checkNotNull(failureRedirect, "failureRedirect");
        this.failureRedirect = failureRedirect;
        return this;
    }

    /**
     * Type of the supported integration
     */
    public GetUnifiedIntegrationAuthRequest withIntegrationType(String integrationType) {
        Utils.checkNotNull(integrationType, "integrationType");
        this.integrationType = integrationType;
        return this;
    }

    /**
     * Language: en, fr, es, it, pt, zh, hi
     */
    public GetUnifiedIntegrationAuthRequest withLang(String lang) {
        Utils.checkNotNull(lang, "lang");
        this.lang = Optional.ofNullable(lang);
        return this;
    }

    /**
     * Language: en, fr, es, it, pt, zh, hi
     */
    public GetUnifiedIntegrationAuthRequest withLang(Optional<String> lang) {
        Utils.checkNotNull(lang, "lang");
        this.lang = lang;
        return this;
    }

    public GetUnifiedIntegrationAuthRequest withRedirect(boolean redirect) {
        Utils.checkNotNull(redirect, "redirect");
        this.redirect = Optional.ofNullable(redirect);
        return this;
    }

    public GetUnifiedIntegrationAuthRequest withRedirect(Optional<Boolean> redirect) {
        Utils.checkNotNull(redirect, "redirect");
        this.redirect = redirect;
        return this;
    }

    public GetUnifiedIntegrationAuthRequest withScopes(List<Scopes> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = Optional.ofNullable(scopes);
        return this;
    }

    public GetUnifiedIntegrationAuthRequest withScopes(Optional<? extends List<Scopes>> scopes) {
        Utils.checkNotNull(scopes, "scopes");
        this.scopes = scopes;
        return this;
    }

    /**
     * Extra state to send back to your success URL
     */
    public GetUnifiedIntegrationAuthRequest withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Extra state to send back to your success URL
     */
    public GetUnifiedIntegrationAuthRequest withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public GetUnifiedIntegrationAuthRequest withSubdomain(String subdomain) {
        Utils.checkNotNull(subdomain, "subdomain");
        this.subdomain = Optional.ofNullable(subdomain);
        return this;
    }

    public GetUnifiedIntegrationAuthRequest withSubdomain(Optional<String> subdomain) {
        Utils.checkNotNull(subdomain, "subdomain");
        this.subdomain = subdomain;
        return this;
    }

    /**
     * The URL where you want the user to be redirect to after a successful authorization.  The connection ID will be appended with (id=&lt;connectionId&gt;) to this URL, as will the state that was provided.
     */
    public GetUnifiedIntegrationAuthRequest withSuccessRedirect(String successRedirect) {
        Utils.checkNotNull(successRedirect, "successRedirect");
        this.successRedirect = Optional.ofNullable(successRedirect);
        return this;
    }

    /**
     * The URL where you want the user to be redirect to after a successful authorization.  The connection ID will be appended with (id=&lt;connectionId&gt;) to this URL, as will the state that was provided.
     */
    public GetUnifiedIntegrationAuthRequest withSuccessRedirect(Optional<String> successRedirect) {
        Utils.checkNotNull(successRedirect, "successRedirect");
        this.successRedirect = successRedirect;
        return this;
    }

    /**
     * The ID of the workspace
     */
    public GetUnifiedIntegrationAuthRequest withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetUnifiedIntegrationAuthRequest other = (GetUnifiedIntegrationAuthRequest) o;
        return 
            Objects.deepEquals(this.env, other.env) &&
            Objects.deepEquals(this.externalXref, other.externalXref) &&
            Objects.deepEquals(this.failureRedirect, other.failureRedirect) &&
            Objects.deepEquals(this.integrationType, other.integrationType) &&
            Objects.deepEquals(this.lang, other.lang) &&
            Objects.deepEquals(this.redirect, other.redirect) &&
            Objects.deepEquals(this.scopes, other.scopes) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.subdomain, other.subdomain) &&
            Objects.deepEquals(this.successRedirect, other.successRedirect) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            env,
            externalXref,
            failureRedirect,
            integrationType,
            lang,
            redirect,
            scopes,
            state,
            subdomain,
            successRedirect,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetUnifiedIntegrationAuthRequest.class,
                "env", env,
                "externalXref", externalXref,
                "failureRedirect", failureRedirect,
                "integrationType", integrationType,
                "lang", lang,
                "redirect", redirect,
                "scopes", scopes,
                "state", state,
                "subdomain", subdomain,
                "successRedirect", successRedirect,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private Optional<String> env = Optional.empty();
 
        private Optional<String> externalXref = Optional.empty();
 
        private Optional<String> failureRedirect = Optional.empty();
 
        private String integrationType;
 
        private Optional<String> lang = Optional.empty();
 
        private Optional<Boolean> redirect = Optional.empty();
 
        private Optional<? extends List<Scopes>> scopes = Optional.empty();
 
        private Optional<String> state = Optional.empty();
 
        private Optional<String> subdomain = Optional.empty();
 
        private Optional<String> successRedirect = Optional.empty();
 
        private String workspaceId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder env(String env) {
            Utils.checkNotNull(env, "env");
            this.env = Optional.ofNullable(env);
            return this;
        }

        public Builder env(Optional<String> env) {
            Utils.checkNotNull(env, "env");
            this.env = env;
            return this;
        }

        /**
         * Your user identifier to associate with the new Integration
         */
        public Builder externalXref(String externalXref) {
            Utils.checkNotNull(externalXref, "externalXref");
            this.externalXref = Optional.ofNullable(externalXref);
            return this;
        }

        /**
         * Your user identifier to associate with the new Integration
         */
        public Builder externalXref(Optional<String> externalXref) {
            Utils.checkNotNull(externalXref, "externalXref");
            this.externalXref = externalXref;
            return this;
        }

        /**
         * The URL where you want the user to be redirect to after an unsuccessful authentication. An "error" variable will be appended.
         */
        public Builder failureRedirect(String failureRedirect) {
            Utils.checkNotNull(failureRedirect, "failureRedirect");
            this.failureRedirect = Optional.ofNullable(failureRedirect);
            return this;
        }

        /**
         * The URL where you want the user to be redirect to after an unsuccessful authentication. An "error" variable will be appended.
         */
        public Builder failureRedirect(Optional<String> failureRedirect) {
            Utils.checkNotNull(failureRedirect, "failureRedirect");
            this.failureRedirect = failureRedirect;
            return this;
        }

        /**
         * Type of the supported integration
         */
        public Builder integrationType(String integrationType) {
            Utils.checkNotNull(integrationType, "integrationType");
            this.integrationType = integrationType;
            return this;
        }

        /**
         * Language: en, fr, es, it, pt, zh, hi
         */
        public Builder lang(String lang) {
            Utils.checkNotNull(lang, "lang");
            this.lang = Optional.ofNullable(lang);
            return this;
        }

        /**
         * Language: en, fr, es, it, pt, zh, hi
         */
        public Builder lang(Optional<String> lang) {
            Utils.checkNotNull(lang, "lang");
            this.lang = lang;
            return this;
        }

        public Builder redirect(boolean redirect) {
            Utils.checkNotNull(redirect, "redirect");
            this.redirect = Optional.ofNullable(redirect);
            return this;
        }

        public Builder redirect(Optional<Boolean> redirect) {
            Utils.checkNotNull(redirect, "redirect");
            this.redirect = redirect;
            return this;
        }

        public Builder scopes(List<Scopes> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = Optional.ofNullable(scopes);
            return this;
        }

        public Builder scopes(Optional<? extends List<Scopes>> scopes) {
            Utils.checkNotNull(scopes, "scopes");
            this.scopes = scopes;
            return this;
        }

        /**
         * Extra state to send back to your success URL
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Extra state to send back to your success URL
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder subdomain(String subdomain) {
            Utils.checkNotNull(subdomain, "subdomain");
            this.subdomain = Optional.ofNullable(subdomain);
            return this;
        }

        public Builder subdomain(Optional<String> subdomain) {
            Utils.checkNotNull(subdomain, "subdomain");
            this.subdomain = subdomain;
            return this;
        }

        /**
         * The URL where you want the user to be redirect to after a successful authorization.  The connection ID will be appended with (id=&lt;connectionId&gt;) to this URL, as will the state that was provided.
         */
        public Builder successRedirect(String successRedirect) {
            Utils.checkNotNull(successRedirect, "successRedirect");
            this.successRedirect = Optional.ofNullable(successRedirect);
            return this;
        }

        /**
         * The URL where you want the user to be redirect to after a successful authorization.  The connection ID will be appended with (id=&lt;connectionId&gt;) to this URL, as will the state that was provided.
         */
        public Builder successRedirect(Optional<String> successRedirect) {
            Utils.checkNotNull(successRedirect, "successRedirect");
            this.successRedirect = successRedirect;
            return this;
        }

        /**
         * The ID of the workspace
         */
        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public GetUnifiedIntegrationAuthRequest build() {
            return new GetUnifiedIntegrationAuthRequest(
                env,
                externalXref,
                failureRedirect,
                integrationType,
                lang,
                redirect,
                scopes,
                state,
                subdomain,
                successRedirect,
                workspaceId);
        }
    }
}


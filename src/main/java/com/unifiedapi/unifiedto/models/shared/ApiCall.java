/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.unifiedapi.unifiedto.utils.LazySingletonValue;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class ApiCall {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("connection_id")
    private Optional<String> connectionId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    private Optional<String> environment;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error")
    private Optional<String> error;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_xref")
    private Optional<String> externalXref;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonProperty("integration_type")
    private String integrationType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ip_address")
    private Optional<String> ipAddress;

    @JsonProperty("method")
    private String method;

    @JsonProperty("name")
    private String name;

    @JsonProperty("path")
    private String path;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("size")
    private Optional<Double> size;

    @JsonProperty("status")
    private String status;

    @JsonProperty("type")
    private ApiCallType type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("workspace_id")
    private Optional<String> workspaceId;

    @JsonCreator
    public ApiCall(
            @JsonProperty("connection_id") Optional<String> connectionId,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("environment") Optional<String> environment,
            @JsonProperty("error") Optional<String> error,
            @JsonProperty("external_xref") Optional<String> externalXref,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("integration_type") String integrationType,
            @JsonProperty("ip_address") Optional<String> ipAddress,
            @JsonProperty("method") String method,
            @JsonProperty("name") String name,
            @JsonProperty("path") String path,
            @JsonProperty("size") Optional<Double> size,
            @JsonProperty("status") String status,
            @JsonProperty("type") ApiCallType type,
            @JsonProperty("workspace_id") Optional<String> workspaceId) {
        Utils.checkNotNull(connectionId, "connectionId");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(environment, "environment");
        Utils.checkNotNull(error, "error");
        Utils.checkNotNull(externalXref, "externalXref");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(integrationType, "integrationType");
        Utils.checkNotNull(ipAddress, "ipAddress");
        Utils.checkNotNull(method, "method");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(path, "path");
        Utils.checkNotNull(size, "size");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.connectionId = connectionId;
        this.createdAt = createdAt;
        this.environment = environment;
        this.error = error;
        this.externalXref = externalXref;
        this.id = id;
        this.integrationType = integrationType;
        this.ipAddress = ipAddress;
        this.method = method;
        this.name = name;
        this.path = path;
        this.size = size;
        this.status = status;
        this.type = type;
        this.workspaceId = workspaceId;
    }
    
    public ApiCall(
            String integrationType,
            String method,
            String name,
            String path,
            String status,
            ApiCallType type) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), integrationType, Optional.empty(), method, name, path, Optional.empty(), status, type, Optional.empty());
    }

    @JsonIgnore
    public Optional<String> connectionId() {
        return connectionId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> environment() {
        return environment;
    }

    @JsonIgnore
    public Optional<String> error() {
        return error;
    }

    @JsonIgnore
    public Optional<String> externalXref() {
        return externalXref;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public String integrationType() {
        return integrationType;
    }

    @JsonIgnore
    public Optional<String> ipAddress() {
        return ipAddress;
    }

    @JsonIgnore
    public String method() {
        return method;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String path() {
        return path;
    }

    @JsonIgnore
    public Optional<Double> size() {
        return size;
    }

    @JsonIgnore
    public String status() {
        return status;
    }

    @JsonIgnore
    public ApiCallType type() {
        return type;
    }

    @JsonIgnore
    public Optional<String> workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ApiCall withConnectionId(String connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = Optional.ofNullable(connectionId);
        return this;
    }

    public ApiCall withConnectionId(Optional<String> connectionId) {
        Utils.checkNotNull(connectionId, "connectionId");
        this.connectionId = connectionId;
        return this;
    }

    public ApiCall withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public ApiCall withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public ApiCall withEnvironment(String environment) {
        Utils.checkNotNull(environment, "environment");
        this.environment = Optional.ofNullable(environment);
        return this;
    }

    public ApiCall withEnvironment(Optional<String> environment) {
        Utils.checkNotNull(environment, "environment");
        this.environment = environment;
        return this;
    }

    public ApiCall withError(String error) {
        Utils.checkNotNull(error, "error");
        this.error = Optional.ofNullable(error);
        return this;
    }

    public ApiCall withError(Optional<String> error) {
        Utils.checkNotNull(error, "error");
        this.error = error;
        return this;
    }

    public ApiCall withExternalXref(String externalXref) {
        Utils.checkNotNull(externalXref, "externalXref");
        this.externalXref = Optional.ofNullable(externalXref);
        return this;
    }

    public ApiCall withExternalXref(Optional<String> externalXref) {
        Utils.checkNotNull(externalXref, "externalXref");
        this.externalXref = externalXref;
        return this;
    }

    public ApiCall withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ApiCall withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ApiCall withIntegrationType(String integrationType) {
        Utils.checkNotNull(integrationType, "integrationType");
        this.integrationType = integrationType;
        return this;
    }

    public ApiCall withIpAddress(String ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = Optional.ofNullable(ipAddress);
        return this;
    }

    public ApiCall withIpAddress(Optional<String> ipAddress) {
        Utils.checkNotNull(ipAddress, "ipAddress");
        this.ipAddress = ipAddress;
        return this;
    }

    public ApiCall withMethod(String method) {
        Utils.checkNotNull(method, "method");
        this.method = method;
        return this;
    }

    public ApiCall withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ApiCall withPath(String path) {
        Utils.checkNotNull(path, "path");
        this.path = path;
        return this;
    }

    public ApiCall withSize(double size) {
        Utils.checkNotNull(size, "size");
        this.size = Optional.ofNullable(size);
        return this;
    }

    public ApiCall withSize(Optional<Double> size) {
        Utils.checkNotNull(size, "size");
        this.size = size;
        return this;
    }

    public ApiCall withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public ApiCall withType(ApiCallType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public ApiCall withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = Optional.ofNullable(workspaceId);
        return this;
    }

    public ApiCall withWorkspaceId(Optional<String> workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApiCall other = (ApiCall) o;
        return 
            Objects.deepEquals(this.connectionId, other.connectionId) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.environment, other.environment) &&
            Objects.deepEquals(this.error, other.error) &&
            Objects.deepEquals(this.externalXref, other.externalXref) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.integrationType, other.integrationType) &&
            Objects.deepEquals(this.ipAddress, other.ipAddress) &&
            Objects.deepEquals(this.method, other.method) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.path, other.path) &&
            Objects.deepEquals(this.size, other.size) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            connectionId,
            createdAt,
            environment,
            error,
            externalXref,
            id,
            integrationType,
            ipAddress,
            method,
            name,
            path,
            size,
            status,
            type,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApiCall.class,
                "connectionId", connectionId,
                "createdAt", createdAt,
                "environment", environment,
                "error", error,
                "externalXref", externalXref,
                "id", id,
                "integrationType", integrationType,
                "ipAddress", ipAddress,
                "method", method,
                "name", name,
                "path", path,
                "size", size,
                "status", status,
                "type", type,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private Optional<String> connectionId = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> environment;
 
        private Optional<String> error = Optional.empty();
 
        private Optional<String> externalXref = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private String integrationType;
 
        private Optional<String> ipAddress = Optional.empty();
 
        private String method;
 
        private String name;
 
        private String path;
 
        private Optional<Double> size = Optional.empty();
 
        private String status;
 
        private ApiCallType type;
 
        private Optional<String> workspaceId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder connectionId(String connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = Optional.ofNullable(connectionId);
            return this;
        }

        public Builder connectionId(Optional<String> connectionId) {
            Utils.checkNotNull(connectionId, "connectionId");
            this.connectionId = connectionId;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder environment(String environment) {
            Utils.checkNotNull(environment, "environment");
            this.environment = Optional.ofNullable(environment);
            return this;
        }

        public Builder environment(Optional<String> environment) {
            Utils.checkNotNull(environment, "environment");
            this.environment = environment;
            return this;
        }

        public Builder error(String error) {
            Utils.checkNotNull(error, "error");
            this.error = Optional.ofNullable(error);
            return this;
        }

        public Builder error(Optional<String> error) {
            Utils.checkNotNull(error, "error");
            this.error = error;
            return this;
        }

        public Builder externalXref(String externalXref) {
            Utils.checkNotNull(externalXref, "externalXref");
            this.externalXref = Optional.ofNullable(externalXref);
            return this;
        }

        public Builder externalXref(Optional<String> externalXref) {
            Utils.checkNotNull(externalXref, "externalXref");
            this.externalXref = externalXref;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder integrationType(String integrationType) {
            Utils.checkNotNull(integrationType, "integrationType");
            this.integrationType = integrationType;
            return this;
        }

        public Builder ipAddress(String ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = Optional.ofNullable(ipAddress);
            return this;
        }

        public Builder ipAddress(Optional<String> ipAddress) {
            Utils.checkNotNull(ipAddress, "ipAddress");
            this.ipAddress = ipAddress;
            return this;
        }

        public Builder method(String method) {
            Utils.checkNotNull(method, "method");
            this.method = method;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder path(String path) {
            Utils.checkNotNull(path, "path");
            this.path = path;
            return this;
        }

        public Builder size(double size) {
            Utils.checkNotNull(size, "size");
            this.size = Optional.ofNullable(size);
            return this;
        }

        public Builder size(Optional<Double> size) {
            Utils.checkNotNull(size, "size");
            this.size = size;
            return this;
        }

        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder type(ApiCallType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = Optional.ofNullable(workspaceId);
            return this;
        }

        public Builder workspaceId(Optional<String> workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public ApiCall build() {
            if (environment == null) {
                environment = _SINGLETON_VALUE_Environment.value();
            }            return new ApiCall(
                connectionId,
                createdAt,
                environment,
                error,
                externalXref,
                id,
                integrationType,
                ipAddress,
                method,
                name,
                path,
                size,
                status,
                type,
                workspaceId);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Environment =
                new LazySingletonValue<>(
                        "environment",
                        "\"Production\"",
                        new TypeReference<Optional<String>>() {});
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.unifiedapi.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class AccountingOrganization {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends PropertyAccountingOrganizationAddress> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("currency")
    private Optional<String> currency;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fiscal_year_end_month")
    private Optional<Double> fiscalYearEndMonth;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legal_name")
    private Optional<String> legalName;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("organization_code")
    private Optional<String> organizationCode;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends AccountingOrganizationRaw> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_number")
    private Optional<String> taxNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("website")
    private Optional<String> website;

    @JsonCreator
    public AccountingOrganization(
            @JsonProperty("address") Optional<? extends PropertyAccountingOrganizationAddress> address,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("currency") Optional<String> currency,
            @JsonProperty("fiscal_year_end_month") Optional<Double> fiscalYearEndMonth,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("legal_name") Optional<String> legalName,
            @JsonProperty("name") String name,
            @JsonProperty("organization_code") Optional<String> organizationCode,
            @JsonProperty("raw") Optional<? extends AccountingOrganizationRaw> raw,
            @JsonProperty("tax_number") Optional<String> taxNumber,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("website") Optional<String> website) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(currency, "currency");
        Utils.checkNotNull(fiscalYearEndMonth, "fiscalYearEndMonth");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(legalName, "legalName");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(organizationCode, "organizationCode");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(taxNumber, "taxNumber");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(website, "website");
        this.address = address;
        this.createdAt = createdAt;
        this.currency = currency;
        this.fiscalYearEndMonth = fiscalYearEndMonth;
        this.id = id;
        this.legalName = legalName;
        this.name = name;
        this.organizationCode = organizationCode;
        this.raw = raw;
        this.taxNumber = taxNumber;
        this.timezone = timezone;
        this.updatedAt = updatedAt;
        this.website = website;
    }
    
    public AccountingOrganization(
            String name) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyAccountingOrganizationAddress> address() {
        return (Optional<PropertyAccountingOrganizationAddress>) address;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> currency() {
        return currency;
    }

    @JsonIgnore
    public Optional<Double> fiscalYearEndMonth() {
        return fiscalYearEndMonth;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> legalName() {
        return legalName;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> organizationCode() {
        return organizationCode;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AccountingOrganizationRaw> raw() {
        return (Optional<AccountingOrganizationRaw>) raw;
    }

    @JsonIgnore
    public Optional<String> taxNumber() {
        return taxNumber;
    }

    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> website() {
        return website;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AccountingOrganization withAddress(PropertyAccountingOrganizationAddress address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public AccountingOrganization withAddress(Optional<? extends PropertyAccountingOrganizationAddress> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public AccountingOrganization withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public AccountingOrganization withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public AccountingOrganization withCurrency(String currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = Optional.ofNullable(currency);
        return this;
    }

    public AccountingOrganization withCurrency(Optional<String> currency) {
        Utils.checkNotNull(currency, "currency");
        this.currency = currency;
        return this;
    }

    public AccountingOrganization withFiscalYearEndMonth(double fiscalYearEndMonth) {
        Utils.checkNotNull(fiscalYearEndMonth, "fiscalYearEndMonth");
        this.fiscalYearEndMonth = Optional.ofNullable(fiscalYearEndMonth);
        return this;
    }

    public AccountingOrganization withFiscalYearEndMonth(Optional<Double> fiscalYearEndMonth) {
        Utils.checkNotNull(fiscalYearEndMonth, "fiscalYearEndMonth");
        this.fiscalYearEndMonth = fiscalYearEndMonth;
        return this;
    }

    public AccountingOrganization withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public AccountingOrganization withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AccountingOrganization withLegalName(String legalName) {
        Utils.checkNotNull(legalName, "legalName");
        this.legalName = Optional.ofNullable(legalName);
        return this;
    }

    public AccountingOrganization withLegalName(Optional<String> legalName) {
        Utils.checkNotNull(legalName, "legalName");
        this.legalName = legalName;
        return this;
    }

    public AccountingOrganization withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public AccountingOrganization withOrganizationCode(String organizationCode) {
        Utils.checkNotNull(organizationCode, "organizationCode");
        this.organizationCode = Optional.ofNullable(organizationCode);
        return this;
    }

    public AccountingOrganization withOrganizationCode(Optional<String> organizationCode) {
        Utils.checkNotNull(organizationCode, "organizationCode");
        this.organizationCode = organizationCode;
        return this;
    }

    public AccountingOrganization withRaw(AccountingOrganizationRaw raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public AccountingOrganization withRaw(Optional<? extends AccountingOrganizationRaw> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AccountingOrganization withTaxNumber(String taxNumber) {
        Utils.checkNotNull(taxNumber, "taxNumber");
        this.taxNumber = Optional.ofNullable(taxNumber);
        return this;
    }

    public AccountingOrganization withTaxNumber(Optional<String> taxNumber) {
        Utils.checkNotNull(taxNumber, "taxNumber");
        this.taxNumber = taxNumber;
        return this;
    }

    public AccountingOrganization withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    public AccountingOrganization withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public AccountingOrganization withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public AccountingOrganization withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public AccountingOrganization withWebsite(String website) {
        Utils.checkNotNull(website, "website");
        this.website = Optional.ofNullable(website);
        return this;
    }

    public AccountingOrganization withWebsite(Optional<String> website) {
        Utils.checkNotNull(website, "website");
        this.website = website;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingOrganization other = (AccountingOrganization) o;
        return 
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.currency, other.currency) &&
            Objects.deepEquals(this.fiscalYearEndMonth, other.fiscalYearEndMonth) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.legalName, other.legalName) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.organizationCode, other.organizationCode) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.taxNumber, other.taxNumber) &&
            Objects.deepEquals(this.timezone, other.timezone) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.website, other.website);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            address,
            createdAt,
            currency,
            fiscalYearEndMonth,
            id,
            legalName,
            name,
            organizationCode,
            raw,
            taxNumber,
            timezone,
            updatedAt,
            website);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingOrganization.class,
                "address", address,
                "createdAt", createdAt,
                "currency", currency,
                "fiscalYearEndMonth", fiscalYearEndMonth,
                "id", id,
                "legalName", legalName,
                "name", name,
                "organizationCode", organizationCode,
                "raw", raw,
                "taxNumber", taxNumber,
                "timezone", timezone,
                "updatedAt", updatedAt,
                "website", website);
    }
    
    public final static class Builder {
 
        private Optional<? extends PropertyAccountingOrganizationAddress> address = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> currency = Optional.empty();
 
        private Optional<Double> fiscalYearEndMonth = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> legalName = Optional.empty();
 
        private String name;
 
        private Optional<String> organizationCode = Optional.empty();
 
        private Optional<? extends AccountingOrganizationRaw> raw = Optional.empty();
 
        private Optional<String> taxNumber = Optional.empty();
 
        private Optional<String> timezone = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<String> website = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder address(PropertyAccountingOrganizationAddress address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends PropertyAccountingOrganizationAddress> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder currency(String currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = Optional.ofNullable(currency);
            return this;
        }

        public Builder currency(Optional<String> currency) {
            Utils.checkNotNull(currency, "currency");
            this.currency = currency;
            return this;
        }

        public Builder fiscalYearEndMonth(double fiscalYearEndMonth) {
            Utils.checkNotNull(fiscalYearEndMonth, "fiscalYearEndMonth");
            this.fiscalYearEndMonth = Optional.ofNullable(fiscalYearEndMonth);
            return this;
        }

        public Builder fiscalYearEndMonth(Optional<Double> fiscalYearEndMonth) {
            Utils.checkNotNull(fiscalYearEndMonth, "fiscalYearEndMonth");
            this.fiscalYearEndMonth = fiscalYearEndMonth;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder legalName(String legalName) {
            Utils.checkNotNull(legalName, "legalName");
            this.legalName = Optional.ofNullable(legalName);
            return this;
        }

        public Builder legalName(Optional<String> legalName) {
            Utils.checkNotNull(legalName, "legalName");
            this.legalName = legalName;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder organizationCode(String organizationCode) {
            Utils.checkNotNull(organizationCode, "organizationCode");
            this.organizationCode = Optional.ofNullable(organizationCode);
            return this;
        }

        public Builder organizationCode(Optional<String> organizationCode) {
            Utils.checkNotNull(organizationCode, "organizationCode");
            this.organizationCode = organizationCode;
            return this;
        }

        public Builder raw(AccountingOrganizationRaw raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends AccountingOrganizationRaw> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder taxNumber(String taxNumber) {
            Utils.checkNotNull(taxNumber, "taxNumber");
            this.taxNumber = Optional.ofNullable(taxNumber);
            return this;
        }

        public Builder taxNumber(Optional<String> taxNumber) {
            Utils.checkNotNull(taxNumber, "taxNumber");
            this.taxNumber = taxNumber;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder website(String website) {
            Utils.checkNotNull(website, "website");
            this.website = Optional.ofNullable(website);
            return this;
        }

        public Builder website(Optional<String> website) {
            Utils.checkNotNull(website, "website");
            this.website = website;
            return this;
        }
        
        public AccountingOrganization build() {
            return new AccountingOrganization(
                address,
                createdAt,
                currency,
                fiscalYearEndMonth,
                id,
                legalName,
                name,
                organizationCode,
                raw,
                taxNumber,
                timezone,
                updatedAt,
                website);
        }
    }
}


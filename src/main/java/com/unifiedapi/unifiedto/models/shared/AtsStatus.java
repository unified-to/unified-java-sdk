/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.unifiedapi.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class AtsStatus {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_status")
    private Optional<String> originalStatus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends AtsStatusRaw> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends AtsStatusStatus> status;

    @JsonCreator
    public AtsStatus(
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("original_status") Optional<String> originalStatus,
            @JsonProperty("raw") Optional<? extends AtsStatusRaw> raw,
            @JsonProperty("status") Optional<? extends AtsStatusStatus> status) {
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(originalStatus, "originalStatus");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(status, "status");
        this.description = description;
        this.id = id;
        this.originalStatus = originalStatus;
        this.raw = raw;
        this.status = status;
    }
    
    public AtsStatus() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> originalStatus() {
        return originalStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AtsStatusRaw> raw() {
        return (Optional<AtsStatusRaw>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AtsStatusStatus> status() {
        return (Optional<AtsStatusStatus>) status;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AtsStatus withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public AtsStatus withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public AtsStatus withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public AtsStatus withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AtsStatus withOriginalStatus(String originalStatus) {
        Utils.checkNotNull(originalStatus, "originalStatus");
        this.originalStatus = Optional.ofNullable(originalStatus);
        return this;
    }

    public AtsStatus withOriginalStatus(Optional<String> originalStatus) {
        Utils.checkNotNull(originalStatus, "originalStatus");
        this.originalStatus = originalStatus;
        return this;
    }

    public AtsStatus withRaw(AtsStatusRaw raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public AtsStatus withRaw(Optional<? extends AtsStatusRaw> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public AtsStatus withStatus(AtsStatusStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public AtsStatus withStatus(Optional<? extends AtsStatusStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AtsStatus other = (AtsStatus) o;
        return 
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.originalStatus, other.originalStatus) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.status, other.status);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            description,
            id,
            originalStatus,
            raw,
            status);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AtsStatus.class,
                "description", description,
                "id", id,
                "originalStatus", originalStatus,
                "raw", raw,
                "status", status);
    }
    
    public final static class Builder {
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> originalStatus = Optional.empty();
 
        private Optional<? extends AtsStatusRaw> raw = Optional.empty();
 
        private Optional<? extends AtsStatusStatus> status = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder originalStatus(String originalStatus) {
            Utils.checkNotNull(originalStatus, "originalStatus");
            this.originalStatus = Optional.ofNullable(originalStatus);
            return this;
        }

        public Builder originalStatus(Optional<String> originalStatus) {
            Utils.checkNotNull(originalStatus, "originalStatus");
            this.originalStatus = originalStatus;
            return this;
        }

        public Builder raw(AtsStatusRaw raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends AtsStatusRaw> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder status(AtsStatusStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends AtsStatusStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }
        
        public AtsStatus build() {
            return new AtsStatus(
                description,
                id,
                originalStatus,
                raw,
                status);
        }
    }
}


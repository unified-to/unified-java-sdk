/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class CommerceItemOption {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    private Optional<Double> position;

    @JsonProperty("values")
    private List<String> values;

    @JsonCreator
    public CommerceItemOption(
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") String name,
            @JsonProperty("position") Optional<Double> position,
            @JsonProperty("values") List<String> values) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(position, "position");
        Utils.checkNotNull(values, "values");
        this.id = id;
        this.name = name;
        this.position = position;
        this.values = values;
    }
    
    public CommerceItemOption(
            String name,
            List<String> values) {
        this(Optional.empty(), name, Optional.empty(), values);
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<Double> position() {
        return position;
    }

    @JsonIgnore
    public List<String> values() {
        return values;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CommerceItemOption withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CommerceItemOption withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CommerceItemOption withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CommerceItemOption withPosition(double position) {
        Utils.checkNotNull(position, "position");
        this.position = Optional.ofNullable(position);
        return this;
    }

    public CommerceItemOption withPosition(Optional<Double> position) {
        Utils.checkNotNull(position, "position");
        this.position = position;
        return this;
    }

    public CommerceItemOption withValues(List<String> values) {
        Utils.checkNotNull(values, "values");
        this.values = values;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceItemOption other = (CommerceItemOption) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.position, other.position) &&
            Objects.deepEquals(this.values, other.values);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            position,
            values);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceItemOption.class,
                "id", id,
                "name", name,
                "position", position,
                "values", values);
    }
    
    public final static class Builder {
 
        private Optional<String> id = Optional.empty();
 
        private String name;
 
        private Optional<Double> position = Optional.empty();
 
        private List<String> values;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder position(double position) {
            Utils.checkNotNull(position, "position");
            this.position = Optional.ofNullable(position);
            return this;
        }

        public Builder position(Optional<Double> position) {
            Utils.checkNotNull(position, "position");
            this.position = position;
            return this;
        }

        public Builder values(List<String> values) {
            Utils.checkNotNull(values, "values");
            this.values = values;
            return this;
        }
        
        public CommerceItemOption build() {
            return new CommerceItemOption(
                id,
                name,
                position,
                values);
        }
    }
}


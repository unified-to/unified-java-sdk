/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * CrmContact - A contact represents a person that optionally is associated with a deal and/or a company
 */

public class CrmContact {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends PropertyCrmContactAddress> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<String> company;

    /**
     * An array of company IDs associated with this contact
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_ids")
    private Optional<? extends List<String>> companyIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    /**
     * An array of deal IDs associated with this contact
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deal_ids")
    private Optional<? extends List<String>> dealIds;

    /**
     * An array of email addresses for this contact
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<CrmEmail>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    /**
     * Additional URLs associated with the contact e.g., LinkedIn, website, etc
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("link_urls")
    private Optional<? extends List<String>> linkUrls;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends CrmContactRaw> raw;

    /**
     * An array of telephones for this contact
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telephones")
    private Optional<? extends List<CrmTelephone>> telephones;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    @JsonCreator
    public CrmContact(
            @JsonProperty("address") Optional<? extends PropertyCrmContactAddress> address,
            @JsonProperty("company") Optional<String> company,
            @JsonProperty("company_ids") Optional<? extends List<String>> companyIds,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("deal_ids") Optional<? extends List<String>> dealIds,
            @JsonProperty("emails") Optional<? extends List<CrmEmail>> emails,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("link_urls") Optional<? extends List<String>> linkUrls,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("raw") Optional<? extends CrmContactRaw> raw,
            @JsonProperty("telephones") Optional<? extends List<CrmTelephone>> telephones,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("user_id") Optional<String> userId) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(companyIds, "companyIds");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(dealIds, "dealIds");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(linkUrls, "linkUrls");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(telephones, "telephones");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userId, "userId");
        this.address = address;
        this.company = company;
        this.companyIds = companyIds;
        this.createdAt = createdAt;
        this.dealIds = dealIds;
        this.emails = emails;
        this.id = id;
        this.linkUrls = linkUrls;
        this.name = name;
        this.raw = raw;
        this.telephones = telephones;
        this.title = title;
        this.updatedAt = updatedAt;
        this.userId = userId;
    }
    
    public CrmContact() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCrmContactAddress> address() {
        return (Optional<PropertyCrmContactAddress>) address;
    }

    @JsonIgnore
    public Optional<String> company() {
        return company;
    }

    /**
     * An array of company IDs associated with this contact
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> companyIds() {
        return (Optional<List<String>>) companyIds;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * An array of deal IDs associated with this contact
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> dealIds() {
        return (Optional<List<String>>) dealIds;
    }

    /**
     * An array of email addresses for this contact
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CrmEmail>> emails() {
        return (Optional<List<CrmEmail>>) emails;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    /**
     * Additional URLs associated with the contact e.g., LinkedIn, website, etc
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> linkUrls() {
        return (Optional<List<String>>) linkUrls;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CrmContactRaw> raw() {
        return (Optional<CrmContactRaw>) raw;
    }

    /**
     * An array of telephones for this contact
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CrmTelephone>> telephones() {
        return (Optional<List<CrmTelephone>>) telephones;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CrmContact withAddress(PropertyCrmContactAddress address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    public CrmContact withAddress(Optional<? extends PropertyCrmContactAddress> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public CrmContact withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    public CrmContact withCompany(Optional<String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    /**
     * An array of company IDs associated with this contact
     */
    public CrmContact withCompanyIds(List<String> companyIds) {
        Utils.checkNotNull(companyIds, "companyIds");
        this.companyIds = Optional.ofNullable(companyIds);
        return this;
    }

    /**
     * An array of company IDs associated with this contact
     */
    public CrmContact withCompanyIds(Optional<? extends List<String>> companyIds) {
        Utils.checkNotNull(companyIds, "companyIds");
        this.companyIds = companyIds;
        return this;
    }

    public CrmContact withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public CrmContact withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An array of deal IDs associated with this contact
     */
    public CrmContact withDealIds(List<String> dealIds) {
        Utils.checkNotNull(dealIds, "dealIds");
        this.dealIds = Optional.ofNullable(dealIds);
        return this;
    }

    /**
     * An array of deal IDs associated with this contact
     */
    public CrmContact withDealIds(Optional<? extends List<String>> dealIds) {
        Utils.checkNotNull(dealIds, "dealIds");
        this.dealIds = dealIds;
        return this;
    }

    /**
     * An array of email addresses for this contact
     */
    public CrmContact withEmails(List<CrmEmail> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    /**
     * An array of email addresses for this contact
     */
    public CrmContact withEmails(Optional<? extends List<CrmEmail>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public CrmContact withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CrmContact withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * Additional URLs associated with the contact e.g., LinkedIn, website, etc
     */
    public CrmContact withLinkUrls(List<String> linkUrls) {
        Utils.checkNotNull(linkUrls, "linkUrls");
        this.linkUrls = Optional.ofNullable(linkUrls);
        return this;
    }

    /**
     * Additional URLs associated with the contact e.g., LinkedIn, website, etc
     */
    public CrmContact withLinkUrls(Optional<? extends List<String>> linkUrls) {
        Utils.checkNotNull(linkUrls, "linkUrls");
        this.linkUrls = linkUrls;
        return this;
    }

    public CrmContact withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public CrmContact withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public CrmContact withRaw(CrmContactRaw raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public CrmContact withRaw(Optional<? extends CrmContactRaw> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    /**
     * An array of telephones for this contact
     */
    public CrmContact withTelephones(List<CrmTelephone> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = Optional.ofNullable(telephones);
        return this;
    }

    /**
     * An array of telephones for this contact
     */
    public CrmContact withTelephones(Optional<? extends List<CrmTelephone>> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = telephones;
        return this;
    }

    public CrmContact withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public CrmContact withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public CrmContact withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public CrmContact withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public CrmContact withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    public CrmContact withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CrmContact other = (CrmContact) o;
        return 
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.company, other.company) &&
            Objects.deepEquals(this.companyIds, other.companyIds) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.dealIds, other.dealIds) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.linkUrls, other.linkUrls) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.telephones, other.telephones) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            address,
            company,
            companyIds,
            createdAt,
            dealIds,
            emails,
            id,
            linkUrls,
            name,
            raw,
            telephones,
            title,
            updatedAt,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CrmContact.class,
                "address", address,
                "company", company,
                "companyIds", companyIds,
                "createdAt", createdAt,
                "dealIds", dealIds,
                "emails", emails,
                "id", id,
                "linkUrls", linkUrls,
                "name", name,
                "raw", raw,
                "telephones", telephones,
                "title", title,
                "updatedAt", updatedAt,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private Optional<? extends PropertyCrmContactAddress> address = Optional.empty();
 
        private Optional<String> company = Optional.empty();
 
        private Optional<? extends List<String>> companyIds = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends List<String>> dealIds = Optional.empty();
 
        private Optional<? extends List<CrmEmail>> emails = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends List<String>> linkUrls = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends CrmContactRaw> raw = Optional.empty();
 
        private Optional<? extends List<CrmTelephone>> telephones = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<String> userId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder address(PropertyCrmContactAddress address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        public Builder address(Optional<? extends PropertyCrmContactAddress> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        public Builder company(Optional<String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        /**
         * An array of company IDs associated with this contact
         */
        public Builder companyIds(List<String> companyIds) {
            Utils.checkNotNull(companyIds, "companyIds");
            this.companyIds = Optional.ofNullable(companyIds);
            return this;
        }

        /**
         * An array of company IDs associated with this contact
         */
        public Builder companyIds(Optional<? extends List<String>> companyIds) {
            Utils.checkNotNull(companyIds, "companyIds");
            this.companyIds = companyIds;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * An array of deal IDs associated with this contact
         */
        public Builder dealIds(List<String> dealIds) {
            Utils.checkNotNull(dealIds, "dealIds");
            this.dealIds = Optional.ofNullable(dealIds);
            return this;
        }

        /**
         * An array of deal IDs associated with this contact
         */
        public Builder dealIds(Optional<? extends List<String>> dealIds) {
            Utils.checkNotNull(dealIds, "dealIds");
            this.dealIds = dealIds;
            return this;
        }

        /**
         * An array of email addresses for this contact
         */
        public Builder emails(List<CrmEmail> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        /**
         * An array of email addresses for this contact
         */
        public Builder emails(Optional<? extends List<CrmEmail>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * Additional URLs associated with the contact e.g., LinkedIn, website, etc
         */
        public Builder linkUrls(List<String> linkUrls) {
            Utils.checkNotNull(linkUrls, "linkUrls");
            this.linkUrls = Optional.ofNullable(linkUrls);
            return this;
        }

        /**
         * Additional URLs associated with the contact e.g., LinkedIn, website, etc
         */
        public Builder linkUrls(Optional<? extends List<String>> linkUrls) {
            Utils.checkNotNull(linkUrls, "linkUrls");
            this.linkUrls = linkUrls;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder raw(CrmContactRaw raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends CrmContactRaw> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        /**
         * An array of telephones for this contact
         */
        public Builder telephones(List<CrmTelephone> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = Optional.ofNullable(telephones);
            return this;
        }

        /**
         * An array of telephones for this contact
         */
        public Builder telephones(Optional<? extends List<CrmTelephone>> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = telephones;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public CrmContact build() {
            return new CrmContact(
                address,
                company,
                companyIds,
                createdAt,
                dealIds,
                emails,
                id,
                linkUrls,
                name,
                raw,
                telephones,
                title,
                updatedAt,
                userId);
        }
    }
}


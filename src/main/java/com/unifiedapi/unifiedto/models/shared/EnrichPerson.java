/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.unifiedapi.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
/**
 * EnrichPerson - A person object from an enrichment integration
 */

public class EnrichPerson {

    /**
     * The address of the person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<? extends PropertyEnrichPersonAddress> address;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bio")
    private Optional<String> bio;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthdate")
    private Optional<String> birthdate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company")
    private Optional<String> company;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_domain")
    private Optional<String> companyDomain;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    /**
     * An array of email addresses for this person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<EnrichEmail>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("facebook_url")
    private Optional<String> facebookUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gender")
    private Optional<? extends Gender> gender;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("github_url")
    private Optional<String> githubUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("github_username")
    private Optional<String> githubUsername;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("image_url")
    private Optional<String> imageUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("linkedin_url")
    private Optional<String> linkedinUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The raw data returned by the integration for this person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    /**
     * An array of telephones for this person
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("telephones")
    private Optional<? extends List<EnrichTelephone>> telephones;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twitter_handle")
    private Optional<String> twitterHandle;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("twitter_url")
    private Optional<String> twitterUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("utc_offset")
    private Optional<Double> utcOffset;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_histories")
    private Optional<? extends List<EnrichPersonWorkHistory>> workHistories;

    @JsonCreator
    public EnrichPerson(
            @JsonProperty("address") Optional<? extends PropertyEnrichPersonAddress> address,
            @JsonProperty("bio") Optional<String> bio,
            @JsonProperty("birthdate") Optional<String> birthdate,
            @JsonProperty("company") Optional<String> company,
            @JsonProperty("company_domain") Optional<String> companyDomain,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("emails") Optional<? extends List<EnrichEmail>> emails,
            @JsonProperty("facebook_url") Optional<String> facebookUrl,
            @JsonProperty("gender") Optional<? extends Gender> gender,
            @JsonProperty("github_url") Optional<String> githubUrl,
            @JsonProperty("github_username") Optional<String> githubUsername,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("image_url") Optional<String> imageUrl,
            @JsonProperty("linkedin_url") Optional<String> linkedinUrl,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("telephones") Optional<? extends List<EnrichTelephone>> telephones,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("twitter_handle") Optional<String> twitterHandle,
            @JsonProperty("twitter_url") Optional<String> twitterUrl,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("utc_offset") Optional<Double> utcOffset,
            @JsonProperty("work_histories") Optional<? extends List<EnrichPersonWorkHistory>> workHistories) {
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(bio, "bio");
        Utils.checkNotNull(birthdate, "birthdate");
        Utils.checkNotNull(company, "company");
        Utils.checkNotNull(companyDomain, "companyDomain");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(facebookUrl, "facebookUrl");
        Utils.checkNotNull(gender, "gender");
        Utils.checkNotNull(githubUrl, "githubUrl");
        Utils.checkNotNull(githubUsername, "githubUsername");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(imageUrl, "imageUrl");
        Utils.checkNotNull(linkedinUrl, "linkedinUrl");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(telephones, "telephones");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(twitterHandle, "twitterHandle");
        Utils.checkNotNull(twitterUrl, "twitterUrl");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(utcOffset, "utcOffset");
        Utils.checkNotNull(workHistories, "workHistories");
        this.address = address;
        this.bio = bio;
        this.birthdate = birthdate;
        this.company = company;
        this.companyDomain = companyDomain;
        this.createdAt = createdAt;
        this.emails = emails;
        this.facebookUrl = facebookUrl;
        this.gender = gender;
        this.githubUrl = githubUrl;
        this.githubUsername = githubUsername;
        this.id = id;
        this.imageUrl = imageUrl;
        this.linkedinUrl = linkedinUrl;
        this.name = name;
        this.raw = raw;
        this.telephones = telephones;
        this.timezone = timezone;
        this.title = title;
        this.twitterHandle = twitterHandle;
        this.twitterUrl = twitterUrl;
        this.updatedAt = updatedAt;
        this.utcOffset = utcOffset;
        this.workHistories = workHistories;
    }
    
    public EnrichPerson() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The address of the person
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyEnrichPersonAddress> address() {
        return (Optional<PropertyEnrichPersonAddress>) address;
    }

    @JsonIgnore
    public Optional<String> bio() {
        return bio;
    }

    @JsonIgnore
    public Optional<String> birthdate() {
        return birthdate;
    }

    @JsonIgnore
    public Optional<String> company() {
        return company;
    }

    @JsonIgnore
    public Optional<String> companyDomain() {
        return companyDomain;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * An array of email addresses for this person
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EnrichEmail>> emails() {
        return (Optional<List<EnrichEmail>>) emails;
    }

    @JsonIgnore
    public Optional<String> facebookUrl() {
        return facebookUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Gender> gender() {
        return (Optional<Gender>) gender;
    }

    @JsonIgnore
    public Optional<String> githubUrl() {
        return githubUrl;
    }

    @JsonIgnore
    public Optional<String> githubUsername() {
        return githubUsername;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> imageUrl() {
        return imageUrl;
    }

    @JsonIgnore
    public Optional<String> linkedinUrl() {
        return linkedinUrl;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The raw data returned by the integration for this person
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    /**
     * An array of telephones for this person
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EnrichTelephone>> telephones() {
        return (Optional<List<EnrichTelephone>>) telephones;
    }

    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @JsonIgnore
    public Optional<String> twitterHandle() {
        return twitterHandle;
    }

    @JsonIgnore
    public Optional<String> twitterUrl() {
        return twitterUrl;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<Double> utcOffset() {
        return utcOffset;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EnrichPersonWorkHistory>> workHistories() {
        return (Optional<List<EnrichPersonWorkHistory>>) workHistories;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The address of the person
     */
    public EnrichPerson withAddress(PropertyEnrichPersonAddress address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    /**
     * The address of the person
     */
    public EnrichPerson withAddress(Optional<? extends PropertyEnrichPersonAddress> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    public EnrichPerson withBio(String bio) {
        Utils.checkNotNull(bio, "bio");
        this.bio = Optional.ofNullable(bio);
        return this;
    }

    public EnrichPerson withBio(Optional<String> bio) {
        Utils.checkNotNull(bio, "bio");
        this.bio = bio;
        return this;
    }

    public EnrichPerson withBirthdate(String birthdate) {
        Utils.checkNotNull(birthdate, "birthdate");
        this.birthdate = Optional.ofNullable(birthdate);
        return this;
    }

    public EnrichPerson withBirthdate(Optional<String> birthdate) {
        Utils.checkNotNull(birthdate, "birthdate");
        this.birthdate = birthdate;
        return this;
    }

    public EnrichPerson withCompany(String company) {
        Utils.checkNotNull(company, "company");
        this.company = Optional.ofNullable(company);
        return this;
    }

    public EnrichPerson withCompany(Optional<String> company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }

    public EnrichPerson withCompanyDomain(String companyDomain) {
        Utils.checkNotNull(companyDomain, "companyDomain");
        this.companyDomain = Optional.ofNullable(companyDomain);
        return this;
    }

    public EnrichPerson withCompanyDomain(Optional<String> companyDomain) {
        Utils.checkNotNull(companyDomain, "companyDomain");
        this.companyDomain = companyDomain;
        return this;
    }

    public EnrichPerson withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public EnrichPerson withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An array of email addresses for this person
     */
    public EnrichPerson withEmails(List<EnrichEmail> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    /**
     * An array of email addresses for this person
     */
    public EnrichPerson withEmails(Optional<? extends List<EnrichEmail>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public EnrichPerson withFacebookUrl(String facebookUrl) {
        Utils.checkNotNull(facebookUrl, "facebookUrl");
        this.facebookUrl = Optional.ofNullable(facebookUrl);
        return this;
    }

    public EnrichPerson withFacebookUrl(Optional<String> facebookUrl) {
        Utils.checkNotNull(facebookUrl, "facebookUrl");
        this.facebookUrl = facebookUrl;
        return this;
    }

    public EnrichPerson withGender(Gender gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = Optional.ofNullable(gender);
        return this;
    }

    public EnrichPerson withGender(Optional<? extends Gender> gender) {
        Utils.checkNotNull(gender, "gender");
        this.gender = gender;
        return this;
    }

    public EnrichPerson withGithubUrl(String githubUrl) {
        Utils.checkNotNull(githubUrl, "githubUrl");
        this.githubUrl = Optional.ofNullable(githubUrl);
        return this;
    }

    public EnrichPerson withGithubUrl(Optional<String> githubUrl) {
        Utils.checkNotNull(githubUrl, "githubUrl");
        this.githubUrl = githubUrl;
        return this;
    }

    public EnrichPerson withGithubUsername(String githubUsername) {
        Utils.checkNotNull(githubUsername, "githubUsername");
        this.githubUsername = Optional.ofNullable(githubUsername);
        return this;
    }

    public EnrichPerson withGithubUsername(Optional<String> githubUsername) {
        Utils.checkNotNull(githubUsername, "githubUsername");
        this.githubUsername = githubUsername;
        return this;
    }

    public EnrichPerson withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public EnrichPerson withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public EnrichPerson withImageUrl(String imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = Optional.ofNullable(imageUrl);
        return this;
    }

    public EnrichPerson withImageUrl(Optional<String> imageUrl) {
        Utils.checkNotNull(imageUrl, "imageUrl");
        this.imageUrl = imageUrl;
        return this;
    }

    public EnrichPerson withLinkedinUrl(String linkedinUrl) {
        Utils.checkNotNull(linkedinUrl, "linkedinUrl");
        this.linkedinUrl = Optional.ofNullable(linkedinUrl);
        return this;
    }

    public EnrichPerson withLinkedinUrl(Optional<String> linkedinUrl) {
        Utils.checkNotNull(linkedinUrl, "linkedinUrl");
        this.linkedinUrl = linkedinUrl;
        return this;
    }

    public EnrichPerson withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public EnrichPerson withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The raw data returned by the integration for this person
     */
    public EnrichPerson withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    /**
     * The raw data returned by the integration for this person
     */
    public EnrichPerson withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    /**
     * An array of telephones for this person
     */
    public EnrichPerson withTelephones(List<EnrichTelephone> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = Optional.ofNullable(telephones);
        return this;
    }

    /**
     * An array of telephones for this person
     */
    public EnrichPerson withTelephones(Optional<? extends List<EnrichTelephone>> telephones) {
        Utils.checkNotNull(telephones, "telephones");
        this.telephones = telephones;
        return this;
    }

    public EnrichPerson withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    public EnrichPerson withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public EnrichPerson withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public EnrichPerson withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public EnrichPerson withTwitterHandle(String twitterHandle) {
        Utils.checkNotNull(twitterHandle, "twitterHandle");
        this.twitterHandle = Optional.ofNullable(twitterHandle);
        return this;
    }

    public EnrichPerson withTwitterHandle(Optional<String> twitterHandle) {
        Utils.checkNotNull(twitterHandle, "twitterHandle");
        this.twitterHandle = twitterHandle;
        return this;
    }

    public EnrichPerson withTwitterUrl(String twitterUrl) {
        Utils.checkNotNull(twitterUrl, "twitterUrl");
        this.twitterUrl = Optional.ofNullable(twitterUrl);
        return this;
    }

    public EnrichPerson withTwitterUrl(Optional<String> twitterUrl) {
        Utils.checkNotNull(twitterUrl, "twitterUrl");
        this.twitterUrl = twitterUrl;
        return this;
    }

    public EnrichPerson withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public EnrichPerson withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public EnrichPerson withUtcOffset(double utcOffset) {
        Utils.checkNotNull(utcOffset, "utcOffset");
        this.utcOffset = Optional.ofNullable(utcOffset);
        return this;
    }

    public EnrichPerson withUtcOffset(Optional<Double> utcOffset) {
        Utils.checkNotNull(utcOffset, "utcOffset");
        this.utcOffset = utcOffset;
        return this;
    }

    public EnrichPerson withWorkHistories(List<EnrichPersonWorkHistory> workHistories) {
        Utils.checkNotNull(workHistories, "workHistories");
        this.workHistories = Optional.ofNullable(workHistories);
        return this;
    }

    public EnrichPerson withWorkHistories(Optional<? extends List<EnrichPersonWorkHistory>> workHistories) {
        Utils.checkNotNull(workHistories, "workHistories");
        this.workHistories = workHistories;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EnrichPerson other = (EnrichPerson) o;
        return 
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.bio, other.bio) &&
            Objects.deepEquals(this.birthdate, other.birthdate) &&
            Objects.deepEquals(this.company, other.company) &&
            Objects.deepEquals(this.companyDomain, other.companyDomain) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.facebookUrl, other.facebookUrl) &&
            Objects.deepEquals(this.gender, other.gender) &&
            Objects.deepEquals(this.githubUrl, other.githubUrl) &&
            Objects.deepEquals(this.githubUsername, other.githubUsername) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.imageUrl, other.imageUrl) &&
            Objects.deepEquals(this.linkedinUrl, other.linkedinUrl) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.telephones, other.telephones) &&
            Objects.deepEquals(this.timezone, other.timezone) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.twitterHandle, other.twitterHandle) &&
            Objects.deepEquals(this.twitterUrl, other.twitterUrl) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.utcOffset, other.utcOffset) &&
            Objects.deepEquals(this.workHistories, other.workHistories);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            address,
            bio,
            birthdate,
            company,
            companyDomain,
            createdAt,
            emails,
            facebookUrl,
            gender,
            githubUrl,
            githubUsername,
            id,
            imageUrl,
            linkedinUrl,
            name,
            raw,
            telephones,
            timezone,
            title,
            twitterHandle,
            twitterUrl,
            updatedAt,
            utcOffset,
            workHistories);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EnrichPerson.class,
                "address", address,
                "bio", bio,
                "birthdate", birthdate,
                "company", company,
                "companyDomain", companyDomain,
                "createdAt", createdAt,
                "emails", emails,
                "facebookUrl", facebookUrl,
                "gender", gender,
                "githubUrl", githubUrl,
                "githubUsername", githubUsername,
                "id", id,
                "imageUrl", imageUrl,
                "linkedinUrl", linkedinUrl,
                "name", name,
                "raw", raw,
                "telephones", telephones,
                "timezone", timezone,
                "title", title,
                "twitterHandle", twitterHandle,
                "twitterUrl", twitterUrl,
                "updatedAt", updatedAt,
                "utcOffset", utcOffset,
                "workHistories", workHistories);
    }
    
    public final static class Builder {
 
        private Optional<? extends PropertyEnrichPersonAddress> address = Optional.empty();
 
        private Optional<String> bio = Optional.empty();
 
        private Optional<String> birthdate = Optional.empty();
 
        private Optional<String> company = Optional.empty();
 
        private Optional<String> companyDomain = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends List<EnrichEmail>> emails = Optional.empty();
 
        private Optional<String> facebookUrl = Optional.empty();
 
        private Optional<? extends Gender> gender = Optional.empty();
 
        private Optional<String> githubUrl = Optional.empty();
 
        private Optional<String> githubUsername = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> imageUrl = Optional.empty();
 
        private Optional<String> linkedinUrl = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<? extends List<EnrichTelephone>> telephones = Optional.empty();
 
        private Optional<String> timezone = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> twitterHandle = Optional.empty();
 
        private Optional<String> twitterUrl = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<Double> utcOffset = Optional.empty();
 
        private Optional<? extends List<EnrichPersonWorkHistory>> workHistories = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The address of the person
         */
        public Builder address(PropertyEnrichPersonAddress address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * The address of the person
         */
        public Builder address(Optional<? extends PropertyEnrichPersonAddress> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        public Builder bio(String bio) {
            Utils.checkNotNull(bio, "bio");
            this.bio = Optional.ofNullable(bio);
            return this;
        }

        public Builder bio(Optional<String> bio) {
            Utils.checkNotNull(bio, "bio");
            this.bio = bio;
            return this;
        }

        public Builder birthdate(String birthdate) {
            Utils.checkNotNull(birthdate, "birthdate");
            this.birthdate = Optional.ofNullable(birthdate);
            return this;
        }

        public Builder birthdate(Optional<String> birthdate) {
            Utils.checkNotNull(birthdate, "birthdate");
            this.birthdate = birthdate;
            return this;
        }

        public Builder company(String company) {
            Utils.checkNotNull(company, "company");
            this.company = Optional.ofNullable(company);
            return this;
        }

        public Builder company(Optional<String> company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }

        public Builder companyDomain(String companyDomain) {
            Utils.checkNotNull(companyDomain, "companyDomain");
            this.companyDomain = Optional.ofNullable(companyDomain);
            return this;
        }

        public Builder companyDomain(Optional<String> companyDomain) {
            Utils.checkNotNull(companyDomain, "companyDomain");
            this.companyDomain = companyDomain;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * An array of email addresses for this person
         */
        public Builder emails(List<EnrichEmail> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        /**
         * An array of email addresses for this person
         */
        public Builder emails(Optional<? extends List<EnrichEmail>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder facebookUrl(String facebookUrl) {
            Utils.checkNotNull(facebookUrl, "facebookUrl");
            this.facebookUrl = Optional.ofNullable(facebookUrl);
            return this;
        }

        public Builder facebookUrl(Optional<String> facebookUrl) {
            Utils.checkNotNull(facebookUrl, "facebookUrl");
            this.facebookUrl = facebookUrl;
            return this;
        }

        public Builder gender(Gender gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = Optional.ofNullable(gender);
            return this;
        }

        public Builder gender(Optional<? extends Gender> gender) {
            Utils.checkNotNull(gender, "gender");
            this.gender = gender;
            return this;
        }

        public Builder githubUrl(String githubUrl) {
            Utils.checkNotNull(githubUrl, "githubUrl");
            this.githubUrl = Optional.ofNullable(githubUrl);
            return this;
        }

        public Builder githubUrl(Optional<String> githubUrl) {
            Utils.checkNotNull(githubUrl, "githubUrl");
            this.githubUrl = githubUrl;
            return this;
        }

        public Builder githubUsername(String githubUsername) {
            Utils.checkNotNull(githubUsername, "githubUsername");
            this.githubUsername = Optional.ofNullable(githubUsername);
            return this;
        }

        public Builder githubUsername(Optional<String> githubUsername) {
            Utils.checkNotNull(githubUsername, "githubUsername");
            this.githubUsername = githubUsername;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder imageUrl(String imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = Optional.ofNullable(imageUrl);
            return this;
        }

        public Builder imageUrl(Optional<String> imageUrl) {
            Utils.checkNotNull(imageUrl, "imageUrl");
            this.imageUrl = imageUrl;
            return this;
        }

        public Builder linkedinUrl(String linkedinUrl) {
            Utils.checkNotNull(linkedinUrl, "linkedinUrl");
            this.linkedinUrl = Optional.ofNullable(linkedinUrl);
            return this;
        }

        public Builder linkedinUrl(Optional<String> linkedinUrl) {
            Utils.checkNotNull(linkedinUrl, "linkedinUrl");
            this.linkedinUrl = linkedinUrl;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The raw data returned by the integration for this person
         */
        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        /**
         * The raw data returned by the integration for this person
         */
        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        /**
         * An array of telephones for this person
         */
        public Builder telephones(List<EnrichTelephone> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = Optional.ofNullable(telephones);
            return this;
        }

        /**
         * An array of telephones for this person
         */
        public Builder telephones(Optional<? extends List<EnrichTelephone>> telephones) {
            Utils.checkNotNull(telephones, "telephones");
            this.telephones = telephones;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder twitterHandle(String twitterHandle) {
            Utils.checkNotNull(twitterHandle, "twitterHandle");
            this.twitterHandle = Optional.ofNullable(twitterHandle);
            return this;
        }

        public Builder twitterHandle(Optional<String> twitterHandle) {
            Utils.checkNotNull(twitterHandle, "twitterHandle");
            this.twitterHandle = twitterHandle;
            return this;
        }

        public Builder twitterUrl(String twitterUrl) {
            Utils.checkNotNull(twitterUrl, "twitterUrl");
            this.twitterUrl = Optional.ofNullable(twitterUrl);
            return this;
        }

        public Builder twitterUrl(Optional<String> twitterUrl) {
            Utils.checkNotNull(twitterUrl, "twitterUrl");
            this.twitterUrl = twitterUrl;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder utcOffset(double utcOffset) {
            Utils.checkNotNull(utcOffset, "utcOffset");
            this.utcOffset = Optional.ofNullable(utcOffset);
            return this;
        }

        public Builder utcOffset(Optional<Double> utcOffset) {
            Utils.checkNotNull(utcOffset, "utcOffset");
            this.utcOffset = utcOffset;
            return this;
        }

        public Builder workHistories(List<EnrichPersonWorkHistory> workHistories) {
            Utils.checkNotNull(workHistories, "workHistories");
            this.workHistories = Optional.ofNullable(workHistories);
            return this;
        }

        public Builder workHistories(Optional<? extends List<EnrichPersonWorkHistory>> workHistories) {
            Utils.checkNotNull(workHistories, "workHistories");
            this.workHistories = workHistories;
            return this;
        }
        
        public EnrichPerson build() {
            return new EnrichPerson(
                address,
                bio,
                birthdate,
                company,
                companyDomain,
                createdAt,
                emails,
                facebookUrl,
                gender,
                githubUrl,
                githubUsername,
                id,
                imageUrl,
                linkedinUrl,
                name,
                raw,
                telephones,
                timezone,
                title,
                twitterHandle,
                twitterUrl,
                updatedAt,
                utcOffset,
                workHistories);
        }
    }
}


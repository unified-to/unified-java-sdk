/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.unifiedapi.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class ScimUser {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<ScimAddress>> addresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<String> displayName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<ScimEmail>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entitlements")
    private Optional<? extends List<ScimEntitlement>> entitlements;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalId")
    private Optional<String> externalId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    private Optional<? extends List<ScimUserGroups>> groups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ims")
    private Optional<? extends List<ScimIms>> ims;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private Optional<String> locale;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    private Optional<? extends PropertyScimUserMeta> meta;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends PropertyScimUserName> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickName")
    private Optional<String> nickName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<String> password;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumbers")
    private Optional<? extends List<ScimPhoneNumber>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photos")
    private Optional<? extends List<ScimPhoto>> photos;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredLanguage")
    private Optional<String> preferredLanguage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileUrl")
    private Optional<String> profileUrl;

    /**
     * Student, Faculty, ...
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<ScimRole>> roles;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schemas")
    private Optional<? extends List<PropertyScimUserSchemas>> schemas;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * an organization.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urn:ietf:params:scim:schemas:extension:enterprise:2.0:User")
    private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User")
    private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urn:ietf:params:scim:schemas:extension:peakon:2.0:User")
    private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userName")
    private Optional<String> userName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userType")
    private Optional<String> userType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x509Certificates")
    private Optional<? extends List<ScimRole>> x509Certificates;

    @JsonCreator
    public ScimUser(
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("addresses") Optional<? extends List<ScimAddress>> addresses,
            @JsonProperty("displayName") Optional<String> displayName,
            @JsonProperty("emails") Optional<? extends List<ScimEmail>> emails,
            @JsonProperty("entitlements") Optional<? extends List<ScimEntitlement>> entitlements,
            @JsonProperty("externalId") Optional<String> externalId,
            @JsonProperty("groups") Optional<? extends List<ScimUserGroups>> groups,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("ims") Optional<? extends List<ScimIms>> ims,
            @JsonProperty("locale") Optional<String> locale,
            @JsonProperty("meta") Optional<? extends PropertyScimUserMeta> meta,
            @JsonProperty("name") Optional<? extends PropertyScimUserName> name,
            @JsonProperty("nickName") Optional<String> nickName,
            @JsonProperty("password") Optional<String> password,
            @JsonProperty("phoneNumbers") Optional<? extends List<ScimPhoneNumber>> phoneNumbers,
            @JsonProperty("photos") Optional<? extends List<ScimPhoto>> photos,
            @JsonProperty("preferredLanguage") Optional<String> preferredLanguage,
            @JsonProperty("profileUrl") Optional<String> profileUrl,
            @JsonProperty("roles") Optional<? extends List<ScimRole>> roles,
            @JsonProperty("schemas") Optional<? extends List<PropertyScimUserSchemas>> schemas,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("urn:ietf:params:scim:schemas:extension:enterprise:2.0:User") Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User,
            @JsonProperty("urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User") Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User,
            @JsonProperty("urn:ietf:params:scim:schemas:extension:peakon:2.0:User") Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User,
            @JsonProperty("userName") Optional<String> userName,
            @JsonProperty("userType") Optional<String> userType,
            @JsonProperty("x509Certificates") Optional<? extends List<ScimRole>> x509Certificates) {
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(entitlements, "entitlements");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(groups, "groups");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ims, "ims");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(meta, "meta");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(nickName, "nickName");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(photos, "photos");
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        Utils.checkNotNull(profileUrl, "profileUrl");
        Utils.checkNotNull(roles, "roles");
        Utils.checkNotNull(schemas, "schemas");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
        Utils.checkNotNull(userName, "userName");
        Utils.checkNotNull(userType, "userType");
        Utils.checkNotNull(x509Certificates, "x509Certificates");
        this.active = active;
        this.addresses = addresses;
        this.displayName = displayName;
        this.emails = emails;
        this.entitlements = entitlements;
        this.externalId = externalId;
        this.groups = groups;
        this.id = id;
        this.ims = ims;
        this.locale = locale;
        this.meta = meta;
        this.name = name;
        this.nickName = nickName;
        this.password = password;
        this.phoneNumbers = phoneNumbers;
        this.photos = photos;
        this.preferredLanguage = preferredLanguage;
        this.profileUrl = profileUrl;
        this.roles = roles;
        this.schemas = schemas;
        this.timezone = timezone;
        this.title = title;
        this.urnIetfParamsScimSchemasExtensionEnterprise20User = urnIetfParamsScimSchemasExtensionEnterprise20User;
        this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = urnIetfParamsScimSchemasExtensionLatticeAttributes10User;
        this.urnIetfParamsScimSchemasExtensionPeakon20User = urnIetfParamsScimSchemasExtensionPeakon20User;
        this.userName = userName;
        this.userType = userType;
        this.x509Certificates = x509Certificates;
    }
    
    public ScimUser() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimAddress>> addresses() {
        return (Optional<List<ScimAddress>>) addresses;
    }

    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimEmail>> emails() {
        return (Optional<List<ScimEmail>>) emails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimEntitlement>> entitlements() {
        return (Optional<List<ScimEntitlement>>) entitlements;
    }

    @JsonIgnore
    public Optional<String> externalId() {
        return externalId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimUserGroups>> groups() {
        return (Optional<List<ScimUserGroups>>) groups;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimIms>> ims() {
        return (Optional<List<ScimIms>>) ims;
    }

    @JsonIgnore
    public Optional<String> locale() {
        return locale;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyScimUserMeta> meta() {
        return (Optional<PropertyScimUserMeta>) meta;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyScimUserName> name() {
        return (Optional<PropertyScimUserName>) name;
    }

    @JsonIgnore
    public Optional<String> nickName() {
        return nickName;
    }

    @JsonIgnore
    public Optional<String> password() {
        return password;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimPhoneNumber>> phoneNumbers() {
        return (Optional<List<ScimPhoneNumber>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimPhoto>> photos() {
        return (Optional<List<ScimPhoto>>) photos;
    }

    @JsonIgnore
    public Optional<String> preferredLanguage() {
        return preferredLanguage;
    }

    @JsonIgnore
    public Optional<String> profileUrl() {
        return profileUrl;
    }

    /**
     * Student, Faculty, ...
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimRole>> roles() {
        return (Optional<List<ScimRole>>) roles;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyScimUserSchemas>> schemas() {
        return (Optional<List<PropertyScimUserSchemas>>) schemas;
    }

    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * an organization.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User() {
        return (Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User>) urnIetfParamsScimSchemasExtensionEnterprise20User;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User() {
        return (Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User>) urnIetfParamsScimSchemasExtensionLatticeAttributes10User;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User() {
        return (Optional<PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User>) urnIetfParamsScimSchemasExtensionPeakon20User;
    }

    @JsonIgnore
    public Optional<String> userName() {
        return userName;
    }

    @JsonIgnore
    public Optional<String> userType() {
        return userType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ScimRole>> x509Certificates() {
        return (Optional<List<ScimRole>>) x509Certificates;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ScimUser withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    public ScimUser withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public ScimUser withAddresses(List<ScimAddress> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public ScimUser withAddresses(Optional<? extends List<ScimAddress>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public ScimUser withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }

    public ScimUser withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    public ScimUser withEmails(List<ScimEmail> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public ScimUser withEmails(Optional<? extends List<ScimEmail>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public ScimUser withEntitlements(List<ScimEntitlement> entitlements) {
        Utils.checkNotNull(entitlements, "entitlements");
        this.entitlements = Optional.ofNullable(entitlements);
        return this;
    }

    public ScimUser withEntitlements(Optional<? extends List<ScimEntitlement>> entitlements) {
        Utils.checkNotNull(entitlements, "entitlements");
        this.entitlements = entitlements;
        return this;
    }

    public ScimUser withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }

    public ScimUser withExternalId(Optional<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public ScimUser withGroups(List<ScimUserGroups> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = Optional.ofNullable(groups);
        return this;
    }

    public ScimUser withGroups(Optional<? extends List<ScimUserGroups>> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = groups;
        return this;
    }

    public ScimUser withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ScimUser withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ScimUser withIms(List<ScimIms> ims) {
        Utils.checkNotNull(ims, "ims");
        this.ims = Optional.ofNullable(ims);
        return this;
    }

    public ScimUser withIms(Optional<? extends List<ScimIms>> ims) {
        Utils.checkNotNull(ims, "ims");
        this.ims = ims;
        return this;
    }

    public ScimUser withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }

    public ScimUser withLocale(Optional<String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    public ScimUser withMeta(PropertyScimUserMeta meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = Optional.ofNullable(meta);
        return this;
    }

    public ScimUser withMeta(Optional<? extends PropertyScimUserMeta> meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }

    public ScimUser withName(PropertyScimUserName name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public ScimUser withName(Optional<? extends PropertyScimUserName> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ScimUser withNickName(String nickName) {
        Utils.checkNotNull(nickName, "nickName");
        this.nickName = Optional.ofNullable(nickName);
        return this;
    }

    public ScimUser withNickName(Optional<String> nickName) {
        Utils.checkNotNull(nickName, "nickName");
        this.nickName = nickName;
        return this;
    }

    public ScimUser withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    public ScimUser withPassword(Optional<String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public ScimUser withPhoneNumbers(List<ScimPhoneNumber> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public ScimUser withPhoneNumbers(Optional<? extends List<ScimPhoneNumber>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public ScimUser withPhotos(List<ScimPhoto> photos) {
        Utils.checkNotNull(photos, "photos");
        this.photos = Optional.ofNullable(photos);
        return this;
    }

    public ScimUser withPhotos(Optional<? extends List<ScimPhoto>> photos) {
        Utils.checkNotNull(photos, "photos");
        this.photos = photos;
        return this;
    }

    public ScimUser withPreferredLanguage(String preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = Optional.ofNullable(preferredLanguage);
        return this;
    }

    public ScimUser withPreferredLanguage(Optional<String> preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = preferredLanguage;
        return this;
    }

    public ScimUser withProfileUrl(String profileUrl) {
        Utils.checkNotNull(profileUrl, "profileUrl");
        this.profileUrl = Optional.ofNullable(profileUrl);
        return this;
    }

    public ScimUser withProfileUrl(Optional<String> profileUrl) {
        Utils.checkNotNull(profileUrl, "profileUrl");
        this.profileUrl = profileUrl;
        return this;
    }

    /**
     * Student, Faculty, ...
     */
    public ScimUser withRoles(List<ScimRole> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    /**
     * Student, Faculty, ...
     */
    public ScimUser withRoles(Optional<? extends List<ScimRole>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    public ScimUser withSchemas(List<PropertyScimUserSchemas> schemas) {
        Utils.checkNotNull(schemas, "schemas");
        this.schemas = Optional.ofNullable(schemas);
        return this;
    }

    public ScimUser withSchemas(Optional<? extends List<PropertyScimUserSchemas>> schemas) {
        Utils.checkNotNull(schemas, "schemas");
        this.schemas = schemas;
        return this;
    }

    public ScimUser withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    public ScimUser withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public ScimUser withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public ScimUser withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * an organization.
     */
    public ScimUser withUrnIetfParamsScimSchemasExtensionEnterprise20User(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User urnIetfParamsScimSchemasExtensionEnterprise20User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
        this.urnIetfParamsScimSchemasExtensionEnterprise20User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionEnterprise20User);
        return this;
    }

    /**
     * an organization.
     */
    public ScimUser withUrnIetfParamsScimSchemasExtensionEnterprise20User(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
        this.urnIetfParamsScimSchemasExtensionEnterprise20User = urnIetfParamsScimSchemasExtensionEnterprise20User;
        return this;
    }

    public ScimUser withUrnIetfParamsScimSchemasExtensionLatticeAttributes10User(PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User urnIetfParamsScimSchemasExtensionLatticeAttributes10User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
        this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionLatticeAttributes10User);
        return this;
    }

    public ScimUser withUrnIetfParamsScimSchemasExtensionLatticeAttributes10User(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
        this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = urnIetfParamsScimSchemasExtensionLatticeAttributes10User;
        return this;
    }

    public ScimUser withUrnIetfParamsScimSchemasExtensionPeakon20User(PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User urnIetfParamsScimSchemasExtensionPeakon20User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
        this.urnIetfParamsScimSchemasExtensionPeakon20User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionPeakon20User);
        return this;
    }

    public ScimUser withUrnIetfParamsScimSchemasExtensionPeakon20User(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
        this.urnIetfParamsScimSchemasExtensionPeakon20User = urnIetfParamsScimSchemasExtensionPeakon20User;
        return this;
    }

    public ScimUser withUserName(String userName) {
        Utils.checkNotNull(userName, "userName");
        this.userName = Optional.ofNullable(userName);
        return this;
    }

    public ScimUser withUserName(Optional<String> userName) {
        Utils.checkNotNull(userName, "userName");
        this.userName = userName;
        return this;
    }

    public ScimUser withUserType(String userType) {
        Utils.checkNotNull(userType, "userType");
        this.userType = Optional.ofNullable(userType);
        return this;
    }

    public ScimUser withUserType(Optional<String> userType) {
        Utils.checkNotNull(userType, "userType");
        this.userType = userType;
        return this;
    }

    public ScimUser withX509Certificates(List<ScimRole> x509Certificates) {
        Utils.checkNotNull(x509Certificates, "x509Certificates");
        this.x509Certificates = Optional.ofNullable(x509Certificates);
        return this;
    }

    public ScimUser withX509Certificates(Optional<? extends List<ScimRole>> x509Certificates) {
        Utils.checkNotNull(x509Certificates, "x509Certificates");
        this.x509Certificates = x509Certificates;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ScimUser other = (ScimUser) o;
        return 
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.entitlements, other.entitlements) &&
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.groups, other.groups) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.ims, other.ims) &&
            Objects.deepEquals(this.locale, other.locale) &&
            Objects.deepEquals(this.meta, other.meta) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.nickName, other.nickName) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.photos, other.photos) &&
            Objects.deepEquals(this.preferredLanguage, other.preferredLanguage) &&
            Objects.deepEquals(this.profileUrl, other.profileUrl) &&
            Objects.deepEquals(this.roles, other.roles) &&
            Objects.deepEquals(this.schemas, other.schemas) &&
            Objects.deepEquals(this.timezone, other.timezone) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.urnIetfParamsScimSchemasExtensionEnterprise20User, other.urnIetfParamsScimSchemasExtensionEnterprise20User) &&
            Objects.deepEquals(this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User, other.urnIetfParamsScimSchemasExtensionLatticeAttributes10User) &&
            Objects.deepEquals(this.urnIetfParamsScimSchemasExtensionPeakon20User, other.urnIetfParamsScimSchemasExtensionPeakon20User) &&
            Objects.deepEquals(this.userName, other.userName) &&
            Objects.deepEquals(this.userType, other.userType) &&
            Objects.deepEquals(this.x509Certificates, other.x509Certificates);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            active,
            addresses,
            displayName,
            emails,
            entitlements,
            externalId,
            groups,
            id,
            ims,
            locale,
            meta,
            name,
            nickName,
            password,
            phoneNumbers,
            photos,
            preferredLanguage,
            profileUrl,
            roles,
            schemas,
            timezone,
            title,
            urnIetfParamsScimSchemasExtensionEnterprise20User,
            urnIetfParamsScimSchemasExtensionLatticeAttributes10User,
            urnIetfParamsScimSchemasExtensionPeakon20User,
            userName,
            userType,
            x509Certificates);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ScimUser.class,
                "active", active,
                "addresses", addresses,
                "displayName", displayName,
                "emails", emails,
                "entitlements", entitlements,
                "externalId", externalId,
                "groups", groups,
                "id", id,
                "ims", ims,
                "locale", locale,
                "meta", meta,
                "name", name,
                "nickName", nickName,
                "password", password,
                "phoneNumbers", phoneNumbers,
                "photos", photos,
                "preferredLanguage", preferredLanguage,
                "profileUrl", profileUrl,
                "roles", roles,
                "schemas", schemas,
                "timezone", timezone,
                "title", title,
                "urnIetfParamsScimSchemasExtensionEnterprise20User", urnIetfParamsScimSchemasExtensionEnterprise20User,
                "urnIetfParamsScimSchemasExtensionLatticeAttributes10User", urnIetfParamsScimSchemasExtensionLatticeAttributes10User,
                "urnIetfParamsScimSchemasExtensionPeakon20User", urnIetfParamsScimSchemasExtensionPeakon20User,
                "userName", userName,
                "userType", userType,
                "x509Certificates", x509Certificates);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> active = Optional.empty();
 
        private Optional<? extends List<ScimAddress>> addresses = Optional.empty();
 
        private Optional<String> displayName = Optional.empty();
 
        private Optional<? extends List<ScimEmail>> emails = Optional.empty();
 
        private Optional<? extends List<ScimEntitlement>> entitlements = Optional.empty();
 
        private Optional<String> externalId = Optional.empty();
 
        private Optional<? extends List<ScimUserGroups>> groups = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends List<ScimIms>> ims = Optional.empty();
 
        private Optional<String> locale = Optional.empty();
 
        private Optional<? extends PropertyScimUserMeta> meta = Optional.empty();
 
        private Optional<? extends PropertyScimUserName> name = Optional.empty();
 
        private Optional<String> nickName = Optional.empty();
 
        private Optional<String> password = Optional.empty();
 
        private Optional<? extends List<ScimPhoneNumber>> phoneNumbers = Optional.empty();
 
        private Optional<? extends List<ScimPhoto>> photos = Optional.empty();
 
        private Optional<String> preferredLanguage = Optional.empty();
 
        private Optional<String> profileUrl = Optional.empty();
 
        private Optional<? extends List<ScimRole>> roles = Optional.empty();
 
        private Optional<? extends List<PropertyScimUserSchemas>> schemas = Optional.empty();
 
        private Optional<String> timezone = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User = Optional.empty();
 
        private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User = Optional.empty();
 
        private Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User = Optional.empty();
 
        private Optional<String> userName = Optional.empty();
 
        private Optional<String> userType = Optional.empty();
 
        private Optional<? extends List<ScimRole>> x509Certificates = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder addresses(List<ScimAddress> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<ScimAddress>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        public Builder emails(List<ScimEmail> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<ScimEmail>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder entitlements(List<ScimEntitlement> entitlements) {
            Utils.checkNotNull(entitlements, "entitlements");
            this.entitlements = Optional.ofNullable(entitlements);
            return this;
        }

        public Builder entitlements(Optional<? extends List<ScimEntitlement>> entitlements) {
            Utils.checkNotNull(entitlements, "entitlements");
            this.entitlements = entitlements;
            return this;
        }

        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        public Builder externalId(Optional<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        public Builder groups(List<ScimUserGroups> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = Optional.ofNullable(groups);
            return this;
        }

        public Builder groups(Optional<? extends List<ScimUserGroups>> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = groups;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder ims(List<ScimIms> ims) {
            Utils.checkNotNull(ims, "ims");
            this.ims = Optional.ofNullable(ims);
            return this;
        }

        public Builder ims(Optional<? extends List<ScimIms>> ims) {
            Utils.checkNotNull(ims, "ims");
            this.ims = ims;
            return this;
        }

        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        public Builder locale(Optional<String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        public Builder meta(PropertyScimUserMeta meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = Optional.ofNullable(meta);
            return this;
        }

        public Builder meta(Optional<? extends PropertyScimUserMeta> meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }

        public Builder name(PropertyScimUserName name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends PropertyScimUserName> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder nickName(String nickName) {
            Utils.checkNotNull(nickName, "nickName");
            this.nickName = Optional.ofNullable(nickName);
            return this;
        }

        public Builder nickName(Optional<String> nickName) {
            Utils.checkNotNull(nickName, "nickName");
            this.nickName = nickName;
            return this;
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        public Builder password(Optional<String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder phoneNumbers(List<ScimPhoneNumber> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<ScimPhoneNumber>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder photos(List<ScimPhoto> photos) {
            Utils.checkNotNull(photos, "photos");
            this.photos = Optional.ofNullable(photos);
            return this;
        }

        public Builder photos(Optional<? extends List<ScimPhoto>> photos) {
            Utils.checkNotNull(photos, "photos");
            this.photos = photos;
            return this;
        }

        public Builder preferredLanguage(String preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = Optional.ofNullable(preferredLanguage);
            return this;
        }

        public Builder preferredLanguage(Optional<String> preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = preferredLanguage;
            return this;
        }

        public Builder profileUrl(String profileUrl) {
            Utils.checkNotNull(profileUrl, "profileUrl");
            this.profileUrl = Optional.ofNullable(profileUrl);
            return this;
        }

        public Builder profileUrl(Optional<String> profileUrl) {
            Utils.checkNotNull(profileUrl, "profileUrl");
            this.profileUrl = profileUrl;
            return this;
        }

        /**
         * Student, Faculty, ...
         */
        public Builder roles(List<ScimRole> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        /**
         * Student, Faculty, ...
         */
        public Builder roles(Optional<? extends List<ScimRole>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }

        public Builder schemas(List<PropertyScimUserSchemas> schemas) {
            Utils.checkNotNull(schemas, "schemas");
            this.schemas = Optional.ofNullable(schemas);
            return this;
        }

        public Builder schemas(Optional<? extends List<PropertyScimUserSchemas>> schemas) {
            Utils.checkNotNull(schemas, "schemas");
            this.schemas = schemas;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * an organization.
         */
        public Builder urnIetfParamsScimSchemasExtensionEnterprise20User(PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User urnIetfParamsScimSchemasExtensionEnterprise20User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
            this.urnIetfParamsScimSchemasExtensionEnterprise20User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionEnterprise20User);
            return this;
        }

        /**
         * an organization.
         */
        public Builder urnIetfParamsScimSchemasExtensionEnterprise20User(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
            this.urnIetfParamsScimSchemasExtensionEnterprise20User = urnIetfParamsScimSchemasExtensionEnterprise20User;
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionLatticeAttributes10User(PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User urnIetfParamsScimSchemasExtensionLatticeAttributes10User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
            this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionLatticeAttributes10User);
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionLatticeAttributes10User(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
            this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = urnIetfParamsScimSchemasExtensionLatticeAttributes10User;
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionPeakon20User(PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User urnIetfParamsScimSchemasExtensionPeakon20User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
            this.urnIetfParamsScimSchemasExtensionPeakon20User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionPeakon20User);
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionPeakon20User(Optional<? extends PropertyScimUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
            this.urnIetfParamsScimSchemasExtensionPeakon20User = urnIetfParamsScimSchemasExtensionPeakon20User;
            return this;
        }

        public Builder userName(String userName) {
            Utils.checkNotNull(userName, "userName");
            this.userName = Optional.ofNullable(userName);
            return this;
        }

        public Builder userName(Optional<String> userName) {
            Utils.checkNotNull(userName, "userName");
            this.userName = userName;
            return this;
        }

        public Builder userType(String userType) {
            Utils.checkNotNull(userType, "userType");
            this.userType = Optional.ofNullable(userType);
            return this;
        }

        public Builder userType(Optional<String> userType) {
            Utils.checkNotNull(userType, "userType");
            this.userType = userType;
            return this;
        }

        public Builder x509Certificates(List<ScimRole> x509Certificates) {
            Utils.checkNotNull(x509Certificates, "x509Certificates");
            this.x509Certificates = Optional.ofNullable(x509Certificates);
            return this;
        }

        public Builder x509Certificates(Optional<? extends List<ScimRole>> x509Certificates) {
            Utils.checkNotNull(x509Certificates, "x509Certificates");
            this.x509Certificates = x509Certificates;
            return this;
        }
        
        public ScimUser build() {
            return new ScimUser(
                active,
                addresses,
                displayName,
                emails,
                entitlements,
                externalId,
                groups,
                id,
                ims,
                locale,
                meta,
                name,
                nickName,
                password,
                phoneNumbers,
                photos,
                preferredLanguage,
                profileUrl,
                roles,
                schemas,
                timezone,
                title,
                urnIetfParamsScimSchemasExtensionEnterprise20User,
                urnIetfParamsScimSchemasExtensionLatticeAttributes10User,
                urnIetfParamsScimSchemasExtensionPeakon20User,
                userName,
                userType,
                x509Certificates);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.unifiedapi.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class GenaiContent {

    @JsonProperty("content")
    private String content;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("role")
    private Optional<? extends Role> role;

    @JsonCreator
    public GenaiContent(
            @JsonProperty("content") String content,
            @JsonProperty("role") Optional<? extends Role> role) {
        Utils.checkNotNull(content, "content");
        Utils.checkNotNull(role, "role");
        this.content = content;
        this.role = role;
    }
    
    public GenaiContent(
            String content) {
        this(content, Optional.empty());
    }

    @JsonIgnore
    public String content() {
        return content;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Role> role() {
        return (Optional<Role>) role;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GenaiContent withContent(String content) {
        Utils.checkNotNull(content, "content");
        this.content = content;
        return this;
    }

    public GenaiContent withRole(Role role) {
        Utils.checkNotNull(role, "role");
        this.role = Optional.ofNullable(role);
        return this;
    }

    public GenaiContent withRole(Optional<? extends Role> role) {
        Utils.checkNotNull(role, "role");
        this.role = role;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenaiContent other = (GenaiContent) o;
        return 
            Objects.deepEquals(this.content, other.content) &&
            Objects.deepEquals(this.role, other.role);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            content,
            role);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GenaiContent.class,
                "content", content,
                "role", role);
    }
    
    public final static class Builder {
 
        private String content;
 
        private Optional<? extends Role> role = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder content(String content) {
            Utils.checkNotNull(content, "content");
            this.content = content;
            return this;
        }

        public Builder role(Role role) {
            Utils.checkNotNull(role, "role");
            this.role = Optional.ofNullable(role);
            return this;
        }

        public Builder role(Optional<? extends Role> role) {
            Utils.checkNotNull(role, "role");
            this.role = role;
            return this;
        }
        
        public GenaiContent build() {
            return new GenaiContent(
                content,
                role);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class IntegrationSupport {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("from_webhook")
    private Optional<? extends FromWebhook> fromWebhook;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("inbound_fields")
    private Optional<? extends Map<String, Object>> inboundFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_account_id")
    private Optional<? extends ListAccountId> listAccountId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_application_id")
    private Optional<? extends ListApplicationId> listApplicationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_candidate_id")
    private Optional<? extends ListCandidateId> listCandidateId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_channel_id")
    private Optional<? extends ListChannelId> listChannelId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_class_id")
    private Optional<? extends ListClassId> listClassId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_collection_id")
    private Optional<? extends ListCollectionId> listCollectionId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_company_id")
    private Optional<? extends ListCompanyId> listCompanyId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_contact_id")
    private Optional<? extends ListContactId> listContactId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_course_id")
    private Optional<? extends ListCourseId> listCourseId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_customer_id")
    private Optional<? extends ListCustomerId> listCustomerId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_deal_id")
    private Optional<? extends ListDealId> listDealId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_instructor_id")
    private Optional<? extends ListInstructorId> listInstructorId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_interview_id")
    private Optional<? extends ListInterviewId> listInterviewId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_invoice_id")
    private Optional<? extends ListInvoiceId> listInvoiceId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_item_id")
    private Optional<? extends ListItemId> listItemId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_item_variant_id")
    private Optional<? extends ListItemVariantId> listItemVariantId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_job_id")
    private Optional<? extends ListJobId> listJobId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_limit")
    private Optional<? extends ListLimit> listLimit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_link_id")
    private Optional<? extends ListLinkId> listLinkId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_list_id")
    private Optional<? extends ListListId> listListId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_location_id")
    private Optional<? extends ListLocationId> listLocationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_offset")
    private Optional<? extends ListOffset> listOffset;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_order")
    private Optional<? extends ListOrder> listOrder;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_org_id")
    private Optional<? extends ListOrgId> listOrgId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_parent_id")
    private Optional<? extends ListParentId> listParentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_project_id")
    private Optional<? extends ListProjectId> listProjectId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_query")
    private Optional<? extends ListQuery> listQuery;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_raw_fields")
    private Optional<? extends ListRawFields> listRawFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_repo_id")
    private Optional<? extends ListRepoId> listRepoId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_root_id")
    private Optional<? extends ListRootId> listRootId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_sort_by_created_at")
    private Optional<? extends ListSortByCreatedAt> listSortByCreatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_sort_by_name")
    private Optional<? extends ListSortByName> listSortByName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_sort_by_updated_at")
    private Optional<? extends ListSortByUpdatedAt> listSortByUpdatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_space_id")
    private Optional<? extends ListSpaceId> listSpaceId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_student_id")
    private Optional<? extends ListStudentId> listStudentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_task_id")
    private Optional<? extends ListTaskId> listTaskId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_ticket_id")
    private Optional<? extends ListTicketId> listTicketId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_type")
    private Optional<? extends ListType> listType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_updated_gte")
    private Optional<? extends ListUpdatedGte> listUpdatedGte;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("list_user_id")
    private Optional<? extends ListUserId> listUserId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("methods")
    private Optional<? extends Map<String, Boolean>> methods;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("native_webhook_parent_id")
    private Optional<? extends NativeWebhookParentId> nativeWebhookParentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("native_webhook_project_id")
    private Optional<? extends NativeWebhookProjectId> nativeWebhookProjectId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("outbound_fields")
    private Optional<? extends Map<String, Object>> outboundFields;

    /**
     * objects that we map from in the integration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw_objects")
    private Optional<? extends List<String>> rawObjects;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_domain")
    private Optional<? extends SearchDomain> searchDomain;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_email")
    private Optional<? extends SearchEmail> searchEmail;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_linkedinurl")
    private Optional<? extends SearchLinkedinurl> searchLinkedinurl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_name")
    private Optional<? extends SearchName> searchName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("search_twitter")
    private Optional<? extends SearchTwitter> searchTwitter;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_channel_id")
    private Optional<? extends VirtualWebhookChannelId> virtualWebhookChannelId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_company_id")
    private Optional<? extends VirtualWebhookCompanyId> virtualWebhookCompanyId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_contact_id")
    private Optional<? extends VirtualWebhookContactId> virtualWebhookContactId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_deal_id")
    private Optional<? extends VirtualWebhookDealId> virtualWebhookDealId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_job_id")
    private Optional<? extends VirtualWebhookJobId> virtualWebhookJobId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_limit")
    private Optional<? extends VirtualWebhookLimit> virtualWebhookLimit;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_parent_id")
    private Optional<? extends VirtualWebhookParentId> virtualWebhookParentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_ticket_id")
    private Optional<? extends VirtualWebhookTicketId> virtualWebhookTicketId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_type")
    private Optional<? extends VirtualWebhookType> virtualWebhookType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_updated_gte")
    private Optional<? extends VirtualWebhookUpdatedGte> virtualWebhookUpdatedGte;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("virtual_webhook_user_id")
    private Optional<? extends VirtualWebhookUserId> virtualWebhookUserId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("webhook_events")
    private Optional<? extends PropertyIntegrationSupportWebhookEvents> webhookEvents;

    @JsonCreator
    public IntegrationSupport(
            @JsonProperty("from_webhook") Optional<? extends FromWebhook> fromWebhook,
            @JsonProperty("inbound_fields") Optional<? extends Map<String, Object>> inboundFields,
            @JsonProperty("list_account_id") Optional<? extends ListAccountId> listAccountId,
            @JsonProperty("list_application_id") Optional<? extends ListApplicationId> listApplicationId,
            @JsonProperty("list_candidate_id") Optional<? extends ListCandidateId> listCandidateId,
            @JsonProperty("list_channel_id") Optional<? extends ListChannelId> listChannelId,
            @JsonProperty("list_class_id") Optional<? extends ListClassId> listClassId,
            @JsonProperty("list_collection_id") Optional<? extends ListCollectionId> listCollectionId,
            @JsonProperty("list_company_id") Optional<? extends ListCompanyId> listCompanyId,
            @JsonProperty("list_contact_id") Optional<? extends ListContactId> listContactId,
            @JsonProperty("list_course_id") Optional<? extends ListCourseId> listCourseId,
            @JsonProperty("list_customer_id") Optional<? extends ListCustomerId> listCustomerId,
            @JsonProperty("list_deal_id") Optional<? extends ListDealId> listDealId,
            @JsonProperty("list_instructor_id") Optional<? extends ListInstructorId> listInstructorId,
            @JsonProperty("list_interview_id") Optional<? extends ListInterviewId> listInterviewId,
            @JsonProperty("list_invoice_id") Optional<? extends ListInvoiceId> listInvoiceId,
            @JsonProperty("list_item_id") Optional<? extends ListItemId> listItemId,
            @JsonProperty("list_item_variant_id") Optional<? extends ListItemVariantId> listItemVariantId,
            @JsonProperty("list_job_id") Optional<? extends ListJobId> listJobId,
            @JsonProperty("list_limit") Optional<? extends ListLimit> listLimit,
            @JsonProperty("list_link_id") Optional<? extends ListLinkId> listLinkId,
            @JsonProperty("list_list_id") Optional<? extends ListListId> listListId,
            @JsonProperty("list_location_id") Optional<? extends ListLocationId> listLocationId,
            @JsonProperty("list_offset") Optional<? extends ListOffset> listOffset,
            @JsonProperty("list_order") Optional<? extends ListOrder> listOrder,
            @JsonProperty("list_org_id") Optional<? extends ListOrgId> listOrgId,
            @JsonProperty("list_parent_id") Optional<? extends ListParentId> listParentId,
            @JsonProperty("list_project_id") Optional<? extends ListProjectId> listProjectId,
            @JsonProperty("list_query") Optional<? extends ListQuery> listQuery,
            @JsonProperty("list_raw_fields") Optional<? extends ListRawFields> listRawFields,
            @JsonProperty("list_repo_id") Optional<? extends ListRepoId> listRepoId,
            @JsonProperty("list_root_id") Optional<? extends ListRootId> listRootId,
            @JsonProperty("list_sort_by_created_at") Optional<? extends ListSortByCreatedAt> listSortByCreatedAt,
            @JsonProperty("list_sort_by_name") Optional<? extends ListSortByName> listSortByName,
            @JsonProperty("list_sort_by_updated_at") Optional<? extends ListSortByUpdatedAt> listSortByUpdatedAt,
            @JsonProperty("list_space_id") Optional<? extends ListSpaceId> listSpaceId,
            @JsonProperty("list_student_id") Optional<? extends ListStudentId> listStudentId,
            @JsonProperty("list_task_id") Optional<? extends ListTaskId> listTaskId,
            @JsonProperty("list_ticket_id") Optional<? extends ListTicketId> listTicketId,
            @JsonProperty("list_type") Optional<? extends ListType> listType,
            @JsonProperty("list_updated_gte") Optional<? extends ListUpdatedGte> listUpdatedGte,
            @JsonProperty("list_user_id") Optional<? extends ListUserId> listUserId,
            @JsonProperty("methods") Optional<? extends Map<String, Boolean>> methods,
            @JsonProperty("native_webhook_parent_id") Optional<? extends NativeWebhookParentId> nativeWebhookParentId,
            @JsonProperty("native_webhook_project_id") Optional<? extends NativeWebhookProjectId> nativeWebhookProjectId,
            @JsonProperty("outbound_fields") Optional<? extends Map<String, Object>> outboundFields,
            @JsonProperty("raw_objects") Optional<? extends List<String>> rawObjects,
            @JsonProperty("search_domain") Optional<? extends SearchDomain> searchDomain,
            @JsonProperty("search_email") Optional<? extends SearchEmail> searchEmail,
            @JsonProperty("search_linkedinurl") Optional<? extends SearchLinkedinurl> searchLinkedinurl,
            @JsonProperty("search_name") Optional<? extends SearchName> searchName,
            @JsonProperty("search_twitter") Optional<? extends SearchTwitter> searchTwitter,
            @JsonProperty("virtual_webhook_channel_id") Optional<? extends VirtualWebhookChannelId> virtualWebhookChannelId,
            @JsonProperty("virtual_webhook_company_id") Optional<? extends VirtualWebhookCompanyId> virtualWebhookCompanyId,
            @JsonProperty("virtual_webhook_contact_id") Optional<? extends VirtualWebhookContactId> virtualWebhookContactId,
            @JsonProperty("virtual_webhook_deal_id") Optional<? extends VirtualWebhookDealId> virtualWebhookDealId,
            @JsonProperty("virtual_webhook_job_id") Optional<? extends VirtualWebhookJobId> virtualWebhookJobId,
            @JsonProperty("virtual_webhook_limit") Optional<? extends VirtualWebhookLimit> virtualWebhookLimit,
            @JsonProperty("virtual_webhook_parent_id") Optional<? extends VirtualWebhookParentId> virtualWebhookParentId,
            @JsonProperty("virtual_webhook_ticket_id") Optional<? extends VirtualWebhookTicketId> virtualWebhookTicketId,
            @JsonProperty("virtual_webhook_type") Optional<? extends VirtualWebhookType> virtualWebhookType,
            @JsonProperty("virtual_webhook_updated_gte") Optional<? extends VirtualWebhookUpdatedGte> virtualWebhookUpdatedGte,
            @JsonProperty("virtual_webhook_user_id") Optional<? extends VirtualWebhookUserId> virtualWebhookUserId,
            @JsonProperty("webhook_events") Optional<? extends PropertyIntegrationSupportWebhookEvents> webhookEvents) {
        Utils.checkNotNull(fromWebhook, "fromWebhook");
        Utils.checkNotNull(inboundFields, "inboundFields");
        Utils.checkNotNull(listAccountId, "listAccountId");
        Utils.checkNotNull(listApplicationId, "listApplicationId");
        Utils.checkNotNull(listCandidateId, "listCandidateId");
        Utils.checkNotNull(listChannelId, "listChannelId");
        Utils.checkNotNull(listClassId, "listClassId");
        Utils.checkNotNull(listCollectionId, "listCollectionId");
        Utils.checkNotNull(listCompanyId, "listCompanyId");
        Utils.checkNotNull(listContactId, "listContactId");
        Utils.checkNotNull(listCourseId, "listCourseId");
        Utils.checkNotNull(listCustomerId, "listCustomerId");
        Utils.checkNotNull(listDealId, "listDealId");
        Utils.checkNotNull(listInstructorId, "listInstructorId");
        Utils.checkNotNull(listInterviewId, "listInterviewId");
        Utils.checkNotNull(listInvoiceId, "listInvoiceId");
        Utils.checkNotNull(listItemId, "listItemId");
        Utils.checkNotNull(listItemVariantId, "listItemVariantId");
        Utils.checkNotNull(listJobId, "listJobId");
        Utils.checkNotNull(listLimit, "listLimit");
        Utils.checkNotNull(listLinkId, "listLinkId");
        Utils.checkNotNull(listListId, "listListId");
        Utils.checkNotNull(listLocationId, "listLocationId");
        Utils.checkNotNull(listOffset, "listOffset");
        Utils.checkNotNull(listOrder, "listOrder");
        Utils.checkNotNull(listOrgId, "listOrgId");
        Utils.checkNotNull(listParentId, "listParentId");
        Utils.checkNotNull(listProjectId, "listProjectId");
        Utils.checkNotNull(listQuery, "listQuery");
        Utils.checkNotNull(listRawFields, "listRawFields");
        Utils.checkNotNull(listRepoId, "listRepoId");
        Utils.checkNotNull(listRootId, "listRootId");
        Utils.checkNotNull(listSortByCreatedAt, "listSortByCreatedAt");
        Utils.checkNotNull(listSortByName, "listSortByName");
        Utils.checkNotNull(listSortByUpdatedAt, "listSortByUpdatedAt");
        Utils.checkNotNull(listSpaceId, "listSpaceId");
        Utils.checkNotNull(listStudentId, "listStudentId");
        Utils.checkNotNull(listTaskId, "listTaskId");
        Utils.checkNotNull(listTicketId, "listTicketId");
        Utils.checkNotNull(listType, "listType");
        Utils.checkNotNull(listUpdatedGte, "listUpdatedGte");
        Utils.checkNotNull(listUserId, "listUserId");
        Utils.checkNotNull(methods, "methods");
        Utils.checkNotNull(nativeWebhookParentId, "nativeWebhookParentId");
        Utils.checkNotNull(nativeWebhookProjectId, "nativeWebhookProjectId");
        Utils.checkNotNull(outboundFields, "outboundFields");
        Utils.checkNotNull(rawObjects, "rawObjects");
        Utils.checkNotNull(searchDomain, "searchDomain");
        Utils.checkNotNull(searchEmail, "searchEmail");
        Utils.checkNotNull(searchLinkedinurl, "searchLinkedinurl");
        Utils.checkNotNull(searchName, "searchName");
        Utils.checkNotNull(searchTwitter, "searchTwitter");
        Utils.checkNotNull(virtualWebhookChannelId, "virtualWebhookChannelId");
        Utils.checkNotNull(virtualWebhookCompanyId, "virtualWebhookCompanyId");
        Utils.checkNotNull(virtualWebhookContactId, "virtualWebhookContactId");
        Utils.checkNotNull(virtualWebhookDealId, "virtualWebhookDealId");
        Utils.checkNotNull(virtualWebhookJobId, "virtualWebhookJobId");
        Utils.checkNotNull(virtualWebhookLimit, "virtualWebhookLimit");
        Utils.checkNotNull(virtualWebhookParentId, "virtualWebhookParentId");
        Utils.checkNotNull(virtualWebhookTicketId, "virtualWebhookTicketId");
        Utils.checkNotNull(virtualWebhookType, "virtualWebhookType");
        Utils.checkNotNull(virtualWebhookUpdatedGte, "virtualWebhookUpdatedGte");
        Utils.checkNotNull(virtualWebhookUserId, "virtualWebhookUserId");
        Utils.checkNotNull(webhookEvents, "webhookEvents");
        this.fromWebhook = fromWebhook;
        this.inboundFields = inboundFields;
        this.listAccountId = listAccountId;
        this.listApplicationId = listApplicationId;
        this.listCandidateId = listCandidateId;
        this.listChannelId = listChannelId;
        this.listClassId = listClassId;
        this.listCollectionId = listCollectionId;
        this.listCompanyId = listCompanyId;
        this.listContactId = listContactId;
        this.listCourseId = listCourseId;
        this.listCustomerId = listCustomerId;
        this.listDealId = listDealId;
        this.listInstructorId = listInstructorId;
        this.listInterviewId = listInterviewId;
        this.listInvoiceId = listInvoiceId;
        this.listItemId = listItemId;
        this.listItemVariantId = listItemVariantId;
        this.listJobId = listJobId;
        this.listLimit = listLimit;
        this.listLinkId = listLinkId;
        this.listListId = listListId;
        this.listLocationId = listLocationId;
        this.listOffset = listOffset;
        this.listOrder = listOrder;
        this.listOrgId = listOrgId;
        this.listParentId = listParentId;
        this.listProjectId = listProjectId;
        this.listQuery = listQuery;
        this.listRawFields = listRawFields;
        this.listRepoId = listRepoId;
        this.listRootId = listRootId;
        this.listSortByCreatedAt = listSortByCreatedAt;
        this.listSortByName = listSortByName;
        this.listSortByUpdatedAt = listSortByUpdatedAt;
        this.listSpaceId = listSpaceId;
        this.listStudentId = listStudentId;
        this.listTaskId = listTaskId;
        this.listTicketId = listTicketId;
        this.listType = listType;
        this.listUpdatedGte = listUpdatedGte;
        this.listUserId = listUserId;
        this.methods = methods;
        this.nativeWebhookParentId = nativeWebhookParentId;
        this.nativeWebhookProjectId = nativeWebhookProjectId;
        this.outboundFields = outboundFields;
        this.rawObjects = rawObjects;
        this.searchDomain = searchDomain;
        this.searchEmail = searchEmail;
        this.searchLinkedinurl = searchLinkedinurl;
        this.searchName = searchName;
        this.searchTwitter = searchTwitter;
        this.virtualWebhookChannelId = virtualWebhookChannelId;
        this.virtualWebhookCompanyId = virtualWebhookCompanyId;
        this.virtualWebhookContactId = virtualWebhookContactId;
        this.virtualWebhookDealId = virtualWebhookDealId;
        this.virtualWebhookJobId = virtualWebhookJobId;
        this.virtualWebhookLimit = virtualWebhookLimit;
        this.virtualWebhookParentId = virtualWebhookParentId;
        this.virtualWebhookTicketId = virtualWebhookTicketId;
        this.virtualWebhookType = virtualWebhookType;
        this.virtualWebhookUpdatedGte = virtualWebhookUpdatedGte;
        this.virtualWebhookUserId = virtualWebhookUserId;
        this.webhookEvents = webhookEvents;
    }
    
    public IntegrationSupport() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FromWebhook> fromWebhook() {
        return (Optional<FromWebhook>) fromWebhook;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> inboundFields() {
        return (Optional<Map<String, Object>>) inboundFields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListAccountId> listAccountId() {
        return (Optional<ListAccountId>) listAccountId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListApplicationId> listApplicationId() {
        return (Optional<ListApplicationId>) listApplicationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListCandidateId> listCandidateId() {
        return (Optional<ListCandidateId>) listCandidateId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListChannelId> listChannelId() {
        return (Optional<ListChannelId>) listChannelId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListClassId> listClassId() {
        return (Optional<ListClassId>) listClassId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListCollectionId> listCollectionId() {
        return (Optional<ListCollectionId>) listCollectionId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListCompanyId> listCompanyId() {
        return (Optional<ListCompanyId>) listCompanyId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListContactId> listContactId() {
        return (Optional<ListContactId>) listContactId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListCourseId> listCourseId() {
        return (Optional<ListCourseId>) listCourseId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListCustomerId> listCustomerId() {
        return (Optional<ListCustomerId>) listCustomerId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListDealId> listDealId() {
        return (Optional<ListDealId>) listDealId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListInstructorId> listInstructorId() {
        return (Optional<ListInstructorId>) listInstructorId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListInterviewId> listInterviewId() {
        return (Optional<ListInterviewId>) listInterviewId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListInvoiceId> listInvoiceId() {
        return (Optional<ListInvoiceId>) listInvoiceId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListItemId> listItemId() {
        return (Optional<ListItemId>) listItemId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListItemVariantId> listItemVariantId() {
        return (Optional<ListItemVariantId>) listItemVariantId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListJobId> listJobId() {
        return (Optional<ListJobId>) listJobId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListLimit> listLimit() {
        return (Optional<ListLimit>) listLimit;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListLinkId> listLinkId() {
        return (Optional<ListLinkId>) listLinkId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListListId> listListId() {
        return (Optional<ListListId>) listListId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListLocationId> listLocationId() {
        return (Optional<ListLocationId>) listLocationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOffset> listOffset() {
        return (Optional<ListOffset>) listOffset;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrder> listOrder() {
        return (Optional<ListOrder>) listOrder;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListOrgId> listOrgId() {
        return (Optional<ListOrgId>) listOrgId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListParentId> listParentId() {
        return (Optional<ListParentId>) listParentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListProjectId> listProjectId() {
        return (Optional<ListProjectId>) listProjectId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListQuery> listQuery() {
        return (Optional<ListQuery>) listQuery;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListRawFields> listRawFields() {
        return (Optional<ListRawFields>) listRawFields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListRepoId> listRepoId() {
        return (Optional<ListRepoId>) listRepoId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListRootId> listRootId() {
        return (Optional<ListRootId>) listRootId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSortByCreatedAt> listSortByCreatedAt() {
        return (Optional<ListSortByCreatedAt>) listSortByCreatedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSortByName> listSortByName() {
        return (Optional<ListSortByName>) listSortByName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSortByUpdatedAt> listSortByUpdatedAt() {
        return (Optional<ListSortByUpdatedAt>) listSortByUpdatedAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListSpaceId> listSpaceId() {
        return (Optional<ListSpaceId>) listSpaceId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListStudentId> listStudentId() {
        return (Optional<ListStudentId>) listStudentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListTaskId> listTaskId() {
        return (Optional<ListTaskId>) listTaskId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListTicketId> listTicketId() {
        return (Optional<ListTicketId>) listTicketId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListType> listType() {
        return (Optional<ListType>) listType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListUpdatedGte> listUpdatedGte() {
        return (Optional<ListUpdatedGte>) listUpdatedGte;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ListUserId> listUserId() {
        return (Optional<ListUserId>) listUserId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Boolean>> methods() {
        return (Optional<Map<String, Boolean>>) methods;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NativeWebhookParentId> nativeWebhookParentId() {
        return (Optional<NativeWebhookParentId>) nativeWebhookParentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<NativeWebhookProjectId> nativeWebhookProjectId() {
        return (Optional<NativeWebhookProjectId>) nativeWebhookProjectId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> outboundFields() {
        return (Optional<Map<String, Object>>) outboundFields;
    }

    /**
     * objects that we map from in the integration
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> rawObjects() {
        return (Optional<List<String>>) rawObjects;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchDomain> searchDomain() {
        return (Optional<SearchDomain>) searchDomain;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchEmail> searchEmail() {
        return (Optional<SearchEmail>) searchEmail;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchLinkedinurl> searchLinkedinurl() {
        return (Optional<SearchLinkedinurl>) searchLinkedinurl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchName> searchName() {
        return (Optional<SearchName>) searchName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SearchTwitter> searchTwitter() {
        return (Optional<SearchTwitter>) searchTwitter;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookChannelId> virtualWebhookChannelId() {
        return (Optional<VirtualWebhookChannelId>) virtualWebhookChannelId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookCompanyId> virtualWebhookCompanyId() {
        return (Optional<VirtualWebhookCompanyId>) virtualWebhookCompanyId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookContactId> virtualWebhookContactId() {
        return (Optional<VirtualWebhookContactId>) virtualWebhookContactId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookDealId> virtualWebhookDealId() {
        return (Optional<VirtualWebhookDealId>) virtualWebhookDealId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookJobId> virtualWebhookJobId() {
        return (Optional<VirtualWebhookJobId>) virtualWebhookJobId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookLimit> virtualWebhookLimit() {
        return (Optional<VirtualWebhookLimit>) virtualWebhookLimit;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookParentId> virtualWebhookParentId() {
        return (Optional<VirtualWebhookParentId>) virtualWebhookParentId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookTicketId> virtualWebhookTicketId() {
        return (Optional<VirtualWebhookTicketId>) virtualWebhookTicketId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookType> virtualWebhookType() {
        return (Optional<VirtualWebhookType>) virtualWebhookType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookUpdatedGte> virtualWebhookUpdatedGte() {
        return (Optional<VirtualWebhookUpdatedGte>) virtualWebhookUpdatedGte;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VirtualWebhookUserId> virtualWebhookUserId() {
        return (Optional<VirtualWebhookUserId>) virtualWebhookUserId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyIntegrationSupportWebhookEvents> webhookEvents() {
        return (Optional<PropertyIntegrationSupportWebhookEvents>) webhookEvents;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public IntegrationSupport withFromWebhook(FromWebhook fromWebhook) {
        Utils.checkNotNull(fromWebhook, "fromWebhook");
        this.fromWebhook = Optional.ofNullable(fromWebhook);
        return this;
    }

    public IntegrationSupport withFromWebhook(Optional<? extends FromWebhook> fromWebhook) {
        Utils.checkNotNull(fromWebhook, "fromWebhook");
        this.fromWebhook = fromWebhook;
        return this;
    }

    public IntegrationSupport withInboundFields(Map<String, Object> inboundFields) {
        Utils.checkNotNull(inboundFields, "inboundFields");
        this.inboundFields = Optional.ofNullable(inboundFields);
        return this;
    }

    public IntegrationSupport withInboundFields(Optional<? extends Map<String, Object>> inboundFields) {
        Utils.checkNotNull(inboundFields, "inboundFields");
        this.inboundFields = inboundFields;
        return this;
    }

    public IntegrationSupport withListAccountId(ListAccountId listAccountId) {
        Utils.checkNotNull(listAccountId, "listAccountId");
        this.listAccountId = Optional.ofNullable(listAccountId);
        return this;
    }

    public IntegrationSupport withListAccountId(Optional<? extends ListAccountId> listAccountId) {
        Utils.checkNotNull(listAccountId, "listAccountId");
        this.listAccountId = listAccountId;
        return this;
    }

    public IntegrationSupport withListApplicationId(ListApplicationId listApplicationId) {
        Utils.checkNotNull(listApplicationId, "listApplicationId");
        this.listApplicationId = Optional.ofNullable(listApplicationId);
        return this;
    }

    public IntegrationSupport withListApplicationId(Optional<? extends ListApplicationId> listApplicationId) {
        Utils.checkNotNull(listApplicationId, "listApplicationId");
        this.listApplicationId = listApplicationId;
        return this;
    }

    public IntegrationSupport withListCandidateId(ListCandidateId listCandidateId) {
        Utils.checkNotNull(listCandidateId, "listCandidateId");
        this.listCandidateId = Optional.ofNullable(listCandidateId);
        return this;
    }

    public IntegrationSupport withListCandidateId(Optional<? extends ListCandidateId> listCandidateId) {
        Utils.checkNotNull(listCandidateId, "listCandidateId");
        this.listCandidateId = listCandidateId;
        return this;
    }

    public IntegrationSupport withListChannelId(ListChannelId listChannelId) {
        Utils.checkNotNull(listChannelId, "listChannelId");
        this.listChannelId = Optional.ofNullable(listChannelId);
        return this;
    }

    public IntegrationSupport withListChannelId(Optional<? extends ListChannelId> listChannelId) {
        Utils.checkNotNull(listChannelId, "listChannelId");
        this.listChannelId = listChannelId;
        return this;
    }

    public IntegrationSupport withListClassId(ListClassId listClassId) {
        Utils.checkNotNull(listClassId, "listClassId");
        this.listClassId = Optional.ofNullable(listClassId);
        return this;
    }

    public IntegrationSupport withListClassId(Optional<? extends ListClassId> listClassId) {
        Utils.checkNotNull(listClassId, "listClassId");
        this.listClassId = listClassId;
        return this;
    }

    public IntegrationSupport withListCollectionId(ListCollectionId listCollectionId) {
        Utils.checkNotNull(listCollectionId, "listCollectionId");
        this.listCollectionId = Optional.ofNullable(listCollectionId);
        return this;
    }

    public IntegrationSupport withListCollectionId(Optional<? extends ListCollectionId> listCollectionId) {
        Utils.checkNotNull(listCollectionId, "listCollectionId");
        this.listCollectionId = listCollectionId;
        return this;
    }

    public IntegrationSupport withListCompanyId(ListCompanyId listCompanyId) {
        Utils.checkNotNull(listCompanyId, "listCompanyId");
        this.listCompanyId = Optional.ofNullable(listCompanyId);
        return this;
    }

    public IntegrationSupport withListCompanyId(Optional<? extends ListCompanyId> listCompanyId) {
        Utils.checkNotNull(listCompanyId, "listCompanyId");
        this.listCompanyId = listCompanyId;
        return this;
    }

    public IntegrationSupport withListContactId(ListContactId listContactId) {
        Utils.checkNotNull(listContactId, "listContactId");
        this.listContactId = Optional.ofNullable(listContactId);
        return this;
    }

    public IntegrationSupport withListContactId(Optional<? extends ListContactId> listContactId) {
        Utils.checkNotNull(listContactId, "listContactId");
        this.listContactId = listContactId;
        return this;
    }

    public IntegrationSupport withListCourseId(ListCourseId listCourseId) {
        Utils.checkNotNull(listCourseId, "listCourseId");
        this.listCourseId = Optional.ofNullable(listCourseId);
        return this;
    }

    public IntegrationSupport withListCourseId(Optional<? extends ListCourseId> listCourseId) {
        Utils.checkNotNull(listCourseId, "listCourseId");
        this.listCourseId = listCourseId;
        return this;
    }

    public IntegrationSupport withListCustomerId(ListCustomerId listCustomerId) {
        Utils.checkNotNull(listCustomerId, "listCustomerId");
        this.listCustomerId = Optional.ofNullable(listCustomerId);
        return this;
    }

    public IntegrationSupport withListCustomerId(Optional<? extends ListCustomerId> listCustomerId) {
        Utils.checkNotNull(listCustomerId, "listCustomerId");
        this.listCustomerId = listCustomerId;
        return this;
    }

    public IntegrationSupport withListDealId(ListDealId listDealId) {
        Utils.checkNotNull(listDealId, "listDealId");
        this.listDealId = Optional.ofNullable(listDealId);
        return this;
    }

    public IntegrationSupport withListDealId(Optional<? extends ListDealId> listDealId) {
        Utils.checkNotNull(listDealId, "listDealId");
        this.listDealId = listDealId;
        return this;
    }

    public IntegrationSupport withListInstructorId(ListInstructorId listInstructorId) {
        Utils.checkNotNull(listInstructorId, "listInstructorId");
        this.listInstructorId = Optional.ofNullable(listInstructorId);
        return this;
    }

    public IntegrationSupport withListInstructorId(Optional<? extends ListInstructorId> listInstructorId) {
        Utils.checkNotNull(listInstructorId, "listInstructorId");
        this.listInstructorId = listInstructorId;
        return this;
    }

    public IntegrationSupport withListInterviewId(ListInterviewId listInterviewId) {
        Utils.checkNotNull(listInterviewId, "listInterviewId");
        this.listInterviewId = Optional.ofNullable(listInterviewId);
        return this;
    }

    public IntegrationSupport withListInterviewId(Optional<? extends ListInterviewId> listInterviewId) {
        Utils.checkNotNull(listInterviewId, "listInterviewId");
        this.listInterviewId = listInterviewId;
        return this;
    }

    public IntegrationSupport withListInvoiceId(ListInvoiceId listInvoiceId) {
        Utils.checkNotNull(listInvoiceId, "listInvoiceId");
        this.listInvoiceId = Optional.ofNullable(listInvoiceId);
        return this;
    }

    public IntegrationSupport withListInvoiceId(Optional<? extends ListInvoiceId> listInvoiceId) {
        Utils.checkNotNull(listInvoiceId, "listInvoiceId");
        this.listInvoiceId = listInvoiceId;
        return this;
    }

    public IntegrationSupport withListItemId(ListItemId listItemId) {
        Utils.checkNotNull(listItemId, "listItemId");
        this.listItemId = Optional.ofNullable(listItemId);
        return this;
    }

    public IntegrationSupport withListItemId(Optional<? extends ListItemId> listItemId) {
        Utils.checkNotNull(listItemId, "listItemId");
        this.listItemId = listItemId;
        return this;
    }

    public IntegrationSupport withListItemVariantId(ListItemVariantId listItemVariantId) {
        Utils.checkNotNull(listItemVariantId, "listItemVariantId");
        this.listItemVariantId = Optional.ofNullable(listItemVariantId);
        return this;
    }

    public IntegrationSupport withListItemVariantId(Optional<? extends ListItemVariantId> listItemVariantId) {
        Utils.checkNotNull(listItemVariantId, "listItemVariantId");
        this.listItemVariantId = listItemVariantId;
        return this;
    }

    public IntegrationSupport withListJobId(ListJobId listJobId) {
        Utils.checkNotNull(listJobId, "listJobId");
        this.listJobId = Optional.ofNullable(listJobId);
        return this;
    }

    public IntegrationSupport withListJobId(Optional<? extends ListJobId> listJobId) {
        Utils.checkNotNull(listJobId, "listJobId");
        this.listJobId = listJobId;
        return this;
    }

    public IntegrationSupport withListLimit(ListLimit listLimit) {
        Utils.checkNotNull(listLimit, "listLimit");
        this.listLimit = Optional.ofNullable(listLimit);
        return this;
    }

    public IntegrationSupport withListLimit(Optional<? extends ListLimit> listLimit) {
        Utils.checkNotNull(listLimit, "listLimit");
        this.listLimit = listLimit;
        return this;
    }

    public IntegrationSupport withListLinkId(ListLinkId listLinkId) {
        Utils.checkNotNull(listLinkId, "listLinkId");
        this.listLinkId = Optional.ofNullable(listLinkId);
        return this;
    }

    public IntegrationSupport withListLinkId(Optional<? extends ListLinkId> listLinkId) {
        Utils.checkNotNull(listLinkId, "listLinkId");
        this.listLinkId = listLinkId;
        return this;
    }

    public IntegrationSupport withListListId(ListListId listListId) {
        Utils.checkNotNull(listListId, "listListId");
        this.listListId = Optional.ofNullable(listListId);
        return this;
    }

    public IntegrationSupport withListListId(Optional<? extends ListListId> listListId) {
        Utils.checkNotNull(listListId, "listListId");
        this.listListId = listListId;
        return this;
    }

    public IntegrationSupport withListLocationId(ListLocationId listLocationId) {
        Utils.checkNotNull(listLocationId, "listLocationId");
        this.listLocationId = Optional.ofNullable(listLocationId);
        return this;
    }

    public IntegrationSupport withListLocationId(Optional<? extends ListLocationId> listLocationId) {
        Utils.checkNotNull(listLocationId, "listLocationId");
        this.listLocationId = listLocationId;
        return this;
    }

    public IntegrationSupport withListOffset(ListOffset listOffset) {
        Utils.checkNotNull(listOffset, "listOffset");
        this.listOffset = Optional.ofNullable(listOffset);
        return this;
    }

    public IntegrationSupport withListOffset(Optional<? extends ListOffset> listOffset) {
        Utils.checkNotNull(listOffset, "listOffset");
        this.listOffset = listOffset;
        return this;
    }

    public IntegrationSupport withListOrder(ListOrder listOrder) {
        Utils.checkNotNull(listOrder, "listOrder");
        this.listOrder = Optional.ofNullable(listOrder);
        return this;
    }

    public IntegrationSupport withListOrder(Optional<? extends ListOrder> listOrder) {
        Utils.checkNotNull(listOrder, "listOrder");
        this.listOrder = listOrder;
        return this;
    }

    public IntegrationSupport withListOrgId(ListOrgId listOrgId) {
        Utils.checkNotNull(listOrgId, "listOrgId");
        this.listOrgId = Optional.ofNullable(listOrgId);
        return this;
    }

    public IntegrationSupport withListOrgId(Optional<? extends ListOrgId> listOrgId) {
        Utils.checkNotNull(listOrgId, "listOrgId");
        this.listOrgId = listOrgId;
        return this;
    }

    public IntegrationSupport withListParentId(ListParentId listParentId) {
        Utils.checkNotNull(listParentId, "listParentId");
        this.listParentId = Optional.ofNullable(listParentId);
        return this;
    }

    public IntegrationSupport withListParentId(Optional<? extends ListParentId> listParentId) {
        Utils.checkNotNull(listParentId, "listParentId");
        this.listParentId = listParentId;
        return this;
    }

    public IntegrationSupport withListProjectId(ListProjectId listProjectId) {
        Utils.checkNotNull(listProjectId, "listProjectId");
        this.listProjectId = Optional.ofNullable(listProjectId);
        return this;
    }

    public IntegrationSupport withListProjectId(Optional<? extends ListProjectId> listProjectId) {
        Utils.checkNotNull(listProjectId, "listProjectId");
        this.listProjectId = listProjectId;
        return this;
    }

    public IntegrationSupport withListQuery(ListQuery listQuery) {
        Utils.checkNotNull(listQuery, "listQuery");
        this.listQuery = Optional.ofNullable(listQuery);
        return this;
    }

    public IntegrationSupport withListQuery(Optional<? extends ListQuery> listQuery) {
        Utils.checkNotNull(listQuery, "listQuery");
        this.listQuery = listQuery;
        return this;
    }

    public IntegrationSupport withListRawFields(ListRawFields listRawFields) {
        Utils.checkNotNull(listRawFields, "listRawFields");
        this.listRawFields = Optional.ofNullable(listRawFields);
        return this;
    }

    public IntegrationSupport withListRawFields(Optional<? extends ListRawFields> listRawFields) {
        Utils.checkNotNull(listRawFields, "listRawFields");
        this.listRawFields = listRawFields;
        return this;
    }

    public IntegrationSupport withListRepoId(ListRepoId listRepoId) {
        Utils.checkNotNull(listRepoId, "listRepoId");
        this.listRepoId = Optional.ofNullable(listRepoId);
        return this;
    }

    public IntegrationSupport withListRepoId(Optional<? extends ListRepoId> listRepoId) {
        Utils.checkNotNull(listRepoId, "listRepoId");
        this.listRepoId = listRepoId;
        return this;
    }

    public IntegrationSupport withListRootId(ListRootId listRootId) {
        Utils.checkNotNull(listRootId, "listRootId");
        this.listRootId = Optional.ofNullable(listRootId);
        return this;
    }

    public IntegrationSupport withListRootId(Optional<? extends ListRootId> listRootId) {
        Utils.checkNotNull(listRootId, "listRootId");
        this.listRootId = listRootId;
        return this;
    }

    public IntegrationSupport withListSortByCreatedAt(ListSortByCreatedAt listSortByCreatedAt) {
        Utils.checkNotNull(listSortByCreatedAt, "listSortByCreatedAt");
        this.listSortByCreatedAt = Optional.ofNullable(listSortByCreatedAt);
        return this;
    }

    public IntegrationSupport withListSortByCreatedAt(Optional<? extends ListSortByCreatedAt> listSortByCreatedAt) {
        Utils.checkNotNull(listSortByCreatedAt, "listSortByCreatedAt");
        this.listSortByCreatedAt = listSortByCreatedAt;
        return this;
    }

    public IntegrationSupport withListSortByName(ListSortByName listSortByName) {
        Utils.checkNotNull(listSortByName, "listSortByName");
        this.listSortByName = Optional.ofNullable(listSortByName);
        return this;
    }

    public IntegrationSupport withListSortByName(Optional<? extends ListSortByName> listSortByName) {
        Utils.checkNotNull(listSortByName, "listSortByName");
        this.listSortByName = listSortByName;
        return this;
    }

    public IntegrationSupport withListSortByUpdatedAt(ListSortByUpdatedAt listSortByUpdatedAt) {
        Utils.checkNotNull(listSortByUpdatedAt, "listSortByUpdatedAt");
        this.listSortByUpdatedAt = Optional.ofNullable(listSortByUpdatedAt);
        return this;
    }

    public IntegrationSupport withListSortByUpdatedAt(Optional<? extends ListSortByUpdatedAt> listSortByUpdatedAt) {
        Utils.checkNotNull(listSortByUpdatedAt, "listSortByUpdatedAt");
        this.listSortByUpdatedAt = listSortByUpdatedAt;
        return this;
    }

    public IntegrationSupport withListSpaceId(ListSpaceId listSpaceId) {
        Utils.checkNotNull(listSpaceId, "listSpaceId");
        this.listSpaceId = Optional.ofNullable(listSpaceId);
        return this;
    }

    public IntegrationSupport withListSpaceId(Optional<? extends ListSpaceId> listSpaceId) {
        Utils.checkNotNull(listSpaceId, "listSpaceId");
        this.listSpaceId = listSpaceId;
        return this;
    }

    public IntegrationSupport withListStudentId(ListStudentId listStudentId) {
        Utils.checkNotNull(listStudentId, "listStudentId");
        this.listStudentId = Optional.ofNullable(listStudentId);
        return this;
    }

    public IntegrationSupport withListStudentId(Optional<? extends ListStudentId> listStudentId) {
        Utils.checkNotNull(listStudentId, "listStudentId");
        this.listStudentId = listStudentId;
        return this;
    }

    public IntegrationSupport withListTaskId(ListTaskId listTaskId) {
        Utils.checkNotNull(listTaskId, "listTaskId");
        this.listTaskId = Optional.ofNullable(listTaskId);
        return this;
    }

    public IntegrationSupport withListTaskId(Optional<? extends ListTaskId> listTaskId) {
        Utils.checkNotNull(listTaskId, "listTaskId");
        this.listTaskId = listTaskId;
        return this;
    }

    public IntegrationSupport withListTicketId(ListTicketId listTicketId) {
        Utils.checkNotNull(listTicketId, "listTicketId");
        this.listTicketId = Optional.ofNullable(listTicketId);
        return this;
    }

    public IntegrationSupport withListTicketId(Optional<? extends ListTicketId> listTicketId) {
        Utils.checkNotNull(listTicketId, "listTicketId");
        this.listTicketId = listTicketId;
        return this;
    }

    public IntegrationSupport withListType(ListType listType) {
        Utils.checkNotNull(listType, "listType");
        this.listType = Optional.ofNullable(listType);
        return this;
    }

    public IntegrationSupport withListType(Optional<? extends ListType> listType) {
        Utils.checkNotNull(listType, "listType");
        this.listType = listType;
        return this;
    }

    public IntegrationSupport withListUpdatedGte(ListUpdatedGte listUpdatedGte) {
        Utils.checkNotNull(listUpdatedGte, "listUpdatedGte");
        this.listUpdatedGte = Optional.ofNullable(listUpdatedGte);
        return this;
    }

    public IntegrationSupport withListUpdatedGte(Optional<? extends ListUpdatedGte> listUpdatedGte) {
        Utils.checkNotNull(listUpdatedGte, "listUpdatedGte");
        this.listUpdatedGte = listUpdatedGte;
        return this;
    }

    public IntegrationSupport withListUserId(ListUserId listUserId) {
        Utils.checkNotNull(listUserId, "listUserId");
        this.listUserId = Optional.ofNullable(listUserId);
        return this;
    }

    public IntegrationSupport withListUserId(Optional<? extends ListUserId> listUserId) {
        Utils.checkNotNull(listUserId, "listUserId");
        this.listUserId = listUserId;
        return this;
    }

    public IntegrationSupport withMethods(Map<String, Boolean> methods) {
        Utils.checkNotNull(methods, "methods");
        this.methods = Optional.ofNullable(methods);
        return this;
    }

    public IntegrationSupport withMethods(Optional<? extends Map<String, Boolean>> methods) {
        Utils.checkNotNull(methods, "methods");
        this.methods = methods;
        return this;
    }

    public IntegrationSupport withNativeWebhookParentId(NativeWebhookParentId nativeWebhookParentId) {
        Utils.checkNotNull(nativeWebhookParentId, "nativeWebhookParentId");
        this.nativeWebhookParentId = Optional.ofNullable(nativeWebhookParentId);
        return this;
    }

    public IntegrationSupport withNativeWebhookParentId(Optional<? extends NativeWebhookParentId> nativeWebhookParentId) {
        Utils.checkNotNull(nativeWebhookParentId, "nativeWebhookParentId");
        this.nativeWebhookParentId = nativeWebhookParentId;
        return this;
    }

    public IntegrationSupport withNativeWebhookProjectId(NativeWebhookProjectId nativeWebhookProjectId) {
        Utils.checkNotNull(nativeWebhookProjectId, "nativeWebhookProjectId");
        this.nativeWebhookProjectId = Optional.ofNullable(nativeWebhookProjectId);
        return this;
    }

    public IntegrationSupport withNativeWebhookProjectId(Optional<? extends NativeWebhookProjectId> nativeWebhookProjectId) {
        Utils.checkNotNull(nativeWebhookProjectId, "nativeWebhookProjectId");
        this.nativeWebhookProjectId = nativeWebhookProjectId;
        return this;
    }

    public IntegrationSupport withOutboundFields(Map<String, Object> outboundFields) {
        Utils.checkNotNull(outboundFields, "outboundFields");
        this.outboundFields = Optional.ofNullable(outboundFields);
        return this;
    }

    public IntegrationSupport withOutboundFields(Optional<? extends Map<String, Object>> outboundFields) {
        Utils.checkNotNull(outboundFields, "outboundFields");
        this.outboundFields = outboundFields;
        return this;
    }

    /**
     * objects that we map from in the integration
     */
    public IntegrationSupport withRawObjects(List<String> rawObjects) {
        Utils.checkNotNull(rawObjects, "rawObjects");
        this.rawObjects = Optional.ofNullable(rawObjects);
        return this;
    }

    /**
     * objects that we map from in the integration
     */
    public IntegrationSupport withRawObjects(Optional<? extends List<String>> rawObjects) {
        Utils.checkNotNull(rawObjects, "rawObjects");
        this.rawObjects = rawObjects;
        return this;
    }

    public IntegrationSupport withSearchDomain(SearchDomain searchDomain) {
        Utils.checkNotNull(searchDomain, "searchDomain");
        this.searchDomain = Optional.ofNullable(searchDomain);
        return this;
    }

    public IntegrationSupport withSearchDomain(Optional<? extends SearchDomain> searchDomain) {
        Utils.checkNotNull(searchDomain, "searchDomain");
        this.searchDomain = searchDomain;
        return this;
    }

    public IntegrationSupport withSearchEmail(SearchEmail searchEmail) {
        Utils.checkNotNull(searchEmail, "searchEmail");
        this.searchEmail = Optional.ofNullable(searchEmail);
        return this;
    }

    public IntegrationSupport withSearchEmail(Optional<? extends SearchEmail> searchEmail) {
        Utils.checkNotNull(searchEmail, "searchEmail");
        this.searchEmail = searchEmail;
        return this;
    }

    public IntegrationSupport withSearchLinkedinurl(SearchLinkedinurl searchLinkedinurl) {
        Utils.checkNotNull(searchLinkedinurl, "searchLinkedinurl");
        this.searchLinkedinurl = Optional.ofNullable(searchLinkedinurl);
        return this;
    }

    public IntegrationSupport withSearchLinkedinurl(Optional<? extends SearchLinkedinurl> searchLinkedinurl) {
        Utils.checkNotNull(searchLinkedinurl, "searchLinkedinurl");
        this.searchLinkedinurl = searchLinkedinurl;
        return this;
    }

    public IntegrationSupport withSearchName(SearchName searchName) {
        Utils.checkNotNull(searchName, "searchName");
        this.searchName = Optional.ofNullable(searchName);
        return this;
    }

    public IntegrationSupport withSearchName(Optional<? extends SearchName> searchName) {
        Utils.checkNotNull(searchName, "searchName");
        this.searchName = searchName;
        return this;
    }

    public IntegrationSupport withSearchTwitter(SearchTwitter searchTwitter) {
        Utils.checkNotNull(searchTwitter, "searchTwitter");
        this.searchTwitter = Optional.ofNullable(searchTwitter);
        return this;
    }

    public IntegrationSupport withSearchTwitter(Optional<? extends SearchTwitter> searchTwitter) {
        Utils.checkNotNull(searchTwitter, "searchTwitter");
        this.searchTwitter = searchTwitter;
        return this;
    }

    public IntegrationSupport withVirtualWebhookChannelId(VirtualWebhookChannelId virtualWebhookChannelId) {
        Utils.checkNotNull(virtualWebhookChannelId, "virtualWebhookChannelId");
        this.virtualWebhookChannelId = Optional.ofNullable(virtualWebhookChannelId);
        return this;
    }

    public IntegrationSupport withVirtualWebhookChannelId(Optional<? extends VirtualWebhookChannelId> virtualWebhookChannelId) {
        Utils.checkNotNull(virtualWebhookChannelId, "virtualWebhookChannelId");
        this.virtualWebhookChannelId = virtualWebhookChannelId;
        return this;
    }

    public IntegrationSupport withVirtualWebhookCompanyId(VirtualWebhookCompanyId virtualWebhookCompanyId) {
        Utils.checkNotNull(virtualWebhookCompanyId, "virtualWebhookCompanyId");
        this.virtualWebhookCompanyId = Optional.ofNullable(virtualWebhookCompanyId);
        return this;
    }

    public IntegrationSupport withVirtualWebhookCompanyId(Optional<? extends VirtualWebhookCompanyId> virtualWebhookCompanyId) {
        Utils.checkNotNull(virtualWebhookCompanyId, "virtualWebhookCompanyId");
        this.virtualWebhookCompanyId = virtualWebhookCompanyId;
        return this;
    }

    public IntegrationSupport withVirtualWebhookContactId(VirtualWebhookContactId virtualWebhookContactId) {
        Utils.checkNotNull(virtualWebhookContactId, "virtualWebhookContactId");
        this.virtualWebhookContactId = Optional.ofNullable(virtualWebhookContactId);
        return this;
    }

    public IntegrationSupport withVirtualWebhookContactId(Optional<? extends VirtualWebhookContactId> virtualWebhookContactId) {
        Utils.checkNotNull(virtualWebhookContactId, "virtualWebhookContactId");
        this.virtualWebhookContactId = virtualWebhookContactId;
        return this;
    }

    public IntegrationSupport withVirtualWebhookDealId(VirtualWebhookDealId virtualWebhookDealId) {
        Utils.checkNotNull(virtualWebhookDealId, "virtualWebhookDealId");
        this.virtualWebhookDealId = Optional.ofNullable(virtualWebhookDealId);
        return this;
    }

    public IntegrationSupport withVirtualWebhookDealId(Optional<? extends VirtualWebhookDealId> virtualWebhookDealId) {
        Utils.checkNotNull(virtualWebhookDealId, "virtualWebhookDealId");
        this.virtualWebhookDealId = virtualWebhookDealId;
        return this;
    }

    public IntegrationSupport withVirtualWebhookJobId(VirtualWebhookJobId virtualWebhookJobId) {
        Utils.checkNotNull(virtualWebhookJobId, "virtualWebhookJobId");
        this.virtualWebhookJobId = Optional.ofNullable(virtualWebhookJobId);
        return this;
    }

    public IntegrationSupport withVirtualWebhookJobId(Optional<? extends VirtualWebhookJobId> virtualWebhookJobId) {
        Utils.checkNotNull(virtualWebhookJobId, "virtualWebhookJobId");
        this.virtualWebhookJobId = virtualWebhookJobId;
        return this;
    }

    public IntegrationSupport withVirtualWebhookLimit(VirtualWebhookLimit virtualWebhookLimit) {
        Utils.checkNotNull(virtualWebhookLimit, "virtualWebhookLimit");
        this.virtualWebhookLimit = Optional.ofNullable(virtualWebhookLimit);
        return this;
    }

    public IntegrationSupport withVirtualWebhookLimit(Optional<? extends VirtualWebhookLimit> virtualWebhookLimit) {
        Utils.checkNotNull(virtualWebhookLimit, "virtualWebhookLimit");
        this.virtualWebhookLimit = virtualWebhookLimit;
        return this;
    }

    public IntegrationSupport withVirtualWebhookParentId(VirtualWebhookParentId virtualWebhookParentId) {
        Utils.checkNotNull(virtualWebhookParentId, "virtualWebhookParentId");
        this.virtualWebhookParentId = Optional.ofNullable(virtualWebhookParentId);
        return this;
    }

    public IntegrationSupport withVirtualWebhookParentId(Optional<? extends VirtualWebhookParentId> virtualWebhookParentId) {
        Utils.checkNotNull(virtualWebhookParentId, "virtualWebhookParentId");
        this.virtualWebhookParentId = virtualWebhookParentId;
        return this;
    }

    public IntegrationSupport withVirtualWebhookTicketId(VirtualWebhookTicketId virtualWebhookTicketId) {
        Utils.checkNotNull(virtualWebhookTicketId, "virtualWebhookTicketId");
        this.virtualWebhookTicketId = Optional.ofNullable(virtualWebhookTicketId);
        return this;
    }

    public IntegrationSupport withVirtualWebhookTicketId(Optional<? extends VirtualWebhookTicketId> virtualWebhookTicketId) {
        Utils.checkNotNull(virtualWebhookTicketId, "virtualWebhookTicketId");
        this.virtualWebhookTicketId = virtualWebhookTicketId;
        return this;
    }

    public IntegrationSupport withVirtualWebhookType(VirtualWebhookType virtualWebhookType) {
        Utils.checkNotNull(virtualWebhookType, "virtualWebhookType");
        this.virtualWebhookType = Optional.ofNullable(virtualWebhookType);
        return this;
    }

    public IntegrationSupport withVirtualWebhookType(Optional<? extends VirtualWebhookType> virtualWebhookType) {
        Utils.checkNotNull(virtualWebhookType, "virtualWebhookType");
        this.virtualWebhookType = virtualWebhookType;
        return this;
    }

    public IntegrationSupport withVirtualWebhookUpdatedGte(VirtualWebhookUpdatedGte virtualWebhookUpdatedGte) {
        Utils.checkNotNull(virtualWebhookUpdatedGte, "virtualWebhookUpdatedGte");
        this.virtualWebhookUpdatedGte = Optional.ofNullable(virtualWebhookUpdatedGte);
        return this;
    }

    public IntegrationSupport withVirtualWebhookUpdatedGte(Optional<? extends VirtualWebhookUpdatedGte> virtualWebhookUpdatedGte) {
        Utils.checkNotNull(virtualWebhookUpdatedGte, "virtualWebhookUpdatedGte");
        this.virtualWebhookUpdatedGte = virtualWebhookUpdatedGte;
        return this;
    }

    public IntegrationSupport withVirtualWebhookUserId(VirtualWebhookUserId virtualWebhookUserId) {
        Utils.checkNotNull(virtualWebhookUserId, "virtualWebhookUserId");
        this.virtualWebhookUserId = Optional.ofNullable(virtualWebhookUserId);
        return this;
    }

    public IntegrationSupport withVirtualWebhookUserId(Optional<? extends VirtualWebhookUserId> virtualWebhookUserId) {
        Utils.checkNotNull(virtualWebhookUserId, "virtualWebhookUserId");
        this.virtualWebhookUserId = virtualWebhookUserId;
        return this;
    }

    public IntegrationSupport withWebhookEvents(PropertyIntegrationSupportWebhookEvents webhookEvents) {
        Utils.checkNotNull(webhookEvents, "webhookEvents");
        this.webhookEvents = Optional.ofNullable(webhookEvents);
        return this;
    }

    public IntegrationSupport withWebhookEvents(Optional<? extends PropertyIntegrationSupportWebhookEvents> webhookEvents) {
        Utils.checkNotNull(webhookEvents, "webhookEvents");
        this.webhookEvents = webhookEvents;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        IntegrationSupport other = (IntegrationSupport) o;
        return 
            Objects.deepEquals(this.fromWebhook, other.fromWebhook) &&
            Objects.deepEquals(this.inboundFields, other.inboundFields) &&
            Objects.deepEquals(this.listAccountId, other.listAccountId) &&
            Objects.deepEquals(this.listApplicationId, other.listApplicationId) &&
            Objects.deepEquals(this.listCandidateId, other.listCandidateId) &&
            Objects.deepEquals(this.listChannelId, other.listChannelId) &&
            Objects.deepEquals(this.listClassId, other.listClassId) &&
            Objects.deepEquals(this.listCollectionId, other.listCollectionId) &&
            Objects.deepEquals(this.listCompanyId, other.listCompanyId) &&
            Objects.deepEquals(this.listContactId, other.listContactId) &&
            Objects.deepEquals(this.listCourseId, other.listCourseId) &&
            Objects.deepEquals(this.listCustomerId, other.listCustomerId) &&
            Objects.deepEquals(this.listDealId, other.listDealId) &&
            Objects.deepEquals(this.listInstructorId, other.listInstructorId) &&
            Objects.deepEquals(this.listInterviewId, other.listInterviewId) &&
            Objects.deepEquals(this.listInvoiceId, other.listInvoiceId) &&
            Objects.deepEquals(this.listItemId, other.listItemId) &&
            Objects.deepEquals(this.listItemVariantId, other.listItemVariantId) &&
            Objects.deepEquals(this.listJobId, other.listJobId) &&
            Objects.deepEquals(this.listLimit, other.listLimit) &&
            Objects.deepEquals(this.listLinkId, other.listLinkId) &&
            Objects.deepEquals(this.listListId, other.listListId) &&
            Objects.deepEquals(this.listLocationId, other.listLocationId) &&
            Objects.deepEquals(this.listOffset, other.listOffset) &&
            Objects.deepEquals(this.listOrder, other.listOrder) &&
            Objects.deepEquals(this.listOrgId, other.listOrgId) &&
            Objects.deepEquals(this.listParentId, other.listParentId) &&
            Objects.deepEquals(this.listProjectId, other.listProjectId) &&
            Objects.deepEquals(this.listQuery, other.listQuery) &&
            Objects.deepEquals(this.listRawFields, other.listRawFields) &&
            Objects.deepEquals(this.listRepoId, other.listRepoId) &&
            Objects.deepEquals(this.listRootId, other.listRootId) &&
            Objects.deepEquals(this.listSortByCreatedAt, other.listSortByCreatedAt) &&
            Objects.deepEquals(this.listSortByName, other.listSortByName) &&
            Objects.deepEquals(this.listSortByUpdatedAt, other.listSortByUpdatedAt) &&
            Objects.deepEquals(this.listSpaceId, other.listSpaceId) &&
            Objects.deepEquals(this.listStudentId, other.listStudentId) &&
            Objects.deepEquals(this.listTaskId, other.listTaskId) &&
            Objects.deepEquals(this.listTicketId, other.listTicketId) &&
            Objects.deepEquals(this.listType, other.listType) &&
            Objects.deepEquals(this.listUpdatedGte, other.listUpdatedGte) &&
            Objects.deepEquals(this.listUserId, other.listUserId) &&
            Objects.deepEquals(this.methods, other.methods) &&
            Objects.deepEquals(this.nativeWebhookParentId, other.nativeWebhookParentId) &&
            Objects.deepEquals(this.nativeWebhookProjectId, other.nativeWebhookProjectId) &&
            Objects.deepEquals(this.outboundFields, other.outboundFields) &&
            Objects.deepEquals(this.rawObjects, other.rawObjects) &&
            Objects.deepEquals(this.searchDomain, other.searchDomain) &&
            Objects.deepEquals(this.searchEmail, other.searchEmail) &&
            Objects.deepEquals(this.searchLinkedinurl, other.searchLinkedinurl) &&
            Objects.deepEquals(this.searchName, other.searchName) &&
            Objects.deepEquals(this.searchTwitter, other.searchTwitter) &&
            Objects.deepEquals(this.virtualWebhookChannelId, other.virtualWebhookChannelId) &&
            Objects.deepEquals(this.virtualWebhookCompanyId, other.virtualWebhookCompanyId) &&
            Objects.deepEquals(this.virtualWebhookContactId, other.virtualWebhookContactId) &&
            Objects.deepEquals(this.virtualWebhookDealId, other.virtualWebhookDealId) &&
            Objects.deepEquals(this.virtualWebhookJobId, other.virtualWebhookJobId) &&
            Objects.deepEquals(this.virtualWebhookLimit, other.virtualWebhookLimit) &&
            Objects.deepEquals(this.virtualWebhookParentId, other.virtualWebhookParentId) &&
            Objects.deepEquals(this.virtualWebhookTicketId, other.virtualWebhookTicketId) &&
            Objects.deepEquals(this.virtualWebhookType, other.virtualWebhookType) &&
            Objects.deepEquals(this.virtualWebhookUpdatedGte, other.virtualWebhookUpdatedGte) &&
            Objects.deepEquals(this.virtualWebhookUserId, other.virtualWebhookUserId) &&
            Objects.deepEquals(this.webhookEvents, other.webhookEvents);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fromWebhook,
            inboundFields,
            listAccountId,
            listApplicationId,
            listCandidateId,
            listChannelId,
            listClassId,
            listCollectionId,
            listCompanyId,
            listContactId,
            listCourseId,
            listCustomerId,
            listDealId,
            listInstructorId,
            listInterviewId,
            listInvoiceId,
            listItemId,
            listItemVariantId,
            listJobId,
            listLimit,
            listLinkId,
            listListId,
            listLocationId,
            listOffset,
            listOrder,
            listOrgId,
            listParentId,
            listProjectId,
            listQuery,
            listRawFields,
            listRepoId,
            listRootId,
            listSortByCreatedAt,
            listSortByName,
            listSortByUpdatedAt,
            listSpaceId,
            listStudentId,
            listTaskId,
            listTicketId,
            listType,
            listUpdatedGte,
            listUserId,
            methods,
            nativeWebhookParentId,
            nativeWebhookProjectId,
            outboundFields,
            rawObjects,
            searchDomain,
            searchEmail,
            searchLinkedinurl,
            searchName,
            searchTwitter,
            virtualWebhookChannelId,
            virtualWebhookCompanyId,
            virtualWebhookContactId,
            virtualWebhookDealId,
            virtualWebhookJobId,
            virtualWebhookLimit,
            virtualWebhookParentId,
            virtualWebhookTicketId,
            virtualWebhookType,
            virtualWebhookUpdatedGte,
            virtualWebhookUserId,
            webhookEvents);
    }
    
    @Override
    public String toString() {
        return Utils.toString(IntegrationSupport.class,
                "fromWebhook", fromWebhook,
                "inboundFields", inboundFields,
                "listAccountId", listAccountId,
                "listApplicationId", listApplicationId,
                "listCandidateId", listCandidateId,
                "listChannelId", listChannelId,
                "listClassId", listClassId,
                "listCollectionId", listCollectionId,
                "listCompanyId", listCompanyId,
                "listContactId", listContactId,
                "listCourseId", listCourseId,
                "listCustomerId", listCustomerId,
                "listDealId", listDealId,
                "listInstructorId", listInstructorId,
                "listInterviewId", listInterviewId,
                "listInvoiceId", listInvoiceId,
                "listItemId", listItemId,
                "listItemVariantId", listItemVariantId,
                "listJobId", listJobId,
                "listLimit", listLimit,
                "listLinkId", listLinkId,
                "listListId", listListId,
                "listLocationId", listLocationId,
                "listOffset", listOffset,
                "listOrder", listOrder,
                "listOrgId", listOrgId,
                "listParentId", listParentId,
                "listProjectId", listProjectId,
                "listQuery", listQuery,
                "listRawFields", listRawFields,
                "listRepoId", listRepoId,
                "listRootId", listRootId,
                "listSortByCreatedAt", listSortByCreatedAt,
                "listSortByName", listSortByName,
                "listSortByUpdatedAt", listSortByUpdatedAt,
                "listSpaceId", listSpaceId,
                "listStudentId", listStudentId,
                "listTaskId", listTaskId,
                "listTicketId", listTicketId,
                "listType", listType,
                "listUpdatedGte", listUpdatedGte,
                "listUserId", listUserId,
                "methods", methods,
                "nativeWebhookParentId", nativeWebhookParentId,
                "nativeWebhookProjectId", nativeWebhookProjectId,
                "outboundFields", outboundFields,
                "rawObjects", rawObjects,
                "searchDomain", searchDomain,
                "searchEmail", searchEmail,
                "searchLinkedinurl", searchLinkedinurl,
                "searchName", searchName,
                "searchTwitter", searchTwitter,
                "virtualWebhookChannelId", virtualWebhookChannelId,
                "virtualWebhookCompanyId", virtualWebhookCompanyId,
                "virtualWebhookContactId", virtualWebhookContactId,
                "virtualWebhookDealId", virtualWebhookDealId,
                "virtualWebhookJobId", virtualWebhookJobId,
                "virtualWebhookLimit", virtualWebhookLimit,
                "virtualWebhookParentId", virtualWebhookParentId,
                "virtualWebhookTicketId", virtualWebhookTicketId,
                "virtualWebhookType", virtualWebhookType,
                "virtualWebhookUpdatedGte", virtualWebhookUpdatedGte,
                "virtualWebhookUserId", virtualWebhookUserId,
                "webhookEvents", webhookEvents);
    }
    
    public final static class Builder {
 
        private Optional<? extends FromWebhook> fromWebhook = Optional.empty();
 
        private Optional<? extends Map<String, Object>> inboundFields = Optional.empty();
 
        private Optional<? extends ListAccountId> listAccountId = Optional.empty();
 
        private Optional<? extends ListApplicationId> listApplicationId = Optional.empty();
 
        private Optional<? extends ListCandidateId> listCandidateId = Optional.empty();
 
        private Optional<? extends ListChannelId> listChannelId = Optional.empty();
 
        private Optional<? extends ListClassId> listClassId = Optional.empty();
 
        private Optional<? extends ListCollectionId> listCollectionId = Optional.empty();
 
        private Optional<? extends ListCompanyId> listCompanyId = Optional.empty();
 
        private Optional<? extends ListContactId> listContactId = Optional.empty();
 
        private Optional<? extends ListCourseId> listCourseId = Optional.empty();
 
        private Optional<? extends ListCustomerId> listCustomerId = Optional.empty();
 
        private Optional<? extends ListDealId> listDealId = Optional.empty();
 
        private Optional<? extends ListInstructorId> listInstructorId = Optional.empty();
 
        private Optional<? extends ListInterviewId> listInterviewId = Optional.empty();
 
        private Optional<? extends ListInvoiceId> listInvoiceId = Optional.empty();
 
        private Optional<? extends ListItemId> listItemId = Optional.empty();
 
        private Optional<? extends ListItemVariantId> listItemVariantId = Optional.empty();
 
        private Optional<? extends ListJobId> listJobId = Optional.empty();
 
        private Optional<? extends ListLimit> listLimit = Optional.empty();
 
        private Optional<? extends ListLinkId> listLinkId = Optional.empty();
 
        private Optional<? extends ListListId> listListId = Optional.empty();
 
        private Optional<? extends ListLocationId> listLocationId = Optional.empty();
 
        private Optional<? extends ListOffset> listOffset = Optional.empty();
 
        private Optional<? extends ListOrder> listOrder = Optional.empty();
 
        private Optional<? extends ListOrgId> listOrgId = Optional.empty();
 
        private Optional<? extends ListParentId> listParentId = Optional.empty();
 
        private Optional<? extends ListProjectId> listProjectId = Optional.empty();
 
        private Optional<? extends ListQuery> listQuery = Optional.empty();
 
        private Optional<? extends ListRawFields> listRawFields = Optional.empty();
 
        private Optional<? extends ListRepoId> listRepoId = Optional.empty();
 
        private Optional<? extends ListRootId> listRootId = Optional.empty();
 
        private Optional<? extends ListSortByCreatedAt> listSortByCreatedAt = Optional.empty();
 
        private Optional<? extends ListSortByName> listSortByName = Optional.empty();
 
        private Optional<? extends ListSortByUpdatedAt> listSortByUpdatedAt = Optional.empty();
 
        private Optional<? extends ListSpaceId> listSpaceId = Optional.empty();
 
        private Optional<? extends ListStudentId> listStudentId = Optional.empty();
 
        private Optional<? extends ListTaskId> listTaskId = Optional.empty();
 
        private Optional<? extends ListTicketId> listTicketId = Optional.empty();
 
        private Optional<? extends ListType> listType = Optional.empty();
 
        private Optional<? extends ListUpdatedGte> listUpdatedGte = Optional.empty();
 
        private Optional<? extends ListUserId> listUserId = Optional.empty();
 
        private Optional<? extends Map<String, Boolean>> methods = Optional.empty();
 
        private Optional<? extends NativeWebhookParentId> nativeWebhookParentId = Optional.empty();
 
        private Optional<? extends NativeWebhookProjectId> nativeWebhookProjectId = Optional.empty();
 
        private Optional<? extends Map<String, Object>> outboundFields = Optional.empty();
 
        private Optional<? extends List<String>> rawObjects = Optional.empty();
 
        private Optional<? extends SearchDomain> searchDomain = Optional.empty();
 
        private Optional<? extends SearchEmail> searchEmail = Optional.empty();
 
        private Optional<? extends SearchLinkedinurl> searchLinkedinurl = Optional.empty();
 
        private Optional<? extends SearchName> searchName = Optional.empty();
 
        private Optional<? extends SearchTwitter> searchTwitter = Optional.empty();
 
        private Optional<? extends VirtualWebhookChannelId> virtualWebhookChannelId = Optional.empty();
 
        private Optional<? extends VirtualWebhookCompanyId> virtualWebhookCompanyId = Optional.empty();
 
        private Optional<? extends VirtualWebhookContactId> virtualWebhookContactId = Optional.empty();
 
        private Optional<? extends VirtualWebhookDealId> virtualWebhookDealId = Optional.empty();
 
        private Optional<? extends VirtualWebhookJobId> virtualWebhookJobId = Optional.empty();
 
        private Optional<? extends VirtualWebhookLimit> virtualWebhookLimit = Optional.empty();
 
        private Optional<? extends VirtualWebhookParentId> virtualWebhookParentId = Optional.empty();
 
        private Optional<? extends VirtualWebhookTicketId> virtualWebhookTicketId = Optional.empty();
 
        private Optional<? extends VirtualWebhookType> virtualWebhookType = Optional.empty();
 
        private Optional<? extends VirtualWebhookUpdatedGte> virtualWebhookUpdatedGte = Optional.empty();
 
        private Optional<? extends VirtualWebhookUserId> virtualWebhookUserId = Optional.empty();
 
        private Optional<? extends PropertyIntegrationSupportWebhookEvents> webhookEvents = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder fromWebhook(FromWebhook fromWebhook) {
            Utils.checkNotNull(fromWebhook, "fromWebhook");
            this.fromWebhook = Optional.ofNullable(fromWebhook);
            return this;
        }

        public Builder fromWebhook(Optional<? extends FromWebhook> fromWebhook) {
            Utils.checkNotNull(fromWebhook, "fromWebhook");
            this.fromWebhook = fromWebhook;
            return this;
        }

        public Builder inboundFields(Map<String, Object> inboundFields) {
            Utils.checkNotNull(inboundFields, "inboundFields");
            this.inboundFields = Optional.ofNullable(inboundFields);
            return this;
        }

        public Builder inboundFields(Optional<? extends Map<String, Object>> inboundFields) {
            Utils.checkNotNull(inboundFields, "inboundFields");
            this.inboundFields = inboundFields;
            return this;
        }

        public Builder listAccountId(ListAccountId listAccountId) {
            Utils.checkNotNull(listAccountId, "listAccountId");
            this.listAccountId = Optional.ofNullable(listAccountId);
            return this;
        }

        public Builder listAccountId(Optional<? extends ListAccountId> listAccountId) {
            Utils.checkNotNull(listAccountId, "listAccountId");
            this.listAccountId = listAccountId;
            return this;
        }

        public Builder listApplicationId(ListApplicationId listApplicationId) {
            Utils.checkNotNull(listApplicationId, "listApplicationId");
            this.listApplicationId = Optional.ofNullable(listApplicationId);
            return this;
        }

        public Builder listApplicationId(Optional<? extends ListApplicationId> listApplicationId) {
            Utils.checkNotNull(listApplicationId, "listApplicationId");
            this.listApplicationId = listApplicationId;
            return this;
        }

        public Builder listCandidateId(ListCandidateId listCandidateId) {
            Utils.checkNotNull(listCandidateId, "listCandidateId");
            this.listCandidateId = Optional.ofNullable(listCandidateId);
            return this;
        }

        public Builder listCandidateId(Optional<? extends ListCandidateId> listCandidateId) {
            Utils.checkNotNull(listCandidateId, "listCandidateId");
            this.listCandidateId = listCandidateId;
            return this;
        }

        public Builder listChannelId(ListChannelId listChannelId) {
            Utils.checkNotNull(listChannelId, "listChannelId");
            this.listChannelId = Optional.ofNullable(listChannelId);
            return this;
        }

        public Builder listChannelId(Optional<? extends ListChannelId> listChannelId) {
            Utils.checkNotNull(listChannelId, "listChannelId");
            this.listChannelId = listChannelId;
            return this;
        }

        public Builder listClassId(ListClassId listClassId) {
            Utils.checkNotNull(listClassId, "listClassId");
            this.listClassId = Optional.ofNullable(listClassId);
            return this;
        }

        public Builder listClassId(Optional<? extends ListClassId> listClassId) {
            Utils.checkNotNull(listClassId, "listClassId");
            this.listClassId = listClassId;
            return this;
        }

        public Builder listCollectionId(ListCollectionId listCollectionId) {
            Utils.checkNotNull(listCollectionId, "listCollectionId");
            this.listCollectionId = Optional.ofNullable(listCollectionId);
            return this;
        }

        public Builder listCollectionId(Optional<? extends ListCollectionId> listCollectionId) {
            Utils.checkNotNull(listCollectionId, "listCollectionId");
            this.listCollectionId = listCollectionId;
            return this;
        }

        public Builder listCompanyId(ListCompanyId listCompanyId) {
            Utils.checkNotNull(listCompanyId, "listCompanyId");
            this.listCompanyId = Optional.ofNullable(listCompanyId);
            return this;
        }

        public Builder listCompanyId(Optional<? extends ListCompanyId> listCompanyId) {
            Utils.checkNotNull(listCompanyId, "listCompanyId");
            this.listCompanyId = listCompanyId;
            return this;
        }

        public Builder listContactId(ListContactId listContactId) {
            Utils.checkNotNull(listContactId, "listContactId");
            this.listContactId = Optional.ofNullable(listContactId);
            return this;
        }

        public Builder listContactId(Optional<? extends ListContactId> listContactId) {
            Utils.checkNotNull(listContactId, "listContactId");
            this.listContactId = listContactId;
            return this;
        }

        public Builder listCourseId(ListCourseId listCourseId) {
            Utils.checkNotNull(listCourseId, "listCourseId");
            this.listCourseId = Optional.ofNullable(listCourseId);
            return this;
        }

        public Builder listCourseId(Optional<? extends ListCourseId> listCourseId) {
            Utils.checkNotNull(listCourseId, "listCourseId");
            this.listCourseId = listCourseId;
            return this;
        }

        public Builder listCustomerId(ListCustomerId listCustomerId) {
            Utils.checkNotNull(listCustomerId, "listCustomerId");
            this.listCustomerId = Optional.ofNullable(listCustomerId);
            return this;
        }

        public Builder listCustomerId(Optional<? extends ListCustomerId> listCustomerId) {
            Utils.checkNotNull(listCustomerId, "listCustomerId");
            this.listCustomerId = listCustomerId;
            return this;
        }

        public Builder listDealId(ListDealId listDealId) {
            Utils.checkNotNull(listDealId, "listDealId");
            this.listDealId = Optional.ofNullable(listDealId);
            return this;
        }

        public Builder listDealId(Optional<? extends ListDealId> listDealId) {
            Utils.checkNotNull(listDealId, "listDealId");
            this.listDealId = listDealId;
            return this;
        }

        public Builder listInstructorId(ListInstructorId listInstructorId) {
            Utils.checkNotNull(listInstructorId, "listInstructorId");
            this.listInstructorId = Optional.ofNullable(listInstructorId);
            return this;
        }

        public Builder listInstructorId(Optional<? extends ListInstructorId> listInstructorId) {
            Utils.checkNotNull(listInstructorId, "listInstructorId");
            this.listInstructorId = listInstructorId;
            return this;
        }

        public Builder listInterviewId(ListInterviewId listInterviewId) {
            Utils.checkNotNull(listInterviewId, "listInterviewId");
            this.listInterviewId = Optional.ofNullable(listInterviewId);
            return this;
        }

        public Builder listInterviewId(Optional<? extends ListInterviewId> listInterviewId) {
            Utils.checkNotNull(listInterviewId, "listInterviewId");
            this.listInterviewId = listInterviewId;
            return this;
        }

        public Builder listInvoiceId(ListInvoiceId listInvoiceId) {
            Utils.checkNotNull(listInvoiceId, "listInvoiceId");
            this.listInvoiceId = Optional.ofNullable(listInvoiceId);
            return this;
        }

        public Builder listInvoiceId(Optional<? extends ListInvoiceId> listInvoiceId) {
            Utils.checkNotNull(listInvoiceId, "listInvoiceId");
            this.listInvoiceId = listInvoiceId;
            return this;
        }

        public Builder listItemId(ListItemId listItemId) {
            Utils.checkNotNull(listItemId, "listItemId");
            this.listItemId = Optional.ofNullable(listItemId);
            return this;
        }

        public Builder listItemId(Optional<? extends ListItemId> listItemId) {
            Utils.checkNotNull(listItemId, "listItemId");
            this.listItemId = listItemId;
            return this;
        }

        public Builder listItemVariantId(ListItemVariantId listItemVariantId) {
            Utils.checkNotNull(listItemVariantId, "listItemVariantId");
            this.listItemVariantId = Optional.ofNullable(listItemVariantId);
            return this;
        }

        public Builder listItemVariantId(Optional<? extends ListItemVariantId> listItemVariantId) {
            Utils.checkNotNull(listItemVariantId, "listItemVariantId");
            this.listItemVariantId = listItemVariantId;
            return this;
        }

        public Builder listJobId(ListJobId listJobId) {
            Utils.checkNotNull(listJobId, "listJobId");
            this.listJobId = Optional.ofNullable(listJobId);
            return this;
        }

        public Builder listJobId(Optional<? extends ListJobId> listJobId) {
            Utils.checkNotNull(listJobId, "listJobId");
            this.listJobId = listJobId;
            return this;
        }

        public Builder listLimit(ListLimit listLimit) {
            Utils.checkNotNull(listLimit, "listLimit");
            this.listLimit = Optional.ofNullable(listLimit);
            return this;
        }

        public Builder listLimit(Optional<? extends ListLimit> listLimit) {
            Utils.checkNotNull(listLimit, "listLimit");
            this.listLimit = listLimit;
            return this;
        }

        public Builder listLinkId(ListLinkId listLinkId) {
            Utils.checkNotNull(listLinkId, "listLinkId");
            this.listLinkId = Optional.ofNullable(listLinkId);
            return this;
        }

        public Builder listLinkId(Optional<? extends ListLinkId> listLinkId) {
            Utils.checkNotNull(listLinkId, "listLinkId");
            this.listLinkId = listLinkId;
            return this;
        }

        public Builder listListId(ListListId listListId) {
            Utils.checkNotNull(listListId, "listListId");
            this.listListId = Optional.ofNullable(listListId);
            return this;
        }

        public Builder listListId(Optional<? extends ListListId> listListId) {
            Utils.checkNotNull(listListId, "listListId");
            this.listListId = listListId;
            return this;
        }

        public Builder listLocationId(ListLocationId listLocationId) {
            Utils.checkNotNull(listLocationId, "listLocationId");
            this.listLocationId = Optional.ofNullable(listLocationId);
            return this;
        }

        public Builder listLocationId(Optional<? extends ListLocationId> listLocationId) {
            Utils.checkNotNull(listLocationId, "listLocationId");
            this.listLocationId = listLocationId;
            return this;
        }

        public Builder listOffset(ListOffset listOffset) {
            Utils.checkNotNull(listOffset, "listOffset");
            this.listOffset = Optional.ofNullable(listOffset);
            return this;
        }

        public Builder listOffset(Optional<? extends ListOffset> listOffset) {
            Utils.checkNotNull(listOffset, "listOffset");
            this.listOffset = listOffset;
            return this;
        }

        public Builder listOrder(ListOrder listOrder) {
            Utils.checkNotNull(listOrder, "listOrder");
            this.listOrder = Optional.ofNullable(listOrder);
            return this;
        }

        public Builder listOrder(Optional<? extends ListOrder> listOrder) {
            Utils.checkNotNull(listOrder, "listOrder");
            this.listOrder = listOrder;
            return this;
        }

        public Builder listOrgId(ListOrgId listOrgId) {
            Utils.checkNotNull(listOrgId, "listOrgId");
            this.listOrgId = Optional.ofNullable(listOrgId);
            return this;
        }

        public Builder listOrgId(Optional<? extends ListOrgId> listOrgId) {
            Utils.checkNotNull(listOrgId, "listOrgId");
            this.listOrgId = listOrgId;
            return this;
        }

        public Builder listParentId(ListParentId listParentId) {
            Utils.checkNotNull(listParentId, "listParentId");
            this.listParentId = Optional.ofNullable(listParentId);
            return this;
        }

        public Builder listParentId(Optional<? extends ListParentId> listParentId) {
            Utils.checkNotNull(listParentId, "listParentId");
            this.listParentId = listParentId;
            return this;
        }

        public Builder listProjectId(ListProjectId listProjectId) {
            Utils.checkNotNull(listProjectId, "listProjectId");
            this.listProjectId = Optional.ofNullable(listProjectId);
            return this;
        }

        public Builder listProjectId(Optional<? extends ListProjectId> listProjectId) {
            Utils.checkNotNull(listProjectId, "listProjectId");
            this.listProjectId = listProjectId;
            return this;
        }

        public Builder listQuery(ListQuery listQuery) {
            Utils.checkNotNull(listQuery, "listQuery");
            this.listQuery = Optional.ofNullable(listQuery);
            return this;
        }

        public Builder listQuery(Optional<? extends ListQuery> listQuery) {
            Utils.checkNotNull(listQuery, "listQuery");
            this.listQuery = listQuery;
            return this;
        }

        public Builder listRawFields(ListRawFields listRawFields) {
            Utils.checkNotNull(listRawFields, "listRawFields");
            this.listRawFields = Optional.ofNullable(listRawFields);
            return this;
        }

        public Builder listRawFields(Optional<? extends ListRawFields> listRawFields) {
            Utils.checkNotNull(listRawFields, "listRawFields");
            this.listRawFields = listRawFields;
            return this;
        }

        public Builder listRepoId(ListRepoId listRepoId) {
            Utils.checkNotNull(listRepoId, "listRepoId");
            this.listRepoId = Optional.ofNullable(listRepoId);
            return this;
        }

        public Builder listRepoId(Optional<? extends ListRepoId> listRepoId) {
            Utils.checkNotNull(listRepoId, "listRepoId");
            this.listRepoId = listRepoId;
            return this;
        }

        public Builder listRootId(ListRootId listRootId) {
            Utils.checkNotNull(listRootId, "listRootId");
            this.listRootId = Optional.ofNullable(listRootId);
            return this;
        }

        public Builder listRootId(Optional<? extends ListRootId> listRootId) {
            Utils.checkNotNull(listRootId, "listRootId");
            this.listRootId = listRootId;
            return this;
        }

        public Builder listSortByCreatedAt(ListSortByCreatedAt listSortByCreatedAt) {
            Utils.checkNotNull(listSortByCreatedAt, "listSortByCreatedAt");
            this.listSortByCreatedAt = Optional.ofNullable(listSortByCreatedAt);
            return this;
        }

        public Builder listSortByCreatedAt(Optional<? extends ListSortByCreatedAt> listSortByCreatedAt) {
            Utils.checkNotNull(listSortByCreatedAt, "listSortByCreatedAt");
            this.listSortByCreatedAt = listSortByCreatedAt;
            return this;
        }

        public Builder listSortByName(ListSortByName listSortByName) {
            Utils.checkNotNull(listSortByName, "listSortByName");
            this.listSortByName = Optional.ofNullable(listSortByName);
            return this;
        }

        public Builder listSortByName(Optional<? extends ListSortByName> listSortByName) {
            Utils.checkNotNull(listSortByName, "listSortByName");
            this.listSortByName = listSortByName;
            return this;
        }

        public Builder listSortByUpdatedAt(ListSortByUpdatedAt listSortByUpdatedAt) {
            Utils.checkNotNull(listSortByUpdatedAt, "listSortByUpdatedAt");
            this.listSortByUpdatedAt = Optional.ofNullable(listSortByUpdatedAt);
            return this;
        }

        public Builder listSortByUpdatedAt(Optional<? extends ListSortByUpdatedAt> listSortByUpdatedAt) {
            Utils.checkNotNull(listSortByUpdatedAt, "listSortByUpdatedAt");
            this.listSortByUpdatedAt = listSortByUpdatedAt;
            return this;
        }

        public Builder listSpaceId(ListSpaceId listSpaceId) {
            Utils.checkNotNull(listSpaceId, "listSpaceId");
            this.listSpaceId = Optional.ofNullable(listSpaceId);
            return this;
        }

        public Builder listSpaceId(Optional<? extends ListSpaceId> listSpaceId) {
            Utils.checkNotNull(listSpaceId, "listSpaceId");
            this.listSpaceId = listSpaceId;
            return this;
        }

        public Builder listStudentId(ListStudentId listStudentId) {
            Utils.checkNotNull(listStudentId, "listStudentId");
            this.listStudentId = Optional.ofNullable(listStudentId);
            return this;
        }

        public Builder listStudentId(Optional<? extends ListStudentId> listStudentId) {
            Utils.checkNotNull(listStudentId, "listStudentId");
            this.listStudentId = listStudentId;
            return this;
        }

        public Builder listTaskId(ListTaskId listTaskId) {
            Utils.checkNotNull(listTaskId, "listTaskId");
            this.listTaskId = Optional.ofNullable(listTaskId);
            return this;
        }

        public Builder listTaskId(Optional<? extends ListTaskId> listTaskId) {
            Utils.checkNotNull(listTaskId, "listTaskId");
            this.listTaskId = listTaskId;
            return this;
        }

        public Builder listTicketId(ListTicketId listTicketId) {
            Utils.checkNotNull(listTicketId, "listTicketId");
            this.listTicketId = Optional.ofNullable(listTicketId);
            return this;
        }

        public Builder listTicketId(Optional<? extends ListTicketId> listTicketId) {
            Utils.checkNotNull(listTicketId, "listTicketId");
            this.listTicketId = listTicketId;
            return this;
        }

        public Builder listType(ListType listType) {
            Utils.checkNotNull(listType, "listType");
            this.listType = Optional.ofNullable(listType);
            return this;
        }

        public Builder listType(Optional<? extends ListType> listType) {
            Utils.checkNotNull(listType, "listType");
            this.listType = listType;
            return this;
        }

        public Builder listUpdatedGte(ListUpdatedGte listUpdatedGte) {
            Utils.checkNotNull(listUpdatedGte, "listUpdatedGte");
            this.listUpdatedGte = Optional.ofNullable(listUpdatedGte);
            return this;
        }

        public Builder listUpdatedGte(Optional<? extends ListUpdatedGte> listUpdatedGte) {
            Utils.checkNotNull(listUpdatedGte, "listUpdatedGte");
            this.listUpdatedGte = listUpdatedGte;
            return this;
        }

        public Builder listUserId(ListUserId listUserId) {
            Utils.checkNotNull(listUserId, "listUserId");
            this.listUserId = Optional.ofNullable(listUserId);
            return this;
        }

        public Builder listUserId(Optional<? extends ListUserId> listUserId) {
            Utils.checkNotNull(listUserId, "listUserId");
            this.listUserId = listUserId;
            return this;
        }

        public Builder methods(Map<String, Boolean> methods) {
            Utils.checkNotNull(methods, "methods");
            this.methods = Optional.ofNullable(methods);
            return this;
        }

        public Builder methods(Optional<? extends Map<String, Boolean>> methods) {
            Utils.checkNotNull(methods, "methods");
            this.methods = methods;
            return this;
        }

        public Builder nativeWebhookParentId(NativeWebhookParentId nativeWebhookParentId) {
            Utils.checkNotNull(nativeWebhookParentId, "nativeWebhookParentId");
            this.nativeWebhookParentId = Optional.ofNullable(nativeWebhookParentId);
            return this;
        }

        public Builder nativeWebhookParentId(Optional<? extends NativeWebhookParentId> nativeWebhookParentId) {
            Utils.checkNotNull(nativeWebhookParentId, "nativeWebhookParentId");
            this.nativeWebhookParentId = nativeWebhookParentId;
            return this;
        }

        public Builder nativeWebhookProjectId(NativeWebhookProjectId nativeWebhookProjectId) {
            Utils.checkNotNull(nativeWebhookProjectId, "nativeWebhookProjectId");
            this.nativeWebhookProjectId = Optional.ofNullable(nativeWebhookProjectId);
            return this;
        }

        public Builder nativeWebhookProjectId(Optional<? extends NativeWebhookProjectId> nativeWebhookProjectId) {
            Utils.checkNotNull(nativeWebhookProjectId, "nativeWebhookProjectId");
            this.nativeWebhookProjectId = nativeWebhookProjectId;
            return this;
        }

        public Builder outboundFields(Map<String, Object> outboundFields) {
            Utils.checkNotNull(outboundFields, "outboundFields");
            this.outboundFields = Optional.ofNullable(outboundFields);
            return this;
        }

        public Builder outboundFields(Optional<? extends Map<String, Object>> outboundFields) {
            Utils.checkNotNull(outboundFields, "outboundFields");
            this.outboundFields = outboundFields;
            return this;
        }

        /**
         * objects that we map from in the integration
         */
        public Builder rawObjects(List<String> rawObjects) {
            Utils.checkNotNull(rawObjects, "rawObjects");
            this.rawObjects = Optional.ofNullable(rawObjects);
            return this;
        }

        /**
         * objects that we map from in the integration
         */
        public Builder rawObjects(Optional<? extends List<String>> rawObjects) {
            Utils.checkNotNull(rawObjects, "rawObjects");
            this.rawObjects = rawObjects;
            return this;
        }

        public Builder searchDomain(SearchDomain searchDomain) {
            Utils.checkNotNull(searchDomain, "searchDomain");
            this.searchDomain = Optional.ofNullable(searchDomain);
            return this;
        }

        public Builder searchDomain(Optional<? extends SearchDomain> searchDomain) {
            Utils.checkNotNull(searchDomain, "searchDomain");
            this.searchDomain = searchDomain;
            return this;
        }

        public Builder searchEmail(SearchEmail searchEmail) {
            Utils.checkNotNull(searchEmail, "searchEmail");
            this.searchEmail = Optional.ofNullable(searchEmail);
            return this;
        }

        public Builder searchEmail(Optional<? extends SearchEmail> searchEmail) {
            Utils.checkNotNull(searchEmail, "searchEmail");
            this.searchEmail = searchEmail;
            return this;
        }

        public Builder searchLinkedinurl(SearchLinkedinurl searchLinkedinurl) {
            Utils.checkNotNull(searchLinkedinurl, "searchLinkedinurl");
            this.searchLinkedinurl = Optional.ofNullable(searchLinkedinurl);
            return this;
        }

        public Builder searchLinkedinurl(Optional<? extends SearchLinkedinurl> searchLinkedinurl) {
            Utils.checkNotNull(searchLinkedinurl, "searchLinkedinurl");
            this.searchLinkedinurl = searchLinkedinurl;
            return this;
        }

        public Builder searchName(SearchName searchName) {
            Utils.checkNotNull(searchName, "searchName");
            this.searchName = Optional.ofNullable(searchName);
            return this;
        }

        public Builder searchName(Optional<? extends SearchName> searchName) {
            Utils.checkNotNull(searchName, "searchName");
            this.searchName = searchName;
            return this;
        }

        public Builder searchTwitter(SearchTwitter searchTwitter) {
            Utils.checkNotNull(searchTwitter, "searchTwitter");
            this.searchTwitter = Optional.ofNullable(searchTwitter);
            return this;
        }

        public Builder searchTwitter(Optional<? extends SearchTwitter> searchTwitter) {
            Utils.checkNotNull(searchTwitter, "searchTwitter");
            this.searchTwitter = searchTwitter;
            return this;
        }

        public Builder virtualWebhookChannelId(VirtualWebhookChannelId virtualWebhookChannelId) {
            Utils.checkNotNull(virtualWebhookChannelId, "virtualWebhookChannelId");
            this.virtualWebhookChannelId = Optional.ofNullable(virtualWebhookChannelId);
            return this;
        }

        public Builder virtualWebhookChannelId(Optional<? extends VirtualWebhookChannelId> virtualWebhookChannelId) {
            Utils.checkNotNull(virtualWebhookChannelId, "virtualWebhookChannelId");
            this.virtualWebhookChannelId = virtualWebhookChannelId;
            return this;
        }

        public Builder virtualWebhookCompanyId(VirtualWebhookCompanyId virtualWebhookCompanyId) {
            Utils.checkNotNull(virtualWebhookCompanyId, "virtualWebhookCompanyId");
            this.virtualWebhookCompanyId = Optional.ofNullable(virtualWebhookCompanyId);
            return this;
        }

        public Builder virtualWebhookCompanyId(Optional<? extends VirtualWebhookCompanyId> virtualWebhookCompanyId) {
            Utils.checkNotNull(virtualWebhookCompanyId, "virtualWebhookCompanyId");
            this.virtualWebhookCompanyId = virtualWebhookCompanyId;
            return this;
        }

        public Builder virtualWebhookContactId(VirtualWebhookContactId virtualWebhookContactId) {
            Utils.checkNotNull(virtualWebhookContactId, "virtualWebhookContactId");
            this.virtualWebhookContactId = Optional.ofNullable(virtualWebhookContactId);
            return this;
        }

        public Builder virtualWebhookContactId(Optional<? extends VirtualWebhookContactId> virtualWebhookContactId) {
            Utils.checkNotNull(virtualWebhookContactId, "virtualWebhookContactId");
            this.virtualWebhookContactId = virtualWebhookContactId;
            return this;
        }

        public Builder virtualWebhookDealId(VirtualWebhookDealId virtualWebhookDealId) {
            Utils.checkNotNull(virtualWebhookDealId, "virtualWebhookDealId");
            this.virtualWebhookDealId = Optional.ofNullable(virtualWebhookDealId);
            return this;
        }

        public Builder virtualWebhookDealId(Optional<? extends VirtualWebhookDealId> virtualWebhookDealId) {
            Utils.checkNotNull(virtualWebhookDealId, "virtualWebhookDealId");
            this.virtualWebhookDealId = virtualWebhookDealId;
            return this;
        }

        public Builder virtualWebhookJobId(VirtualWebhookJobId virtualWebhookJobId) {
            Utils.checkNotNull(virtualWebhookJobId, "virtualWebhookJobId");
            this.virtualWebhookJobId = Optional.ofNullable(virtualWebhookJobId);
            return this;
        }

        public Builder virtualWebhookJobId(Optional<? extends VirtualWebhookJobId> virtualWebhookJobId) {
            Utils.checkNotNull(virtualWebhookJobId, "virtualWebhookJobId");
            this.virtualWebhookJobId = virtualWebhookJobId;
            return this;
        }

        public Builder virtualWebhookLimit(VirtualWebhookLimit virtualWebhookLimit) {
            Utils.checkNotNull(virtualWebhookLimit, "virtualWebhookLimit");
            this.virtualWebhookLimit = Optional.ofNullable(virtualWebhookLimit);
            return this;
        }

        public Builder virtualWebhookLimit(Optional<? extends VirtualWebhookLimit> virtualWebhookLimit) {
            Utils.checkNotNull(virtualWebhookLimit, "virtualWebhookLimit");
            this.virtualWebhookLimit = virtualWebhookLimit;
            return this;
        }

        public Builder virtualWebhookParentId(VirtualWebhookParentId virtualWebhookParentId) {
            Utils.checkNotNull(virtualWebhookParentId, "virtualWebhookParentId");
            this.virtualWebhookParentId = Optional.ofNullable(virtualWebhookParentId);
            return this;
        }

        public Builder virtualWebhookParentId(Optional<? extends VirtualWebhookParentId> virtualWebhookParentId) {
            Utils.checkNotNull(virtualWebhookParentId, "virtualWebhookParentId");
            this.virtualWebhookParentId = virtualWebhookParentId;
            return this;
        }

        public Builder virtualWebhookTicketId(VirtualWebhookTicketId virtualWebhookTicketId) {
            Utils.checkNotNull(virtualWebhookTicketId, "virtualWebhookTicketId");
            this.virtualWebhookTicketId = Optional.ofNullable(virtualWebhookTicketId);
            return this;
        }

        public Builder virtualWebhookTicketId(Optional<? extends VirtualWebhookTicketId> virtualWebhookTicketId) {
            Utils.checkNotNull(virtualWebhookTicketId, "virtualWebhookTicketId");
            this.virtualWebhookTicketId = virtualWebhookTicketId;
            return this;
        }

        public Builder virtualWebhookType(VirtualWebhookType virtualWebhookType) {
            Utils.checkNotNull(virtualWebhookType, "virtualWebhookType");
            this.virtualWebhookType = Optional.ofNullable(virtualWebhookType);
            return this;
        }

        public Builder virtualWebhookType(Optional<? extends VirtualWebhookType> virtualWebhookType) {
            Utils.checkNotNull(virtualWebhookType, "virtualWebhookType");
            this.virtualWebhookType = virtualWebhookType;
            return this;
        }

        public Builder virtualWebhookUpdatedGte(VirtualWebhookUpdatedGte virtualWebhookUpdatedGte) {
            Utils.checkNotNull(virtualWebhookUpdatedGte, "virtualWebhookUpdatedGte");
            this.virtualWebhookUpdatedGte = Optional.ofNullable(virtualWebhookUpdatedGte);
            return this;
        }

        public Builder virtualWebhookUpdatedGte(Optional<? extends VirtualWebhookUpdatedGte> virtualWebhookUpdatedGte) {
            Utils.checkNotNull(virtualWebhookUpdatedGte, "virtualWebhookUpdatedGte");
            this.virtualWebhookUpdatedGte = virtualWebhookUpdatedGte;
            return this;
        }

        public Builder virtualWebhookUserId(VirtualWebhookUserId virtualWebhookUserId) {
            Utils.checkNotNull(virtualWebhookUserId, "virtualWebhookUserId");
            this.virtualWebhookUserId = Optional.ofNullable(virtualWebhookUserId);
            return this;
        }

        public Builder virtualWebhookUserId(Optional<? extends VirtualWebhookUserId> virtualWebhookUserId) {
            Utils.checkNotNull(virtualWebhookUserId, "virtualWebhookUserId");
            this.virtualWebhookUserId = virtualWebhookUserId;
            return this;
        }

        public Builder webhookEvents(PropertyIntegrationSupportWebhookEvents webhookEvents) {
            Utils.checkNotNull(webhookEvents, "webhookEvents");
            this.webhookEvents = Optional.ofNullable(webhookEvents);
            return this;
        }

        public Builder webhookEvents(Optional<? extends PropertyIntegrationSupportWebhookEvents> webhookEvents) {
            Utils.checkNotNull(webhookEvents, "webhookEvents");
            this.webhookEvents = webhookEvents;
            return this;
        }
        
        public IntegrationSupport build() {
            return new IntegrationSupport(
                fromWebhook,
                inboundFields,
                listAccountId,
                listApplicationId,
                listCandidateId,
                listChannelId,
                listClassId,
                listCollectionId,
                listCompanyId,
                listContactId,
                listCourseId,
                listCustomerId,
                listDealId,
                listInstructorId,
                listInterviewId,
                listInvoiceId,
                listItemId,
                listItemVariantId,
                listJobId,
                listLimit,
                listLinkId,
                listListId,
                listLocationId,
                listOffset,
                listOrder,
                listOrgId,
                listParentId,
                listProjectId,
                listQuery,
                listRawFields,
                listRepoId,
                listRootId,
                listSortByCreatedAt,
                listSortByName,
                listSortByUpdatedAt,
                listSpaceId,
                listStudentId,
                listTaskId,
                listTicketId,
                listType,
                listUpdatedGte,
                listUserId,
                methods,
                nativeWebhookParentId,
                nativeWebhookProjectId,
                outboundFields,
                rawObjects,
                searchDomain,
                searchEmail,
                searchLinkedinurl,
                searchName,
                searchTwitter,
                virtualWebhookChannelId,
                virtualWebhookCompanyId,
                virtualWebhookContactId,
                virtualWebhookDealId,
                virtualWebhookJobId,
                virtualWebhookLimit,
                virtualWebhookParentId,
                virtualWebhookTicketId,
                virtualWebhookType,
                virtualWebhookUpdatedGte,
                virtualWebhookUserId,
                webhookEvents);
        }
    }
}


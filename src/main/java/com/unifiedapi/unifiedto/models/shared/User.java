/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class User {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("addresses")
    private Optional<? extends List<Undefined>> addresses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("displayName")
    private Optional<String> displayName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    private Optional<? extends List<Undefined>> emails;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entitlements")
    private Optional<? extends List<Undefined>> entitlements;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("externalId")
    private Optional<String> externalId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groups")
    private Optional<? extends List<Undefined>> groups;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ims")
    private Optional<? extends List<Undefined>> ims;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locale")
    private Optional<String> locale;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    private Optional<? extends PropertyUserMeta> meta;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<? extends PropertyUserName> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("nickName")
    private Optional<String> nickName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("password")
    private Optional<String> password;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phoneNumbers")
    private Optional<? extends List<Undefined>> phoneNumbers;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("photos")
    private Optional<? extends List<Undefined>> photos;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferredLanguage")
    private Optional<String> preferredLanguage;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("profileUrl")
    private Optional<String> profileUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("roles")
    private Optional<? extends List<Undefined>> roles;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("schemas")
    private Optional<? extends List<PropertyUserSchemas>> schemas;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timezone")
    private Optional<String> timezone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urn:ietf:params:scim:schemas:extension:enterprise:2.0:User")
    private Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User")
    private Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("urn:ietf:params:scim:schemas:extension:peakon:2.0:User")
    private Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userName")
    private Optional<String> userName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("userType")
    private Optional<String> userType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x509Certificates")
    private Optional<? extends List<Undefined>> x509Certificates;

    @JsonCreator
    public User(
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("addresses") Optional<? extends List<Undefined>> addresses,
            @JsonProperty("displayName") Optional<String> displayName,
            @JsonProperty("emails") Optional<? extends List<Undefined>> emails,
            @JsonProperty("entitlements") Optional<? extends List<Undefined>> entitlements,
            @JsonProperty("externalId") Optional<String> externalId,
            @JsonProperty("groups") Optional<? extends List<Undefined>> groups,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("ims") Optional<? extends List<Undefined>> ims,
            @JsonProperty("locale") Optional<String> locale,
            @JsonProperty("meta") Optional<? extends PropertyUserMeta> meta,
            @JsonProperty("name") Optional<? extends PropertyUserName> name,
            @JsonProperty("nickName") Optional<String> nickName,
            @JsonProperty("password") Optional<String> password,
            @JsonProperty("phoneNumbers") Optional<? extends List<Undefined>> phoneNumbers,
            @JsonProperty("photos") Optional<? extends List<Undefined>> photos,
            @JsonProperty("preferredLanguage") Optional<String> preferredLanguage,
            @JsonProperty("profileUrl") Optional<String> profileUrl,
            @JsonProperty("roles") Optional<? extends List<Undefined>> roles,
            @JsonProperty("schemas") Optional<? extends List<PropertyUserSchemas>> schemas,
            @JsonProperty("timezone") Optional<String> timezone,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("urn:ietf:params:scim:schemas:extension:enterprise:2.0:User") Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User,
            @JsonProperty("urn:ietf:params:scim:schemas:extension:lattice:attributes:1.0:User") Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User,
            @JsonProperty("urn:ietf:params:scim:schemas:extension:peakon:2.0:User") Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User,
            @JsonProperty("userName") Optional<String> userName,
            @JsonProperty("userType") Optional<String> userType,
            @JsonProperty("x509Certificates") Optional<? extends List<Undefined>> x509Certificates) {
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(addresses, "addresses");
        Utils.checkNotNull(displayName, "displayName");
        Utils.checkNotNull(emails, "emails");
        Utils.checkNotNull(entitlements, "entitlements");
        Utils.checkNotNull(externalId, "externalId");
        Utils.checkNotNull(groups, "groups");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(ims, "ims");
        Utils.checkNotNull(locale, "locale");
        Utils.checkNotNull(meta, "meta");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(nickName, "nickName");
        Utils.checkNotNull(password, "password");
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        Utils.checkNotNull(photos, "photos");
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        Utils.checkNotNull(profileUrl, "profileUrl");
        Utils.checkNotNull(roles, "roles");
        Utils.checkNotNull(schemas, "schemas");
        Utils.checkNotNull(timezone, "timezone");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
        Utils.checkNotNull(userName, "userName");
        Utils.checkNotNull(userType, "userType");
        Utils.checkNotNull(x509Certificates, "x509Certificates");
        this.active = active;
        this.addresses = addresses;
        this.displayName = displayName;
        this.emails = emails;
        this.entitlements = entitlements;
        this.externalId = externalId;
        this.groups = groups;
        this.id = id;
        this.ims = ims;
        this.locale = locale;
        this.meta = meta;
        this.name = name;
        this.nickName = nickName;
        this.password = password;
        this.phoneNumbers = phoneNumbers;
        this.photos = photos;
        this.preferredLanguage = preferredLanguage;
        this.profileUrl = profileUrl;
        this.roles = roles;
        this.schemas = schemas;
        this.timezone = timezone;
        this.title = title;
        this.urnIetfParamsScimSchemasExtensionEnterprise20User = urnIetfParamsScimSchemasExtensionEnterprise20User;
        this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = urnIetfParamsScimSchemasExtensionLatticeAttributes10User;
        this.urnIetfParamsScimSchemasExtensionPeakon20User = urnIetfParamsScimSchemasExtensionPeakon20User;
        this.userName = userName;
        this.userType = userType;
        this.x509Certificates = x509Certificates;
    }
    
    public User() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Undefined>> addresses() {
        return (Optional<List<Undefined>>) addresses;
    }

    @JsonIgnore
    public Optional<String> displayName() {
        return displayName;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Undefined>> emails() {
        return (Optional<List<Undefined>>) emails;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Undefined>> entitlements() {
        return (Optional<List<Undefined>>) entitlements;
    }

    @JsonIgnore
    public Optional<String> externalId() {
        return externalId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Undefined>> groups() {
        return (Optional<List<Undefined>>) groups;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Undefined>> ims() {
        return (Optional<List<Undefined>>) ims;
    }

    @JsonIgnore
    public Optional<String> locale() {
        return locale;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyUserMeta> meta() {
        return (Optional<PropertyUserMeta>) meta;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyUserName> name() {
        return (Optional<PropertyUserName>) name;
    }

    @JsonIgnore
    public Optional<String> nickName() {
        return nickName;
    }

    @JsonIgnore
    public Optional<String> password() {
        return password;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Undefined>> phoneNumbers() {
        return (Optional<List<Undefined>>) phoneNumbers;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Undefined>> photos() {
        return (Optional<List<Undefined>>) photos;
    }

    @JsonIgnore
    public Optional<String> preferredLanguage() {
        return preferredLanguage;
    }

    @JsonIgnore
    public Optional<String> profileUrl() {
        return profileUrl;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Undefined>> roles() {
        return (Optional<List<Undefined>>) roles;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyUserSchemas>> schemas() {
        return (Optional<List<PropertyUserSchemas>>) schemas;
    }

    @JsonIgnore
    public Optional<String> timezone() {
        return timezone;
    }

    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User() {
        return (Optional<PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User>) urnIetfParamsScimSchemasExtensionEnterprise20User;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User() {
        return (Optional<PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User>) urnIetfParamsScimSchemasExtensionLatticeAttributes10User;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User() {
        return (Optional<PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User>) urnIetfParamsScimSchemasExtensionPeakon20User;
    }

    @JsonIgnore
    public Optional<String> userName() {
        return userName;
    }

    @JsonIgnore
    public Optional<String> userType() {
        return userType;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Undefined>> x509Certificates() {
        return (Optional<List<Undefined>>) x509Certificates;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public User withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    public User withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    public User withAddresses(List<Undefined> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = Optional.ofNullable(addresses);
        return this;
    }

    public User withAddresses(Optional<? extends List<Undefined>> addresses) {
        Utils.checkNotNull(addresses, "addresses");
        this.addresses = addresses;
        return this;
    }

    public User withDisplayName(String displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = Optional.ofNullable(displayName);
        return this;
    }

    public User withDisplayName(Optional<String> displayName) {
        Utils.checkNotNull(displayName, "displayName");
        this.displayName = displayName;
        return this;
    }

    public User withEmails(List<Undefined> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = Optional.ofNullable(emails);
        return this;
    }

    public User withEmails(Optional<? extends List<Undefined>> emails) {
        Utils.checkNotNull(emails, "emails");
        this.emails = emails;
        return this;
    }

    public User withEntitlements(List<Undefined> entitlements) {
        Utils.checkNotNull(entitlements, "entitlements");
        this.entitlements = Optional.ofNullable(entitlements);
        return this;
    }

    public User withEntitlements(Optional<? extends List<Undefined>> entitlements) {
        Utils.checkNotNull(entitlements, "entitlements");
        this.entitlements = entitlements;
        return this;
    }

    public User withExternalId(String externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = Optional.ofNullable(externalId);
        return this;
    }

    public User withExternalId(Optional<String> externalId) {
        Utils.checkNotNull(externalId, "externalId");
        this.externalId = externalId;
        return this;
    }

    public User withGroups(List<Undefined> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = Optional.ofNullable(groups);
        return this;
    }

    public User withGroups(Optional<? extends List<Undefined>> groups) {
        Utils.checkNotNull(groups, "groups");
        this.groups = groups;
        return this;
    }

    public User withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public User withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public User withIms(List<Undefined> ims) {
        Utils.checkNotNull(ims, "ims");
        this.ims = Optional.ofNullable(ims);
        return this;
    }

    public User withIms(Optional<? extends List<Undefined>> ims) {
        Utils.checkNotNull(ims, "ims");
        this.ims = ims;
        return this;
    }

    public User withLocale(String locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = Optional.ofNullable(locale);
        return this;
    }

    public User withLocale(Optional<String> locale) {
        Utils.checkNotNull(locale, "locale");
        this.locale = locale;
        return this;
    }

    public User withMeta(PropertyUserMeta meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = Optional.ofNullable(meta);
        return this;
    }

    public User withMeta(Optional<? extends PropertyUserMeta> meta) {
        Utils.checkNotNull(meta, "meta");
        this.meta = meta;
        return this;
    }

    public User withName(PropertyUserName name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public User withName(Optional<? extends PropertyUserName> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public User withNickName(String nickName) {
        Utils.checkNotNull(nickName, "nickName");
        this.nickName = Optional.ofNullable(nickName);
        return this;
    }

    public User withNickName(Optional<String> nickName) {
        Utils.checkNotNull(nickName, "nickName");
        this.nickName = nickName;
        return this;
    }

    public User withPassword(String password) {
        Utils.checkNotNull(password, "password");
        this.password = Optional.ofNullable(password);
        return this;
    }

    public User withPassword(Optional<String> password) {
        Utils.checkNotNull(password, "password");
        this.password = password;
        return this;
    }

    public User withPhoneNumbers(List<Undefined> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = Optional.ofNullable(phoneNumbers);
        return this;
    }

    public User withPhoneNumbers(Optional<? extends List<Undefined>> phoneNumbers) {
        Utils.checkNotNull(phoneNumbers, "phoneNumbers");
        this.phoneNumbers = phoneNumbers;
        return this;
    }

    public User withPhotos(List<Undefined> photos) {
        Utils.checkNotNull(photos, "photos");
        this.photos = Optional.ofNullable(photos);
        return this;
    }

    public User withPhotos(Optional<? extends List<Undefined>> photos) {
        Utils.checkNotNull(photos, "photos");
        this.photos = photos;
        return this;
    }

    public User withPreferredLanguage(String preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = Optional.ofNullable(preferredLanguage);
        return this;
    }

    public User withPreferredLanguage(Optional<String> preferredLanguage) {
        Utils.checkNotNull(preferredLanguage, "preferredLanguage");
        this.preferredLanguage = preferredLanguage;
        return this;
    }

    public User withProfileUrl(String profileUrl) {
        Utils.checkNotNull(profileUrl, "profileUrl");
        this.profileUrl = Optional.ofNullable(profileUrl);
        return this;
    }

    public User withProfileUrl(Optional<String> profileUrl) {
        Utils.checkNotNull(profileUrl, "profileUrl");
        this.profileUrl = profileUrl;
        return this;
    }

    public User withRoles(List<Undefined> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = Optional.ofNullable(roles);
        return this;
    }

    public User withRoles(Optional<? extends List<Undefined>> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    public User withSchemas(List<PropertyUserSchemas> schemas) {
        Utils.checkNotNull(schemas, "schemas");
        this.schemas = Optional.ofNullable(schemas);
        return this;
    }

    public User withSchemas(Optional<? extends List<PropertyUserSchemas>> schemas) {
        Utils.checkNotNull(schemas, "schemas");
        this.schemas = schemas;
        return this;
    }

    public User withTimezone(String timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = Optional.ofNullable(timezone);
        return this;
    }

    public User withTimezone(Optional<String> timezone) {
        Utils.checkNotNull(timezone, "timezone");
        this.timezone = timezone;
        return this;
    }

    public User withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    public User withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public User withUrnIetfParamsScimSchemasExtensionEnterprise20User(PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User urnIetfParamsScimSchemasExtensionEnterprise20User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
        this.urnIetfParamsScimSchemasExtensionEnterprise20User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionEnterprise20User);
        return this;
    }

    public User withUrnIetfParamsScimSchemasExtensionEnterprise20User(Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
        this.urnIetfParamsScimSchemasExtensionEnterprise20User = urnIetfParamsScimSchemasExtensionEnterprise20User;
        return this;
    }

    public User withUrnIetfParamsScimSchemasExtensionLatticeAttributes10User(PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User urnIetfParamsScimSchemasExtensionLatticeAttributes10User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
        this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionLatticeAttributes10User);
        return this;
    }

    public User withUrnIetfParamsScimSchemasExtensionLatticeAttributes10User(Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
        this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = urnIetfParamsScimSchemasExtensionLatticeAttributes10User;
        return this;
    }

    public User withUrnIetfParamsScimSchemasExtensionPeakon20User(PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User urnIetfParamsScimSchemasExtensionPeakon20User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
        this.urnIetfParamsScimSchemasExtensionPeakon20User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionPeakon20User);
        return this;
    }

    public User withUrnIetfParamsScimSchemasExtensionPeakon20User(Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User) {
        Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
        this.urnIetfParamsScimSchemasExtensionPeakon20User = urnIetfParamsScimSchemasExtensionPeakon20User;
        return this;
    }

    public User withUserName(String userName) {
        Utils.checkNotNull(userName, "userName");
        this.userName = Optional.ofNullable(userName);
        return this;
    }

    public User withUserName(Optional<String> userName) {
        Utils.checkNotNull(userName, "userName");
        this.userName = userName;
        return this;
    }

    public User withUserType(String userType) {
        Utils.checkNotNull(userType, "userType");
        this.userType = Optional.ofNullable(userType);
        return this;
    }

    public User withUserType(Optional<String> userType) {
        Utils.checkNotNull(userType, "userType");
        this.userType = userType;
        return this;
    }

    public User withX509Certificates(List<Undefined> x509Certificates) {
        Utils.checkNotNull(x509Certificates, "x509Certificates");
        this.x509Certificates = Optional.ofNullable(x509Certificates);
        return this;
    }

    public User withX509Certificates(Optional<? extends List<Undefined>> x509Certificates) {
        Utils.checkNotNull(x509Certificates, "x509Certificates");
        this.x509Certificates = x509Certificates;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.addresses, other.addresses) &&
            Objects.deepEquals(this.displayName, other.displayName) &&
            Objects.deepEquals(this.emails, other.emails) &&
            Objects.deepEquals(this.entitlements, other.entitlements) &&
            Objects.deepEquals(this.externalId, other.externalId) &&
            Objects.deepEquals(this.groups, other.groups) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.ims, other.ims) &&
            Objects.deepEquals(this.locale, other.locale) &&
            Objects.deepEquals(this.meta, other.meta) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.nickName, other.nickName) &&
            Objects.deepEquals(this.password, other.password) &&
            Objects.deepEquals(this.phoneNumbers, other.phoneNumbers) &&
            Objects.deepEquals(this.photos, other.photos) &&
            Objects.deepEquals(this.preferredLanguage, other.preferredLanguage) &&
            Objects.deepEquals(this.profileUrl, other.profileUrl) &&
            Objects.deepEquals(this.roles, other.roles) &&
            Objects.deepEquals(this.schemas, other.schemas) &&
            Objects.deepEquals(this.timezone, other.timezone) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.urnIetfParamsScimSchemasExtensionEnterprise20User, other.urnIetfParamsScimSchemasExtensionEnterprise20User) &&
            Objects.deepEquals(this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User, other.urnIetfParamsScimSchemasExtensionLatticeAttributes10User) &&
            Objects.deepEquals(this.urnIetfParamsScimSchemasExtensionPeakon20User, other.urnIetfParamsScimSchemasExtensionPeakon20User) &&
            Objects.deepEquals(this.userName, other.userName) &&
            Objects.deepEquals(this.userType, other.userType) &&
            Objects.deepEquals(this.x509Certificates, other.x509Certificates);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            active,
            addresses,
            displayName,
            emails,
            entitlements,
            externalId,
            groups,
            id,
            ims,
            locale,
            meta,
            name,
            nickName,
            password,
            phoneNumbers,
            photos,
            preferredLanguage,
            profileUrl,
            roles,
            schemas,
            timezone,
            title,
            urnIetfParamsScimSchemasExtensionEnterprise20User,
            urnIetfParamsScimSchemasExtensionLatticeAttributes10User,
            urnIetfParamsScimSchemasExtensionPeakon20User,
            userName,
            userType,
            x509Certificates);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "active", active,
                "addresses", addresses,
                "displayName", displayName,
                "emails", emails,
                "entitlements", entitlements,
                "externalId", externalId,
                "groups", groups,
                "id", id,
                "ims", ims,
                "locale", locale,
                "meta", meta,
                "name", name,
                "nickName", nickName,
                "password", password,
                "phoneNumbers", phoneNumbers,
                "photos", photos,
                "preferredLanguage", preferredLanguage,
                "profileUrl", profileUrl,
                "roles", roles,
                "schemas", schemas,
                "timezone", timezone,
                "title", title,
                "urnIetfParamsScimSchemasExtensionEnterprise20User", urnIetfParamsScimSchemasExtensionEnterprise20User,
                "urnIetfParamsScimSchemasExtensionLatticeAttributes10User", urnIetfParamsScimSchemasExtensionLatticeAttributes10User,
                "urnIetfParamsScimSchemasExtensionPeakon20User", urnIetfParamsScimSchemasExtensionPeakon20User,
                "userName", userName,
                "userType", userType,
                "x509Certificates", x509Certificates);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> active = Optional.empty();
 
        private Optional<? extends List<Undefined>> addresses = Optional.empty();
 
        private Optional<String> displayName = Optional.empty();
 
        private Optional<? extends List<Undefined>> emails = Optional.empty();
 
        private Optional<? extends List<Undefined>> entitlements = Optional.empty();
 
        private Optional<String> externalId = Optional.empty();
 
        private Optional<? extends List<Undefined>> groups = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends List<Undefined>> ims = Optional.empty();
 
        private Optional<String> locale = Optional.empty();
 
        private Optional<? extends PropertyUserMeta> meta = Optional.empty();
 
        private Optional<? extends PropertyUserName> name = Optional.empty();
 
        private Optional<String> nickName = Optional.empty();
 
        private Optional<String> password = Optional.empty();
 
        private Optional<? extends List<Undefined>> phoneNumbers = Optional.empty();
 
        private Optional<? extends List<Undefined>> photos = Optional.empty();
 
        private Optional<String> preferredLanguage = Optional.empty();
 
        private Optional<String> profileUrl = Optional.empty();
 
        private Optional<? extends List<Undefined>> roles = Optional.empty();
 
        private Optional<? extends List<PropertyUserSchemas>> schemas = Optional.empty();
 
        private Optional<String> timezone = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User = Optional.empty();
 
        private Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User = Optional.empty();
 
        private Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User = Optional.empty();
 
        private Optional<String> userName = Optional.empty();
 
        private Optional<String> userType = Optional.empty();
 
        private Optional<? extends List<Undefined>> x509Certificates = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        public Builder addresses(List<Undefined> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = Optional.ofNullable(addresses);
            return this;
        }

        public Builder addresses(Optional<? extends List<Undefined>> addresses) {
            Utils.checkNotNull(addresses, "addresses");
            this.addresses = addresses;
            return this;
        }

        public Builder displayName(String displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = Optional.ofNullable(displayName);
            return this;
        }

        public Builder displayName(Optional<String> displayName) {
            Utils.checkNotNull(displayName, "displayName");
            this.displayName = displayName;
            return this;
        }

        public Builder emails(List<Undefined> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = Optional.ofNullable(emails);
            return this;
        }

        public Builder emails(Optional<? extends List<Undefined>> emails) {
            Utils.checkNotNull(emails, "emails");
            this.emails = emails;
            return this;
        }

        public Builder entitlements(List<Undefined> entitlements) {
            Utils.checkNotNull(entitlements, "entitlements");
            this.entitlements = Optional.ofNullable(entitlements);
            return this;
        }

        public Builder entitlements(Optional<? extends List<Undefined>> entitlements) {
            Utils.checkNotNull(entitlements, "entitlements");
            this.entitlements = entitlements;
            return this;
        }

        public Builder externalId(String externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = Optional.ofNullable(externalId);
            return this;
        }

        public Builder externalId(Optional<String> externalId) {
            Utils.checkNotNull(externalId, "externalId");
            this.externalId = externalId;
            return this;
        }

        public Builder groups(List<Undefined> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = Optional.ofNullable(groups);
            return this;
        }

        public Builder groups(Optional<? extends List<Undefined>> groups) {
            Utils.checkNotNull(groups, "groups");
            this.groups = groups;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder ims(List<Undefined> ims) {
            Utils.checkNotNull(ims, "ims");
            this.ims = Optional.ofNullable(ims);
            return this;
        }

        public Builder ims(Optional<? extends List<Undefined>> ims) {
            Utils.checkNotNull(ims, "ims");
            this.ims = ims;
            return this;
        }

        public Builder locale(String locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = Optional.ofNullable(locale);
            return this;
        }

        public Builder locale(Optional<String> locale) {
            Utils.checkNotNull(locale, "locale");
            this.locale = locale;
            return this;
        }

        public Builder meta(PropertyUserMeta meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = Optional.ofNullable(meta);
            return this;
        }

        public Builder meta(Optional<? extends PropertyUserMeta> meta) {
            Utils.checkNotNull(meta, "meta");
            this.meta = meta;
            return this;
        }

        public Builder name(PropertyUserName name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<? extends PropertyUserName> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder nickName(String nickName) {
            Utils.checkNotNull(nickName, "nickName");
            this.nickName = Optional.ofNullable(nickName);
            return this;
        }

        public Builder nickName(Optional<String> nickName) {
            Utils.checkNotNull(nickName, "nickName");
            this.nickName = nickName;
            return this;
        }

        public Builder password(String password) {
            Utils.checkNotNull(password, "password");
            this.password = Optional.ofNullable(password);
            return this;
        }

        public Builder password(Optional<String> password) {
            Utils.checkNotNull(password, "password");
            this.password = password;
            return this;
        }

        public Builder phoneNumbers(List<Undefined> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = Optional.ofNullable(phoneNumbers);
            return this;
        }

        public Builder phoneNumbers(Optional<? extends List<Undefined>> phoneNumbers) {
            Utils.checkNotNull(phoneNumbers, "phoneNumbers");
            this.phoneNumbers = phoneNumbers;
            return this;
        }

        public Builder photos(List<Undefined> photos) {
            Utils.checkNotNull(photos, "photos");
            this.photos = Optional.ofNullable(photos);
            return this;
        }

        public Builder photos(Optional<? extends List<Undefined>> photos) {
            Utils.checkNotNull(photos, "photos");
            this.photos = photos;
            return this;
        }

        public Builder preferredLanguage(String preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = Optional.ofNullable(preferredLanguage);
            return this;
        }

        public Builder preferredLanguage(Optional<String> preferredLanguage) {
            Utils.checkNotNull(preferredLanguage, "preferredLanguage");
            this.preferredLanguage = preferredLanguage;
            return this;
        }

        public Builder profileUrl(String profileUrl) {
            Utils.checkNotNull(profileUrl, "profileUrl");
            this.profileUrl = Optional.ofNullable(profileUrl);
            return this;
        }

        public Builder profileUrl(Optional<String> profileUrl) {
            Utils.checkNotNull(profileUrl, "profileUrl");
            this.profileUrl = profileUrl;
            return this;
        }

        public Builder roles(List<Undefined> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = Optional.ofNullable(roles);
            return this;
        }

        public Builder roles(Optional<? extends List<Undefined>> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }

        public Builder schemas(List<PropertyUserSchemas> schemas) {
            Utils.checkNotNull(schemas, "schemas");
            this.schemas = Optional.ofNullable(schemas);
            return this;
        }

        public Builder schemas(Optional<? extends List<PropertyUserSchemas>> schemas) {
            Utils.checkNotNull(schemas, "schemas");
            this.schemas = schemas;
            return this;
        }

        public Builder timezone(String timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = Optional.ofNullable(timezone);
            return this;
        }

        public Builder timezone(Optional<String> timezone) {
            Utils.checkNotNull(timezone, "timezone");
            this.timezone = timezone;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionEnterprise20User(PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User urnIetfParamsScimSchemasExtensionEnterprise20User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
            this.urnIetfParamsScimSchemasExtensionEnterprise20User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionEnterprise20User);
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionEnterprise20User(Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionEnterprise20User> urnIetfParamsScimSchemasExtensionEnterprise20User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionEnterprise20User, "urnIetfParamsScimSchemasExtensionEnterprise20User");
            this.urnIetfParamsScimSchemasExtensionEnterprise20User = urnIetfParamsScimSchemasExtensionEnterprise20User;
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionLatticeAttributes10User(PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User urnIetfParamsScimSchemasExtensionLatticeAttributes10User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
            this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionLatticeAttributes10User);
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionLatticeAttributes10User(Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User> urnIetfParamsScimSchemasExtensionLatticeAttributes10User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionLatticeAttributes10User, "urnIetfParamsScimSchemasExtensionLatticeAttributes10User");
            this.urnIetfParamsScimSchemasExtensionLatticeAttributes10User = urnIetfParamsScimSchemasExtensionLatticeAttributes10User;
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionPeakon20User(PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User urnIetfParamsScimSchemasExtensionPeakon20User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
            this.urnIetfParamsScimSchemasExtensionPeakon20User = Optional.ofNullable(urnIetfParamsScimSchemasExtensionPeakon20User);
            return this;
        }

        public Builder urnIetfParamsScimSchemasExtensionPeakon20User(Optional<? extends PropertyUserUrnIetfParamsScimSchemasExtensionPeakon20User> urnIetfParamsScimSchemasExtensionPeakon20User) {
            Utils.checkNotNull(urnIetfParamsScimSchemasExtensionPeakon20User, "urnIetfParamsScimSchemasExtensionPeakon20User");
            this.urnIetfParamsScimSchemasExtensionPeakon20User = urnIetfParamsScimSchemasExtensionPeakon20User;
            return this;
        }

        public Builder userName(String userName) {
            Utils.checkNotNull(userName, "userName");
            this.userName = Optional.ofNullable(userName);
            return this;
        }

        public Builder userName(Optional<String> userName) {
            Utils.checkNotNull(userName, "userName");
            this.userName = userName;
            return this;
        }

        public Builder userType(String userType) {
            Utils.checkNotNull(userType, "userType");
            this.userType = Optional.ofNullable(userType);
            return this;
        }

        public Builder userType(Optional<String> userType) {
            Utils.checkNotNull(userType, "userType");
            this.userType = userType;
            return this;
        }

        public Builder x509Certificates(List<Undefined> x509Certificates) {
            Utils.checkNotNull(x509Certificates, "x509Certificates");
            this.x509Certificates = Optional.ofNullable(x509Certificates);
            return this;
        }

        public Builder x509Certificates(Optional<? extends List<Undefined>> x509Certificates) {
            Utils.checkNotNull(x509Certificates, "x509Certificates");
            this.x509Certificates = x509Certificates;
            return this;
        }
        
        public User build() {
            return new User(
                active,
                addresses,
                displayName,
                emails,
                entitlements,
                externalId,
                groups,
                id,
                ims,
                locale,
                meta,
                name,
                nickName,
                password,
                phoneNumbers,
                photos,
                preferredLanguage,
                profileUrl,
                roles,
                schemas,
                timezone,
                title,
                urnIetfParamsScimSchemasExtensionEnterprise20User,
                urnIetfParamsScimSchemasExtensionLatticeAttributes10User,
                urnIetfParamsScimSchemasExtensionPeakon20User,
                userName,
                userType,
                x509Certificates);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Boolean;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class KmsPage {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonProperty("download_url")
    private String downloadUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_children")
    private Optional<Boolean> hasChildren;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    private Optional<Boolean> isActive;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends List<KmsPageMetadata>> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_page_id")
    private Optional<String> parentPageId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonProperty("space_id")
    private String spaceId;

    @JsonProperty("title")
    private String title;

    @JsonProperty("type")
    private KmsPageType type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    @JsonCreator
    public KmsPage(
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("download_url") String downloadUrl,
            @JsonProperty("has_children") Optional<Boolean> hasChildren,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("is_active") Optional<Boolean> isActive,
            @JsonProperty("metadata") Optional<? extends List<KmsPageMetadata>> metadata,
            @JsonProperty("parent_page_id") Optional<String> parentPageId,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("space_id") String spaceId,
            @JsonProperty("title") String title,
            @JsonProperty("type") KmsPageType type,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("user_id") Optional<String> userId) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        Utils.checkNotNull(hasChildren, "hasChildren");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(parentPageId, "parentPageId");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(spaceId, "spaceId");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userId, "userId");
        this.createdAt = createdAt;
        this.downloadUrl = downloadUrl;
        this.hasChildren = hasChildren;
        this.id = id;
        this.isActive = isActive;
        this.metadata = metadata;
        this.parentPageId = parentPageId;
        this.raw = raw;
        this.spaceId = spaceId;
        this.title = title;
        this.type = type;
        this.updatedAt = updatedAt;
        this.userId = userId;
    }
    
    public KmsPage(
            String downloadUrl,
            String spaceId,
            String title,
            KmsPageType type) {
        this(Optional.empty(), downloadUrl, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), spaceId, title, type, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public String downloadUrl() {
        return downloadUrl;
    }

    @JsonIgnore
    public Optional<Boolean> hasChildren() {
        return hasChildren;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isActive() {
        return isActive;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<KmsPageMetadata>> metadata() {
        return (Optional<List<KmsPageMetadata>>) metadata;
    }

    @JsonIgnore
    public Optional<String> parentPageId() {
        return parentPageId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @JsonIgnore
    public String spaceId() {
        return spaceId;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    @JsonIgnore
    public KmsPageType type() {
        return type;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public KmsPage withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public KmsPage withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public KmsPage withDownloadUrl(String downloadUrl) {
        Utils.checkNotNull(downloadUrl, "downloadUrl");
        this.downloadUrl = downloadUrl;
        return this;
    }

    public KmsPage withHasChildren(boolean hasChildren) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        this.hasChildren = Optional.ofNullable(hasChildren);
        return this;
    }

    public KmsPage withHasChildren(Optional<Boolean> hasChildren) {
        Utils.checkNotNull(hasChildren, "hasChildren");
        this.hasChildren = hasChildren;
        return this;
    }

    public KmsPage withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public KmsPage withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public KmsPage withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }

    public KmsPage withIsActive(Optional<Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    public KmsPage withMetadata(List<KmsPageMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public KmsPage withMetadata(Optional<? extends List<KmsPageMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public KmsPage withParentPageId(String parentPageId) {
        Utils.checkNotNull(parentPageId, "parentPageId");
        this.parentPageId = Optional.ofNullable(parentPageId);
        return this;
    }

    public KmsPage withParentPageId(Optional<String> parentPageId) {
        Utils.checkNotNull(parentPageId, "parentPageId");
        this.parentPageId = parentPageId;
        return this;
    }

    public KmsPage withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public KmsPage withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public KmsPage withSpaceId(String spaceId) {
        Utils.checkNotNull(spaceId, "spaceId");
        this.spaceId = spaceId;
        return this;
    }

    public KmsPage withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public KmsPage withType(KmsPageType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public KmsPage withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public KmsPage withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public KmsPage withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    public KmsPage withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KmsPage other = (KmsPage) o;
        return 
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.downloadUrl, other.downloadUrl) &&
            Objects.deepEquals(this.hasChildren, other.hasChildren) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.isActive, other.isActive) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.parentPageId, other.parentPageId) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.spaceId, other.spaceId) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            createdAt,
            downloadUrl,
            hasChildren,
            id,
            isActive,
            metadata,
            parentPageId,
            raw,
            spaceId,
            title,
            type,
            updatedAt,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(KmsPage.class,
                "createdAt", createdAt,
                "downloadUrl", downloadUrl,
                "hasChildren", hasChildren,
                "id", id,
                "isActive", isActive,
                "metadata", metadata,
                "parentPageId", parentPageId,
                "raw", raw,
                "spaceId", spaceId,
                "title", title,
                "type", type,
                "updatedAt", updatedAt,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private String downloadUrl;
 
        private Optional<Boolean> hasChildren = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Boolean> isActive = Optional.empty();
 
        private Optional<? extends List<KmsPageMetadata>> metadata = Optional.empty();
 
        private Optional<String> parentPageId = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private String spaceId;
 
        private String title;
 
        private KmsPageType type;
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<String> userId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder downloadUrl(String downloadUrl) {
            Utils.checkNotNull(downloadUrl, "downloadUrl");
            this.downloadUrl = downloadUrl;
            return this;
        }

        public Builder hasChildren(boolean hasChildren) {
            Utils.checkNotNull(hasChildren, "hasChildren");
            this.hasChildren = Optional.ofNullable(hasChildren);
            return this;
        }

        public Builder hasChildren(Optional<Boolean> hasChildren) {
            Utils.checkNotNull(hasChildren, "hasChildren");
            this.hasChildren = hasChildren;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        public Builder isActive(Optional<Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }

        public Builder metadata(List<KmsPageMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends List<KmsPageMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder parentPageId(String parentPageId) {
            Utils.checkNotNull(parentPageId, "parentPageId");
            this.parentPageId = Optional.ofNullable(parentPageId);
            return this;
        }

        public Builder parentPageId(Optional<String> parentPageId) {
            Utils.checkNotNull(parentPageId, "parentPageId");
            this.parentPageId = parentPageId;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder spaceId(String spaceId) {
            Utils.checkNotNull(spaceId, "spaceId");
            this.spaceId = spaceId;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder type(KmsPageType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public KmsPage build() {
            return new KmsPage(
                createdAt,
                downloadUrl,
                hasChildren,
                id,
                isActive,
                metadata,
                parentPageId,
                raw,
                spaceId,
                title,
                type,
                updatedAt,
                userId);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class PropertyScimUserName {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("familyName")
    private Optional<String> familyName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("formatted")
    private Optional<String> formatted;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("givenName")
    private Optional<String> givenName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("honorificPrefix")
    private Optional<String> honorificPrefix;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("honorificSuffix")
    private Optional<String> honorificSuffix;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middleName")
    private Optional<String> middleName;

    @JsonCreator
    public PropertyScimUserName(
            @JsonProperty("familyName") Optional<String> familyName,
            @JsonProperty("formatted") Optional<String> formatted,
            @JsonProperty("givenName") Optional<String> givenName,
            @JsonProperty("honorificPrefix") Optional<String> honorificPrefix,
            @JsonProperty("honorificSuffix") Optional<String> honorificSuffix,
            @JsonProperty("middleName") Optional<String> middleName) {
        Utils.checkNotNull(familyName, "familyName");
        Utils.checkNotNull(formatted, "formatted");
        Utils.checkNotNull(givenName, "givenName");
        Utils.checkNotNull(honorificPrefix, "honorificPrefix");
        Utils.checkNotNull(honorificSuffix, "honorificSuffix");
        Utils.checkNotNull(middleName, "middleName");
        this.familyName = familyName;
        this.formatted = formatted;
        this.givenName = givenName;
        this.honorificPrefix = honorificPrefix;
        this.honorificSuffix = honorificSuffix;
        this.middleName = middleName;
    }
    
    public PropertyScimUserName() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> familyName() {
        return familyName;
    }

    @JsonIgnore
    public Optional<String> formatted() {
        return formatted;
    }

    @JsonIgnore
    public Optional<String> givenName() {
        return givenName;
    }

    @JsonIgnore
    public Optional<String> honorificPrefix() {
        return honorificPrefix;
    }

    @JsonIgnore
    public Optional<String> honorificSuffix() {
        return honorificSuffix;
    }

    @JsonIgnore
    public Optional<String> middleName() {
        return middleName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PropertyScimUserName withFamilyName(String familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = Optional.ofNullable(familyName);
        return this;
    }

    public PropertyScimUserName withFamilyName(Optional<String> familyName) {
        Utils.checkNotNull(familyName, "familyName");
        this.familyName = familyName;
        return this;
    }

    public PropertyScimUserName withFormatted(String formatted) {
        Utils.checkNotNull(formatted, "formatted");
        this.formatted = Optional.ofNullable(formatted);
        return this;
    }

    public PropertyScimUserName withFormatted(Optional<String> formatted) {
        Utils.checkNotNull(formatted, "formatted");
        this.formatted = formatted;
        return this;
    }

    public PropertyScimUserName withGivenName(String givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = Optional.ofNullable(givenName);
        return this;
    }

    public PropertyScimUserName withGivenName(Optional<String> givenName) {
        Utils.checkNotNull(givenName, "givenName");
        this.givenName = givenName;
        return this;
    }

    public PropertyScimUserName withHonorificPrefix(String honorificPrefix) {
        Utils.checkNotNull(honorificPrefix, "honorificPrefix");
        this.honorificPrefix = Optional.ofNullable(honorificPrefix);
        return this;
    }

    public PropertyScimUserName withHonorificPrefix(Optional<String> honorificPrefix) {
        Utils.checkNotNull(honorificPrefix, "honorificPrefix");
        this.honorificPrefix = honorificPrefix;
        return this;
    }

    public PropertyScimUserName withHonorificSuffix(String honorificSuffix) {
        Utils.checkNotNull(honorificSuffix, "honorificSuffix");
        this.honorificSuffix = Optional.ofNullable(honorificSuffix);
        return this;
    }

    public PropertyScimUserName withHonorificSuffix(Optional<String> honorificSuffix) {
        Utils.checkNotNull(honorificSuffix, "honorificSuffix");
        this.honorificSuffix = honorificSuffix;
        return this;
    }

    public PropertyScimUserName withMiddleName(String middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = Optional.ofNullable(middleName);
        return this;
    }

    public PropertyScimUserName withMiddleName(Optional<String> middleName) {
        Utils.checkNotNull(middleName, "middleName");
        this.middleName = middleName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyScimUserName other = (PropertyScimUserName) o;
        return 
            Objects.deepEquals(this.familyName, other.familyName) &&
            Objects.deepEquals(this.formatted, other.formatted) &&
            Objects.deepEquals(this.givenName, other.givenName) &&
            Objects.deepEquals(this.honorificPrefix, other.honorificPrefix) &&
            Objects.deepEquals(this.honorificSuffix, other.honorificSuffix) &&
            Objects.deepEquals(this.middleName, other.middleName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            familyName,
            formatted,
            givenName,
            honorificPrefix,
            honorificSuffix,
            middleName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyScimUserName.class,
                "familyName", familyName,
                "formatted", formatted,
                "givenName", givenName,
                "honorificPrefix", honorificPrefix,
                "honorificSuffix", honorificSuffix,
                "middleName", middleName);
    }
    
    public final static class Builder {
 
        private Optional<String> familyName = Optional.empty();
 
        private Optional<String> formatted = Optional.empty();
 
        private Optional<String> givenName = Optional.empty();
 
        private Optional<String> honorificPrefix = Optional.empty();
 
        private Optional<String> honorificSuffix = Optional.empty();
 
        private Optional<String> middleName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder familyName(String familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = Optional.ofNullable(familyName);
            return this;
        }

        public Builder familyName(Optional<String> familyName) {
            Utils.checkNotNull(familyName, "familyName");
            this.familyName = familyName;
            return this;
        }

        public Builder formatted(String formatted) {
            Utils.checkNotNull(formatted, "formatted");
            this.formatted = Optional.ofNullable(formatted);
            return this;
        }

        public Builder formatted(Optional<String> formatted) {
            Utils.checkNotNull(formatted, "formatted");
            this.formatted = formatted;
            return this;
        }

        public Builder givenName(String givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = Optional.ofNullable(givenName);
            return this;
        }

        public Builder givenName(Optional<String> givenName) {
            Utils.checkNotNull(givenName, "givenName");
            this.givenName = givenName;
            return this;
        }

        public Builder honorificPrefix(String honorificPrefix) {
            Utils.checkNotNull(honorificPrefix, "honorificPrefix");
            this.honorificPrefix = Optional.ofNullable(honorificPrefix);
            return this;
        }

        public Builder honorificPrefix(Optional<String> honorificPrefix) {
            Utils.checkNotNull(honorificPrefix, "honorificPrefix");
            this.honorificPrefix = honorificPrefix;
            return this;
        }

        public Builder honorificSuffix(String honorificSuffix) {
            Utils.checkNotNull(honorificSuffix, "honorificSuffix");
            this.honorificSuffix = Optional.ofNullable(honorificSuffix);
            return this;
        }

        public Builder honorificSuffix(Optional<String> honorificSuffix) {
            Utils.checkNotNull(honorificSuffix, "honorificSuffix");
            this.honorificSuffix = honorificSuffix;
            return this;
        }

        public Builder middleName(String middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = Optional.ofNullable(middleName);
            return this;
        }

        public Builder middleName(Optional<String> middleName) {
            Utils.checkNotNull(middleName, "middleName");
            this.middleName = middleName;
            return this;
        }
        
        public PropertyScimUserName build() {
            return new PropertyScimUserName(
                familyName,
                formatted,
                givenName,
                honorificPrefix,
                honorificSuffix,
                middleName);
        }
    }
}


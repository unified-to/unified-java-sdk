/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.unifiedapi.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class TaskTask {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("assigned_user_ids")
    private Optional<? extends List<String>> assignedUserIds;

    /**
     * Array of attachment IDs retrieved from StorageFile.Get endpoint
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("attachment_ids")
    private Optional<? extends List<String>> attachmentIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed_at")
    private Optional<OffsetDateTime> completedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creator_user_id")
    private Optional<String> creatorUserId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("due_at")
    private Optional<OffsetDateTime> dueAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("follower_user_ids")
    private Optional<? extends List<String>> followerUserIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_ids")
    private Optional<? extends List<String>> groupIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private Optional<String> notes;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("parent_id")
    private Optional<String> parentId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private Optional<String> priority;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("project_id")
    private Optional<String> projectId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends TaskTaskStatus> status;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tags")
    private Optional<? extends List<String>> tags;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public TaskTask(
            @JsonProperty("assigned_user_ids") Optional<? extends List<String>> assignedUserIds,
            @JsonProperty("attachment_ids") Optional<? extends List<String>> attachmentIds,
            @JsonProperty("completed_at") Optional<OffsetDateTime> completedAt,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("creator_user_id") Optional<String> creatorUserId,
            @JsonProperty("due_at") Optional<OffsetDateTime> dueAt,
            @JsonProperty("follower_user_ids") Optional<? extends List<String>> followerUserIds,
            @JsonProperty("group_ids") Optional<? extends List<String>> groupIds,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("notes") Optional<String> notes,
            @JsonProperty("parent_id") Optional<String> parentId,
            @JsonProperty("priority") Optional<String> priority,
            @JsonProperty("project_id") Optional<String> projectId,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("status") Optional<? extends TaskTaskStatus> status,
            @JsonProperty("tags") Optional<? extends List<String>> tags,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(assignedUserIds, "assignedUserIds");
        Utils.checkNotNull(attachmentIds, "attachmentIds");
        Utils.checkNotNull(completedAt, "completedAt");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(creatorUserId, "creatorUserId");
        Utils.checkNotNull(dueAt, "dueAt");
        Utils.checkNotNull(followerUserIds, "followerUserIds");
        Utils.checkNotNull(groupIds, "groupIds");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(notes, "notes");
        Utils.checkNotNull(parentId, "parentId");
        Utils.checkNotNull(priority, "priority");
        Utils.checkNotNull(projectId, "projectId");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(tags, "tags");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(url, "url");
        this.assignedUserIds = assignedUserIds;
        this.attachmentIds = attachmentIds;
        this.completedAt = completedAt;
        this.createdAt = createdAt;
        this.creatorUserId = creatorUserId;
        this.dueAt = dueAt;
        this.followerUserIds = followerUserIds;
        this.groupIds = groupIds;
        this.id = id;
        this.name = name;
        this.notes = notes;
        this.parentId = parentId;
        this.priority = priority;
        this.projectId = projectId;
        this.raw = raw;
        this.status = status;
        this.tags = tags;
        this.updatedAt = updatedAt;
        this.url = url;
    }
    
    public TaskTask() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> assignedUserIds() {
        return (Optional<List<String>>) assignedUserIds;
    }

    /**
     * Array of attachment IDs retrieved from StorageFile.Get endpoint
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> attachmentIds() {
        return (Optional<List<String>>) attachmentIds;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> completedAt() {
        return completedAt;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> creatorUserId() {
        return creatorUserId;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> dueAt() {
        return dueAt;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> followerUserIds() {
        return (Optional<List<String>>) followerUserIds;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> groupIds() {
        return (Optional<List<String>>) groupIds;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> notes() {
        return notes;
    }

    @JsonIgnore
    public Optional<String> parentId() {
        return parentId;
    }

    @JsonIgnore
    public Optional<String> priority() {
        return priority;
    }

    @JsonIgnore
    public Optional<String> projectId() {
        return projectId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaskTaskStatus> status() {
        return (Optional<TaskTaskStatus>) status;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tags() {
        return (Optional<List<String>>) tags;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TaskTask withAssignedUserIds(List<String> assignedUserIds) {
        Utils.checkNotNull(assignedUserIds, "assignedUserIds");
        this.assignedUserIds = Optional.ofNullable(assignedUserIds);
        return this;
    }

    public TaskTask withAssignedUserIds(Optional<? extends List<String>> assignedUserIds) {
        Utils.checkNotNull(assignedUserIds, "assignedUserIds");
        this.assignedUserIds = assignedUserIds;
        return this;
    }

    /**
     * Array of attachment IDs retrieved from StorageFile.Get endpoint
     */
    public TaskTask withAttachmentIds(List<String> attachmentIds) {
        Utils.checkNotNull(attachmentIds, "attachmentIds");
        this.attachmentIds = Optional.ofNullable(attachmentIds);
        return this;
    }

    /**
     * Array of attachment IDs retrieved from StorageFile.Get endpoint
     */
    public TaskTask withAttachmentIds(Optional<? extends List<String>> attachmentIds) {
        Utils.checkNotNull(attachmentIds, "attachmentIds");
        this.attachmentIds = attachmentIds;
        return this;
    }

    public TaskTask withCompletedAt(OffsetDateTime completedAt) {
        Utils.checkNotNull(completedAt, "completedAt");
        this.completedAt = Optional.ofNullable(completedAt);
        return this;
    }

    public TaskTask withCompletedAt(Optional<OffsetDateTime> completedAt) {
        Utils.checkNotNull(completedAt, "completedAt");
        this.completedAt = completedAt;
        return this;
    }

    public TaskTask withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public TaskTask withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public TaskTask withCreatorUserId(String creatorUserId) {
        Utils.checkNotNull(creatorUserId, "creatorUserId");
        this.creatorUserId = Optional.ofNullable(creatorUserId);
        return this;
    }

    public TaskTask withCreatorUserId(Optional<String> creatorUserId) {
        Utils.checkNotNull(creatorUserId, "creatorUserId");
        this.creatorUserId = creatorUserId;
        return this;
    }

    public TaskTask withDueAt(OffsetDateTime dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = Optional.ofNullable(dueAt);
        return this;
    }

    public TaskTask withDueAt(Optional<OffsetDateTime> dueAt) {
        Utils.checkNotNull(dueAt, "dueAt");
        this.dueAt = dueAt;
        return this;
    }

    public TaskTask withFollowerUserIds(List<String> followerUserIds) {
        Utils.checkNotNull(followerUserIds, "followerUserIds");
        this.followerUserIds = Optional.ofNullable(followerUserIds);
        return this;
    }

    public TaskTask withFollowerUserIds(Optional<? extends List<String>> followerUserIds) {
        Utils.checkNotNull(followerUserIds, "followerUserIds");
        this.followerUserIds = followerUserIds;
        return this;
    }

    public TaskTask withGroupIds(List<String> groupIds) {
        Utils.checkNotNull(groupIds, "groupIds");
        this.groupIds = Optional.ofNullable(groupIds);
        return this;
    }

    public TaskTask withGroupIds(Optional<? extends List<String>> groupIds) {
        Utils.checkNotNull(groupIds, "groupIds");
        this.groupIds = groupIds;
        return this;
    }

    public TaskTask withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public TaskTask withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public TaskTask withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public TaskTask withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public TaskTask withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = Optional.ofNullable(notes);
        return this;
    }

    public TaskTask withNotes(Optional<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }

    public TaskTask withParentId(String parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = Optional.ofNullable(parentId);
        return this;
    }

    public TaskTask withParentId(Optional<String> parentId) {
        Utils.checkNotNull(parentId, "parentId");
        this.parentId = parentId;
        return this;
    }

    public TaskTask withPriority(String priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = Optional.ofNullable(priority);
        return this;
    }

    public TaskTask withPriority(Optional<String> priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = priority;
        return this;
    }

    public TaskTask withProjectId(String projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = Optional.ofNullable(projectId);
        return this;
    }

    public TaskTask withProjectId(Optional<String> projectId) {
        Utils.checkNotNull(projectId, "projectId");
        this.projectId = projectId;
        return this;
    }

    public TaskTask withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public TaskTask withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public TaskTask withStatus(TaskTaskStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    public TaskTask withStatus(Optional<? extends TaskTaskStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public TaskTask withTags(List<String> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = Optional.ofNullable(tags);
        return this;
    }

    public TaskTask withTags(Optional<? extends List<String>> tags) {
        Utils.checkNotNull(tags, "tags");
        this.tags = tags;
        return this;
    }

    public TaskTask withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public TaskTask withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public TaskTask withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public TaskTask withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaskTask other = (TaskTask) o;
        return 
            Objects.deepEquals(this.assignedUserIds, other.assignedUserIds) &&
            Objects.deepEquals(this.attachmentIds, other.attachmentIds) &&
            Objects.deepEquals(this.completedAt, other.completedAt) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.creatorUserId, other.creatorUserId) &&
            Objects.deepEquals(this.dueAt, other.dueAt) &&
            Objects.deepEquals(this.followerUserIds, other.followerUserIds) &&
            Objects.deepEquals(this.groupIds, other.groupIds) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.notes, other.notes) &&
            Objects.deepEquals(this.parentId, other.parentId) &&
            Objects.deepEquals(this.priority, other.priority) &&
            Objects.deepEquals(this.projectId, other.projectId) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.tags, other.tags) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            assignedUserIds,
            attachmentIds,
            completedAt,
            createdAt,
            creatorUserId,
            dueAt,
            followerUserIds,
            groupIds,
            id,
            name,
            notes,
            parentId,
            priority,
            projectId,
            raw,
            status,
            tags,
            updatedAt,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaskTask.class,
                "assignedUserIds", assignedUserIds,
                "attachmentIds", attachmentIds,
                "completedAt", completedAt,
                "createdAt", createdAt,
                "creatorUserId", creatorUserId,
                "dueAt", dueAt,
                "followerUserIds", followerUserIds,
                "groupIds", groupIds,
                "id", id,
                "name", name,
                "notes", notes,
                "parentId", parentId,
                "priority", priority,
                "projectId", projectId,
                "raw", raw,
                "status", status,
                "tags", tags,
                "updatedAt", updatedAt,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> assignedUserIds = Optional.empty();
 
        private Optional<? extends List<String>> attachmentIds = Optional.empty();
 
        private Optional<OffsetDateTime> completedAt = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<String> creatorUserId = Optional.empty();
 
        private Optional<OffsetDateTime> dueAt = Optional.empty();
 
        private Optional<? extends List<String>> followerUserIds = Optional.empty();
 
        private Optional<? extends List<String>> groupIds = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> notes = Optional.empty();
 
        private Optional<String> parentId = Optional.empty();
 
        private Optional<String> priority = Optional.empty();
 
        private Optional<String> projectId = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<? extends TaskTaskStatus> status = Optional.empty();
 
        private Optional<? extends List<String>> tags = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<String> url = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder assignedUserIds(List<String> assignedUserIds) {
            Utils.checkNotNull(assignedUserIds, "assignedUserIds");
            this.assignedUserIds = Optional.ofNullable(assignedUserIds);
            return this;
        }

        public Builder assignedUserIds(Optional<? extends List<String>> assignedUserIds) {
            Utils.checkNotNull(assignedUserIds, "assignedUserIds");
            this.assignedUserIds = assignedUserIds;
            return this;
        }

        /**
         * Array of attachment IDs retrieved from StorageFile.Get endpoint
         */
        public Builder attachmentIds(List<String> attachmentIds) {
            Utils.checkNotNull(attachmentIds, "attachmentIds");
            this.attachmentIds = Optional.ofNullable(attachmentIds);
            return this;
        }

        /**
         * Array of attachment IDs retrieved from StorageFile.Get endpoint
         */
        public Builder attachmentIds(Optional<? extends List<String>> attachmentIds) {
            Utils.checkNotNull(attachmentIds, "attachmentIds");
            this.attachmentIds = attachmentIds;
            return this;
        }

        public Builder completedAt(OffsetDateTime completedAt) {
            Utils.checkNotNull(completedAt, "completedAt");
            this.completedAt = Optional.ofNullable(completedAt);
            return this;
        }

        public Builder completedAt(Optional<OffsetDateTime> completedAt) {
            Utils.checkNotNull(completedAt, "completedAt");
            this.completedAt = completedAt;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder creatorUserId(String creatorUserId) {
            Utils.checkNotNull(creatorUserId, "creatorUserId");
            this.creatorUserId = Optional.ofNullable(creatorUserId);
            return this;
        }

        public Builder creatorUserId(Optional<String> creatorUserId) {
            Utils.checkNotNull(creatorUserId, "creatorUserId");
            this.creatorUserId = creatorUserId;
            return this;
        }

        public Builder dueAt(OffsetDateTime dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = Optional.ofNullable(dueAt);
            return this;
        }

        public Builder dueAt(Optional<OffsetDateTime> dueAt) {
            Utils.checkNotNull(dueAt, "dueAt");
            this.dueAt = dueAt;
            return this;
        }

        public Builder followerUserIds(List<String> followerUserIds) {
            Utils.checkNotNull(followerUserIds, "followerUserIds");
            this.followerUserIds = Optional.ofNullable(followerUserIds);
            return this;
        }

        public Builder followerUserIds(Optional<? extends List<String>> followerUserIds) {
            Utils.checkNotNull(followerUserIds, "followerUserIds");
            this.followerUserIds = followerUserIds;
            return this;
        }

        public Builder groupIds(List<String> groupIds) {
            Utils.checkNotNull(groupIds, "groupIds");
            this.groupIds = Optional.ofNullable(groupIds);
            return this;
        }

        public Builder groupIds(Optional<? extends List<String>> groupIds) {
            Utils.checkNotNull(groupIds, "groupIds");
            this.groupIds = groupIds;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        public Builder notes(Optional<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }

        public Builder parentId(String parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = Optional.ofNullable(parentId);
            return this;
        }

        public Builder parentId(Optional<String> parentId) {
            Utils.checkNotNull(parentId, "parentId");
            this.parentId = parentId;
            return this;
        }

        public Builder priority(String priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = Optional.ofNullable(priority);
            return this;
        }

        public Builder priority(Optional<String> priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = priority;
            return this;
        }

        public Builder projectId(String projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = Optional.ofNullable(projectId);
            return this;
        }

        public Builder projectId(Optional<String> projectId) {
            Utils.checkNotNull(projectId, "projectId");
            this.projectId = projectId;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder status(TaskTaskStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        public Builder status(Optional<? extends TaskTaskStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder tags(List<String> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = Optional.ofNullable(tags);
            return this;
        }

        public Builder tags(Optional<? extends List<String>> tags) {
            Utils.checkNotNull(tags, "tags");
            this.tags = tags;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public TaskTask build() {
            return new TaskTask(
                assignedUserIds,
                attachmentIds,
                completedAt,
                createdAt,
                creatorUserId,
                dueAt,
                followerUserIds,
                groupIds,
                id,
                name,
                notes,
                parentId,
                priority,
                projectId,
                raw,
                status,
                tags,
                updatedAt,
                url);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class CommerceItemMedia {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alt")
    private Optional<String> alt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Optional<Double> height;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends List<CommerceItemMetadata>> metadata;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("position")
    private Optional<Double> position;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends CommerceItemMediaType> type;

    @JsonProperty("url")
    private String url;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Optional<Double> width;

    @JsonCreator
    public CommerceItemMedia(
            @JsonProperty("alt") Optional<String> alt,
            @JsonProperty("height") Optional<Double> height,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("metadata") Optional<? extends List<CommerceItemMetadata>> metadata,
            @JsonProperty("position") Optional<Double> position,
            @JsonProperty("type") Optional<? extends CommerceItemMediaType> type,
            @JsonProperty("url") String url,
            @JsonProperty("width") Optional<Double> width) {
        Utils.checkNotNull(alt, "alt");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(metadata, "metadata");
        Utils.checkNotNull(position, "position");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(width, "width");
        this.alt = alt;
        this.height = height;
        this.id = id;
        this.metadata = metadata;
        this.position = position;
        this.type = type;
        this.url = url;
        this.width = width;
    }
    
    public CommerceItemMedia(
            String url) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), url, Optional.empty());
    }

    @JsonIgnore
    public Optional<String> alt() {
        return alt;
    }

    @JsonIgnore
    public Optional<Double> height() {
        return height;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CommerceItemMetadata>> metadata() {
        return (Optional<List<CommerceItemMetadata>>) metadata;
    }

    @JsonIgnore
    public Optional<Double> position() {
        return position;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CommerceItemMediaType> type() {
        return (Optional<CommerceItemMediaType>) type;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    @JsonIgnore
    public Optional<Double> width() {
        return width;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CommerceItemMedia withAlt(String alt) {
        Utils.checkNotNull(alt, "alt");
        this.alt = Optional.ofNullable(alt);
        return this;
    }

    public CommerceItemMedia withAlt(Optional<String> alt) {
        Utils.checkNotNull(alt, "alt");
        this.alt = alt;
        return this;
    }

    public CommerceItemMedia withHeight(double height) {
        Utils.checkNotNull(height, "height");
        this.height = Optional.ofNullable(height);
        return this;
    }

    public CommerceItemMedia withHeight(Optional<Double> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    public CommerceItemMedia withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CommerceItemMedia withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CommerceItemMedia withMetadata(List<CommerceItemMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    public CommerceItemMedia withMetadata(Optional<? extends List<CommerceItemMetadata>> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }

    public CommerceItemMedia withPosition(double position) {
        Utils.checkNotNull(position, "position");
        this.position = Optional.ofNullable(position);
        return this;
    }

    public CommerceItemMedia withPosition(Optional<Double> position) {
        Utils.checkNotNull(position, "position");
        this.position = position;
        return this;
    }

    public CommerceItemMedia withType(CommerceItemMediaType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public CommerceItemMedia withType(Optional<? extends CommerceItemMediaType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public CommerceItemMedia withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public CommerceItemMedia withWidth(double width) {
        Utils.checkNotNull(width, "width");
        this.width = Optional.ofNullable(width);
        return this;
    }

    public CommerceItemMedia withWidth(Optional<Double> width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceItemMedia other = (CommerceItemMedia) o;
        return 
            Objects.deepEquals(this.alt, other.alt) &&
            Objects.deepEquals(this.height, other.height) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.metadata, other.metadata) &&
            Objects.deepEquals(this.position, other.position) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.width, other.width);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            alt,
            height,
            id,
            metadata,
            position,
            type,
            url,
            width);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceItemMedia.class,
                "alt", alt,
                "height", height,
                "id", id,
                "metadata", metadata,
                "position", position,
                "type", type,
                "url", url,
                "width", width);
    }
    
    public final static class Builder {
 
        private Optional<String> alt = Optional.empty();
 
        private Optional<Double> height = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends List<CommerceItemMetadata>> metadata = Optional.empty();
 
        private Optional<Double> position = Optional.empty();
 
        private Optional<? extends CommerceItemMediaType> type = Optional.empty();
 
        private String url;
 
        private Optional<Double> width = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder alt(String alt) {
            Utils.checkNotNull(alt, "alt");
            this.alt = Optional.ofNullable(alt);
            return this;
        }

        public Builder alt(Optional<String> alt) {
            Utils.checkNotNull(alt, "alt");
            this.alt = alt;
            return this;
        }

        public Builder height(double height) {
            Utils.checkNotNull(height, "height");
            this.height = Optional.ofNullable(height);
            return this;
        }

        public Builder height(Optional<Double> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder metadata(List<CommerceItemMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        public Builder metadata(Optional<? extends List<CommerceItemMetadata>> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }

        public Builder position(double position) {
            Utils.checkNotNull(position, "position");
            this.position = Optional.ofNullable(position);
            return this;
        }

        public Builder position(Optional<Double> position) {
            Utils.checkNotNull(position, "position");
            this.position = position;
            return this;
        }

        public Builder type(CommerceItemMediaType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends CommerceItemMediaType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder width(double width) {
            Utils.checkNotNull(width, "width");
            this.width = Optional.ofNullable(width);
            return this;
        }

        public Builder width(Optional<Double> width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }
        
        public CommerceItemMedia build() {
            return new CommerceItemMedia(
                alt,
                height,
                id,
                metadata,
                position,
                type,
                url,
                width);
        }
    }
}


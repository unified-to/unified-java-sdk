/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.unifiedapi.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

public class GenaiPrompt {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_tokens")
    private Optional<Double> maxTokens;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("messages")
    private Optional<? extends List<GenaiContent>> messages;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("model_id")
    private Optional<String> modelId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responses")
    private Optional<? extends List<String>> responses;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("temperature")
    private Optional<Double> temperature;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tokens_used")
    private Optional<Double> tokensUsed;

    @JsonCreator
    public GenaiPrompt(
            @JsonProperty("max_tokens") Optional<Double> maxTokens,
            @JsonProperty("messages") Optional<? extends List<GenaiContent>> messages,
            @JsonProperty("model_id") Optional<String> modelId,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("responses") Optional<? extends List<String>> responses,
            @JsonProperty("temperature") Optional<Double> temperature,
            @JsonProperty("tokens_used") Optional<Double> tokensUsed) {
        Utils.checkNotNull(maxTokens, "maxTokens");
        Utils.checkNotNull(messages, "messages");
        Utils.checkNotNull(modelId, "modelId");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(responses, "responses");
        Utils.checkNotNull(temperature, "temperature");
        Utils.checkNotNull(tokensUsed, "tokensUsed");
        this.maxTokens = maxTokens;
        this.messages = messages;
        this.modelId = modelId;
        this.raw = raw;
        this.responses = responses;
        this.temperature = temperature;
        this.tokensUsed = tokensUsed;
    }
    
    public GenaiPrompt() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> maxTokens() {
        return maxTokens;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<GenaiContent>> messages() {
        return (Optional<List<GenaiContent>>) messages;
    }

    @JsonIgnore
    public Optional<String> modelId() {
        return modelId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> responses() {
        return (Optional<List<String>>) responses;
    }

    @JsonIgnore
    public Optional<Double> temperature() {
        return temperature;
    }

    @JsonIgnore
    public Optional<Double> tokensUsed() {
        return tokensUsed;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GenaiPrompt withMaxTokens(double maxTokens) {
        Utils.checkNotNull(maxTokens, "maxTokens");
        this.maxTokens = Optional.ofNullable(maxTokens);
        return this;
    }

    public GenaiPrompt withMaxTokens(Optional<Double> maxTokens) {
        Utils.checkNotNull(maxTokens, "maxTokens");
        this.maxTokens = maxTokens;
        return this;
    }

    public GenaiPrompt withMessages(List<GenaiContent> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = Optional.ofNullable(messages);
        return this;
    }

    public GenaiPrompt withMessages(Optional<? extends List<GenaiContent>> messages) {
        Utils.checkNotNull(messages, "messages");
        this.messages = messages;
        return this;
    }

    public GenaiPrompt withModelId(String modelId) {
        Utils.checkNotNull(modelId, "modelId");
        this.modelId = Optional.ofNullable(modelId);
        return this;
    }

    public GenaiPrompt withModelId(Optional<String> modelId) {
        Utils.checkNotNull(modelId, "modelId");
        this.modelId = modelId;
        return this;
    }

    public GenaiPrompt withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public GenaiPrompt withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public GenaiPrompt withResponses(List<String> responses) {
        Utils.checkNotNull(responses, "responses");
        this.responses = Optional.ofNullable(responses);
        return this;
    }

    public GenaiPrompt withResponses(Optional<? extends List<String>> responses) {
        Utils.checkNotNull(responses, "responses");
        this.responses = responses;
        return this;
    }

    public GenaiPrompt withTemperature(double temperature) {
        Utils.checkNotNull(temperature, "temperature");
        this.temperature = Optional.ofNullable(temperature);
        return this;
    }

    public GenaiPrompt withTemperature(Optional<Double> temperature) {
        Utils.checkNotNull(temperature, "temperature");
        this.temperature = temperature;
        return this;
    }

    public GenaiPrompt withTokensUsed(double tokensUsed) {
        Utils.checkNotNull(tokensUsed, "tokensUsed");
        this.tokensUsed = Optional.ofNullable(tokensUsed);
        return this;
    }

    public GenaiPrompt withTokensUsed(Optional<Double> tokensUsed) {
        Utils.checkNotNull(tokensUsed, "tokensUsed");
        this.tokensUsed = tokensUsed;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GenaiPrompt other = (GenaiPrompt) o;
        return 
            Objects.deepEquals(this.maxTokens, other.maxTokens) &&
            Objects.deepEquals(this.messages, other.messages) &&
            Objects.deepEquals(this.modelId, other.modelId) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.responses, other.responses) &&
            Objects.deepEquals(this.temperature, other.temperature) &&
            Objects.deepEquals(this.tokensUsed, other.tokensUsed);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            maxTokens,
            messages,
            modelId,
            raw,
            responses,
            temperature,
            tokensUsed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GenaiPrompt.class,
                "maxTokens", maxTokens,
                "messages", messages,
                "modelId", modelId,
                "raw", raw,
                "responses", responses,
                "temperature", temperature,
                "tokensUsed", tokensUsed);
    }
    
    public final static class Builder {
 
        private Optional<Double> maxTokens = Optional.empty();
 
        private Optional<? extends List<GenaiContent>> messages = Optional.empty();
 
        private Optional<String> modelId = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<? extends List<String>> responses = Optional.empty();
 
        private Optional<Double> temperature = Optional.empty();
 
        private Optional<Double> tokensUsed = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder maxTokens(double maxTokens) {
            Utils.checkNotNull(maxTokens, "maxTokens");
            this.maxTokens = Optional.ofNullable(maxTokens);
            return this;
        }

        public Builder maxTokens(Optional<Double> maxTokens) {
            Utils.checkNotNull(maxTokens, "maxTokens");
            this.maxTokens = maxTokens;
            return this;
        }

        public Builder messages(List<GenaiContent> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = Optional.ofNullable(messages);
            return this;
        }

        public Builder messages(Optional<? extends List<GenaiContent>> messages) {
            Utils.checkNotNull(messages, "messages");
            this.messages = messages;
            return this;
        }

        public Builder modelId(String modelId) {
            Utils.checkNotNull(modelId, "modelId");
            this.modelId = Optional.ofNullable(modelId);
            return this;
        }

        public Builder modelId(Optional<String> modelId) {
            Utils.checkNotNull(modelId, "modelId");
            this.modelId = modelId;
            return this;
        }

        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder responses(List<String> responses) {
            Utils.checkNotNull(responses, "responses");
            this.responses = Optional.ofNullable(responses);
            return this;
        }

        public Builder responses(Optional<? extends List<String>> responses) {
            Utils.checkNotNull(responses, "responses");
            this.responses = responses;
            return this;
        }

        public Builder temperature(double temperature) {
            Utils.checkNotNull(temperature, "temperature");
            this.temperature = Optional.ofNullable(temperature);
            return this;
        }

        public Builder temperature(Optional<Double> temperature) {
            Utils.checkNotNull(temperature, "temperature");
            this.temperature = temperature;
            return this;
        }

        public Builder tokensUsed(double tokensUsed) {
            Utils.checkNotNull(tokensUsed, "tokensUsed");
            this.tokensUsed = Optional.ofNullable(tokensUsed);
            return this;
        }

        public Builder tokensUsed(Optional<Double> tokensUsed) {
            Utils.checkNotNull(tokensUsed, "tokensUsed");
            this.tokensUsed = tokensUsed;
            return this;
        }
        
        public GenaiPrompt build() {
            return new GenaiPrompt(
                maxTokens,
                messages,
                modelId,
                raw,
                responses,
                temperature,
                tokensUsed);
        }
    }
}


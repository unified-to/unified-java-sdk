/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;


public class KmsPageMetadata {

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<String> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends Map<String, Object>> value;

    @JsonCreator
    public KmsPageMetadata(
            @JsonProperty("name") String name,
            @JsonProperty("type") Optional<String> type,
            @JsonProperty("value") Optional<? extends Map<String, Object>> value) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(value, "value");
        this.name = name;
        this.type = type;
        this.value = value;
    }
    
    public KmsPageMetadata(
            String name) {
        this(name, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> type() {
        return type;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> value() {
        return (Optional<Map<String, Object>>) value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public KmsPageMetadata withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public KmsPageMetadata withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public KmsPageMetadata withType(Optional<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public KmsPageMetadata withValue(Map<String, Object> value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public KmsPageMetadata withValue(Optional<? extends Map<String, Object>> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        KmsPageMetadata other = (KmsPageMetadata) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            type,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(KmsPageMetadata.class,
                "name", name,
                "type", type,
                "value", value);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Optional<String> type = Optional.empty();
 
        private Optional<? extends Map<String, Object>> value = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder value(Map<String, Object> value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<? extends Map<String, Object>> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public KmsPageMetadata build() {
            return new KmsPageMetadata(
                name,
                type,
                value);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class PropertyCrmEventPageView {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("average")
    private Optional<Double> average;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("count")
    private Optional<Double> count;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonCreator
    public PropertyCrmEventPageView(
            @JsonProperty("average") Optional<Double> average,
            @JsonProperty("count") Optional<Double> count,
            @JsonProperty("url") Optional<String> url) {
        Utils.checkNotNull(average, "average");
        Utils.checkNotNull(count, "count");
        Utils.checkNotNull(url, "url");
        this.average = average;
        this.count = count;
        this.url = url;
    }
    
    public PropertyCrmEventPageView() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> average() {
        return average;
    }

    @JsonIgnore
    public Optional<Double> count() {
        return count;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PropertyCrmEventPageView withAverage(double average) {
        Utils.checkNotNull(average, "average");
        this.average = Optional.ofNullable(average);
        return this;
    }

    public PropertyCrmEventPageView withAverage(Optional<Double> average) {
        Utils.checkNotNull(average, "average");
        this.average = average;
        return this;
    }

    public PropertyCrmEventPageView withCount(double count) {
        Utils.checkNotNull(count, "count");
        this.count = Optional.ofNullable(count);
        return this;
    }

    public PropertyCrmEventPageView withCount(Optional<Double> count) {
        Utils.checkNotNull(count, "count");
        this.count = count;
        return this;
    }

    public PropertyCrmEventPageView withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public PropertyCrmEventPageView withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyCrmEventPageView other = (PropertyCrmEventPageView) o;
        return 
            Objects.deepEquals(this.average, other.average) &&
            Objects.deepEquals(this.count, other.count) &&
            Objects.deepEquals(this.url, other.url);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            average,
            count,
            url);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyCrmEventPageView.class,
                "average", average,
                "count", count,
                "url", url);
    }
    
    public final static class Builder {
 
        private Optional<Double> average = Optional.empty();
 
        private Optional<Double> count = Optional.empty();
 
        private Optional<String> url = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder average(double average) {
            Utils.checkNotNull(average, "average");
            this.average = Optional.ofNullable(average);
            return this;
        }

        public Builder average(Optional<Double> average) {
            Utils.checkNotNull(average, "average");
            this.average = average;
            return this;
        }

        public Builder count(double count) {
            Utils.checkNotNull(count, "count");
            this.count = Optional.ofNullable(count);
            return this;
        }

        public Builder count(Optional<Double> count) {
            Utils.checkNotNull(count, "count");
            this.count = count;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }
        
        public PropertyCrmEventPageView build() {
            return new PropertyCrmEventPageView(
                average,
                count,
                url);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class Issue {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<String> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resolution_time")
    private Optional<Double> resolutionTime;

    @JsonProperty("status")
    private IssueStatus status;

    @JsonProperty("ticket_ref")
    private String ticketRef;

    @JsonProperty("title")
    private String title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends List<String>> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<String> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    @JsonProperty("workspace_id")
    private String workspaceId;

    @JsonCreator
    public Issue(
            @JsonProperty("created_at") Optional<String> createdAt,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("resolution_time") Optional<Double> resolutionTime,
            @JsonProperty("status") IssueStatus status,
            @JsonProperty("ticket_ref") String ticketRef,
            @JsonProperty("title") String title,
            @JsonProperty("type") Optional<? extends List<String>> type,
            @JsonProperty("updated_at") Optional<String> updatedAt,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("workspace_id") String workspaceId) {
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(resolutionTime, "resolutionTime");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(ticketRef, "ticketRef");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.createdAt = createdAt;
        this.id = id;
        this.resolutionTime = resolutionTime;
        this.status = status;
        this.ticketRef = ticketRef;
        this.title = title;
        this.type = type;
        this.updatedAt = updatedAt;
        this.url = url;
        this.workspaceId = workspaceId;
    }
    
    public Issue(
            IssueStatus status,
            String ticketRef,
            String title,
            String workspaceId) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), status, ticketRef, title, Optional.empty(), Optional.empty(), Optional.empty(), workspaceId);
    }

    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<Double> resolutionTime() {
        return resolutionTime;
    }

    @JsonIgnore
    public IssueStatus status() {
        return status;
    }

    @JsonIgnore
    public String ticketRef() {
        return ticketRef;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> type() {
        return (Optional<List<String>>) type;
    }

    @JsonIgnore
    public Optional<String> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    @JsonIgnore
    public String workspaceId() {
        return workspaceId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Issue withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public Issue withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public Issue withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public Issue withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public Issue withResolutionTime(double resolutionTime) {
        Utils.checkNotNull(resolutionTime, "resolutionTime");
        this.resolutionTime = Optional.ofNullable(resolutionTime);
        return this;
    }

    public Issue withResolutionTime(Optional<Double> resolutionTime) {
        Utils.checkNotNull(resolutionTime, "resolutionTime");
        this.resolutionTime = resolutionTime;
        return this;
    }

    public Issue withStatus(IssueStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    public Issue withTicketRef(String ticketRef) {
        Utils.checkNotNull(ticketRef, "ticketRef");
        this.ticketRef = ticketRef;
        return this;
    }

    public Issue withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public Issue withType(List<String> type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public Issue withType(Optional<? extends List<String>> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Issue withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public Issue withUpdatedAt(Optional<String> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public Issue withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    public Issue withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public Issue withWorkspaceId(String workspaceId) {
        Utils.checkNotNull(workspaceId, "workspaceId");
        this.workspaceId = workspaceId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Issue other = (Issue) o;
        return 
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.resolutionTime, other.resolutionTime) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.ticketRef, other.ticketRef) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.workspaceId, other.workspaceId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            createdAt,
            id,
            resolutionTime,
            status,
            ticketRef,
            title,
            type,
            updatedAt,
            url,
            workspaceId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Issue.class,
                "createdAt", createdAt,
                "id", id,
                "resolutionTime", resolutionTime,
                "status", status,
                "ticketRef", ticketRef,
                "title", title,
                "type", type,
                "updatedAt", updatedAt,
                "url", url,
                "workspaceId", workspaceId);
    }
    
    public final static class Builder {
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<Double> resolutionTime = Optional.empty();
 
        private IssueStatus status;
 
        private String ticketRef;
 
        private String title;
 
        private Optional<? extends List<String>> type = Optional.empty();
 
        private Optional<String> updatedAt = Optional.empty();
 
        private Optional<String> url = Optional.empty();
 
        private String workspaceId;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder resolutionTime(double resolutionTime) {
            Utils.checkNotNull(resolutionTime, "resolutionTime");
            this.resolutionTime = Optional.ofNullable(resolutionTime);
            return this;
        }

        public Builder resolutionTime(Optional<Double> resolutionTime) {
            Utils.checkNotNull(resolutionTime, "resolutionTime");
            this.resolutionTime = resolutionTime;
            return this;
        }

        public Builder status(IssueStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        public Builder ticketRef(String ticketRef) {
            Utils.checkNotNull(ticketRef, "ticketRef");
            this.ticketRef = ticketRef;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder type(List<String> type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends List<String>> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<String> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder workspaceId(String workspaceId) {
            Utils.checkNotNull(workspaceId, "workspaceId");
            this.workspaceId = workspaceId;
            return this;
        }
        
        public Issue build() {
            return new Issue(
                createdAt,
                id,
                resolutionTime,
                status,
                ticketRef,
                title,
                type,
                updatedAt,
                url,
                workspaceId);
        }
    }
}


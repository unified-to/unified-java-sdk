/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class PropertyIntegrationSupportWebhookEvents {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created")
    private Optional<? extends List<PropertyIntegrationSupportWebhookEventsCreated>> created;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deleted")
    private Optional<? extends List<PropertyIntegrationSupportWebhookEventsDeleted>> deleted;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated")
    private Optional<? extends List<PropertyIntegrationSupportWebhookEventsUpdated>> updated;

    @JsonCreator
    public PropertyIntegrationSupportWebhookEvents(
            @JsonProperty("created") Optional<? extends List<PropertyIntegrationSupportWebhookEventsCreated>> created,
            @JsonProperty("deleted") Optional<? extends List<PropertyIntegrationSupportWebhookEventsDeleted>> deleted,
            @JsonProperty("updated") Optional<? extends List<PropertyIntegrationSupportWebhookEventsUpdated>> updated) {
        Utils.checkNotNull(created, "created");
        Utils.checkNotNull(deleted, "deleted");
        Utils.checkNotNull(updated, "updated");
        this.created = created;
        this.deleted = deleted;
        this.updated = updated;
    }
    
    public PropertyIntegrationSupportWebhookEvents() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyIntegrationSupportWebhookEventsCreated>> created() {
        return (Optional<List<PropertyIntegrationSupportWebhookEventsCreated>>) created;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyIntegrationSupportWebhookEventsDeleted>> deleted() {
        return (Optional<List<PropertyIntegrationSupportWebhookEventsDeleted>>) deleted;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PropertyIntegrationSupportWebhookEventsUpdated>> updated() {
        return (Optional<List<PropertyIntegrationSupportWebhookEventsUpdated>>) updated;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PropertyIntegrationSupportWebhookEvents withCreated(List<PropertyIntegrationSupportWebhookEventsCreated> created) {
        Utils.checkNotNull(created, "created");
        this.created = Optional.ofNullable(created);
        return this;
    }

    public PropertyIntegrationSupportWebhookEvents withCreated(Optional<? extends List<PropertyIntegrationSupportWebhookEventsCreated>> created) {
        Utils.checkNotNull(created, "created");
        this.created = created;
        return this;
    }

    public PropertyIntegrationSupportWebhookEvents withDeleted(List<PropertyIntegrationSupportWebhookEventsDeleted> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = Optional.ofNullable(deleted);
        return this;
    }

    public PropertyIntegrationSupportWebhookEvents withDeleted(Optional<? extends List<PropertyIntegrationSupportWebhookEventsDeleted>> deleted) {
        Utils.checkNotNull(deleted, "deleted");
        this.deleted = deleted;
        return this;
    }

    public PropertyIntegrationSupportWebhookEvents withUpdated(List<PropertyIntegrationSupportWebhookEventsUpdated> updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = Optional.ofNullable(updated);
        return this;
    }

    public PropertyIntegrationSupportWebhookEvents withUpdated(Optional<? extends List<PropertyIntegrationSupportWebhookEventsUpdated>> updated) {
        Utils.checkNotNull(updated, "updated");
        this.updated = updated;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PropertyIntegrationSupportWebhookEvents other = (PropertyIntegrationSupportWebhookEvents) o;
        return 
            Objects.deepEquals(this.created, other.created) &&
            Objects.deepEquals(this.deleted, other.deleted) &&
            Objects.deepEquals(this.updated, other.updated);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            created,
            deleted,
            updated);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PropertyIntegrationSupportWebhookEvents.class,
                "created", created,
                "deleted", deleted,
                "updated", updated);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<PropertyIntegrationSupportWebhookEventsCreated>> created = Optional.empty();
 
        private Optional<? extends List<PropertyIntegrationSupportWebhookEventsDeleted>> deleted = Optional.empty();
 
        private Optional<? extends List<PropertyIntegrationSupportWebhookEventsUpdated>> updated = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder created(List<PropertyIntegrationSupportWebhookEventsCreated> created) {
            Utils.checkNotNull(created, "created");
            this.created = Optional.ofNullable(created);
            return this;
        }

        public Builder created(Optional<? extends List<PropertyIntegrationSupportWebhookEventsCreated>> created) {
            Utils.checkNotNull(created, "created");
            this.created = created;
            return this;
        }

        public Builder deleted(List<PropertyIntegrationSupportWebhookEventsDeleted> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = Optional.ofNullable(deleted);
            return this;
        }

        public Builder deleted(Optional<? extends List<PropertyIntegrationSupportWebhookEventsDeleted>> deleted) {
            Utils.checkNotNull(deleted, "deleted");
            this.deleted = deleted;
            return this;
        }

        public Builder updated(List<PropertyIntegrationSupportWebhookEventsUpdated> updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = Optional.ofNullable(updated);
            return this;
        }

        public Builder updated(Optional<? extends List<PropertyIntegrationSupportWebhookEventsUpdated>> updated) {
            Utils.checkNotNull(updated, "updated");
            this.updated = updated;
            return this;
        }
        
        public PropertyIntegrationSupportWebhookEvents build() {
            return new PropertyIntegrationSupportWebhookEvents(
                created,
                deleted,
                updated);
        }
    }
}


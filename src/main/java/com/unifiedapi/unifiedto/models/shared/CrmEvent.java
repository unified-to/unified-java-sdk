/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * CrmEvent - An event represents an event, activity, or engagement and is always associated with a deal, contact, or company
 */

public class CrmEvent {

    /**
     * The call object, when type = call
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("call")
    private Optional<? extends PropertyCrmEventCall> call;

    /**
     * An array of company IDs associated with this event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_ids")
    private Optional<? extends List<String>> companyIds;

    /**
     * An array of contact IDs associated with this event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contact_ids")
    private Optional<? extends List<String>> contactIds;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<OffsetDateTime> createdAt;

    /**
     * An array of deal IDs associated with this event
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deal_ids")
    private Optional<? extends List<String>> dealIds;

    /**
     * The email object, when type = email
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<? extends PropertyCrmEventEmail> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("lead_ids")
    private Optional<? extends List<String>> leadIds;

    /**
     * The meeting object, when type = meeting
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meeting")
    private Optional<? extends PropertyCrmEventMeeting> meeting;

    /**
     * The note object, when type = note
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("note")
    private Optional<? extends PropertyCrmEventNote> note;

    /**
     * The raw data returned by the integration for this event.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends Map<String, Object>> raw;

    /**
     * The task object, when type = task
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("task")
    private Optional<? extends PropertyCrmEventTask> task;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends CrmEventType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    @JsonCreator
    public CrmEvent(
            @JsonProperty("call") Optional<? extends PropertyCrmEventCall> call,
            @JsonProperty("company_ids") Optional<? extends List<String>> companyIds,
            @JsonProperty("contact_ids") Optional<? extends List<String>> contactIds,
            @JsonProperty("created_at") Optional<OffsetDateTime> createdAt,
            @JsonProperty("deal_ids") Optional<? extends List<String>> dealIds,
            @JsonProperty("email") Optional<? extends PropertyCrmEventEmail> email,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("lead_ids") Optional<? extends List<String>> leadIds,
            @JsonProperty("meeting") Optional<? extends PropertyCrmEventMeeting> meeting,
            @JsonProperty("note") Optional<? extends PropertyCrmEventNote> note,
            @JsonProperty("raw") Optional<? extends Map<String, Object>> raw,
            @JsonProperty("task") Optional<? extends PropertyCrmEventTask> task,
            @JsonProperty("type") Optional<? extends CrmEventType> type,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt,
            @JsonProperty("user_id") Optional<String> userId) {
        Utils.checkNotNull(call, "call");
        Utils.checkNotNull(companyIds, "companyIds");
        Utils.checkNotNull(contactIds, "contactIds");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(dealIds, "dealIds");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(leadIds, "leadIds");
        Utils.checkNotNull(meeting, "meeting");
        Utils.checkNotNull(note, "note");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(task, "task");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(userId, "userId");
        this.call = call;
        this.companyIds = companyIds;
        this.contactIds = contactIds;
        this.createdAt = createdAt;
        this.dealIds = dealIds;
        this.email = email;
        this.id = id;
        this.leadIds = leadIds;
        this.meeting = meeting;
        this.note = note;
        this.raw = raw;
        this.task = task;
        this.type = type;
        this.updatedAt = updatedAt;
        this.userId = userId;
    }
    
    public CrmEvent() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The call object, when type = call
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCrmEventCall> call() {
        return (Optional<PropertyCrmEventCall>) call;
    }

    /**
     * An array of company IDs associated with this event
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> companyIds() {
        return (Optional<List<String>>) companyIds;
    }

    /**
     * An array of contact IDs associated with this event
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> contactIds() {
        return (Optional<List<String>>) contactIds;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> createdAt() {
        return createdAt;
    }

    /**
     * An array of deal IDs associated with this event
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> dealIds() {
        return (Optional<List<String>>) dealIds;
    }

    /**
     * The email object, when type = email
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCrmEventEmail> email() {
        return (Optional<PropertyCrmEventEmail>) email;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> leadIds() {
        return (Optional<List<String>>) leadIds;
    }

    /**
     * The meeting object, when type = meeting
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCrmEventMeeting> meeting() {
        return (Optional<PropertyCrmEventMeeting>) meeting;
    }

    /**
     * The note object, when type = note
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCrmEventNote> note() {
        return (Optional<PropertyCrmEventNote>) note;
    }

    /**
     * The raw data returned by the integration for this event.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> raw() {
        return (Optional<Map<String, Object>>) raw;
    }

    /**
     * The task object, when type = task
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PropertyCrmEventTask> task() {
        return (Optional<PropertyCrmEventTask>) task;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CrmEventType> type() {
        return (Optional<CrmEventType>) type;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The call object, when type = call
     */
    public CrmEvent withCall(PropertyCrmEventCall call) {
        Utils.checkNotNull(call, "call");
        this.call = Optional.ofNullable(call);
        return this;
    }

    /**
     * The call object, when type = call
     */
    public CrmEvent withCall(Optional<? extends PropertyCrmEventCall> call) {
        Utils.checkNotNull(call, "call");
        this.call = call;
        return this;
    }

    /**
     * An array of company IDs associated with this event
     */
    public CrmEvent withCompanyIds(List<String> companyIds) {
        Utils.checkNotNull(companyIds, "companyIds");
        this.companyIds = Optional.ofNullable(companyIds);
        return this;
    }

    /**
     * An array of company IDs associated with this event
     */
    public CrmEvent withCompanyIds(Optional<? extends List<String>> companyIds) {
        Utils.checkNotNull(companyIds, "companyIds");
        this.companyIds = companyIds;
        return this;
    }

    /**
     * An array of contact IDs associated with this event
     */
    public CrmEvent withContactIds(List<String> contactIds) {
        Utils.checkNotNull(contactIds, "contactIds");
        this.contactIds = Optional.ofNullable(contactIds);
        return this;
    }

    /**
     * An array of contact IDs associated with this event
     */
    public CrmEvent withContactIds(Optional<? extends List<String>> contactIds) {
        Utils.checkNotNull(contactIds, "contactIds");
        this.contactIds = contactIds;
        return this;
    }

    public CrmEvent withCreatedAt(OffsetDateTime createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public CrmEvent withCreatedAt(Optional<OffsetDateTime> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * An array of deal IDs associated with this event
     */
    public CrmEvent withDealIds(List<String> dealIds) {
        Utils.checkNotNull(dealIds, "dealIds");
        this.dealIds = Optional.ofNullable(dealIds);
        return this;
    }

    /**
     * An array of deal IDs associated with this event
     */
    public CrmEvent withDealIds(Optional<? extends List<String>> dealIds) {
        Utils.checkNotNull(dealIds, "dealIds");
        this.dealIds = dealIds;
        return this;
    }

    /**
     * The email object, when type = email
     */
    public CrmEvent withEmail(PropertyCrmEventEmail email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * The email object, when type = email
     */
    public CrmEvent withEmail(Optional<? extends PropertyCrmEventEmail> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public CrmEvent withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CrmEvent withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CrmEvent withLeadIds(List<String> leadIds) {
        Utils.checkNotNull(leadIds, "leadIds");
        this.leadIds = Optional.ofNullable(leadIds);
        return this;
    }

    public CrmEvent withLeadIds(Optional<? extends List<String>> leadIds) {
        Utils.checkNotNull(leadIds, "leadIds");
        this.leadIds = leadIds;
        return this;
    }

    /**
     * The meeting object, when type = meeting
     */
    public CrmEvent withMeeting(PropertyCrmEventMeeting meeting) {
        Utils.checkNotNull(meeting, "meeting");
        this.meeting = Optional.ofNullable(meeting);
        return this;
    }

    /**
     * The meeting object, when type = meeting
     */
    public CrmEvent withMeeting(Optional<? extends PropertyCrmEventMeeting> meeting) {
        Utils.checkNotNull(meeting, "meeting");
        this.meeting = meeting;
        return this;
    }

    /**
     * The note object, when type = note
     */
    public CrmEvent withNote(PropertyCrmEventNote note) {
        Utils.checkNotNull(note, "note");
        this.note = Optional.ofNullable(note);
        return this;
    }

    /**
     * The note object, when type = note
     */
    public CrmEvent withNote(Optional<? extends PropertyCrmEventNote> note) {
        Utils.checkNotNull(note, "note");
        this.note = note;
        return this;
    }

    /**
     * The raw data returned by the integration for this event.
     */
    public CrmEvent withRaw(Map<String, Object> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    /**
     * The raw data returned by the integration for this event.
     */
    public CrmEvent withRaw(Optional<? extends Map<String, Object>> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    /**
     * The task object, when type = task
     */
    public CrmEvent withTask(PropertyCrmEventTask task) {
        Utils.checkNotNull(task, "task");
        this.task = Optional.ofNullable(task);
        return this;
    }

    /**
     * The task object, when type = task
     */
    public CrmEvent withTask(Optional<? extends PropertyCrmEventTask> task) {
        Utils.checkNotNull(task, "task");
        this.task = task;
        return this;
    }

    public CrmEvent withType(CrmEventType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public CrmEvent withType(Optional<? extends CrmEventType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public CrmEvent withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public CrmEvent withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public CrmEvent withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    public CrmEvent withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CrmEvent other = (CrmEvent) o;
        return 
            Objects.deepEquals(this.call, other.call) &&
            Objects.deepEquals(this.companyIds, other.companyIds) &&
            Objects.deepEquals(this.contactIds, other.contactIds) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.dealIds, other.dealIds) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.leadIds, other.leadIds) &&
            Objects.deepEquals(this.meeting, other.meeting) &&
            Objects.deepEquals(this.note, other.note) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.task, other.task) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            call,
            companyIds,
            contactIds,
            createdAt,
            dealIds,
            email,
            id,
            leadIds,
            meeting,
            note,
            raw,
            task,
            type,
            updatedAt,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CrmEvent.class,
                "call", call,
                "companyIds", companyIds,
                "contactIds", contactIds,
                "createdAt", createdAt,
                "dealIds", dealIds,
                "email", email,
                "id", id,
                "leadIds", leadIds,
                "meeting", meeting,
                "note", note,
                "raw", raw,
                "task", task,
                "type", type,
                "updatedAt", updatedAt,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private Optional<? extends PropertyCrmEventCall> call = Optional.empty();
 
        private Optional<? extends List<String>> companyIds = Optional.empty();
 
        private Optional<? extends List<String>> contactIds = Optional.empty();
 
        private Optional<OffsetDateTime> createdAt = Optional.empty();
 
        private Optional<? extends List<String>> dealIds = Optional.empty();
 
        private Optional<? extends PropertyCrmEventEmail> email = Optional.empty();
 
        private Optional<String> id = Optional.empty();
 
        private Optional<? extends List<String>> leadIds = Optional.empty();
 
        private Optional<? extends PropertyCrmEventMeeting> meeting = Optional.empty();
 
        private Optional<? extends PropertyCrmEventNote> note = Optional.empty();
 
        private Optional<? extends Map<String, Object>> raw = Optional.empty();
 
        private Optional<? extends PropertyCrmEventTask> task = Optional.empty();
 
        private Optional<? extends CrmEventType> type = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();
 
        private Optional<String> userId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The call object, when type = call
         */
        public Builder call(PropertyCrmEventCall call) {
            Utils.checkNotNull(call, "call");
            this.call = Optional.ofNullable(call);
            return this;
        }

        /**
         * The call object, when type = call
         */
        public Builder call(Optional<? extends PropertyCrmEventCall> call) {
            Utils.checkNotNull(call, "call");
            this.call = call;
            return this;
        }

        /**
         * An array of company IDs associated with this event
         */
        public Builder companyIds(List<String> companyIds) {
            Utils.checkNotNull(companyIds, "companyIds");
            this.companyIds = Optional.ofNullable(companyIds);
            return this;
        }

        /**
         * An array of company IDs associated with this event
         */
        public Builder companyIds(Optional<? extends List<String>> companyIds) {
            Utils.checkNotNull(companyIds, "companyIds");
            this.companyIds = companyIds;
            return this;
        }

        /**
         * An array of contact IDs associated with this event
         */
        public Builder contactIds(List<String> contactIds) {
            Utils.checkNotNull(contactIds, "contactIds");
            this.contactIds = Optional.ofNullable(contactIds);
            return this;
        }

        /**
         * An array of contact IDs associated with this event
         */
        public Builder contactIds(Optional<? extends List<String>> contactIds) {
            Utils.checkNotNull(contactIds, "contactIds");
            this.contactIds = contactIds;
            return this;
        }

        public Builder createdAt(OffsetDateTime createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<OffsetDateTime> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * An array of deal IDs associated with this event
         */
        public Builder dealIds(List<String> dealIds) {
            Utils.checkNotNull(dealIds, "dealIds");
            this.dealIds = Optional.ofNullable(dealIds);
            return this;
        }

        /**
         * An array of deal IDs associated with this event
         */
        public Builder dealIds(Optional<? extends List<String>> dealIds) {
            Utils.checkNotNull(dealIds, "dealIds");
            this.dealIds = dealIds;
            return this;
        }

        /**
         * The email object, when type = email
         */
        public Builder email(PropertyCrmEventEmail email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The email object, when type = email
         */
        public Builder email(Optional<? extends PropertyCrmEventEmail> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder leadIds(List<String> leadIds) {
            Utils.checkNotNull(leadIds, "leadIds");
            this.leadIds = Optional.ofNullable(leadIds);
            return this;
        }

        public Builder leadIds(Optional<? extends List<String>> leadIds) {
            Utils.checkNotNull(leadIds, "leadIds");
            this.leadIds = leadIds;
            return this;
        }

        /**
         * The meeting object, when type = meeting
         */
        public Builder meeting(PropertyCrmEventMeeting meeting) {
            Utils.checkNotNull(meeting, "meeting");
            this.meeting = Optional.ofNullable(meeting);
            return this;
        }

        /**
         * The meeting object, when type = meeting
         */
        public Builder meeting(Optional<? extends PropertyCrmEventMeeting> meeting) {
            Utils.checkNotNull(meeting, "meeting");
            this.meeting = meeting;
            return this;
        }

        /**
         * The note object, when type = note
         */
        public Builder note(PropertyCrmEventNote note) {
            Utils.checkNotNull(note, "note");
            this.note = Optional.ofNullable(note);
            return this;
        }

        /**
         * The note object, when type = note
         */
        public Builder note(Optional<? extends PropertyCrmEventNote> note) {
            Utils.checkNotNull(note, "note");
            this.note = note;
            return this;
        }

        /**
         * The raw data returned by the integration for this event.
         */
        public Builder raw(Map<String, Object> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        /**
         * The raw data returned by the integration for this event.
         */
        public Builder raw(Optional<? extends Map<String, Object>> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        /**
         * The task object, when type = task
         */
        public Builder task(PropertyCrmEventTask task) {
            Utils.checkNotNull(task, "task");
            this.task = Optional.ofNullable(task);
            return this;
        }

        /**
         * The task object, when type = task
         */
        public Builder task(Optional<? extends PropertyCrmEventTask> task) {
            Utils.checkNotNull(task, "task");
            this.task = task;
            return this;
        }

        public Builder type(CrmEventType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends CrmEventType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public CrmEvent build() {
            return new CrmEvent(
                call,
                companyIds,
                contactIds,
                createdAt,
                dealIds,
                email,
                id,
                leadIds,
                meeting,
                note,
                raw,
                task,
                type,
                updatedAt,
                userId);
        }
    }
}


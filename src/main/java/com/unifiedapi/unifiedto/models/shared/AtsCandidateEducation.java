/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.unifiedapi.unifiedto.models.shared;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;

public class AtsCandidateEducation {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("degree")
    private Optional<String> degree;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_at")
    private Optional<OffsetDateTime> endAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("field_of_study")
    private Optional<String> fieldOfStudy;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("institution")
    private Optional<String> institution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("level")
    private Optional<String> level;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_at")
    private Optional<OffsetDateTime> startAt;

    @JsonCreator
    public AtsCandidateEducation(
            @JsonProperty("degree") Optional<String> degree,
            @JsonProperty("end_at") Optional<OffsetDateTime> endAt,
            @JsonProperty("field_of_study") Optional<String> fieldOfStudy,
            @JsonProperty("institution") Optional<String> institution,
            @JsonProperty("level") Optional<String> level,
            @JsonProperty("start_at") Optional<OffsetDateTime> startAt) {
        Utils.checkNotNull(degree, "degree");
        Utils.checkNotNull(endAt, "endAt");
        Utils.checkNotNull(fieldOfStudy, "fieldOfStudy");
        Utils.checkNotNull(institution, "institution");
        Utils.checkNotNull(level, "level");
        Utils.checkNotNull(startAt, "startAt");
        this.degree = degree;
        this.endAt = endAt;
        this.fieldOfStudy = fieldOfStudy;
        this.institution = institution;
        this.level = level;
        this.startAt = startAt;
    }
    
    public AtsCandidateEducation() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> degree() {
        return degree;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> endAt() {
        return endAt;
    }

    @JsonIgnore
    public Optional<String> fieldOfStudy() {
        return fieldOfStudy;
    }

    @JsonIgnore
    public Optional<String> institution() {
        return institution;
    }

    @JsonIgnore
    public Optional<String> level() {
        return level;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> startAt() {
        return startAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AtsCandidateEducation withDegree(String degree) {
        Utils.checkNotNull(degree, "degree");
        this.degree = Optional.ofNullable(degree);
        return this;
    }

    public AtsCandidateEducation withDegree(Optional<String> degree) {
        Utils.checkNotNull(degree, "degree");
        this.degree = degree;
        return this;
    }

    public AtsCandidateEducation withEndAt(OffsetDateTime endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = Optional.ofNullable(endAt);
        return this;
    }

    public AtsCandidateEducation withEndAt(Optional<OffsetDateTime> endAt) {
        Utils.checkNotNull(endAt, "endAt");
        this.endAt = endAt;
        return this;
    }

    public AtsCandidateEducation withFieldOfStudy(String fieldOfStudy) {
        Utils.checkNotNull(fieldOfStudy, "fieldOfStudy");
        this.fieldOfStudy = Optional.ofNullable(fieldOfStudy);
        return this;
    }

    public AtsCandidateEducation withFieldOfStudy(Optional<String> fieldOfStudy) {
        Utils.checkNotNull(fieldOfStudy, "fieldOfStudy");
        this.fieldOfStudy = fieldOfStudy;
        return this;
    }

    public AtsCandidateEducation withInstitution(String institution) {
        Utils.checkNotNull(institution, "institution");
        this.institution = Optional.ofNullable(institution);
        return this;
    }

    public AtsCandidateEducation withInstitution(Optional<String> institution) {
        Utils.checkNotNull(institution, "institution");
        this.institution = institution;
        return this;
    }

    public AtsCandidateEducation withLevel(String level) {
        Utils.checkNotNull(level, "level");
        this.level = Optional.ofNullable(level);
        return this;
    }

    public AtsCandidateEducation withLevel(Optional<String> level) {
        Utils.checkNotNull(level, "level");
        this.level = level;
        return this;
    }

    public AtsCandidateEducation withStartAt(OffsetDateTime startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = Optional.ofNullable(startAt);
        return this;
    }

    public AtsCandidateEducation withStartAt(Optional<OffsetDateTime> startAt) {
        Utils.checkNotNull(startAt, "startAt");
        this.startAt = startAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AtsCandidateEducation other = (AtsCandidateEducation) o;
        return 
            Objects.deepEquals(this.degree, other.degree) &&
            Objects.deepEquals(this.endAt, other.endAt) &&
            Objects.deepEquals(this.fieldOfStudy, other.fieldOfStudy) &&
            Objects.deepEquals(this.institution, other.institution) &&
            Objects.deepEquals(this.level, other.level) &&
            Objects.deepEquals(this.startAt, other.startAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            degree,
            endAt,
            fieldOfStudy,
            institution,
            level,
            startAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AtsCandidateEducation.class,
                "degree", degree,
                "endAt", endAt,
                "fieldOfStudy", fieldOfStudy,
                "institution", institution,
                "level", level,
                "startAt", startAt);
    }
    
    public final static class Builder {
 
        private Optional<String> degree = Optional.empty();
 
        private Optional<OffsetDateTime> endAt = Optional.empty();
 
        private Optional<String> fieldOfStudy = Optional.empty();
 
        private Optional<String> institution = Optional.empty();
 
        private Optional<String> level = Optional.empty();
 
        private Optional<OffsetDateTime> startAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder degree(String degree) {
            Utils.checkNotNull(degree, "degree");
            this.degree = Optional.ofNullable(degree);
            return this;
        }

        public Builder degree(Optional<String> degree) {
            Utils.checkNotNull(degree, "degree");
            this.degree = degree;
            return this;
        }

        public Builder endAt(OffsetDateTime endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = Optional.ofNullable(endAt);
            return this;
        }

        public Builder endAt(Optional<OffsetDateTime> endAt) {
            Utils.checkNotNull(endAt, "endAt");
            this.endAt = endAt;
            return this;
        }

        public Builder fieldOfStudy(String fieldOfStudy) {
            Utils.checkNotNull(fieldOfStudy, "fieldOfStudy");
            this.fieldOfStudy = Optional.ofNullable(fieldOfStudy);
            return this;
        }

        public Builder fieldOfStudy(Optional<String> fieldOfStudy) {
            Utils.checkNotNull(fieldOfStudy, "fieldOfStudy");
            this.fieldOfStudy = fieldOfStudy;
            return this;
        }

        public Builder institution(String institution) {
            Utils.checkNotNull(institution, "institution");
            this.institution = Optional.ofNullable(institution);
            return this;
        }

        public Builder institution(Optional<String> institution) {
            Utils.checkNotNull(institution, "institution");
            this.institution = institution;
            return this;
        }

        public Builder level(String level) {
            Utils.checkNotNull(level, "level");
            this.level = Optional.ofNullable(level);
            return this;
        }

        public Builder level(Optional<String> level) {
            Utils.checkNotNull(level, "level");
            this.level = level;
            return this;
        }

        public Builder startAt(OffsetDateTime startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = Optional.ofNullable(startAt);
            return this;
        }

        public Builder startAt(Optional<OffsetDateTime> startAt) {
            Utils.checkNotNull(startAt, "startAt");
            this.startAt = startAt;
            return this;
        }
        
        public AtsCandidateEducation build() {
            return new AtsCandidateEducation(
                degree,
                endAt,
                fieldOfStudy,
                institution,
                level,
                startAt);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class StoragePermission {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("group_id")
    private Optional<String> groupId;

    @JsonProperty("roles")
    private List<PropertyStoragePermissionRoles> roles;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("user_id")
    private Optional<String> userId;

    @JsonCreator
    public StoragePermission(
            @JsonProperty("group_id") Optional<String> groupId,
            @JsonProperty("roles") List<PropertyStoragePermissionRoles> roles,
            @JsonProperty("user_id") Optional<String> userId) {
        Utils.checkNotNull(groupId, "groupId");
        Utils.checkNotNull(roles, "roles");
        Utils.checkNotNull(userId, "userId");
        this.groupId = groupId;
        this.roles = roles;
        this.userId = userId;
    }
    
    public StoragePermission(
            List<PropertyStoragePermissionRoles> roles) {
        this(Optional.empty(), roles, Optional.empty());
    }

    @JsonIgnore
    public Optional<String> groupId() {
        return groupId;
    }

    @JsonIgnore
    public List<PropertyStoragePermissionRoles> roles() {
        return roles;
    }

    @JsonIgnore
    public Optional<String> userId() {
        return userId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public StoragePermission withGroupId(String groupId) {
        Utils.checkNotNull(groupId, "groupId");
        this.groupId = Optional.ofNullable(groupId);
        return this;
    }

    public StoragePermission withGroupId(Optional<String> groupId) {
        Utils.checkNotNull(groupId, "groupId");
        this.groupId = groupId;
        return this;
    }

    public StoragePermission withRoles(List<PropertyStoragePermissionRoles> roles) {
        Utils.checkNotNull(roles, "roles");
        this.roles = roles;
        return this;
    }

    public StoragePermission withUserId(String userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = Optional.ofNullable(userId);
        return this;
    }

    public StoragePermission withUserId(Optional<String> userId) {
        Utils.checkNotNull(userId, "userId");
        this.userId = userId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        StoragePermission other = (StoragePermission) o;
        return 
            Objects.deepEquals(this.groupId, other.groupId) &&
            Objects.deepEquals(this.roles, other.roles) &&
            Objects.deepEquals(this.userId, other.userId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            groupId,
            roles,
            userId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(StoragePermission.class,
                "groupId", groupId,
                "roles", roles,
                "userId", userId);
    }
    
    public final static class Builder {
 
        private Optional<String> groupId = Optional.empty();
 
        private List<PropertyStoragePermissionRoles> roles;
 
        private Optional<String> userId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder groupId(String groupId) {
            Utils.checkNotNull(groupId, "groupId");
            this.groupId = Optional.ofNullable(groupId);
            return this;
        }

        public Builder groupId(Optional<String> groupId) {
            Utils.checkNotNull(groupId, "groupId");
            this.groupId = groupId;
            return this;
        }

        public Builder roles(List<PropertyStoragePermissionRoles> roles) {
            Utils.checkNotNull(roles, "roles");
            this.roles = roles;
            return this;
        }

        public Builder userId(String userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = Optional.ofNullable(userId);
            return this;
        }

        public Builder userId(Optional<String> userId) {
            Utils.checkNotNull(userId, "userId");
            this.userId = userId;
            return this;
        }
        
        public StoragePermission build() {
            return new StoragePermission(
                groupId,
                roles,
                userId);
        }
    }
}


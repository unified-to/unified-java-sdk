/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class Undefined {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("$ref")
    private Optional<String> dollarRef;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("display")
    private Optional<String> display;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("operation")
    private Optional<? extends Operation> operation;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends UndefinedType> type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<String> value;

    @JsonCreator
    public Undefined(
            @JsonProperty("$ref") Optional<String> dollarRef,
            @JsonProperty("display") Optional<String> display,
            @JsonProperty("operation") Optional<? extends Operation> operation,
            @JsonProperty("type") Optional<? extends UndefinedType> type,
            @JsonProperty("value") Optional<String> value) {
        Utils.checkNotNull(dollarRef, "dollarRef");
        Utils.checkNotNull(display, "display");
        Utils.checkNotNull(operation, "operation");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(value, "value");
        this.dollarRef = dollarRef;
        this.display = display;
        this.operation = operation;
        this.type = type;
        this.value = value;
    }
    
    public Undefined() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> dollarRef() {
        return dollarRef;
    }

    @JsonIgnore
    public Optional<String> display() {
        return display;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Operation> operation() {
        return (Optional<Operation>) operation;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<UndefinedType> type() {
        return (Optional<UndefinedType>) type;
    }

    @JsonIgnore
    public Optional<String> value() {
        return value;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Undefined withDollarRef(String dollarRef) {
        Utils.checkNotNull(dollarRef, "dollarRef");
        this.dollarRef = Optional.ofNullable(dollarRef);
        return this;
    }

    public Undefined withDollarRef(Optional<String> dollarRef) {
        Utils.checkNotNull(dollarRef, "dollarRef");
        this.dollarRef = dollarRef;
        return this;
    }

    public Undefined withDisplay(String display) {
        Utils.checkNotNull(display, "display");
        this.display = Optional.ofNullable(display);
        return this;
    }

    public Undefined withDisplay(Optional<String> display) {
        Utils.checkNotNull(display, "display");
        this.display = display;
        return this;
    }

    public Undefined withOperation(Operation operation) {
        Utils.checkNotNull(operation, "operation");
        this.operation = Optional.ofNullable(operation);
        return this;
    }

    public Undefined withOperation(Optional<? extends Operation> operation) {
        Utils.checkNotNull(operation, "operation");
        this.operation = operation;
        return this;
    }

    public Undefined withType(UndefinedType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    public Undefined withType(Optional<? extends UndefinedType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Undefined withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    public Undefined withValue(Optional<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Undefined other = (Undefined) o;
        return 
            Objects.deepEquals(this.dollarRef, other.dollarRef) &&
            Objects.deepEquals(this.display, other.display) &&
            Objects.deepEquals(this.operation, other.operation) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.value, other.value);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            dollarRef,
            display,
            operation,
            type,
            value);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Undefined.class,
                "dollarRef", dollarRef,
                "display", display,
                "operation", operation,
                "type", type,
                "value", value);
    }
    
    public final static class Builder {
 
        private Optional<String> dollarRef = Optional.empty();
 
        private Optional<String> display = Optional.empty();
 
        private Optional<? extends Operation> operation = Optional.empty();
 
        private Optional<? extends UndefinedType> type = Optional.empty();
 
        private Optional<String> value = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder dollarRef(String dollarRef) {
            Utils.checkNotNull(dollarRef, "dollarRef");
            this.dollarRef = Optional.ofNullable(dollarRef);
            return this;
        }

        public Builder dollarRef(Optional<String> dollarRef) {
            Utils.checkNotNull(dollarRef, "dollarRef");
            this.dollarRef = dollarRef;
            return this;
        }

        public Builder display(String display) {
            Utils.checkNotNull(display, "display");
            this.display = Optional.ofNullable(display);
            return this;
        }

        public Builder display(Optional<String> display) {
            Utils.checkNotNull(display, "display");
            this.display = display;
            return this;
        }

        public Builder operation(Operation operation) {
            Utils.checkNotNull(operation, "operation");
            this.operation = Optional.ofNullable(operation);
            return this;
        }

        public Builder operation(Optional<? extends Operation> operation) {
            Utils.checkNotNull(operation, "operation");
            this.operation = operation;
            return this;
        }

        public Builder type(UndefinedType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        public Builder type(Optional<? extends UndefinedType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        public Builder value(Optional<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }
        
        public Undefined build() {
            return new Undefined(
                dollarRef,
                display,
                operation,
                type,
                value);
        }
    }
}


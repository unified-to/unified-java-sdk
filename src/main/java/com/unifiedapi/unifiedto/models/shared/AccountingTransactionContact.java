/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class AccountingTransactionContact {

    @JsonProperty("id")
    private String id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_customer")
    private Optional<Boolean> isCustomer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_supplier")
    private Optional<Boolean> isSupplier;

    @JsonCreator
    public AccountingTransactionContact(
            @JsonProperty("id") String id,
            @JsonProperty("is_customer") Optional<Boolean> isCustomer,
            @JsonProperty("is_supplier") Optional<Boolean> isSupplier) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(isCustomer, "isCustomer");
        Utils.checkNotNull(isSupplier, "isSupplier");
        this.id = id;
        this.isCustomer = isCustomer;
        this.isSupplier = isSupplier;
    }
    
    public AccountingTransactionContact(
            String id) {
        this(id, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public String id() {
        return id;
    }

    @JsonIgnore
    public Optional<Boolean> isCustomer() {
        return isCustomer;
    }

    @JsonIgnore
    public Optional<Boolean> isSupplier() {
        return isSupplier;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public AccountingTransactionContact withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public AccountingTransactionContact withIsCustomer(boolean isCustomer) {
        Utils.checkNotNull(isCustomer, "isCustomer");
        this.isCustomer = Optional.ofNullable(isCustomer);
        return this;
    }

    public AccountingTransactionContact withIsCustomer(Optional<Boolean> isCustomer) {
        Utils.checkNotNull(isCustomer, "isCustomer");
        this.isCustomer = isCustomer;
        return this;
    }

    public AccountingTransactionContact withIsSupplier(boolean isSupplier) {
        Utils.checkNotNull(isSupplier, "isSupplier");
        this.isSupplier = Optional.ofNullable(isSupplier);
        return this;
    }

    public AccountingTransactionContact withIsSupplier(Optional<Boolean> isSupplier) {
        Utils.checkNotNull(isSupplier, "isSupplier");
        this.isSupplier = isSupplier;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccountingTransactionContact other = (AccountingTransactionContact) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.isCustomer, other.isCustomer) &&
            Objects.deepEquals(this.isSupplier, other.isSupplier);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            isCustomer,
            isSupplier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccountingTransactionContact.class,
                "id", id,
                "isCustomer", isCustomer,
                "isSupplier", isSupplier);
    }
    
    public final static class Builder {
 
        private String id;
 
        private Optional<Boolean> isCustomer = Optional.empty();
 
        private Optional<Boolean> isSupplier = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder isCustomer(boolean isCustomer) {
            Utils.checkNotNull(isCustomer, "isCustomer");
            this.isCustomer = Optional.ofNullable(isCustomer);
            return this;
        }

        public Builder isCustomer(Optional<Boolean> isCustomer) {
            Utils.checkNotNull(isCustomer, "isCustomer");
            this.isCustomer = isCustomer;
            return this;
        }

        public Builder isSupplier(boolean isSupplier) {
            Utils.checkNotNull(isSupplier, "isSupplier");
            this.isSupplier = Optional.ofNullable(isSupplier);
            return this;
        }

        public Builder isSupplier(Optional<Boolean> isSupplier) {
            Utils.checkNotNull(isSupplier, "isSupplier");
            this.isSupplier = isSupplier;
            return this;
        }
        
        public AccountingTransactionContact build() {
            return new AccountingTransactionContact(
                id,
                isCustomer,
                isSupplier);
        }
    }
}


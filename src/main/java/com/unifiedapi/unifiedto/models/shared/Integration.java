/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;

/**
 * Integration - Informational object for supported integrations.
 */

public class Integration {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active_healthy_connections")
    private Optional<Double> activeHealthyConnections;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api")
    private Optional<? extends Map<String, Object>> api;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_docs_url")
    private Optional<String> apiDocsUrl;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("beta")
    private Optional<Boolean> beta;

    /**
     * The categories of support solutions that this integration has
     */
    @JsonProperty("categories")
    private List<PropertyIntegrationCategories> categories;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("color")
    private Optional<String> color;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<String> createdAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fa_icon")
    private Optional<String> faIcon;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("featured")
    private Optional<Boolean> featured;

    @JsonProperty("in_progress")
    private boolean inProgress;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    private Optional<Boolean> isActive;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("logo_url")
    private Optional<String> logoUrl;

    @JsonProperty("name")
    private String name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("popularity")
    private Optional<Double> popularity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("rate_limit_description")
    private Optional<String> rateLimitDescription;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("support")
    private Optional<? extends Map<String, IntegrationSupport>> support;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tested_at")
    private Optional<OffsetDateTime> testedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("text_color")
    private Optional<String> textColor;

    /**
     * instructions for the user on how to find the token/key
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_instructions")
    private Optional<? extends List<String>> tokenInstructions;

    /**
     * if auth_types = 'token'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_names")
    private Optional<? extends List<String>> tokenNames;

    @JsonProperty("type")
    private String type;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<String> updatedAt;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("web_url")
    private Optional<String> webUrl;

    @JsonCreator
    public Integration(
            @JsonProperty("active_healthy_connections") Optional<Double> activeHealthyConnections,
            @JsonProperty("api") Optional<? extends Map<String, Object>> api,
            @JsonProperty("api_docs_url") Optional<String> apiDocsUrl,
            @JsonProperty("beta") Optional<Boolean> beta,
            @JsonProperty("categories") List<PropertyIntegrationCategories> categories,
            @JsonProperty("color") Optional<String> color,
            @JsonProperty("created_at") Optional<String> createdAt,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("fa_icon") Optional<String> faIcon,
            @JsonProperty("featured") Optional<Boolean> featured,
            @JsonProperty("in_progress") boolean inProgress,
            @JsonProperty("is_active") Optional<Boolean> isActive,
            @JsonProperty("logo_url") Optional<String> logoUrl,
            @JsonProperty("name") String name,
            @JsonProperty("popularity") Optional<Double> popularity,
            @JsonProperty("rate_limit_description") Optional<String> rateLimitDescription,
            @JsonProperty("support") Optional<? extends Map<String, IntegrationSupport>> support,
            @JsonProperty("tested_at") Optional<OffsetDateTime> testedAt,
            @JsonProperty("text_color") Optional<String> textColor,
            @JsonProperty("token_instructions") Optional<? extends List<String>> tokenInstructions,
            @JsonProperty("token_names") Optional<? extends List<String>> tokenNames,
            @JsonProperty("type") String type,
            @JsonProperty("updated_at") Optional<String> updatedAt,
            @JsonProperty("web_url") Optional<String> webUrl) {
        Utils.checkNotNull(activeHealthyConnections, "activeHealthyConnections");
        Utils.checkNotNull(api, "api");
        Utils.checkNotNull(apiDocsUrl, "apiDocsUrl");
        Utils.checkNotNull(beta, "beta");
        Utils.checkNotNull(categories, "categories");
        Utils.checkNotNull(color, "color");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(faIcon, "faIcon");
        Utils.checkNotNull(featured, "featured");
        Utils.checkNotNull(inProgress, "inProgress");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(logoUrl, "logoUrl");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(popularity, "popularity");
        Utils.checkNotNull(rateLimitDescription, "rateLimitDescription");
        Utils.checkNotNull(support, "support");
        Utils.checkNotNull(testedAt, "testedAt");
        Utils.checkNotNull(textColor, "textColor");
        Utils.checkNotNull(tokenInstructions, "tokenInstructions");
        Utils.checkNotNull(tokenNames, "tokenNames");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(updatedAt, "updatedAt");
        Utils.checkNotNull(webUrl, "webUrl");
        this.activeHealthyConnections = activeHealthyConnections;
        this.api = api;
        this.apiDocsUrl = apiDocsUrl;
        this.beta = beta;
        this.categories = categories;
        this.color = color;
        this.createdAt = createdAt;
        this.description = description;
        this.faIcon = faIcon;
        this.featured = featured;
        this.inProgress = inProgress;
        this.isActive = isActive;
        this.logoUrl = logoUrl;
        this.name = name;
        this.popularity = popularity;
        this.rateLimitDescription = rateLimitDescription;
        this.support = support;
        this.testedAt = testedAt;
        this.textColor = textColor;
        this.tokenInstructions = tokenInstructions;
        this.tokenNames = tokenNames;
        this.type = type;
        this.updatedAt = updatedAt;
        this.webUrl = webUrl;
    }
    
    public Integration(
            List<PropertyIntegrationCategories> categories,
            boolean inProgress,
            String name,
            String type) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), categories, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), inProgress, Optional.empty(), Optional.empty(), name, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), type, Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Double> activeHealthyConnections() {
        return activeHealthyConnections;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, Object>> api() {
        return (Optional<Map<String, Object>>) api;
    }

    @JsonIgnore
    public Optional<String> apiDocsUrl() {
        return apiDocsUrl;
    }

    @JsonIgnore
    public Optional<Boolean> beta() {
        return beta;
    }

    /**
     * The categories of support solutions that this integration has
     */
    @JsonIgnore
    public List<PropertyIntegrationCategories> categories() {
        return categories;
    }

    @JsonIgnore
    public Optional<String> color() {
        return color;
    }

    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    @JsonIgnore
    public Optional<String> faIcon() {
        return faIcon;
    }

    @JsonIgnore
    public Optional<Boolean> featured() {
        return featured;
    }

    @JsonIgnore
    public boolean inProgress() {
        return inProgress;
    }

    @JsonIgnore
    public Optional<Boolean> isActive() {
        return isActive;
    }

    @JsonIgnore
    public Optional<String> logoUrl() {
        return logoUrl;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public Optional<Double> popularity() {
        return popularity;
    }

    @JsonIgnore
    public Optional<String> rateLimitDescription() {
        return rateLimitDescription;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Map<String, IntegrationSupport>> support() {
        return (Optional<Map<String, IntegrationSupport>>) support;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> testedAt() {
        return testedAt;
    }

    @JsonIgnore
    public Optional<String> textColor() {
        return textColor;
    }

    /**
     * instructions for the user on how to find the token/key
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tokenInstructions() {
        return (Optional<List<String>>) tokenInstructions;
    }

    /**
     * if auth_types = 'token'
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> tokenNames() {
        return (Optional<List<String>>) tokenNames;
    }

    @JsonIgnore
    public String type() {
        return type;
    }

    @JsonIgnore
    public Optional<String> updatedAt() {
        return updatedAt;
    }

    @JsonIgnore
    public Optional<String> webUrl() {
        return webUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Integration withActiveHealthyConnections(double activeHealthyConnections) {
        Utils.checkNotNull(activeHealthyConnections, "activeHealthyConnections");
        this.activeHealthyConnections = Optional.ofNullable(activeHealthyConnections);
        return this;
    }

    public Integration withActiveHealthyConnections(Optional<Double> activeHealthyConnections) {
        Utils.checkNotNull(activeHealthyConnections, "activeHealthyConnections");
        this.activeHealthyConnections = activeHealthyConnections;
        return this;
    }

    public Integration withApi(Map<String, Object> api) {
        Utils.checkNotNull(api, "api");
        this.api = Optional.ofNullable(api);
        return this;
    }

    public Integration withApi(Optional<? extends Map<String, Object>> api) {
        Utils.checkNotNull(api, "api");
        this.api = api;
        return this;
    }

    public Integration withApiDocsUrl(String apiDocsUrl) {
        Utils.checkNotNull(apiDocsUrl, "apiDocsUrl");
        this.apiDocsUrl = Optional.ofNullable(apiDocsUrl);
        return this;
    }

    public Integration withApiDocsUrl(Optional<String> apiDocsUrl) {
        Utils.checkNotNull(apiDocsUrl, "apiDocsUrl");
        this.apiDocsUrl = apiDocsUrl;
        return this;
    }

    public Integration withBeta(boolean beta) {
        Utils.checkNotNull(beta, "beta");
        this.beta = Optional.ofNullable(beta);
        return this;
    }

    public Integration withBeta(Optional<Boolean> beta) {
        Utils.checkNotNull(beta, "beta");
        this.beta = beta;
        return this;
    }

    /**
     * The categories of support solutions that this integration has
     */
    public Integration withCategories(List<PropertyIntegrationCategories> categories) {
        Utils.checkNotNull(categories, "categories");
        this.categories = categories;
        return this;
    }

    public Integration withColor(String color) {
        Utils.checkNotNull(color, "color");
        this.color = Optional.ofNullable(color);
        return this;
    }

    public Integration withColor(Optional<String> color) {
        Utils.checkNotNull(color, "color");
        this.color = color;
        return this;
    }

    public Integration withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    public Integration withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    public Integration withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    public Integration withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    public Integration withFaIcon(String faIcon) {
        Utils.checkNotNull(faIcon, "faIcon");
        this.faIcon = Optional.ofNullable(faIcon);
        return this;
    }

    public Integration withFaIcon(Optional<String> faIcon) {
        Utils.checkNotNull(faIcon, "faIcon");
        this.faIcon = faIcon;
        return this;
    }

    public Integration withFeatured(boolean featured) {
        Utils.checkNotNull(featured, "featured");
        this.featured = Optional.ofNullable(featured);
        return this;
    }

    public Integration withFeatured(Optional<Boolean> featured) {
        Utils.checkNotNull(featured, "featured");
        this.featured = featured;
        return this;
    }

    public Integration withInProgress(boolean inProgress) {
        Utils.checkNotNull(inProgress, "inProgress");
        this.inProgress = inProgress;
        return this;
    }

    public Integration withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }

    public Integration withIsActive(Optional<Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    public Integration withLogoUrl(String logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = Optional.ofNullable(logoUrl);
        return this;
    }

    public Integration withLogoUrl(Optional<String> logoUrl) {
        Utils.checkNotNull(logoUrl, "logoUrl");
        this.logoUrl = logoUrl;
        return this;
    }

    public Integration withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Integration withPopularity(double popularity) {
        Utils.checkNotNull(popularity, "popularity");
        this.popularity = Optional.ofNullable(popularity);
        return this;
    }

    public Integration withPopularity(Optional<Double> popularity) {
        Utils.checkNotNull(popularity, "popularity");
        this.popularity = popularity;
        return this;
    }

    public Integration withRateLimitDescription(String rateLimitDescription) {
        Utils.checkNotNull(rateLimitDescription, "rateLimitDescription");
        this.rateLimitDescription = Optional.ofNullable(rateLimitDescription);
        return this;
    }

    public Integration withRateLimitDescription(Optional<String> rateLimitDescription) {
        Utils.checkNotNull(rateLimitDescription, "rateLimitDescription");
        this.rateLimitDescription = rateLimitDescription;
        return this;
    }

    public Integration withSupport(Map<String, IntegrationSupport> support) {
        Utils.checkNotNull(support, "support");
        this.support = Optional.ofNullable(support);
        return this;
    }

    public Integration withSupport(Optional<? extends Map<String, IntegrationSupport>> support) {
        Utils.checkNotNull(support, "support");
        this.support = support;
        return this;
    }

    public Integration withTestedAt(OffsetDateTime testedAt) {
        Utils.checkNotNull(testedAt, "testedAt");
        this.testedAt = Optional.ofNullable(testedAt);
        return this;
    }

    public Integration withTestedAt(Optional<OffsetDateTime> testedAt) {
        Utils.checkNotNull(testedAt, "testedAt");
        this.testedAt = testedAt;
        return this;
    }

    public Integration withTextColor(String textColor) {
        Utils.checkNotNull(textColor, "textColor");
        this.textColor = Optional.ofNullable(textColor);
        return this;
    }

    public Integration withTextColor(Optional<String> textColor) {
        Utils.checkNotNull(textColor, "textColor");
        this.textColor = textColor;
        return this;
    }

    /**
     * instructions for the user on how to find the token/key
     */
    public Integration withTokenInstructions(List<String> tokenInstructions) {
        Utils.checkNotNull(tokenInstructions, "tokenInstructions");
        this.tokenInstructions = Optional.ofNullable(tokenInstructions);
        return this;
    }

    /**
     * instructions for the user on how to find the token/key
     */
    public Integration withTokenInstructions(Optional<? extends List<String>> tokenInstructions) {
        Utils.checkNotNull(tokenInstructions, "tokenInstructions");
        this.tokenInstructions = tokenInstructions;
        return this;
    }

    /**
     * if auth_types = 'token'
     */
    public Integration withTokenNames(List<String> tokenNames) {
        Utils.checkNotNull(tokenNames, "tokenNames");
        this.tokenNames = Optional.ofNullable(tokenNames);
        return this;
    }

    /**
     * if auth_types = 'token'
     */
    public Integration withTokenNames(Optional<? extends List<String>> tokenNames) {
        Utils.checkNotNull(tokenNames, "tokenNames");
        this.tokenNames = tokenNames;
        return this;
    }

    public Integration withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    public Integration withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public Integration withUpdatedAt(Optional<String> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }

    public Integration withWebUrl(String webUrl) {
        Utils.checkNotNull(webUrl, "webUrl");
        this.webUrl = Optional.ofNullable(webUrl);
        return this;
    }

    public Integration withWebUrl(Optional<String> webUrl) {
        Utils.checkNotNull(webUrl, "webUrl");
        this.webUrl = webUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Integration other = (Integration) o;
        return 
            Objects.deepEquals(this.activeHealthyConnections, other.activeHealthyConnections) &&
            Objects.deepEquals(this.api, other.api) &&
            Objects.deepEquals(this.apiDocsUrl, other.apiDocsUrl) &&
            Objects.deepEquals(this.beta, other.beta) &&
            Objects.deepEquals(this.categories, other.categories) &&
            Objects.deepEquals(this.color, other.color) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.faIcon, other.faIcon) &&
            Objects.deepEquals(this.featured, other.featured) &&
            Objects.deepEquals(this.inProgress, other.inProgress) &&
            Objects.deepEquals(this.isActive, other.isActive) &&
            Objects.deepEquals(this.logoUrl, other.logoUrl) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.popularity, other.popularity) &&
            Objects.deepEquals(this.rateLimitDescription, other.rateLimitDescription) &&
            Objects.deepEquals(this.support, other.support) &&
            Objects.deepEquals(this.testedAt, other.testedAt) &&
            Objects.deepEquals(this.textColor, other.textColor) &&
            Objects.deepEquals(this.tokenInstructions, other.tokenInstructions) &&
            Objects.deepEquals(this.tokenNames, other.tokenNames) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt) &&
            Objects.deepEquals(this.webUrl, other.webUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            activeHealthyConnections,
            api,
            apiDocsUrl,
            beta,
            categories,
            color,
            createdAt,
            description,
            faIcon,
            featured,
            inProgress,
            isActive,
            logoUrl,
            name,
            popularity,
            rateLimitDescription,
            support,
            testedAt,
            textColor,
            tokenInstructions,
            tokenNames,
            type,
            updatedAt,
            webUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Integration.class,
                "activeHealthyConnections", activeHealthyConnections,
                "api", api,
                "apiDocsUrl", apiDocsUrl,
                "beta", beta,
                "categories", categories,
                "color", color,
                "createdAt", createdAt,
                "description", description,
                "faIcon", faIcon,
                "featured", featured,
                "inProgress", inProgress,
                "isActive", isActive,
                "logoUrl", logoUrl,
                "name", name,
                "popularity", popularity,
                "rateLimitDescription", rateLimitDescription,
                "support", support,
                "testedAt", testedAt,
                "textColor", textColor,
                "tokenInstructions", tokenInstructions,
                "tokenNames", tokenNames,
                "type", type,
                "updatedAt", updatedAt,
                "webUrl", webUrl);
    }
    
    public final static class Builder {
 
        private Optional<Double> activeHealthyConnections = Optional.empty();
 
        private Optional<? extends Map<String, Object>> api = Optional.empty();
 
        private Optional<String> apiDocsUrl = Optional.empty();
 
        private Optional<Boolean> beta = Optional.empty();
 
        private List<PropertyIntegrationCategories> categories;
 
        private Optional<String> color = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> faIcon = Optional.empty();
 
        private Optional<Boolean> featured = Optional.empty();
 
        private Boolean inProgress;
 
        private Optional<Boolean> isActive = Optional.empty();
 
        private Optional<String> logoUrl = Optional.empty();
 
        private String name;
 
        private Optional<Double> popularity = Optional.empty();
 
        private Optional<String> rateLimitDescription = Optional.empty();
 
        private Optional<? extends Map<String, IntegrationSupport>> support = Optional.empty();
 
        private Optional<OffsetDateTime> testedAt = Optional.empty();
 
        private Optional<String> textColor = Optional.empty();
 
        private Optional<? extends List<String>> tokenInstructions = Optional.empty();
 
        private Optional<? extends List<String>> tokenNames = Optional.empty();
 
        private String type;
 
        private Optional<String> updatedAt = Optional.empty();
 
        private Optional<String> webUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder activeHealthyConnections(double activeHealthyConnections) {
            Utils.checkNotNull(activeHealthyConnections, "activeHealthyConnections");
            this.activeHealthyConnections = Optional.ofNullable(activeHealthyConnections);
            return this;
        }

        public Builder activeHealthyConnections(Optional<Double> activeHealthyConnections) {
            Utils.checkNotNull(activeHealthyConnections, "activeHealthyConnections");
            this.activeHealthyConnections = activeHealthyConnections;
            return this;
        }

        public Builder api(Map<String, Object> api) {
            Utils.checkNotNull(api, "api");
            this.api = Optional.ofNullable(api);
            return this;
        }

        public Builder api(Optional<? extends Map<String, Object>> api) {
            Utils.checkNotNull(api, "api");
            this.api = api;
            return this;
        }

        public Builder apiDocsUrl(String apiDocsUrl) {
            Utils.checkNotNull(apiDocsUrl, "apiDocsUrl");
            this.apiDocsUrl = Optional.ofNullable(apiDocsUrl);
            return this;
        }

        public Builder apiDocsUrl(Optional<String> apiDocsUrl) {
            Utils.checkNotNull(apiDocsUrl, "apiDocsUrl");
            this.apiDocsUrl = apiDocsUrl;
            return this;
        }

        public Builder beta(boolean beta) {
            Utils.checkNotNull(beta, "beta");
            this.beta = Optional.ofNullable(beta);
            return this;
        }

        public Builder beta(Optional<Boolean> beta) {
            Utils.checkNotNull(beta, "beta");
            this.beta = beta;
            return this;
        }

        /**
         * The categories of support solutions that this integration has
         */
        public Builder categories(List<PropertyIntegrationCategories> categories) {
            Utils.checkNotNull(categories, "categories");
            this.categories = categories;
            return this;
        }

        public Builder color(String color) {
            Utils.checkNotNull(color, "color");
            this.color = Optional.ofNullable(color);
            return this;
        }

        public Builder color(Optional<String> color) {
            Utils.checkNotNull(color, "color");
            this.color = color;
            return this;
        }

        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        public Builder faIcon(String faIcon) {
            Utils.checkNotNull(faIcon, "faIcon");
            this.faIcon = Optional.ofNullable(faIcon);
            return this;
        }

        public Builder faIcon(Optional<String> faIcon) {
            Utils.checkNotNull(faIcon, "faIcon");
            this.faIcon = faIcon;
            return this;
        }

        public Builder featured(boolean featured) {
            Utils.checkNotNull(featured, "featured");
            this.featured = Optional.ofNullable(featured);
            return this;
        }

        public Builder featured(Optional<Boolean> featured) {
            Utils.checkNotNull(featured, "featured");
            this.featured = featured;
            return this;
        }

        public Builder inProgress(boolean inProgress) {
            Utils.checkNotNull(inProgress, "inProgress");
            this.inProgress = inProgress;
            return this;
        }

        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        public Builder isActive(Optional<Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }

        public Builder logoUrl(String logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = Optional.ofNullable(logoUrl);
            return this;
        }

        public Builder logoUrl(Optional<String> logoUrl) {
            Utils.checkNotNull(logoUrl, "logoUrl");
            this.logoUrl = logoUrl;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder popularity(double popularity) {
            Utils.checkNotNull(popularity, "popularity");
            this.popularity = Optional.ofNullable(popularity);
            return this;
        }

        public Builder popularity(Optional<Double> popularity) {
            Utils.checkNotNull(popularity, "popularity");
            this.popularity = popularity;
            return this;
        }

        public Builder rateLimitDescription(String rateLimitDescription) {
            Utils.checkNotNull(rateLimitDescription, "rateLimitDescription");
            this.rateLimitDescription = Optional.ofNullable(rateLimitDescription);
            return this;
        }

        public Builder rateLimitDescription(Optional<String> rateLimitDescription) {
            Utils.checkNotNull(rateLimitDescription, "rateLimitDescription");
            this.rateLimitDescription = rateLimitDescription;
            return this;
        }

        public Builder support(Map<String, IntegrationSupport> support) {
            Utils.checkNotNull(support, "support");
            this.support = Optional.ofNullable(support);
            return this;
        }

        public Builder support(Optional<? extends Map<String, IntegrationSupport>> support) {
            Utils.checkNotNull(support, "support");
            this.support = support;
            return this;
        }

        public Builder testedAt(OffsetDateTime testedAt) {
            Utils.checkNotNull(testedAt, "testedAt");
            this.testedAt = Optional.ofNullable(testedAt);
            return this;
        }

        public Builder testedAt(Optional<OffsetDateTime> testedAt) {
            Utils.checkNotNull(testedAt, "testedAt");
            this.testedAt = testedAt;
            return this;
        }

        public Builder textColor(String textColor) {
            Utils.checkNotNull(textColor, "textColor");
            this.textColor = Optional.ofNullable(textColor);
            return this;
        }

        public Builder textColor(Optional<String> textColor) {
            Utils.checkNotNull(textColor, "textColor");
            this.textColor = textColor;
            return this;
        }

        /**
         * instructions for the user on how to find the token/key
         */
        public Builder tokenInstructions(List<String> tokenInstructions) {
            Utils.checkNotNull(tokenInstructions, "tokenInstructions");
            this.tokenInstructions = Optional.ofNullable(tokenInstructions);
            return this;
        }

        /**
         * instructions for the user on how to find the token/key
         */
        public Builder tokenInstructions(Optional<? extends List<String>> tokenInstructions) {
            Utils.checkNotNull(tokenInstructions, "tokenInstructions");
            this.tokenInstructions = tokenInstructions;
            return this;
        }

        /**
         * if auth_types = 'token'
         */
        public Builder tokenNames(List<String> tokenNames) {
            Utils.checkNotNull(tokenNames, "tokenNames");
            this.tokenNames = Optional.ofNullable(tokenNames);
            return this;
        }

        /**
         * if auth_types = 'token'
         */
        public Builder tokenNames(Optional<? extends List<String>> tokenNames) {
            Utils.checkNotNull(tokenNames, "tokenNames");
            this.tokenNames = tokenNames;
            return this;
        }

        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<String> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }

        public Builder webUrl(String webUrl) {
            Utils.checkNotNull(webUrl, "webUrl");
            this.webUrl = Optional.ofNullable(webUrl);
            return this;
        }

        public Builder webUrl(Optional<String> webUrl) {
            Utils.checkNotNull(webUrl, "webUrl");
            this.webUrl = webUrl;
            return this;
        }
        
        public Integration build() {
            return new Integration(
                activeHealthyConnections,
                api,
                apiDocsUrl,
                beta,
                categories,
                color,
                createdAt,
                description,
                faIcon,
                featured,
                inProgress,
                isActive,
                logoUrl,
                name,
                popularity,
                rateLimitDescription,
                support,
                testedAt,
                textColor,
                tokenInstructions,
                tokenNames,
                type,
                updatedAt,
                webUrl);
        }
    }
}


/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.unifiedapi.unifiedto.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;


public class CommerceInventory {

    @JsonProperty("available")
    private double available;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<String> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_id")
    private Optional<String> itemId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_option_id")
    private Optional<String> itemOptionId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("item_variant_id")
    private Optional<String> itemVariantId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_id")
    private Optional<String> locationId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("raw")
    private Optional<? extends CommerceInventoryRaw> raw;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<OffsetDateTime> updatedAt;

    @JsonCreator
    public CommerceInventory(
            @JsonProperty("available") double available,
            @JsonProperty("id") Optional<String> id,
            @JsonProperty("item_id") Optional<String> itemId,
            @JsonProperty("item_option_id") Optional<String> itemOptionId,
            @JsonProperty("item_variant_id") Optional<String> itemVariantId,
            @JsonProperty("location_id") Optional<String> locationId,
            @JsonProperty("raw") Optional<? extends CommerceInventoryRaw> raw,
            @JsonProperty("updated_at") Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(available, "available");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(itemId, "itemId");
        Utils.checkNotNull(itemOptionId, "itemOptionId");
        Utils.checkNotNull(itemVariantId, "itemVariantId");
        Utils.checkNotNull(locationId, "locationId");
        Utils.checkNotNull(raw, "raw");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.available = available;
        this.id = id;
        this.itemId = itemId;
        this.itemOptionId = itemOptionId;
        this.itemVariantId = itemVariantId;
        this.locationId = locationId;
        this.raw = raw;
        this.updatedAt = updatedAt;
    }
    
    public CommerceInventory(
            double available) {
        this(available, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public double available() {
        return available;
    }

    @JsonIgnore
    public Optional<String> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> itemId() {
        return itemId;
    }

    @JsonIgnore
    public Optional<String> itemOptionId() {
        return itemOptionId;
    }

    @JsonIgnore
    public Optional<String> itemVariantId() {
        return itemVariantId;
    }

    @JsonIgnore
    public Optional<String> locationId() {
        return locationId;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CommerceInventoryRaw> raw() {
        return (Optional<CommerceInventoryRaw>) raw;
    }

    @JsonIgnore
    public Optional<OffsetDateTime> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public CommerceInventory withAvailable(double available) {
        Utils.checkNotNull(available, "available");
        this.available = available;
        return this;
    }

    public CommerceInventory withId(String id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public CommerceInventory withId(Optional<String> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public CommerceInventory withItemId(String itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = Optional.ofNullable(itemId);
        return this;
    }

    public CommerceInventory withItemId(Optional<String> itemId) {
        Utils.checkNotNull(itemId, "itemId");
        this.itemId = itemId;
        return this;
    }

    public CommerceInventory withItemOptionId(String itemOptionId) {
        Utils.checkNotNull(itemOptionId, "itemOptionId");
        this.itemOptionId = Optional.ofNullable(itemOptionId);
        return this;
    }

    public CommerceInventory withItemOptionId(Optional<String> itemOptionId) {
        Utils.checkNotNull(itemOptionId, "itemOptionId");
        this.itemOptionId = itemOptionId;
        return this;
    }

    public CommerceInventory withItemVariantId(String itemVariantId) {
        Utils.checkNotNull(itemVariantId, "itemVariantId");
        this.itemVariantId = Optional.ofNullable(itemVariantId);
        return this;
    }

    public CommerceInventory withItemVariantId(Optional<String> itemVariantId) {
        Utils.checkNotNull(itemVariantId, "itemVariantId");
        this.itemVariantId = itemVariantId;
        return this;
    }

    public CommerceInventory withLocationId(String locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = Optional.ofNullable(locationId);
        return this;
    }

    public CommerceInventory withLocationId(Optional<String> locationId) {
        Utils.checkNotNull(locationId, "locationId");
        this.locationId = locationId;
        return this;
    }

    public CommerceInventory withRaw(CommerceInventoryRaw raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = Optional.ofNullable(raw);
        return this;
    }

    public CommerceInventory withRaw(Optional<? extends CommerceInventoryRaw> raw) {
        Utils.checkNotNull(raw, "raw");
        this.raw = raw;
        return this;
    }

    public CommerceInventory withUpdatedAt(OffsetDateTime updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    public CommerceInventory withUpdatedAt(Optional<OffsetDateTime> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CommerceInventory other = (CommerceInventory) o;
        return 
            Objects.deepEquals(this.available, other.available) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.itemId, other.itemId) &&
            Objects.deepEquals(this.itemOptionId, other.itemOptionId) &&
            Objects.deepEquals(this.itemVariantId, other.itemVariantId) &&
            Objects.deepEquals(this.locationId, other.locationId) &&
            Objects.deepEquals(this.raw, other.raw) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            available,
            id,
            itemId,
            itemOptionId,
            itemVariantId,
            locationId,
            raw,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CommerceInventory.class,
                "available", available,
                "id", id,
                "itemId", itemId,
                "itemOptionId", itemOptionId,
                "itemVariantId", itemVariantId,
                "locationId", locationId,
                "raw", raw,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private Double available;
 
        private Optional<String> id = Optional.empty();
 
        private Optional<String> itemId = Optional.empty();
 
        private Optional<String> itemOptionId = Optional.empty();
 
        private Optional<String> itemVariantId = Optional.empty();
 
        private Optional<String> locationId = Optional.empty();
 
        private Optional<? extends CommerceInventoryRaw> raw = Optional.empty();
 
        private Optional<OffsetDateTime> updatedAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder available(double available) {
            Utils.checkNotNull(available, "available");
            this.available = available;
            return this;
        }

        public Builder id(String id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<String> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder itemId(String itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = Optional.ofNullable(itemId);
            return this;
        }

        public Builder itemId(Optional<String> itemId) {
            Utils.checkNotNull(itemId, "itemId");
            this.itemId = itemId;
            return this;
        }

        public Builder itemOptionId(String itemOptionId) {
            Utils.checkNotNull(itemOptionId, "itemOptionId");
            this.itemOptionId = Optional.ofNullable(itemOptionId);
            return this;
        }

        public Builder itemOptionId(Optional<String> itemOptionId) {
            Utils.checkNotNull(itemOptionId, "itemOptionId");
            this.itemOptionId = itemOptionId;
            return this;
        }

        public Builder itemVariantId(String itemVariantId) {
            Utils.checkNotNull(itemVariantId, "itemVariantId");
            this.itemVariantId = Optional.ofNullable(itemVariantId);
            return this;
        }

        public Builder itemVariantId(Optional<String> itemVariantId) {
            Utils.checkNotNull(itemVariantId, "itemVariantId");
            this.itemVariantId = itemVariantId;
            return this;
        }

        public Builder locationId(String locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = Optional.ofNullable(locationId);
            return this;
        }

        public Builder locationId(Optional<String> locationId) {
            Utils.checkNotNull(locationId, "locationId");
            this.locationId = locationId;
            return this;
        }

        public Builder raw(CommerceInventoryRaw raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = Optional.ofNullable(raw);
            return this;
        }

        public Builder raw(Optional<? extends CommerceInventoryRaw> raw) {
            Utils.checkNotNull(raw, "raw");
            this.raw = raw;
            return this;
        }

        public Builder updatedAt(OffsetDateTime updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        public Builder updatedAt(Optional<OffsetDateTime> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public CommerceInventory build() {
            return new CommerceInventory(
                available,
                id,
                itemId,
                itemOptionId,
                itemVariantId,
                locationId,
                raw,
                updatedAt);
        }
    }
}


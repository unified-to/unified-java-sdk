/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.unifiedapi.unifiedto.utils.DateTimeDeserializer;
import com.unifiedapi.unifiedto.utils.DateTimeSerializer;
import java.time.OffsetDateTime;

/**
 * Webhook - A webhook is used to POST new/updated information to your server.
 */

public class Webhook {
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("checked_at")
    public OffsetDateTime checkedAt;

    public Webhook withCheckedAt(OffsetDateTime checkedAt) {
        this.checkedAt = checkedAt;
        return this;
    }
    
    @JsonProperty("connection_id")
    public String connectionId;

    public Webhook withConnectionId(String connectionId) {
        this.connectionId = connectionId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("created_at")
    public OffsetDateTime createdAt;

    public Webhook withCreatedAt(OffsetDateTime createdAt) {
        this.createdAt = createdAt;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("environment")
    public String environment;

    public Webhook withEnvironment(String environment) {
        this.environment = environment;
        return this;
    }
    
    @JsonProperty("events")
    public PropertyWebhookEvents[] events;

    public Webhook withEvents(PropertyWebhookEvents[] events) {
        this.events = events;
        return this;
    }
    
    @JsonProperty("hook_url")
    public String hookUrl;

    public Webhook withHookUrl(String hookUrl) {
        this.hookUrl = hookUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    public String id;

    public Webhook withId(String id) {
        this.id = id;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("include_raw")
    public Boolean includeRaw;

    public Webhook withIncludeRaw(Boolean includeRaw) {
        this.includeRaw = includeRaw;
        return this;
    }
    
    @JsonProperty("integration_type")
    public String integrationType;

    public Webhook withIntegrationType(String integrationType) {
        this.integrationType = integrationType;
        return this;
    }
    
    @JsonProperty("interval")
    public Double interval;

    public Webhook withInterval(Double interval) {
        this.interval = interval;
        return this;
    }
    
    @JsonProperty("object_type")
    public ObjectType objectType;

    public Webhook withObjectType(ObjectType objectType) {
        this.objectType = objectType;
        return this;
    }
    
    /**
     * integration-specific subscriptions IDs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscriptions")
    public String[] subscriptions;

    public Webhook withSubscriptions(String[] subscriptions) {
        this.subscriptions = subscriptions;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("updated_at")
    public OffsetDateTime updatedAt;

    public Webhook withUpdatedAt(OffsetDateTime updatedAt) {
        this.updatedAt = updatedAt;
        return this;
    }
    
    @JsonProperty("workspace_id")
    public String workspaceId;

    public Webhook withWorkspaceId(String workspaceId) {
        this.workspaceId = workspaceId;
        return this;
    }
    
    public Webhook(@JsonProperty("connection_id") String connectionId, @JsonProperty("events") PropertyWebhookEvents[] events, @JsonProperty("hook_url") String hookUrl, @JsonProperty("integration_type") String integrationType, @JsonProperty("interval") Double interval, @JsonProperty("object_type") ObjectType objectType, @JsonProperty("workspace_id") String workspaceId) {
        this.connectionId = connectionId;
        this.events = events;
        this.hookUrl = hookUrl;
        this.integrationType = integrationType;
        this.interval = interval;
        this.objectType = objectType;
        this.workspaceId = workspaceId;
  }
}

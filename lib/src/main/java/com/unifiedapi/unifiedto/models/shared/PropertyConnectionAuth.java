/* 
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

package com.unifiedapi.unifiedto.models.shared;

import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.databind.annotation.JsonDeserialize;
import com.fasterxml.jackson.databind.annotation.JsonSerialize;
import com.unifiedapi.unifiedto.utils.DateTimeDeserializer;
import com.unifiedapi.unifiedto.utils.DateTimeSerializer;
import java.time.OffsetDateTime;

/**
 * PropertyConnectionAuth - An authentication object that represents a specific authorized user's connection to an integration.
 */

public class PropertyConnectionAuth {
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_token")
    public String accessToken;

    public PropertyConnectionAuth withAccessToken(String accessToken) {
        this.accessToken = accessToken;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("api_url")
    public String apiUrl;

    public PropertyConnectionAuth withApiUrl(String apiUrl) {
        this.apiUrl = apiUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("app_id")
    public String appId;

    public PropertyConnectionAuth withAppId(String appId) {
        this.appId = appId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("authorize_url")
    public String authorizeUrl;

    public PropertyConnectionAuth withAuthorizeUrl(String authorizeUrl) {
        this.authorizeUrl = authorizeUrl;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_id")
    public String clientId;

    public PropertyConnectionAuth withClientId(String clientId) {
        this.clientId = clientId;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("client_secret")
    public String clientSecret;

    public PropertyConnectionAuth withClientSecret(String clientSecret) {
        this.clientSecret = clientSecret;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_key")
    public String consumerKey;

    public PropertyConnectionAuth withConsumerKey(String consumerKey) {
        this.consumerKey = consumerKey;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("consumer_secret")
    public String consumerSecret;

    public PropertyConnectionAuth withConsumerSecret(String consumerSecret) {
        this.consumerSecret = consumerSecret;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dev_api_key")
    public String devApiKey;

    public PropertyConnectionAuth withDevApiKey(String devApiKey) {
        this.devApiKey = devApiKey;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("emails")
    public String[] emails;

    public PropertyConnectionAuth withEmails(String[] emails) {
        this.emails = emails;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    public Double expiresIn;

    public PropertyConnectionAuth withExpiresIn(Double expiresIn) {
        this.expiresIn = expiresIn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("expiry_date")
    public OffsetDateTime expiryDate;

    public PropertyConnectionAuth withExpiryDate(OffsetDateTime expiryDate) {
        this.expiryDate = expiryDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    public String key;

    public PropertyConnectionAuth withKey(String key) {
        this.key = key;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("meta")
    public java.util.Map<String, java.lang.Object> meta;

    public PropertyConnectionAuth withMeta(java.util.Map<String, java.lang.Object> meta) {
        this.meta = meta;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    public String name;

    public PropertyConnectionAuth withName(String name) {
        this.name = name;
        return this;
    }
    
    /**
     * When integration.auth_type = "other", this field contains the authentication credentials in the same order as token_names
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("other_auth_info")
    public String[] otherAuthInfo;

    public PropertyConnectionAuth withOtherAuthInfo(String[] otherAuthInfo) {
        this.otherAuthInfo = otherAuthInfo;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pem")
    public String pem;

    public PropertyConnectionAuth withPem(String pem) {
        this.pem = pem;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    public String refreshToken;

    public PropertyConnectionAuth withRefreshToken(String refreshToken) {
        this.refreshToken = refreshToken;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonSerialize(using = DateTimeSerializer.class)
    @JsonDeserialize(using = DateTimeDeserializer.class)
    @JsonProperty("refresh_token_expires_date")
    public OffsetDateTime refreshTokenExpiresDate;

    public PropertyConnectionAuth withRefreshTokenExpiresDate(OffsetDateTime refreshTokenExpiresDate) {
        this.refreshTokenExpiresDate = refreshTokenExpiresDate;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token_expires_in")
    public Double refreshTokenExpiresIn;

    public PropertyConnectionAuth withRefreshTokenExpiresIn(Double refreshTokenExpiresIn) {
        this.refreshTokenExpiresIn = refreshTokenExpiresIn;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    public String state;

    public PropertyConnectionAuth withState(String state) {
        this.state = state;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token")
    public String token;

    public PropertyConnectionAuth withToken(String token) {
        this.token = token;
        return this;
    }
    
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_url")
    public String tokenUrl;

    public PropertyConnectionAuth withTokenUrl(String tokenUrl) {
        this.tokenUrl = tokenUrl;
        return this;
    }
    
    public PropertyConnectionAuth(){}
}
